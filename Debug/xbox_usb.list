
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080122e8  080122e8  000222e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126dc  080126dc  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080126dc  080126dc  000226dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126e4  080126e4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080126e4  080126e4  000226e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126ec  080126ec  000226ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080126f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005718  200001e0  080128d0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200058f8  080128d0  000358f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d2df  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008654  00000000  00000000  0008d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002528  00000000  00000000  00095b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002358  00000000  00000000  00098070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2a8  00000000  00000000  0009a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c07e  00000000  00000000  000c6670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f563e  00000000  00000000  000f26ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7d2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1fc  00000000  00000000  001e7d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080122d0 	.word	0x080122d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080122d0 	.word	0x080122d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f005 f84a 	bl	80057fe <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f005 f8ca 	bl	8005922 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	0801246c 	.word	0x0801246c

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0801252c 	.word	0x0801252c

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0801247c 	.word	0x0801247c

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 fae7 	bl	8001e48 <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001fc 	.word	0x200001fc
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f001 fc85 	bl	80021a0 <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f001 fc79 	bl	80021a0 <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 fab6 	bl	8001e48 <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000210 	.word	0x20000210
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f00f fe84 	bl	8010694 <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08012520 	.word	0x08012520

0800099c <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
 80009a8:	4613      	mov	r3, r2
 80009aa:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 80009ac:	78ba      	ldrb	r2, [r7, #2]
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	0098      	lsls	r0, r3, #2
 80009b4:	4613      	mov	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	4403      	add	r3, r0
 80009bc:	440b      	add	r3, r1
 80009be:	3320      	adds	r3, #32
 80009c0:	799b      	ldrb	r3, [r3, #6]
 80009c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
        };
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	4608      	mov	r0, r1
 80009e4:	4611      	mov	r1, r2
 80009e6:	461a      	mov	r2, r3
 80009e8:	4603      	mov	r3, r0
 80009ea:	70fb      	strb	r3, [r7, #3]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70bb      	strb	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	78fa      	ldrb	r2, [r7, #3]
 80009f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	78ba      	ldrb	r2, [r7, #2]
 8000a00:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	787a      	ldrb	r2, [r7, #1]
 8000a08:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	141b      	asrs	r3, r3, #16
 8000a2e:	b2d9      	uxtb	r1, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	121b      	asrs	r3, r3, #8
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffcd 	bl	80009da <_ZN9PS4Parser6setLedEhhh>
        };
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	f00e fc32 	bl	800f2c8 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3378      	adds	r3, #120	; 0x78
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff85 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3378      	adds	r3, #120	; 0x78
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00f fe08 	bl	8010694 <_ZN9PS4Parser5ResetEv>
        };
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	080124e4 	.word	0x080124e4
 8000a94:	08012514 	.word	0x08012514

08000a98 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3378      	adds	r3, #120	; 0x78
 8000ac2:	7af9      	ldrb	r1, [r7, #11]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00f fd1f 	bl	801050a <_ZN9PS4Parser5ParseEhPh>
        };
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3378      	adds	r3, #120	; 0x78
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00f fdd7 	bl	8010694 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f855 	bl	8000b96 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3378      	adds	r3, #120	; 0x78
 8000af8:	21ff      	movs	r1, #255	; 0xff
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff90 	bl	8000a20 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3378      	adds	r3, #120	; 0x78
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00f fdbd 	bl	8010694 <_ZN9PS4Parser5ResetEv>
        };
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b096      	sub	sp, #88	; 0x58
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	224f      	movs	r2, #79	; 0x4f
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f011 fb6d 	bl	8012214 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000b3a:	2352      	movs	r3, #82	; 0x52
 8000b3c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b3e:	2311      	movs	r3, #17
 8000b40:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b46:	23ff      	movs	r3, #255	; 0xff
 8000b48:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	78db      	ldrb	r3, [r3, #3]
 8000b60:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	795b      	ldrb	r3, [r3, #5]
 8000b6c:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	799b      	ldrb	r3, [r3, #6]
 8000b72:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	224f      	movs	r2, #79	; 0x4f
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f81a 	bl	8000bbc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b88:	bf00      	nop
 8000b8a:	3758      	adds	r7, #88	; 0x58
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b90:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000b94:	e7c5      	b.n	8000b22 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000b96 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000b9e:	2343      	movs	r3, #67	; 0x43
 8000ba0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2202      	movs	r2, #2
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f804 	bl	8000bbc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6898      	ldr	r0, [r3, #8]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	8999      	ldrh	r1, [r3, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	7d9b      	ldrb	r3, [r3, #22]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	7dd2      	ldrb	r2, [r2, #23]
 8000bda:	79fc      	ldrb	r4, [r7, #7]
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	4623      	mov	r3, r4
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f00d fc0c 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd90      	pop	{r4, r7, pc}

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 ffdf 	bl	8001bb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 fae9 	bl	80011d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fc13 	bl	8001428 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c02:	f000 fbe3 	bl	80013cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c06:	f000 fba5 	bl	8001354 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c0a:	f00a fd3f 	bl	800b68c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c0e:	f000 fb77 	bl	8001300 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c12:	4abb      	ldr	r2, [pc, #748]	; (8000f00 <main+0x310>)
 8000c14:	4bbb      	ldr	r3, [pc, #748]	; (8000f04 <main+0x314>)
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2358      	movs	r3, #88	; 0x58
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f011 faeb 	bl	80121f8 <memcpy>
  UART_Handle = huart2;
 8000c22:	4ab9      	ldr	r2, [pc, #740]	; (8000f08 <main+0x318>)
 8000c24:	4bb9      	ldr	r3, [pc, #740]	; (8000f0c <main+0x31c>)
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2344      	movs	r3, #68	; 0x44
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f011 fae3 	bl	80121f8 <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71bb      	strb	r3, [r7, #6]
  gameHID.JoyY = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
  gameHID.Joy2X = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	723b      	strb	r3, [r7, #8]
  gameHID.Joy2Y = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	727b      	strb	r3, [r7, #9]
  gameHID.Joy_LT = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	713b      	strb	r3, [r7, #4]
  gameHID.Joy_RT = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	717b      	strb	r3, [r7, #5]
  gameHID.ps4ButtonsTag.dummy = 0;
 8000c4a:	7abb      	ldrb	r3, [r7, #10]
 8000c4c:	f36f 0300 	bfc	r3, #0, #1
 8000c50:	72bb      	strb	r3, [r7, #10]

  uint8_t LeftHatX_val;
  uint8_t LeftHatY_val;
  uint8_t RightHatX_val;
  uint8_t RightHatY_val;
  uint32_t cpu_freq = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]

  uint16_t timer_val = 0 ;
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
  uint16_t timer_val2 = 0 ;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	82bb      	strh	r3, [r7, #20]
  uint32_t hal_gettick = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start_IT(&htim14);
 8000c62:	48ab      	ldr	r0, [pc, #684]	; (8000f10 <main+0x320>)
 8000c64:	f004 fb2a 	bl	80052bc <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000c68:	49aa      	ldr	r1, [pc, #680]	; (8000f14 <main+0x324>)
 8000c6a:	48ab      	ldr	r0, [pc, #684]	; (8000f18 <main+0x328>)
 8000c6c:	f7ff fc96 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c70:	f002 fd4c 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4aa9      	ldr	r2, [pc, #676]	; (8000f1c <main+0x32c>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	0c9b      	lsrs	r3, r3, #18
 8000c7e:	61bb      	str	r3, [r7, #24]
  Serial.print((int)cpu_freq);
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	220a      	movs	r2, #10
 8000c84:	4619      	mov	r1, r3
 8000c86:	48a4      	ldr	r0, [pc, #656]	; (8000f18 <main+0x328>)
 8000c88:	f7ff fcb6 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c8c:	49a4      	ldr	r1, [pc, #656]	; (8000f20 <main+0x330>)
 8000c8e:	48a2      	ldr	r0, [pc, #648]	; (8000f18 <main+0x328>)
 8000c90:	f7ff fc92 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c94:	49a3      	ldr	r1, [pc, #652]	; (8000f24 <main+0x334>)
 8000c96:	48a0      	ldr	r0, [pc, #640]	; (8000f18 <main+0x328>)
 8000c98:	f7ff fc8e 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c9c:	4b9c      	ldr	r3, [pc, #624]	; (8000f10 <main+0x320>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	82fb      	strh	r3, [r7, #22]
  HAL_Delay(500); //500ms
 8000ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca8:	f000 ffc8 	bl	8001c3c <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000cac:	4b98      	ldr	r3, [pc, #608]	; (8000f10 <main+0x320>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	8afb      	ldrh	r3, [r7, #22]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	82bb      	strh	r3, [r7, #20]
  Serial.print("\r\nTime Elapsed is: ");
 8000cba:	499b      	ldr	r1, [pc, #620]	; (8000f28 <main+0x338>)
 8000cbc:	4896      	ldr	r0, [pc, #600]	; (8000f18 <main+0x328>)
 8000cbe:	f7ff fc7b 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000cc2:	8abb      	ldrh	r3, [r7, #20]
 8000cc4:	4a99      	ldr	r2, [pc, #612]	; (8000f2c <main+0x33c>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	220a      	movs	r2, #10
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4891      	ldr	r0, [pc, #580]	; (8000f18 <main+0x328>)
 8000cd4:	f7ff fc90 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000cd8:	4995      	ldr	r1, [pc, #596]	; (8000f30 <main+0x340>)
 8000cda:	488f      	ldr	r0, [pc, #572]	; (8000f18 <main+0x328>)
 8000cdc:	f7ff fc6c 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	488c      	ldr	r0, [pc, #560]	; (8000f18 <main+0x328>)
 8000ce8:	f7ff fc86 	bl	80005f8 <_ZN5Print5printEii>


  if (Usb.Init() == -1) {
 8000cec:	4891      	ldr	r0, [pc, #580]	; (8000f34 <main+0x344>)
 8000cee:	f000 fc1e 	bl	800152e <_ZN8MAX3421eI3P102P9E4InitEv>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d004      	beq.n	8000d0e <main+0x11e>
  		Serial.print(F("\r\nOSC did not start"));
 8000d04:	498c      	ldr	r1, [pc, #560]	; (8000f38 <main+0x348>)
 8000d06:	4884      	ldr	r0, [pc, #528]	; (8000f18 <main+0x328>)
 8000d08:	f7ff fc48 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000d0c:	e7fe      	b.n	8000d0c <main+0x11c>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000d0e:	498b      	ldr	r1, [pc, #556]	; (8000f3c <main+0x34c>)
 8000d10:	4881      	ldr	r0, [pc, #516]	; (8000f18 <main+0x328>)
 8000d12:	f7ff fc43 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d16:	f007 ff69 	bl	8008bec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d1a:	4a89      	ldr	r2, [pc, #548]	; (8000f40 <main+0x350>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4889      	ldr	r0, [pc, #548]	; (8000f44 <main+0x354>)
 8000d20:	f007 ffae 	bl	8008c80 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a88      	ldr	r2, [pc, #544]	; (8000f48 <main+0x358>)
 8000d28:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d2a:	4a88      	ldr	r2, [pc, #544]	; (8000f4c <main+0x35c>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4888      	ldr	r0, [pc, #544]	; (8000f50 <main+0x360>)
 8000d30:	f007 ffa6 	bl	8008c80 <osThreadNew>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <main+0x364>)
 8000d38:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d3a:	f007 ff7b 	bl	8008c34 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Serial.print(F("\r\nInside Main While loop"));
 8000d3e:	4986      	ldr	r1, [pc, #536]	; (8000f58 <main+0x368>)
 8000d40:	4875      	ldr	r0, [pc, #468]	; (8000f18 <main+0x328>)
 8000d42:	f7ff fc2b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
		Usb.Task();
 8000d46:	487b      	ldr	r0, [pc, #492]	; (8000f34 <main+0x344>)
 8000d48:	f010 f9e2 	bl	8011110 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2208      	movs	r2, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4882      	ldr	r0, [pc, #520]	; (8000f5c <main+0x36c>)
 8000d54:	f006 fd16 	bl	8007784 <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000d58:	4881      	ldr	r0, [pc, #516]	; (8000f60 <main+0x370>)
 8000d5a:	f7ff fe9d 	bl	8000a98 <_ZN5PS4BT9connectedEv>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 81ff 	beq.w	8001164 <main+0x574>
			ps4_connected = 1;
 8000d66:	4b7f      	ldr	r3, [pc, #508]	; (8000f64 <main+0x374>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
			//__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);


			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	487e      	ldr	r0, [pc, #504]	; (8000f68 <main+0x378>)
 8000d70:	f00f fbbb 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	487b      	ldr	r0, [pc, #492]	; (8000f68 <main+0x378>)
 8000d7c:	f00f fbb5 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73bb      	strb	r3, [r7, #14]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000d84:	2102      	movs	r1, #2
 8000d86:	4878      	ldr	r0, [pc, #480]	; (8000f68 <main+0x378>)
 8000d88:	f00f fbaf 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	737b      	strb	r3, [r7, #13]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000d90:	2103      	movs	r1, #3
 8000d92:	4875      	ldr	r0, [pc, #468]	; (8000f68 <main+0x378>)
 8000d94:	f00f fba9 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	733b      	strb	r3, [r7, #12]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b89      	cmp	r3, #137	; 0x89
 8000da0:	d814      	bhi.n	8000dcc <main+0x1dc>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b74      	cmp	r3, #116	; 0x74
 8000da6:	d911      	bls.n	8000dcc <main+0x1dc>
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	2b89      	cmp	r3, #137	; 0x89
 8000dac:	d80e      	bhi.n	8000dcc <main+0x1dc>
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	2b74      	cmp	r3, #116	; 0x74
 8000db2:	d90b      	bls.n	8000dcc <main+0x1dc>
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	2b89      	cmp	r3, #137	; 0x89
 8000db8:	d808      	bhi.n	8000dcc <main+0x1dc>
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
 8000dbc:	2b74      	cmp	r3, #116	; 0x74
 8000dbe:	d905      	bls.n	8000dcc <main+0x1dc>
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	2b89      	cmp	r3, #137	; 0x89
 8000dc4:	d802      	bhi.n	8000dcc <main+0x1dc>
 8000dc6:	7b3b      	ldrb	r3, [r7, #12]
 8000dc8:	2b74      	cmp	r3, #116	; 0x74
 8000dca:	d824      	bhi.n	8000e16 <main+0x226>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4866      	ldr	r0, [pc, #408]	; (8000f68 <main+0x378>)
 8000dd0:	f00f fb8b 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	3b80      	subs	r3, #128	; 0x80
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000dde:	2101      	movs	r1, #1
 8000de0:	4861      	ldr	r0, [pc, #388]	; (8000f68 <main+0x378>)
 8000de2:	f00f fb82 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000de6:	4603      	mov	r3, r0
 8000de8:	3b80      	subs	r3, #128	; 0x80
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000df0:	2102      	movs	r1, #2
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <main+0x378>)
 8000df4:	f00f fb79 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	3b80      	subs	r3, #128	; 0x80
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000e02:	2103      	movs	r1, #3
 8000e04:	4858      	ldr	r0, [pc, #352]	; (8000f68 <main+0x378>)
 8000e06:	f00f fb70 	bl	80104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	3b80      	subs	r3, #128	; 0x80
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	727b      	strb	r3, [r7, #9]
 8000e14:	e007      	b.n	8000e26 <main+0x236>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	727b      	strb	r3, [r7, #9]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000e26:	2108      	movs	r1, #8
 8000e28:	484f      	ldr	r0, [pc, #316]	; (8000f68 <main+0x378>)
 8000e2a:	f00f fb45 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	3b80      	subs	r3, #128	; 0x80
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	713b      	strb	r3, [r7, #4]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000e38:	2109      	movs	r1, #9
 8000e3a:	484b      	ldr	r0, [pc, #300]	; (8000f68 <main+0x378>)
 8000e3c:	f00f fb3c 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e40:	4603      	mov	r3, r0
 8000e42:	3b80      	subs	r3, #128	; 0x80
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	717b      	strb	r3, [r7, #5]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4846      	ldr	r0, [pc, #280]	; (8000f68 <main+0x378>)
 8000e4e:	f00f fb33 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <main+0x37c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d108      	bne.n	8000e70 <main+0x280>
 8000e5e:	2109      	movs	r1, #9
 8000e60:	4841      	ldr	r0, [pc, #260]	; (8000f68 <main+0x378>)
 8000e62:	f00f fb29 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <main+0x380>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000e70:	2108      	movs	r1, #8
 8000e72:	483d      	ldr	r0, [pc, #244]	; (8000f68 <main+0x378>)
 8000e74:	f00f fb20 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <main+0x37c>)
 8000e7e:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000e80:	2109      	movs	r1, #9
 8000e82:	4839      	ldr	r0, [pc, #228]	; (8000f68 <main+0x378>)
 8000e84:	f00f fb18 	bl	80104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <main+0x380>)
 8000e8e:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000e90:	2110      	movs	r1, #16
 8000e92:	4835      	ldr	r0, [pc, #212]	; (8000f68 <main+0x378>)
 8000e94:	f00f fad0 	bl	8010438 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <main+0x2b8>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	72bb      	strb	r3, [r7, #10]
 8000ea6:	e156      	b.n	8001156 <main+0x566>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000ea8:	210c      	movs	r1, #12
 8000eaa:	482f      	ldr	r0, [pc, #188]	; (8000f68 <main+0x378>)
 8000eac:	f00f fa9c 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <main+0x2d0>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	72fb      	strb	r3, [r7, #11]
 8000ebe:	e003      	b.n	8000ec8 <main+0x2d8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	f36f 0300 	bfc	r3, #0, #1
 8000ec6:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000ec8:	210d      	movs	r1, #13
 8000eca:	4827      	ldr	r0, [pc, #156]	; (8000f68 <main+0x378>)
 8000ecc:	f00f fa8c 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <main+0x2f0>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000ed6:	7abb      	ldrb	r3, [r7, #10]
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	72bb      	strb	r3, [r7, #10]
 8000ede:	e003      	b.n	8000ee8 <main+0x2f8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000ee0:	7abb      	ldrb	r3, [r7, #10]
 8000ee2:	f36f 13c7 	bfc	r3, #7, #1
 8000ee6:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000ee8:	210e      	movs	r1, #14
 8000eea:	481f      	ldr	r0, [pc, #124]	; (8000f68 <main+0x378>)
 8000eec:	f00f fa7c 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03e      	beq.n	8000f74 <main+0x384>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000ef6:	7abb      	ldrb	r3, [r7, #10]
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efc:	72bb      	strb	r3, [r7, #10]
 8000efe:	e03d      	b.n	8000f7c <main+0x38c>
 8000f00:	20000310 	.word	0x20000310
 8000f04:	20000224 	.word	0x20000224
 8000f08:	20000368 	.word	0x20000368
 8000f0c:	2000027c 	.word	0x2000027c
 8000f10:	200002c0 	.word	0x200002c0
 8000f14:	080122f8 	.word	0x080122f8
 8000f18:	200003ac 	.word	0x200003ac
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	08012310 	.word	0x08012310
 8000f24:	08012314 	.word	0x08012314
 8000f28:	0801231c 	.word	0x0801231c
 8000f2c:	cccccccd 	.word	0xcccccccd
 8000f30:	08012330 	.word	0x08012330
 8000f34:	200003c0 	.word	0x200003c0
 8000f38:	08012334 	.word	0x08012334
 8000f3c:	08012348 	.word	0x08012348
 8000f40:	08012494 	.word	0x08012494
 8000f44:	080014dd 	.word	0x080014dd
 8000f48:	20000308 	.word	0x20000308
 8000f4c:	080124b8 	.word	0x080124b8
 8000f50:	080014f1 	.word	0x080014f1
 8000f54:	2000030c 	.word	0x2000030c
 8000f58:	08012368 	.word	0x08012368
 8000f5c:	2000501c 	.word	0x2000501c
 8000f60:	20000594 	.word	0x20000594
 8000f64:	20000661 	.word	0x20000661
 8000f68:	2000060c 	.word	0x2000060c
 8000f6c:	2000065e 	.word	0x2000065e
 8000f70:	2000065f 	.word	0x2000065f
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000f74:	7abb      	ldrb	r3, [r7, #10]
 8000f76:	f36f 1386 	bfc	r3, #6, #1
 8000f7a:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	488b      	ldr	r0, [pc, #556]	; (80011ac <main+0x5bc>)
 8000f80:	f00f fa32 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <main+0x3a4>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	72fb      	strb	r3, [r7, #11]
 8000f92:	e003      	b.n	8000f9c <main+0x3ac>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	f36f 0341 	bfc	r3, #1, #1
 8000f9a:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(UP)) {
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4883      	ldr	r0, [pc, #524]	; (80011ac <main+0x5bc>)
 8000fa0:	f00f fa22 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <main+0x3c4>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	72fb      	strb	r3, [r7, #11]
 8000fb2:	e003      	b.n	8000fbc <main+0x3cc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	f36f 0382 	bfc	r3, #2, #1
 8000fba:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	487b      	ldr	r0, [pc, #492]	; (80011ac <main+0x5bc>)
 8000fc0:	f00f fa12 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <main+0x3e4>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	72fb      	strb	r3, [r7, #11]
 8000fd2:	e003      	b.n	8000fdc <main+0x3ec>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	f36f 03c3 	bfc	r3, #3, #1
 8000fda:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4873      	ldr	r0, [pc, #460]	; (80011ac <main+0x5bc>)
 8000fe0:	f00f fa02 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <main+0x404>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	72fb      	strb	r3, [r7, #11]
 8000ff2:	e003      	b.n	8000ffc <main+0x40c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	f36f 1345 	bfc	r3, #5, #1
 8000ffa:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(LEFT)) {
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	486b      	ldr	r0, [pc, #428]	; (80011ac <main+0x5bc>)
 8001000:	f00f f9f2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <main+0x424>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	72fb      	strb	r3, [r7, #11]
 8001012:	e003      	b.n	800101c <main+0x42c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	f36f 1304 	bfc	r3, #4, #1
 800101a:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(L1)) {
 800101c:	210a      	movs	r1, #10
 800101e:	4863      	ldr	r0, [pc, #396]	; (80011ac <main+0x5bc>)
 8001020:	f00f f9e2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <main+0x444>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800102a:	7abb      	ldrb	r3, [r7, #10]
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	72bb      	strb	r3, [r7, #10]
 8001032:	e003      	b.n	800103c <main+0x44c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001034:	7abb      	ldrb	r3, [r7, #10]
 8001036:	f36f 1345 	bfc	r3, #5, #1
 800103a:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(L3)) {
 800103c:	2106      	movs	r1, #6
 800103e:	485b      	ldr	r0, [pc, #364]	; (80011ac <main+0x5bc>)
 8001040:	f00f f9d2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <main+0x464>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	72fb      	strb	r3, [r7, #11]
 8001052:	e003      	b.n	800105c <main+0x46c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	f36f 1386 	bfc	r3, #6, #1
 800105a:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(R1)) {
 800105c:	210b      	movs	r1, #11
 800105e:	4853      	ldr	r0, [pc, #332]	; (80011ac <main+0x5bc>)
 8001060:	f00f f9c2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <main+0x484>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	72bb      	strb	r3, [r7, #10]
 8001072:	e003      	b.n	800107c <main+0x48c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001074:	7abb      	ldrb	r3, [r7, #10]
 8001076:	f36f 1304 	bfc	r3, #4, #1
 800107a:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(R3)) {
 800107c:	2107      	movs	r1, #7
 800107e:	484b      	ldr	r0, [pc, #300]	; (80011ac <main+0x5bc>)
 8001080:	f00f f9b2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <main+0x4a4>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	72fb      	strb	r3, [r7, #11]
 8001092:	e003      	b.n	800109c <main+0x4ac>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	f36f 13c7 	bfc	r3, #7, #1
 800109a:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(SHARE)) {
 800109c:	2104      	movs	r1, #4
 800109e:	4843      	ldr	r0, [pc, #268]	; (80011ac <main+0x5bc>)
 80010a0:	f00f f9a2 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <main+0x4c4>
					gameHID.ps4ButtonsTag.button_share = 1;
 80010aa:	7abb      	ldrb	r3, [r7, #10]
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	72bb      	strb	r3, [r7, #10]
 80010b2:	e003      	b.n	80010bc <main+0x4cc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 80010b4:	7abb      	ldrb	r3, [r7, #10]
 80010b6:	f36f 03c3 	bfc	r3, #3, #1
 80010ba:	72bb      	strb	r3, [r7, #10]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 80010bc:	2105      	movs	r1, #5
 80010be:	483b      	ldr	r0, [pc, #236]	; (80011ac <main+0x5bc>)
 80010c0:	f00f f992 	bl	80103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <main+0x4f2>
					gameHID.ps4ButtonsTag.button_start = 1;
 80010ca:	7abb      	ldrb	r3, [r7, #10]
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	72bb      	strb	r3, [r7, #10]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <main+0x5c0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <main+0x5c0>)
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e003      	b.n	80010ea <main+0x4fa>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	f36f 0382 	bfc	r3, #2, #1
 80010e8:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 80010ea:	2111      	movs	r1, #17
 80010ec:	482f      	ldr	r0, [pc, #188]	; (80011ac <main+0x5bc>)
 80010ee:	f00f f9a3 	bl	8010438 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <main+0x516>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <main+0x5c4>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f083 0301 	eor.w	r3, r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <main+0x5c4>)
 8001104:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <main+0x5c4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d023      	beq.n	8001156 <main+0x566>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	4826      	ldr	r0, [pc, #152]	; (80011ac <main+0x5bc>)
 8001114:	f7ff fc42 	bl	800099c <_ZN9PS4Parser10isTouchingEhh>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <main+0x53e>
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	4822      	ldr	r0, [pc, #136]	; (80011ac <main+0x5bc>)
 8001124:	f7ff fc3a 	bl	800099c <_ZN9PS4Parser10isTouchingEhh>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <main+0x542>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <main+0x544>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00e      	beq.n	8001156 <main+0x566>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d809      	bhi.n	8001156 <main+0x566>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	4818      	ldr	r0, [pc, #96]	; (80011ac <main+0x5bc>)
 800114a:	f7ff fc27 	bl	800099c <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	3301      	adds	r3, #1
 8001152:	77fb      	strb	r3, [r7, #31]
 8001154:	e7f2      	b.n	800113c <main+0x54c>
							//Serial.print(F("\t"));
						}
					}
				}
			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4816      	ldr	r0, [pc, #88]	; (80011b8 <main+0x5c8>)
 800115e:	f006 fb11 	bl	8007784 <USBD_HID_SendReport>
 8001162:	e5ec      	b.n	8000d3e <main+0x14e>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4814      	ldr	r0, [pc, #80]	; (80011bc <main+0x5cc>)
 800116a:	f001 f801 	bl	8002170 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d011      	beq.n	80011a2 <main+0x5b2>
		    if (!buttonPressed) {
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <main+0x5d0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <main+0x5aa>
		    	Serial.print(F("\r\nButton Pressed"));
 800118c:	490d      	ldr	r1, [pc, #52]	; (80011c4 <main+0x5d4>)
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <main+0x5d8>)
 8001190:	f7ff fa04 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <main+0x5dc>)
 8001196:	f7ff fbbc 	bl	8000912 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <main+0x5d0>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e5cd      	b.n	8000d3e <main+0x14e>
		} else
		    buttonPressed = false;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <main+0x5d0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  }
 80011a8:	e5c9      	b.n	8000d3e <main+0x14e>
 80011aa:	bf00      	nop
 80011ac:	2000060c 	.word	0x2000060c
 80011b0:	2000065c 	.word	0x2000065c
 80011b4:	2000065d 	.word	0x2000065d
 80011b8:	2000501c 	.word	0x2000501c
 80011bc:	40020800 	.word	0x40020800
 80011c0:	20000660 	.word	0x20000660
 80011c4:	08012384 	.word	0x08012384
 80011c8:	200003ac 	.word	0x200003ac
 80011cc:	20000594 	.word	0x20000594

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ac      	sub	sp, #176	; 0xb0
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011da:	2234      	movs	r2, #52	; 0x34
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f011 f818 	bl	8012214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	225c      	movs	r2, #92	; 0x5c
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f011 f809 	bl	8012214 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <SystemClock_Config+0x128>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <SystemClock_Config+0x128>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <SystemClock_Config+0x128>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <SystemClock_Config+0x12c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <SystemClock_Config+0x12c>)
 8001228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <SystemClock_Config+0x12c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123a:	2301      	movs	r3, #1
 800123c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800125a:	23a8      	movs	r3, #168	; 0xa8
 800125c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001266:	2307      	movs	r3, #7
 8001268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001276:	4618      	mov	r0, r3
 8001278:	f002 ff8a 	bl	8004190 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800128c:	f000 f94a 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001294:	2302      	movs	r3, #2
 8001296:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ac:	2105      	movs	r1, #5
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 f946 	bl	8003540 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012c4:	f000 f92e 	bl	8001524 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fa7e 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80012ec:	f000 f91a 	bl	8001524 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	37b0      	adds	r7, #176	; 0xb0
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_ZL13MX_TIM14_Initv+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 800130c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001310:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 800131a:	f242 720f 	movw	r2, #9999	; 0x270f
 800131e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <_ZL13MX_TIM14_Initv+0x4c>)
 800132e:	f003 ff75 	bl	800521c <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8001342:	f000 f8ef 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002c0 	.word	0x200002c0
 8001350:	40002000 	.word	0x40002000

08001354 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <_ZL12MX_SPI1_Initv+0x74>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001388:	2218      	movs	r2, #24
 800138a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <_ZL12MX_SPI1_Initv+0x70>)
 80013a6:	f003 f991 	bl	80046cc <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80013ba:	f000 f8b3 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000224 	.word	0x20000224
 80013c8:	40013000 	.word	0x40013000

080013cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_ZL19MX_USART2_UART_Initv+0x58>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001404:	f004 f9ae 	bl	8005764 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001418:	f000 f884 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000027c 	.word	0x2000027c
 8001424:	40004400 	.word	0x40004400

08001428 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <_ZL12MX_GPIO_Initv+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_ZL12MX_GPIO_Initv+0xac>)
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <_ZL12MX_GPIO_Initv+0xb0>)
 80014c4:	f000 fcc0 	bl	8001e48 <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	10210000 	.word	0x10210000
 80014d8:	40020800 	.word	0x40020800

080014dc <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80014e4:	f00a f8d2 	bl	800b68c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f007 fc5b 	bl	8008da4 <osDelay>
 80014ee:	e7fb      	b.n	80014e8 <_Z10StartGetBTPv+0xc>

080014f0 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f007 fc53 	bl	8008da4 <osDelay>
 80014fe:	e7fb      	b.n	80014f8 <_Z12StartSendUSBPv+0x8>

08001500 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001512:	f000 fb73 	bl	8001bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40001c00 	.word	0x40001c00

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>

0800152e <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001536:	f7ff f9bf 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800153a:	f7ff f9a5 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 800153e:	f000 f845 	bl	80015cc <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001542:	f7ff f98b 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001546:	2218      	movs	r2, #24
 8001548:	2188      	movs	r1, #136	; 0x88
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f846 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f865 	bl	8001620 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e02b      	b.n	80015c4 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 800156c:	22c1      	movs	r2, #193	; 0xc1
 800156e:	21d8      	movs	r1, #216	; 0xd8
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f833 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001576:	2260      	movs	r2, #96	; 0x60
 8001578:	21d0      	movs	r1, #208	; 0xd0
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f82e 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001580:	2204      	movs	r2, #4
 8001582:	21e8      	movs	r1, #232	; 0xe8
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f829 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800158a:	21e8      	movs	r1, #232	; 0xe8
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f877 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001592:	4603      	mov	r3, r0
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d000      	beq.n	80015a8 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80015a6:	e7f0      	b.n	800158a <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f88b 	bl	80016c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80015ae:	2220      	movs	r2, #32
 80015b0:	21c8      	movs	r1, #200	; 0xc8
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f812 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80015b8:	2201      	movs	r2, #1
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f80d 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
        }
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
 80015e8:	4613      	mov	r3, r2
 80015ea:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80015ec:	f7ff f958 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80015fa:	78bb      	ldrb	r3, [r7, #2]
 80015fc:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80015fe:	f107 010c 	add.w	r1, r7, #12
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2202      	movs	r2, #2
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800160a:	f003 f8e8 	bl	80047de <HAL_SPI_Transmit>
        SPI_SS::Set();
 800160e:	f7ff f93b 	bl	8000888 <_ZN3P103SetEv>
        return;
 8001612:	bf00      	nop
};
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000310 	.word	0x20000310

08001620 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 800162c:	2220      	movs	r2, #32
 800162e:	2178      	movs	r1, #120	; 0x78
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffd3 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001636:	2200      	movs	r2, #0
 8001638:	2178      	movs	r1, #120	; 0x78
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffce 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	3301      	adds	r3, #1
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00f      	beq.n	8001676 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001656:	2168      	movs	r1, #104	; 0x68
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f811 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d100      	bne.n	8001674 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001672:	e7e5      	b.n	8001640 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001674:	bf00      	nop
        return ( i);
 8001676:	89fb      	ldrh	r3, [r7, #14]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800168c:	f7ff f908 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001690:	1cf9      	adds	r1, r7, #3
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2201      	movs	r2, #1
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800169a:	f003 f8a0 	bl	80047de <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80016a2:	f107 010f 	add.w	r1, r7, #15
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	2201      	movs	r2, #1
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80016ae:	f003 f9d2 	bl	8004a56 <HAL_SPI_Receive>
        SPI_SS::Set();
 80016b2:	f7ff f8e9 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000310 	.word	0x20000310

080016c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80016cc:	21f8      	movs	r1, #248	; 0xf8
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffd6 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016de:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2bc0      	cmp	r3, #192	; 0xc0
 80016e4:	d04a      	beq.n	800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80016e6:	2bc0      	cmp	r3, #192	; 0xc0
 80016e8:	dc55      	bgt.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80016ea:	2b80      	cmp	r3, #128	; 0x80
 80016ec:	d006      	beq.n	80016fc <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80016ee:	2b80      	cmp	r3, #128	; 0x80
 80016f0:	dc51      	bgt.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d046      	beq.n	8001784 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80016f6:	2b40      	cmp	r3, #64	; 0x40
 80016f8:	d020      	beq.n	800173c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80016fa:	e04c      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80016fc:	21d8      	movs	r1, #216	; 0xd8
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffbe 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001718:	22c9      	movs	r2, #201	; 0xc9
 800171a:	21d8      	movs	r1, #216	; 0xd8
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff5d 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001724:	2202      	movs	r2, #2
 8001726:	701a      	strb	r2, [r3, #0]
                        break;
 8001728:	e035      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800172a:	22cb      	movs	r2, #203	; 0xcb
 800172c:	21d8      	movs	r1, #216	; 0xd8
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff54 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001736:	2203      	movs	r2, #3
 8001738:	701a      	strb	r2, [r3, #0]
                        break;
 800173a:	e02c      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800173c:	21d8      	movs	r1, #216	; 0xd8
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff9e 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001744:	4603      	mov	r3, r0
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf0c      	ite	eq
 800174e:	2301      	moveq	r3, #1
 8001750:	2300      	movne	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001758:	22cb      	movs	r2, #203	; 0xcb
 800175a:	21d8      	movs	r1, #216	; 0xd8
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff3d 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001764:	2203      	movs	r2, #3
 8001766:	701a      	strb	r2, [r3, #0]
                        break;
 8001768:	e015      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800176a:	22c9      	movs	r2, #201	; 0xc9
 800176c:	21d8      	movs	r1, #216	; 0xd8
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff34 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
                        break;
 800177a:	e00c      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
                        break;
 8001782:	e008      	b.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001784:	22d1      	movs	r2, #209	; 0xd1
 8001786:	21d8      	movs	r1, #216	; 0xd8
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff27 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
                        break;
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000662 	.word	0x20000662

080017a4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d115      	bne.n	80017e0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d110      	bne.n	80017e0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80017c2:	f7ff f835 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80017c6:	480a      	ldr	r0, [pc, #40]	; (80017f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80017c8:	f00f f802 	bl	80107d0 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80017d0:	f00a fe02 	bl	800c3d8 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80017dc:	f7ff f934 	bl	8000a48 <_ZN5PS4BTC1EP3BTDbPKc>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000027c 	.word	0x2000027c
 80017ec:	200003ac 	.word	0x200003ac
 80017f0:	200003c0 	.word	0x200003c0
 80017f4:	2000047c 	.word	0x2000047c
 80017f8:	08012398 	.word	0x08012398
 80017fc:	20000594 	.word	0x20000594

08001800 <_GLOBAL__sub_I_hspi1>:
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
 8001804:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff ffcb 	bl	80017a4 <_Z41__static_initialization_and_destruction_0ii>
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_MspInit+0x54>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_MspInit+0x54>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x54>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_MspInit+0x54>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_MspInit+0x54>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_MspInit+0x54>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	210f      	movs	r1, #15
 8001852:	f06f 0001 	mvn.w	r0, #1
 8001856:	f000 facd 	bl	8001df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_SPI_MspInit+0x84>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12b      	bne.n	80018e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 8001894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018c2:	23e0      	movs	r3, #224	; 0xe0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d2:	2305      	movs	r3, #5
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_SPI_MspInit+0x8c>)
 80018de:	f000 fab3 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_TIM_Base_MspInit+0x48>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d115      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	202d      	movs	r0, #45	; 0x2d
 800192c:	f000 fa62 	bl	8001df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001930:	202d      	movs	r0, #45	; 0x2d
 8001932:	f000 fa7b 	bl	8001e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40002000 	.word	0x40002000
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_UART_MspInit+0x84>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12b      	bne.n	80019c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_UART_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_UART_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a2:	230c      	movs	r3, #12
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b2:	2307      	movs	r3, #7
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 80019be:	f000 fa43 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40004400 	.word	0x40004400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000

080019d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	202c      	movs	r0, #44	; 0x2c
 80019ee:	f000 fa01 	bl	8001df4 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019f2:	202c      	movs	r0, #44	; 0x2c
 80019f4:	f000 fa1a 	bl	8001e2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_InitTick+0xa4>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_InitTick+0xa4>)
 8001a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_InitTick+0xa4>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a14:	f107 0210 	add.w	r2, r7, #16
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fea8 	bl	8003774 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a24:	f001 fe7e 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <HAL_InitTick+0xa8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_InitTick+0xac>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_InitTick+0xb0>)
 8001a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_InitTick+0xac>)
 8001a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a48:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_InitTick+0xac>)
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_InitTick+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_InitTick+0xac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_InitTick+0xac>)
 8001a5e:	f003 fbdd 	bl	800521c <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d104      	bne.n	8001a72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <HAL_InitTick+0xac>)
 8001a6a:	f003 fc27 	bl	80052bc <HAL_TIM_Base_Start_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	20004f90 	.word	0x20004f90
 8001a88:	40001c00 	.word	0x40001c00

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001abe:	f003 fc6d 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20004f90 	.word	0x20004f90

08001acc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ad2:	f003 fc63 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002c0 	.word	0x200002c0

08001ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <OTG_FS_IRQHandler+0x10>)
 8001ae6:	f000 fccb 	bl	8002480 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200054ec 	.word	0x200054ec

08001af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_kill>:

int _kill(int pid, int sig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b0e:	f010 fb49 	bl	80121a4 <__errno>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2216      	movs	r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
	return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_exit>:

void _exit (int status)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffe7 	bl	8001b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b36:	e7fe      	b.n	8001b36 <_exit+0x12>

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SystemInit+0x28>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <SystemInit+0x28>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SystemInit+0x28>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr  r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff ffd3 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f010 fb0d 	bl	80121b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff f82b 	bl	8000bf0 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba0:	080126f0 	.word	0x080126f0
  ldr  r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001bac:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001bb0:	200058f8 	.word	0x200058f8

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f8fc 	bl	8001dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fef6 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fe10 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20004fd8 	.word	0x20004fd8

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20004fd8 	.word	0x20004fd8

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff4c 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e06:	f7ff ff61 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	6978      	ldr	r0, [r7, #20]
 8001e12:	f7ff ffb1 	bl	8001d78 <NVIC_EncodePriority>
 8001e16:	4602      	mov	r2, r0
 8001e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff80 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e24:	bf00      	nop
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff54 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e165      	b.n	8002130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8154 	bne.w	800212a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80ae 	beq.w	800212a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_GPIO_Init+0x300>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	; (8002148 <HAL_GPIO_Init+0x300>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_GPIO_Init+0x300>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_GPIO_Init+0x304>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_GPIO_Init+0x308>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x21a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_GPIO_Init+0x30c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x216>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_GPIO_Init+0x310>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x212>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x314>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_GPIO_Init+0x318>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x20a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_GPIO_Init+0x31c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x206>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a49      	ldr	r2, [pc, #292]	; (8002168 <HAL_GPIO_Init+0x320>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x202>
 8002046:	2306      	movs	r3, #6
 8002048:	e00c      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 800204a:	2307      	movs	r3, #7
 800204c:	e00a      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 800204e:	2305      	movs	r3, #5
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 8002052:	2304      	movs	r3, #4
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x21c>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_GPIO_Init+0x304>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002082:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_GPIO_Init+0x324>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_GPIO_Init+0x324>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ac:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_GPIO_Init+0x324>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_GPIO_Init+0x324>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_GPIO_Init+0x324>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_GPIO_Init+0x324>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_GPIO_Init+0x324>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_GPIO_Init+0x324>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f ae96 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40021400 	.word	0x40021400
 8002168:	40021800 	.word	0x40021800
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d4:	b08f      	sub	sp, #60	; 0x3c
 80021d6:	af0a      	add	r7, sp, #40	; 0x28
 80021d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e116      	b.n	8002412 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f009 fb8c 	bl	800b91c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 ff47 	bl	80060b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	687e      	ldr	r6, [r7, #4]
 8002230:	466d      	mov	r5, sp
 8002232:	f106 0410 	add.w	r4, r6, #16
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002242:	e885 0003 	stmia.w	r5, {r0, r1}
 8002246:	1d33      	adds	r3, r6, #4
 8002248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f003 fe1e 	bl	8005e8c <USB_CoreInit>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0d7      	b.n	8002412 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f003 ff35 	bl	80060d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e04a      	b.n	800230a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	333c      	adds	r3, #60	; 0x3c
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	b298      	uxth	r0, r3
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3342      	adds	r3, #66	; 0x42
 80022b0:	4602      	mov	r2, r0
 80022b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	333f      	adds	r3, #63	; 0x3f
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3344      	adds	r3, #68	; 0x44
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3348      	adds	r3, #72	; 0x48
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3350      	adds	r3, #80	; 0x50
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3af      	bcc.n	8002274 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e044      	b.n	80023a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3b5      	bcc.n	800231a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	687e      	ldr	r6, [r7, #4]
 80023b6:	466d      	mov	r5, sp
 80023b8:	f106 0410 	add.w	r4, r6, #16
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80023cc:	1d33      	adds	r3, r6, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f003 feab 	bl	800612c <USB_DevInit>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e014      	b.n	8002412 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f001 f879 	bl	80034f8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fee6 	bl	80071dc <USB_DevDisconnect>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800241a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_PCD_Start+0x1c>
 8002432:	2302      	movs	r3, #2
 8002434:	e020      	b.n	8002478 <HAL_PCD_Start+0x5e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	2b01      	cmp	r3, #1
 8002444:	d109      	bne.n	800245a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fe18 	bl	8006094 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f004 fe96 	bl	800719a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08d      	sub	sp, #52	; 0x34
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f004 ff54 	bl	8007344 <USB_GetMode>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 83ca 	bne.w	8002c38 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 feb8 	bl	800721e <USB_ReadInterrupts>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 83c0 	beq.w	8002c36 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 feaf 	bl	800721e <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d107      	bne.n	80024da <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f002 0202 	and.w	r2, r2, #2
 80024d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fe9d 	bl	800721e <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d161      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0210 	bic.w	r2, r2, #16
 80024fc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	0c5b      	lsrs	r3, r3, #17
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	2b02      	cmp	r3, #2
 8002528:	d124      	bne.n	8002574 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d035      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6a38      	ldr	r0, [r7, #32]
 800254a:	f004 fd03 	bl	8006f54 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255a:	441a      	add	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256c:	441a      	add	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	619a      	str	r2, [r3, #24]
 8002572:	e016      	b.n	80025a2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	0c5b      	lsrs	r3, r3, #17
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	2b06      	cmp	r3, #6
 800257e:	d110      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002586:	2208      	movs	r2, #8
 8002588:	4619      	mov	r1, r3
 800258a:	6a38      	ldr	r0, [r7, #32]
 800258c:	f004 fce2 	bl	8006f54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259c:	441a      	add	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0210 	orr.w	r2, r2, #16
 80025b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fe31 	bl	800721e <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025c6:	d16e      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 fe37 	bl	8007244 <USB_ReadDevAllOutEpInterrupt>
 80025d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025d8:	e062      	b.n	80026a0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d057      	beq.n	8002694 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 fe5c 	bl	80072ac <USB_ReadDevOutEPInterrupt>
 80025f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fdc5 	bl	80031a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2308      	movs	r3, #8
 8002634:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 febf 	bl	80033bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	2310      	movs	r3, #16
 8002658:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d009      	beq.n	8002694 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002692:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3301      	adds	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d199      	bne.n	80025da <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fdb7 	bl	800721e <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ba:	f040 80c0 	bne.w	800283e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fdd8 	bl	8007278 <USB_ReadDevAllInEpInterrupt>
 80026c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ce:	e0b2      	b.n	8002836 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a7 	beq.w	800282a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fdfe 	bl	80072e8 <USB_ReadDevInEPInterrupt>
 80026ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d057      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	2201      	movs	r2, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	69f9      	ldr	r1, [r7, #28]
 8002714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002718:	4013      	ands	r3, r2
 800271a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d132      	bne.n	800279c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3348      	adds	r3, #72	; 0x48
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4403      	add	r3, r0
 8002756:	3344      	adds	r3, #68	; 0x44
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4419      	add	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4403      	add	r3, r0
 800276a:	3348      	adds	r3, #72	; 0x48
 800276c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <HAL_PCD_IRQHandler+0x31c>
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3350      	adds	r3, #80	; 0x50
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002794:	461a      	mov	r2, r3
 8002796:	2101      	movs	r1, #1
 8002798:	f004 fe06 	bl	80073a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f009 f93b 	bl	800ba1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027be:	461a      	mov	r2, r3
 80027c0:	2308      	movs	r3, #8
 80027c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027da:	461a      	mov	r2, r3
 80027dc:	2310      	movs	r3, #16
 80027de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f6:	461a      	mov	r2, r3
 80027f8:	2340      	movs	r3, #64	; 0x40
 80027fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002812:	461a      	mov	r2, r3
 8002814:	2302      	movs	r3, #2
 8002816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fc30 	bl	800308a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	3301      	adds	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	f47f af49 	bne.w	80026d0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fceb 	bl	800721e <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800284e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002852:	d122      	bne.n	800289a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800286e:	2b01      	cmp	r3, #1
 8002870:	d108      	bne.n	8002884 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800287a:	2100      	movs	r1, #0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f009 fb0b 	bl	800be98 <HAL_PCDEx_LPM_Callback>
 8002882:	e002      	b.n	800288a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f009 f941 	bl	800bb0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fcbd 	bl	800721e <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ae:	d112      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f009 f8fd 	bl	800bac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028d4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fc9f 	bl	800721e <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ea:	d121      	bne.n	8002930 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80028fa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d111      	bne.n	800292a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002920:	2101      	movs	r1, #1
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f009 fab8 	bl	800be98 <HAL_PCDEx_LPM_Callback>
 8002928:	e002      	b.n	8002930 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f009 f8c8 	bl	800bac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fc72 	bl	800721e <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	f040 80c7 	bne.w	8002ad6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2110      	movs	r1, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fd40 	bl	80063e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296c:	e056      	b.n	8002a1c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297a:	461a      	mov	r2, r3
 800297c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002980:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002992:	0151      	lsls	r1, r2, #5
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	440a      	add	r2, r1
 8002998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800299c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b2:	0151      	lsls	r1, r2, #5
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	440a      	add	r2, r1
 80029b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ce:	461a      	mov	r2, r3
 80029d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e6:	0151      	lsls	r1, r2, #5
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	440a      	add	r2, r1
 80029ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	3301      	adds	r3, #1
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3a3      	bcc.n	800296e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a52:	f043 030b 	orr.w	r3, r3, #11
 8002a56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a68:	f043 030b 	orr.w	r3, r3, #11
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	e015      	b.n	8002a9c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a96:	f043 030b 	orr.w	r3, r3, #11
 8002a9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f004 fc71 	bl	80073a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 fb9f 	bl	800721e <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d124      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 fc35 	bl	8007360 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fcd5 	bl	80064aa <USB_GetDevSpeed>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681c      	ldr	r4, [r3, #0]
 8002b0c:	f000 fdfe 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f003 fa18 	bl	8005f50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f008 ffa4 	bl	800ba6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fb6f 	bl	800721e <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10a      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f008 ff81 	bl	800ba52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f002 0208 	and.w	r2, r2, #8
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fb5a 	bl	800721e <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d10f      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f008 ffe3 	bl	800bb4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fb3f 	bl	800721e <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002baa:	d10f      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f008 ffb6 	bl	800bb28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fb24 	bl	800721e <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d10a      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f008 ffc4 	bl	800bb70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fb0e 	bl	800721e <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d115      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f008 ffb4 	bl	800bb8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	e000      	b.n	8002c38 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002c36:	bf00      	nop
    }
  }
}
 8002c38:	3734      	adds	r7, #52	; 0x34
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}

08002c3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_SetAddress+0x1a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e013      	b.n	8002c80 <HAL_PCD_SetAddress+0x42>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 fa6c 	bl	800714e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	70fb      	strb	r3, [r7, #3]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	803b      	strh	r3, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0f      	bge.n	8002cce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00f      	b.n	8002cee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cfa:	883a      	ldrh	r2, [r7, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	78ba      	ldrb	r2, [r7, #2]
 8002d04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d18:	78bb      	ldrb	r3, [r7, #2]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d102      	bne.n	8002d24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_PCD_EP_Open+0xaa>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e00e      	b.n	8002d50 <HAL_PCD_EP_Open+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fbd7 	bl	80064f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da0f      	bge.n	8002d8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	3338      	adds	r3, #56	; 0x38
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3304      	adds	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	705a      	strb	r2, [r3, #1]
 8002d8a:	e00f      	b.n	8002dac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_PCD_EP_Close+0x6e>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e00e      	b.n	8002de4 <HAL_PCD_EP_Close+0x8c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fc15 	bl	8006604 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6979      	ldr	r1, [r7, #20]
 8002e60:	f003 fef0 	bl	8006c44 <USB_EP0StartXfer>
 8002e64:	e008      	b.n	8002e78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	6979      	ldr	r1, [r7, #20]
 8002e74:	f003 fca2 	bl	80067bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	f003 fea6 	bl	8006c44 <USB_EP0StartXfer>
 8002ef8:	e008      	b.n	8002f0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	6979      	ldr	r1, [r7, #20]
 8002f08:	f003 fc58 	bl	80067bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e050      	b.n	8002fd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0f      	bge.n	8002f5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	3338      	adds	r3, #56	; 0x38
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
 8002f5a:	e00d      	b.n	8002f78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_EP_SetStall+0x82>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e01e      	b.n	8002fd6 <HAL_PCD_EP_SetStall+0xc0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fffd 	bl	8006fa6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	b2d9      	uxtb	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f004 f9ee 	bl	80073a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d901      	bls.n	8002ffc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e042      	b.n	8003082 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	da0f      	bge.n	8003024 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3338      	adds	r3, #56	; 0x38
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	705a      	strb	r2, [r3, #1]
 8003022:	e00f      	b.n	8003044 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 020f 	and.w	r2, r3, #15
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_PCD_EP_ClrStall+0x86>
 8003060:	2302      	movs	r3, #2
 8003062:	e00e      	b.n	8003082 <HAL_PCD_EP_ClrStall+0xa4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 f805 	bl	8007082 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b08a      	sub	sp, #40	; 0x28
 800308e:	af02      	add	r7, sp, #8
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3338      	adds	r3, #56	; 0x38
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d901      	bls.n	80030c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06c      	b.n	800319c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d902      	bls.n	80030de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3303      	adds	r3, #3
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e6:	e02b      	b.n	8003140 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d902      	bls.n	8003104 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3303      	adds	r3, #3
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68d9      	ldr	r1, [r3, #12]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800311c:	b2db      	uxtb	r3, r3
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4603      	mov	r3, r0
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f003 fee1 	bl	8006eea <USB_WritePacket>

    ep->xfer_buff  += len;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	b29b      	uxth	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d809      	bhi.n	800316a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800315e:	429a      	cmp	r2, r3
 8003160:	d203      	bcs.n	800316a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1be      	bne.n	80030e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	429a      	cmp	r2, r3
 8003174:	d811      	bhi.n	800319a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	2201      	movs	r2, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	43db      	mvns	r3, r3
 8003190:	6939      	ldr	r1, [r7, #16]
 8003192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003196:	4013      	ands	r3, r2
 8003198:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	333c      	adds	r3, #60	; 0x3c
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	f040 80a0 	bne.w	800331c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	f240 80dd 	bls.w	80033aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80d7 	beq.w	80033aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	e0cb      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2320      	movs	r3, #32
 800322c:	6093      	str	r3, [r2, #8]
 800322e:	e0bc      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 80b7 	bne.w	80033aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d90f      	bls.n	8003264 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003260:	6093      	str	r3, [r2, #8]
 8003262:	e0a2      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003276:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	440b      	add	r3, r1
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800328a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800329e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4403      	add	r3, r0
 80032c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4419      	add	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d114      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x16a>
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d108      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003306:	461a      	mov	r2, r3
 8003308:	2101      	movs	r1, #1
 800330a:	f004 f84d 	bl	80073a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f008 fb67 	bl	800b9e8 <HAL_PCD_DataOutStageCallback>
 800331a:	e046      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d124      	bne.n	800336e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333a:	461a      	mov	r2, r3
 800333c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003340:	6093      	str	r3, [r2, #8]
 8003342:	e032      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	461a      	mov	r2, r3
 800335c:	2320      	movs	r3, #32
 800335e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f008 fb3e 	bl	800b9e8 <HAL_PCD_DataOutStageCallback>
 800336c:	e01d      	b.n	80033aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d114      	bne.n	800339e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003396:	461a      	mov	r2, r3
 8003398:	2100      	movs	r1, #0
 800339a:	f004 f805 	bl	80073a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f008 fb1f 	bl	800b9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	4f54300a 	.word	0x4f54300a
 80033b8:	4f54310a 	.word	0x4f54310a

080033bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d90e      	bls.n	8003410 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f008 fad7 	bl	800b9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <PCD_EP_OutSetupPacket_int+0x88>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d90c      	bls.n	8003438 <PCD_EP_OutSetupPacket_int+0x7c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003430:	461a      	mov	r2, r3
 8003432:	2101      	movs	r1, #1
 8003434:	f003 ffb8 	bl	80073a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	4f54300a 	.word	0x4f54300a

08003448 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
 8003454:	4613      	mov	r3, r2
 8003456:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003466:	883b      	ldrh	r3, [r7, #0]
 8003468:	0419      	lsls	r1, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	430a      	orrs	r2, r1
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
 8003474:	e028      	b.n	80034c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4413      	add	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e00d      	b.n	80034a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3340      	adds	r3, #64	; 0x40
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4413      	add	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3301      	adds	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3ec      	bcc.n	800348a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034b0:	883b      	ldrh	r3, [r7, #0]
 80034b2:	0418      	lsls	r0, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	4302      	orrs	r2, r0
 80034c0:	3340      	adds	r3, #64	; 0x40
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352a:	f043 0303 	orr.w	r3, r3, #3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe faf8 	bl	8001c24 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe faf4 	bl	8001c24 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 fbb1 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f976 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08012544 	.word	0x08012544
 8003704:	20000000 	.word	0x20000000
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08012554 	.word	0x08012554

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08012554 	.word	0x08012554

08003774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	220f      	movs	r2, #15
 8003782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_GetClockConfig+0x60>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40023c00 	.word	0x40023c00

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003816:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	496c      	ldr	r1, [pc, #432]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800382e:	2301      	movs	r3, #1
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800383e:	4b64      	ldr	r3, [pc, #400]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	4960      	ldr	r1, [pc, #384]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800385c:	2301      	movs	r3, #1
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d017      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4955      	ldr	r1, [pc, #340]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d101      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800388c:	2301      	movs	r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	4946      	ldr	r1, [pc, #280]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c6:	d101      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80038c8:	2301      	movs	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 808a 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003902:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800390e:	f7fe f989 	bl	8001c24 <HAL_GetTick>
 8003912:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003916:	f7fe f985 	bl	8001c24 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e278      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02f      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	429a      	cmp	r2, r3
 8003950:	d028      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003952:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d114      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800397a:	f7fe f953 	bl	8001c24 <HAL_GetTick>
 800397e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fe f94f 	bl	8001c24 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e240      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b0:	d114      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	4902      	ldr	r1, [pc, #8]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
 80039cc:	e00c      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470e40 	.word	0x42470e40
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a49      	ldr	r2, [pc, #292]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	4944      	ldr	r1, [pc, #272]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a0e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a44:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4c:	492e      	ldr	r1, [pc, #184]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d011      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a60:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a66:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	4926      	ldr	r1, [pc, #152]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a80:	2301      	movs	r3, #1
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	491a      	ldr	r1, [pc, #104]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d011      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	4911      	ldr	r1, [pc, #68]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae4:	f040 80ff 	bne.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aee:	f7fe f899 	bl	8001c24 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003af6:	f7fe f895 	bl	8001c24 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e188      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	424711e0 	.word	0x424711e0
 8003b10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b14:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d028      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d124      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b48:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	3301      	adds	r3, #1
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	431a      	orrs	r2, r3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	4961      	ldr	r1, [pc, #388]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d035      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d130      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bbe:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bd0:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd6:	0f1b      	lsrs	r3, r3, #28
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	019b      	lsls	r3, r3, #6
 8003be8:	431a      	orrs	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	071b      	lsls	r3, r3, #28
 8003c00:	4943      	ldr	r1, [pc, #268]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0e:	f023 021f 	bic.w	r2, r3, #31
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	493d      	ldr	r1, [pc, #244]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d029      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c34:	d124      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	3301      	adds	r3, #1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4e:	0f1b      	lsrs	r3, r3, #28
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	019b      	lsls	r3, r3, #6
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	431a      	orrs	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	071b      	lsls	r3, r3, #28
 8003c78:	4925      	ldr	r1, [pc, #148]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	019b      	lsls	r3, r3, #6
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	4917      	ldr	r1, [pc, #92]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd ffb0 	bl	8001c24 <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cc8:	f7fd ffac 	bl	8001c24 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e09f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 8095 	bne.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fd ff96 	bl	8001c24 <HAL_GetTick>
 8003cf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cfa:	e00f      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cfc:	f7fd ff92 	bl	8001c24 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d908      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e085      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470068 	.word	0x42470068
 8003d18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d1c:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d28:	d0e8      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02b      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d127      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d52:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	3b01      	subs	r3, #1
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	4928      	ldr	r1, [pc, #160]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	3b01      	subs	r3, #1
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	4922      	ldr	r1, [pc, #136]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01d      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db6:	d118      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	0e1b      	lsrs	r3, r3, #24
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	019b      	lsls	r3, r3, #6
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4910      	ldr	r1, [pc, #64]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fd ff18 	bl	8001c24 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003df8:	f7fd ff14 	bl	8001c24 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e007      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e16:	d1ef      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3730      	adds	r7, #48	; 0x30
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470070 	.word	0x42470070

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e48:	4bce      	ldr	r3, [pc, #824]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	f200 818d 	bhi.w	8004170 <HAL_RCC_GetSysClockFreq+0x344>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_RCC_GetSysClockFreq+0x30>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08004171 	.word	0x08004171
 8003e64:	08004171 	.word	0x08004171
 8003e68:	08004171 	.word	0x08004171
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08004171 	.word	0x08004171
 8003e74:	08004171 	.word	0x08004171
 8003e78:	08004171 	.word	0x08004171
 8003e7c:	08003e9d 	.word	0x08003e9d
 8003e80:	08004171 	.word	0x08004171
 8003e84:	08004171 	.word	0x08004171
 8003e88:	08004171 	.word	0x08004171
 8003e8c:	08004011 	.word	0x08004011
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4bbd      	ldr	r3, [pc, #756]	; (8004188 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e92:	61bb      	str	r3, [r7, #24]
       break;
 8003e94:	e16f      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e96:	4bbd      	ldr	r3, [pc, #756]	; (800418c <HAL_RCC_GetSysClockFreq+0x360>)
 8003e98:	61bb      	str	r3, [r7, #24]
      break;
 8003e9a:	e16c      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4bb9      	ldr	r3, [pc, #740]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea6:	4bb7      	ldr	r3, [pc, #732]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d053      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb2:	4bb4      	ldr	r3, [pc, #720]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	ea02 0400 	and.w	r4, r2, r0
 8003eca:	603c      	str	r4, [r7, #0]
 8003ecc:	400b      	ands	r3, r1
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	014b      	lsls	r3, r1, #5
 8003ee2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ee6:	0142      	lsls	r2, r0, #5
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	4623      	mov	r3, r4
 8003eee:	1ac0      	subs	r0, r0, r3
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	eb61 0103 	sbc.w	r1, r1, r3
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f04:	0182      	lsls	r2, r0, #6
 8003f06:	1a12      	subs	r2, r2, r0
 8003f08:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	00d9      	lsls	r1, r3, #3
 8003f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f1a:	00d0      	lsls	r0, r2, #3
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4621      	mov	r1, r4
 8003f22:	1852      	adds	r2, r2, r1
 8003f24:	4629      	mov	r1, r5
 8003f26:	eb43 0101 	adc.w	r1, r3, r1
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	f04f 0100 	mov.w	r1, #0
 8003f34:	0259      	lsls	r1, r3, #9
 8003f36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f3a:	0250      	lsls	r0, r2, #9
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f7fc f968 	bl	8000220 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e04c      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	461a      	mov	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	ea02 0a00 	and.w	sl, r2, r0
 8003f72:	ea03 0b01 	and.w	fp, r3, r1
 8003f76:	4650      	mov	r0, sl
 8003f78:	4659      	mov	r1, fp
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	014b      	lsls	r3, r1, #5
 8003f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f88:	0142      	lsls	r2, r0, #5
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	ebb0 000a 	subs.w	r0, r0, sl
 8003f92:	eb61 010b 	sbc.w	r1, r1, fp
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	018b      	lsls	r3, r1, #6
 8003fa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fa4:	0182      	lsls	r2, r0, #6
 8003fa6:	1a12      	subs	r2, r2, r0
 8003fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fac:	f04f 0000 	mov.w	r0, #0
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	00d9      	lsls	r1, r3, #3
 8003fb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fba:	00d0      	lsls	r0, r2, #3
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	eb12 020a 	adds.w	r2, r2, sl
 8003fc4:	eb43 030b 	adc.w	r3, r3, fp
 8003fc8:	f04f 0000 	mov.w	r0, #0
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	0299      	lsls	r1, r3, #10
 8003fd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fd6:	0290      	lsls	r0, r2, #10
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	f7fc f91a 	bl	8000220 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	61bb      	str	r3, [r7, #24]
      break;
 800400e:	e0b2      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004010:	4b5c      	ldr	r3, [pc, #368]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004018:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04d      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004026:	4b57      	ldr	r3, [pc, #348]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	461a      	mov	r2, r3
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	ea02 0800 	and.w	r8, r2, r0
 800403e:	ea03 0901 	and.w	r9, r3, r1
 8004042:	4640      	mov	r0, r8
 8004044:	4649      	mov	r1, r9
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	014b      	lsls	r3, r1, #5
 8004050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004054:	0142      	lsls	r2, r0, #5
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	ebb0 0008 	subs.w	r0, r0, r8
 800405e:	eb61 0109 	sbc.w	r1, r1, r9
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	018b      	lsls	r3, r1, #6
 800406c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004070:	0182      	lsls	r2, r0, #6
 8004072:	1a12      	subs	r2, r2, r0
 8004074:	eb63 0301 	sbc.w	r3, r3, r1
 8004078:	f04f 0000 	mov.w	r0, #0
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	00d9      	lsls	r1, r3, #3
 8004082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004086:	00d0      	lsls	r0, r2, #3
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	eb12 0208 	adds.w	r2, r2, r8
 8004090:	eb43 0309 	adc.w	r3, r3, r9
 8004094:	f04f 0000 	mov.w	r0, #0
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	0259      	lsls	r1, r3, #9
 800409e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040a2:	0250      	lsls	r0, r2, #9
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	f7fc f8b4 	bl	8000220 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e04a      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b30      	ldr	r3, [pc, #192]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	461a      	mov	r2, r3
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	ea02 0400 	and.w	r4, r2, r0
 80040da:	ea03 0501 	and.w	r5, r3, r1
 80040de:	4620      	mov	r0, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	014b      	lsls	r3, r1, #5
 80040ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040f0:	0142      	lsls	r2, r0, #5
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	1b00      	subs	r0, r0, r4
 80040f8:	eb61 0105 	sbc.w	r1, r1, r5
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	018b      	lsls	r3, r1, #6
 8004106:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800410a:	0182      	lsls	r2, r0, #6
 800410c:	1a12      	subs	r2, r2, r0
 800410e:	eb63 0301 	sbc.w	r3, r3, r1
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	00d9      	lsls	r1, r3, #3
 800411c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004120:	00d0      	lsls	r0, r2, #3
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	1912      	adds	r2, r2, r4
 8004128:	eb45 0303 	adc.w	r3, r5, r3
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	0299      	lsls	r1, r3, #10
 8004136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800413a:	0290      	lsls	r0, r2, #10
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	461a      	mov	r2, r3
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f7fc f868 	bl	8000220 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RCC_GetSysClockFreq+0x358>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0f1b      	lsrs	r3, r3, #28
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	61bb      	str	r3, [r7, #24]
      break;
 800416e:	e002      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004172:	61bb      	str	r3, [r7, #24]
      break;
 8004174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004176:	69bb      	ldr	r3, [r7, #24]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	00f42400 	.word	0x00f42400
 800418c:	007a1200 	.word	0x007a1200

08004190 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e28d      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8083 	beq.w	80042b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d019      	beq.n	80041f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041bc:	4b91      	ldr	r3, [pc, #580]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c8:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b8b      	ldr	r3, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d112      	bne.n	8004208 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b84      	ldr	r3, [pc, #528]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x124>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e25a      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x90>
 8004212:	4b7c      	ldr	r3, [pc, #496]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7b      	ldr	r2, [pc, #492]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xcc>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xb4>
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a72      	ldr	r2, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xcc>
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fcde 	bl	8001c24 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fcda 	bl	8001c24 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e21f      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xdc>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fcca 	bl	8001c24 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fcc6 	bl	8001c24 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e20b      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b57      	ldr	r3, [pc, #348]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x104>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06f      	beq.n	80043a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x186>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1d3      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x278>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd fc73 	bl	8001c24 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f7fd fc6f 	bl	8001c24 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1b4      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x278>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fc52 	bl	8001c24 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd fc4e 	bl	8001c24 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e193      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fd fc32 	bl	8001c24 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fd fc2e 	bl	8001c24 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e173      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x234>
 80043e2:	e01b      	b.n	800441c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fd fc1b 	bl	8001c24 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00e      	b.n	8004410 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fd fc17 	bl	8001c24 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d907      	bls.n	8004410 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e15c      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b8a      	ldr	r3, [pc, #552]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ea      	bne.n	80043f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8097 	beq.w	8004558 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b7f      	ldr	r3, [pc, #508]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a7e      	ldr	r2, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b7c      	ldr	r3, [pc, #496]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b79      	ldr	r3, [pc, #484]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a75      	ldr	r2, [pc, #468]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fd fbd7 	bl	8001c24 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fd fbd3 	bl	8001c24 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e118      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b6c      	ldr	r3, [pc, #432]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x31e>
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x358>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x340>
 80044b6:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a60      	ldr	r2, [pc, #384]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	4b5e      	ldr	r3, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x358>
 80044d0:	4b5a      	ldr	r3, [pc, #360]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a59      	ldr	r2, [pc, #356]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b57      	ldr	r3, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a56      	ldr	r2, [pc, #344]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fb98 	bl	8001c24 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fb94 	bl	8001c24 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0d7      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x368>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fd fb82 	bl	8001c24 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fd fb7e 	bl	8001c24 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0c1      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ee      	bne.n	8004524 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	4a3a      	ldr	r2, [pc, #232]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80ad 	beq.w	80046bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d060      	beq.n	8004630 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d145      	bne.n	8004602 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fb52 	bl	8001c24 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fb4e 	bl	8001c24 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e093      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd fb23 	bl	8001c24 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fd fb1f 	bl	8001c24 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e064      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x452>
 8004600:	e05c      	b.n	80046bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fb0c 	bl	8001c24 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fb08 	bl	8001c24 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e04d      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x480>
 800462e:	e045      	b.n	80046bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e040      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <HAL_RCC_OscConfig+0x538>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d030      	beq.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d129      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d122      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d119      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d10f      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e07b      	b.n	80047d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ee:	d009      	beq.n	8004704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
 80046f6:	e005      	b.n	8004704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd f8a2 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	ea42 0103 	orr.w	r1, r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0104 	and.w	r1, r3, #4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0210 	and.w	r2, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_SPI_Transmit+0x22>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e126      	b.n	8004a4e <HAL_SPI_Transmit+0x270>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004808:	f7fd fa0c 	bl	8001c24 <HAL_GetTick>
 800480c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d002      	beq.n	8004824 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004822:	e10b      	b.n	8004a3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0x52>
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004834:	e102      	b.n	8004a3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2203      	movs	r2, #3
 800483a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487c:	d10f      	bne.n	800489e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800489c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d007      	beq.n	80048bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	d14b      	bne.n	800495e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_Transmit+0xf6>
 80048ce:	8afb      	ldrh	r3, [r7, #22]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d13e      	bne.n	8004952 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f8:	e02b      	b.n	8004952 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d112      	bne.n	800492e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
 800492c:	e011      	b.n	8004952 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492e:	f7fd f979 	bl	8001c24 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d803      	bhi.n	8004946 <HAL_SPI_Transmit+0x168>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d102      	bne.n	800494c <HAL_SPI_Transmit+0x16e>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004950:	e074      	b.n	8004a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ce      	bne.n	80048fa <HAL_SPI_Transmit+0x11c>
 800495c:	e04c      	b.n	80049f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_SPI_Transmit+0x18e>
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d140      	bne.n	80049ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004992:	e02c      	b.n	80049ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d113      	bne.n	80049ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	7812      	ldrb	r2, [r2, #0]
 80049ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c8:	e011      	b.n	80049ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ca:	f7fd f92b 	bl	8001c24 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d803      	bhi.n	80049e2 <HAL_SPI_Transmit+0x204>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_Transmit+0x20a>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049ec:	e026      	b.n	8004a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1cd      	bne.n	8004994 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fbcb 	bl	8005198 <SPI_EndRxTxTransaction>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e000      	b.n	8004a3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af02      	add	r7, sp, #8
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d112      	bne.n	8004a9a <HAL_SPI_Receive+0x44>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2204      	movs	r2, #4
 8004a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8f1 	bl	8004c78 <HAL_SPI_TransmitReceive>
 8004a96:	4603      	mov	r3, r0
 8004a98:	e0ea      	b.n	8004c70 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_SPI_Receive+0x52>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0e3      	b.n	8004c70 <HAL_SPI_Receive+0x21a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab0:	f7fd f8b8 	bl	8001c24 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ac6:	e0ca      	b.n	8004c5e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Receive+0x7e>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad8:	e0c1      	b.n	8004c5e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2204      	movs	r2, #4
 8004ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d10f      	bne.n	8004b42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d007      	beq.n	8004b60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d162      	bne.n	8004c2e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b68:	e02e      	b.n	8004bc8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d115      	bne.n	8004ba4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f103 020c 	add.w	r2, r3, #12
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba2:	e011      	b.n	8004bc8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba4:	f7fd f83e 	bl	8001c24 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d803      	bhi.n	8004bbc <HAL_SPI_Receive+0x166>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d102      	bne.n	8004bc2 <HAL_SPI_Receive+0x16c>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bc6:	e04a      	b.n	8004c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1cb      	bne.n	8004b6a <HAL_SPI_Receive+0x114>
 8004bd2:	e031      	b.n	8004c38 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d113      	bne.n	8004c0a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	b292      	uxth	r2, r2
 8004bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c08:	e011      	b.n	8004c2e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0a:	f7fd f80b 	bl	8001c24 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d803      	bhi.n	8004c22 <HAL_SPI_Receive+0x1cc>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d102      	bne.n	8004c28 <HAL_SPI_Receive+0x1d2>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c2c:	e017      	b.n	8004c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1cd      	bne.n	8004bd4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa45 	bl	80050cc <SPI_EndRxTransaction>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
 8004c5a:	e000      	b.n	8004c5e <HAL_SPI_Receive+0x208>
  }

error :
 8004c5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c86:	2301      	movs	r3, #1
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x26>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e18a      	b.n	8004fb4 <HAL_SPI_TransmitReceive+0x33c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ca6:	f7fc ffbd 	bl	8001c24 <HAL_GetTick>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d00f      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x70>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cce:	d107      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x68>
 8004cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d003      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ce6:	e15b      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x82>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x82>
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d00:	e14e      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d003      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2205      	movs	r2, #5
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	887a      	ldrh	r2, [r7, #2]
 8004d3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d007      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d178      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x10a>
 8004d7c:	8b7b      	ldrh	r3, [r7, #26]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d166      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	881a      	ldrh	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	1c9a      	adds	r2, r3, #2
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da6:	e053      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d11b      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x176>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d016      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x176>
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d113      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d119      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x1b8>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	b292      	uxth	r2, r2
 8004e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e30:	f7fc fef8 	bl	8001c24 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d807      	bhi.n	8004e50 <HAL_SPI_TransmitReceive+0x1d8>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d003      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e4e:	e0a7      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1a6      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x130>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1a1      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x130>
 8004e64:	e07c      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x1fc>
 8004e6e:	8b7b      	ldrh	r3, [r7, #26]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d16b      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e9a:	e057      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d11c      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x26c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x26c>
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d114      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d119      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x2ae>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d014      	beq.n	8004f26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f22:	2301      	movs	r3, #1
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f26:	f7fc fe7d 	bl	8001c24 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d803      	bhi.n	8004f3e <HAL_SPI_TransmitReceive+0x2c6>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d102      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x2cc>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f4a:	e029      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1a2      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x224>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d19d      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f917 	bl	8005198 <SPI_EndRxTxTransaction>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f7c:	e010      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	e000      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3730      	adds	r7, #48	; 0x30
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fcc:	f7fc fe2a 	bl	8001c24 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	4413      	add	r3, r2
 8004fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fdc:	f7fc fe22 	bl	8001c24 <HAL_GetTick>
 8004fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fe2:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	0d1b      	lsrs	r3, r3, #20
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff2:	e054      	b.n	800509e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d050      	beq.n	800509e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffc:	f7fc fe12 	bl	8001c24 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	429a      	cmp	r2, r3
 800500a:	d902      	bls.n	8005012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d13d      	bne.n	800508e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502a:	d111      	bne.n	8005050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	d004      	beq.n	8005040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	d107      	bne.n	8005050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d10f      	bne.n	800507a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e017      	b.n	80050be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3b01      	subs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d19b      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000000 	.word	0x20000000

080050cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e0:	d111      	bne.n	8005106 <SPI_EndRxTransaction+0x3a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ea:	d004      	beq.n	80050f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f4:	d107      	bne.n	8005106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d12a      	bne.n	8005166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005118:	d012      	beq.n	8005140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff49 	bl	8004fbc <SPI_WaitFlagStateUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02d      	beq.n	800518c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e026      	b.n	800518e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	2101      	movs	r1, #1
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff ff36 	bl	8004fbc <SPI_WaitFlagStateUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01a      	beq.n	800518c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e013      	b.n	800518e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	2101      	movs	r1, #1
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ff23 	bl	8004fbc <SPI_WaitFlagStateUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e000      	b.n	800518e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <SPI_EndRxTxTransaction+0x7c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <SPI_EndRxTxTransaction+0x80>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	0d5b      	lsrs	r3, r3, #21
 80051b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051b4:	fb02 f303 	mul.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c2:	d112      	bne.n	80051ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2200      	movs	r2, #0
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fef4 	bl	8004fbc <SPI_WaitFlagStateUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e00f      	b.n	800520a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b80      	cmp	r3, #128	; 0x80
 8005202:	d0f2      	beq.n	80051ea <SPI_EndRxTxTransaction+0x52>
 8005204:	e000      	b.n	8005208 <SPI_EndRxTxTransaction+0x70>
        break;
 8005206:	bf00      	nop
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000000 	.word	0x20000000
 8005218:	165e9f81 	.word	0x165e9f81

0800521c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fb58 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 f9ce 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e04e      	b.n	8005372 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_TIM_Base_Start_IT+0xc4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d01d      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <HAL_TIM_Base_Start_IT+0xc8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <HAL_TIM_Base_Start_IT+0xcc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_TIM_Base_Start_IT+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_TIM_Base_Start_IT+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <HAL_TIM_Base_Start_IT+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_TIM_Base_Start_IT+0xdc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0202 	mvn.w	r2, #2
 80053c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8ee 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8e0 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8f1 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8c4 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8b6 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f8c7 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b08      	cmp	r3, #8
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0208 	mvn.w	r2, #8
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f89a 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f88c 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f89d 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0210 	mvn.w	r2, #16
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2208      	movs	r2, #8
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f870 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f862 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f873 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0201 	mvn.w	r2, #1
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fff0 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f902 	bl	8005750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f838 	bl	80055e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0220 	mvn.w	r2, #32
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8cc 	bl	800573c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a40      	ldr	r2, [pc, #256]	; (8005710 <TIM_Base_SetConfig+0x114>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d00f      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a3d      	ldr	r2, [pc, #244]	; (8005714 <TIM_Base_SetConfig+0x118>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00b      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a3c      	ldr	r2, [pc, #240]	; (8005718 <TIM_Base_SetConfig+0x11c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d007      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a3b      	ldr	r2, [pc, #236]	; (800571c <TIM_Base_SetConfig+0x120>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3a      	ldr	r2, [pc, #232]	; (8005720 <TIM_Base_SetConfig+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <TIM_Base_SetConfig+0x114>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565c:	d027      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a2c      	ldr	r2, [pc, #176]	; (8005714 <TIM_Base_SetConfig+0x118>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d023      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <TIM_Base_SetConfig+0x11c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2a      	ldr	r2, [pc, #168]	; (800571c <TIM_Base_SetConfig+0x120>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a29      	ldr	r2, [pc, #164]	; (8005720 <TIM_Base_SetConfig+0x124>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a28      	ldr	r2, [pc, #160]	; (8005724 <TIM_Base_SetConfig+0x128>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a27      	ldr	r2, [pc, #156]	; (8005728 <TIM_Base_SetConfig+0x12c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a26      	ldr	r2, [pc, #152]	; (800572c <TIM_Base_SetConfig+0x130>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a25      	ldr	r2, [pc, #148]	; (8005730 <TIM_Base_SetConfig+0x134>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a24      	ldr	r2, [pc, #144]	; (8005734 <TIM_Base_SetConfig+0x138>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <TIM_Base_SetConfig+0x13c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <TIM_Base_SetConfig+0x114>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0xf8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <TIM_Base_SetConfig+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d103      	bne.n	80056fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	615a      	str	r2, [r3, #20]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40010400 	.word	0x40010400
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400
 800572c:	40014800 	.word	0x40014800
 8005730:	40001800 	.word	0x40001800
 8005734:	40001c00 	.word	0x40001c00
 8005738:	40002000 	.word	0x40002000

0800573c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e03f      	b.n	80057f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc f8dc 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	; 0x24
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9a7 	bl	8005afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08a      	sub	sp, #40	; 0x28
 8005802:	af02      	add	r7, sp, #8
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b20      	cmp	r3, #32
 800581c:	d17c      	bne.n	8005918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_UART_Transmit+0x2c>
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e075      	b.n	800591a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_UART_Transmit+0x3e>
 8005838:	2302      	movs	r3, #2
 800583a:	e06e      	b.n	800591a <HAL_UART_Transmit+0x11c>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2221      	movs	r2, #33	; 0x21
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005852:	f7fc f9e7 	bl	8001c24 <HAL_GetTick>
 8005856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d108      	bne.n	8005880 <HAL_UART_Transmit+0x82>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e003      	b.n	8005888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005890:	e02a      	b.n	80058e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f8e2 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e036      	b.n	800591a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	3302      	adds	r3, #2
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	e007      	b.n	80058da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1cf      	bne.n	8005892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f8b2 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e006      	b.n	800591a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b08a      	sub	sp, #40	; 0x28
 8005926:	af02      	add	r7, sp, #8
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b20      	cmp	r3, #32
 8005940:	f040 808c 	bne.w	8005a5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_UART_Receive+0x2e>
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e084      	b.n	8005a5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_UART_Receive+0x40>
 800595e:	2302      	movs	r3, #2
 8005960:	e07d      	b.n	8005a5e <HAL_UART_Receive+0x13c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2222      	movs	r2, #34	; 0x22
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597e:	f7fc f951 	bl	8001c24 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005998:	d108      	bne.n	80059ac <HAL_UART_Receive+0x8a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	e003      	b.n	80059b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80059bc:	e043      	b.n	8005a46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2120      	movs	r1, #32
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f84c 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e042      	b.n	8005a5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	3302      	adds	r3, #2
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	e01f      	b.n	8005a38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a00:	d007      	beq.n	8005a12 <HAL_UART_Receive+0xf0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <HAL_UART_Receive+0xfe>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e008      	b.n	8005a32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1b6      	bne.n	80059be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e02c      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d028      	beq.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	f7fc f8cd 	bl	8001c24 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d21d      	bcs.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aa4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e00f      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d0c3      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	b09f      	sub	sp, #124	; 0x7c
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	68d9      	ldr	r1, [r3, #12]
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	ea40 0301 	orr.w	r3, r0, r1
 8005b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b40:	f021 010c 	bic.w	r1, r1, #12
 8005b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5a:	6999      	ldr	r1, [r3, #24]
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	ea40 0301 	orr.w	r3, r0, r1
 8005b64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4bc5      	ldr	r3, [pc, #788]	; (8005e80 <UART_SetConfig+0x384>)
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d004      	beq.n	8005b7a <UART_SetConfig+0x7e>
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4bc3      	ldr	r3, [pc, #780]	; (8005e84 <UART_SetConfig+0x388>)
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d103      	bne.n	8005b82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b7a:	f7fd fde7 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8005b7e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b82:	f7fd fdcf 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8005b86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b90:	f040 80b6 	bne.w	8005d00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	461c      	mov	r4, r3
 8005b98:	f04f 0500 	mov.w	r5, #0
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bac:	1912      	adds	r2, r2, r4
 8005bae:	eb45 0303 	adc.w	r3, r5, r3
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bc0:	00d0      	lsls	r0, r2, #3
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	1911      	adds	r1, r2, r4
 8005bc8:	6639      	str	r1, [r7, #96]	; 0x60
 8005bca:	416b      	adcs	r3, r5
 8005bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005be4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005be8:	f7fa fb1a 	bl	8000220 <__aeabi_uldivmod>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4ba5      	ldr	r3, [pc, #660]	; (8005e88 <UART_SetConfig+0x38c>)
 8005bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	011e      	lsls	r6, r3, #4
 8005bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfc:	461c      	mov	r4, r3
 8005bfe:	f04f 0500 	mov.w	r5, #0
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	1891      	adds	r1, r2, r2
 8005c08:	6339      	str	r1, [r7, #48]	; 0x30
 8005c0a:	415b      	adcs	r3, r3
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c12:	1912      	adds	r2, r2, r4
 8005c14:	eb45 0303 	adc.w	r3, r5, r3
 8005c18:	f04f 0000 	mov.w	r0, #0
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	00d9      	lsls	r1, r3, #3
 8005c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c26:	00d0      	lsls	r0, r2, #3
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	1911      	adds	r1, r2, r4
 8005c2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c30:	416b      	adcs	r3, r5
 8005c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	1891      	adds	r1, r2, r2
 8005c40:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c42:	415b      	adcs	r3, r3
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c4e:	f7fa fae7 	bl	8000220 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4b8c      	ldr	r3, [pc, #560]	; (8005e88 <UART_SetConfig+0x38c>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	; 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a87      	ldr	r2, [pc, #540]	; (8005e88 <UART_SetConfig+0x38c>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c78:	441e      	add	r6, r3
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	1894      	adds	r4, r2, r2
 8005c88:	623c      	str	r4, [r7, #32]
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c92:	1812      	adds	r2, r2, r0
 8005c94:	eb41 0303 	adc.w	r3, r1, r3
 8005c98:	f04f 0400 	mov.w	r4, #0
 8005c9c:	f04f 0500 	mov.w	r5, #0
 8005ca0:	00dd      	lsls	r5, r3, #3
 8005ca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca6:	00d4      	lsls	r4, r2, #3
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	1814      	adds	r4, r2, r0
 8005cae:	653c      	str	r4, [r7, #80]	; 0x50
 8005cb0:	414b      	adcs	r3, r1
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	1891      	adds	r1, r2, r2
 8005cc0:	61b9      	str	r1, [r7, #24]
 8005cc2:	415b      	adcs	r3, r3
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005cce:	f7fa faa7 	bl	8000220 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b6c      	ldr	r3, [pc, #432]	; (8005e88 <UART_SetConfig+0x38c>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a67      	ldr	r2, [pc, #412]	; (8005e88 <UART_SetConfig+0x38c>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 0207 	and.w	r2, r3, #7
 8005cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4432      	add	r2, r6
 8005cfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cfe:	e0b9      	b.n	8005e74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d02:	461c      	mov	r4, r3
 8005d04:	f04f 0500 	mov.w	r5, #0
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	6139      	str	r1, [r7, #16]
 8005d10:	415b      	adcs	r3, r3
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d18:	1912      	adds	r2, r2, r4
 8005d1a:	eb45 0303 	adc.w	r3, r5, r3
 8005d1e:	f04f 0000 	mov.w	r0, #0
 8005d22:	f04f 0100 	mov.w	r1, #0
 8005d26:	00d9      	lsls	r1, r3, #3
 8005d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d2c:	00d0      	lsls	r0, r2, #3
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	eb12 0804 	adds.w	r8, r2, r4
 8005d36:	eb43 0905 	adc.w	r9, r3, r5
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d52:	0082      	lsls	r2, r0, #2
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fa62 	bl	8000220 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4b49      	ldr	r3, [pc, #292]	; (8005e88 <UART_SetConfig+0x38c>)
 8005d62:	fba3 2302 	umull	r2, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	011e      	lsls	r6, r3, #4
 8005d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	1894      	adds	r4, r2, r2
 8005d78:	60bc      	str	r4, [r7, #8]
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d82:	1812      	adds	r2, r2, r0
 8005d84:	eb41 0303 	adc.w	r3, r1, r3
 8005d88:	f04f 0400 	mov.w	r4, #0
 8005d8c:	f04f 0500 	mov.w	r5, #0
 8005d90:	00dd      	lsls	r5, r3, #3
 8005d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d96:	00d4      	lsls	r4, r2, #3
 8005d98:	4622      	mov	r2, r4
 8005d9a:	462b      	mov	r3, r5
 8005d9c:	1814      	adds	r4, r2, r0
 8005d9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005da0:	414b      	adcs	r3, r1
 8005da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	008b      	lsls	r3, r1, #2
 8005db8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dbc:	0082      	lsls	r2, r0, #2
 8005dbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dc2:	f7fa fa2d 	bl	8000220 <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <UART_SetConfig+0x38c>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	2164      	movs	r1, #100	; 0x64
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	3332      	adds	r3, #50	; 0x32
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <UART_SetConfig+0x38c>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dea:	441e      	add	r6, r3
 8005dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dee:	4618      	mov	r0, r3
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	1894      	adds	r4, r2, r2
 8005dfa:	603c      	str	r4, [r7, #0]
 8005dfc:	415b      	adcs	r3, r3
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e04:	1812      	adds	r2, r2, r0
 8005e06:	eb41 0303 	adc.w	r3, r1, r3
 8005e0a:	f04f 0400 	mov.w	r4, #0
 8005e0e:	f04f 0500 	mov.w	r5, #0
 8005e12:	00dd      	lsls	r5, r3, #3
 8005e14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e18:	00d4      	lsls	r4, r2, #3
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	eb12 0a00 	adds.w	sl, r2, r0
 8005e22:	eb43 0b01 	adc.w	fp, r3, r1
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	008b      	lsls	r3, r1, #2
 8005e3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e3e:	0082      	lsls	r2, r0, #2
 8005e40:	4650      	mov	r0, sl
 8005e42:	4659      	mov	r1, fp
 8005e44:	f7fa f9ec 	bl	8000220 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <UART_SetConfig+0x38c>)
 8005e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2164      	movs	r1, #100	; 0x64
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	3332      	adds	r3, #50	; 0x32
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <UART_SetConfig+0x38c>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4432      	add	r2, r6
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	377c      	adds	r7, #124	; 0x7c
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	bf00      	nop
 8005e80:	40011000 	.word	0x40011000
 8005e84:	40011400 	.word	0x40011400
 8005e88:	51eb851f 	.word	0x51eb851f

08005e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	f107 001c 	add.w	r0, r7, #28
 8005e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d122      	bne.n	8005eea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fac0 	bl	8007464 <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
 8005ee8:	e01a      	b.n	8005f20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fab4 	bl	8007464 <USB_CoreReset>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
 8005f12:	e005      	b.n	8005f20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10b      	bne.n	8005f3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f043 0206 	orr.w	r2, r3, #6
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4a:	b004      	add	sp, #16
 8005f4c:	4770      	bx	lr
	...

08005f50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d165      	bne.n	8006030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a41      	ldr	r2, [pc, #260]	; (800606c <USB_SetTurnaroundTime+0x11c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d906      	bls.n	8005f7a <USB_SetTurnaroundTime+0x2a>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	; (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d202      	bcs.n	8005f7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f74:	230f      	movs	r3, #15
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e062      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d306      	bcc.n	8005f90 <USB_SetTurnaroundTime+0x40>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d202      	bcs.n	8005f90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f8a:	230e      	movs	r3, #14
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e057      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a38      	ldr	r2, [pc, #224]	; (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d306      	bcc.n	8005fa6 <USB_SetTurnaroundTime+0x56>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <USB_SetTurnaroundTime+0x128>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d202      	bcs.n	8005fa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e04c      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a33      	ldr	r2, [pc, #204]	; (8006078 <USB_SetTurnaroundTime+0x128>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d306      	bcc.n	8005fbc <USB_SetTurnaroundTime+0x6c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a32      	ldr	r2, [pc, #200]	; (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d802      	bhi.n	8005fbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e041      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	; (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0x82>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a2e      	ldr	r2, [pc, #184]	; (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d802      	bhi.n	8005fd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fcc:	230b      	movs	r3, #11
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e036      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d906      	bls.n	8005fe8 <USB_SetTurnaroundTime+0x98>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a29      	ldr	r2, [pc, #164]	; (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d802      	bhi.n	8005fe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e02b      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a26      	ldr	r2, [pc, #152]	; (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d906      	bls.n	8005ffe <USB_SetTurnaroundTime+0xae>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a25      	ldr	r2, [pc, #148]	; (8006088 <USB_SetTurnaroundTime+0x138>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e020      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a21      	ldr	r2, [pc, #132]	; (8006088 <USB_SetTurnaroundTime+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0xc4>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a20      	ldr	r2, [pc, #128]	; (800608c <USB_SetTurnaroundTime+0x13c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d802      	bhi.n	8006014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800600e:	2308      	movs	r3, #8
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e015      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a1d      	ldr	r2, [pc, #116]	; (800608c <USB_SetTurnaroundTime+0x13c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0xda>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <USB_SetTurnaroundTime+0x140>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d202      	bcs.n	800602a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006024:	2307      	movs	r3, #7
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e00a      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800602a:	2306      	movs	r3, #6
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e007      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006036:	2309      	movs	r3, #9
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e001      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800603c:	2309      	movs	r3, #9
 800603e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	00d8acbf 	.word	0x00d8acbf
 8006070:	00e4e1c0 	.word	0x00e4e1c0
 8006074:	00f42400 	.word	0x00f42400
 8006078:	01067380 	.word	0x01067380
 800607c:	011a499f 	.word	0x011a499f
 8006080:	01312cff 	.word	0x01312cff
 8006084:	014ca43f 	.word	0x014ca43f
 8006088:	016e3600 	.word	0x016e3600
 800608c:	01a6ab1f 	.word	0x01a6ab1f
 8006090:	01e84800 	.word	0x01e84800

08006094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d106      	bne.n	8006104 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e00b      	b.n	800611c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	e001      	b.n	800611c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e003      	b.n	8006124 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800611c:	2032      	movs	r0, #50	; 0x32
 800611e:	f7fb fd8d 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800612c:	b084      	sub	sp, #16
 800612e:	b580      	push	{r7, lr}
 8006130:	b086      	sub	sp, #24
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800613a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e009      	b.n	8006160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3340      	adds	r3, #64	; 0x40
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	2200      	movs	r2, #0
 8006158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3301      	adds	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b0e      	cmp	r3, #14
 8006164:	d9f2      	bls.n	800614c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11c      	bne.n	80061a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e005      	b.n	80061b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b8:	461a      	mov	r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	4619      	mov	r1, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	461a      	mov	r2, r3
 80061ce:	680b      	ldr	r3, [r1, #0]
 80061d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10c      	bne.n	80061f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061de:	2100      	movs	r1, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f949 	bl	8006478 <USB_SetDevSpeed>
 80061e6:	e008      	b.n	80061fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061e8:	2101      	movs	r1, #1
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f944 	bl	8006478 <USB_SetDevSpeed>
 80061f0:	e003      	b.n	80061fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061f2:	2103      	movs	r1, #3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f93f 	bl	8006478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061fa:	2110      	movs	r1, #16
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8f3 	bl	80063e8 <USB_FlushTxFifo>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f911 	bl	8006434 <USB_FlushRxFifo>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	461a      	mov	r2, r3
 8006224:	2300      	movs	r3, #0
 8006226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e043      	b.n	80062ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625c:	d118      	bne.n	8006290 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	461a      	mov	r2, r3
 8006272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	e013      	b.n	80062a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	461a      	mov	r2, r3
 8006288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e008      	b.n	80062a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	461a      	mov	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	461a      	mov	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	461a      	mov	r2, r3
 80062c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3301      	adds	r3, #1
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d3b7      	bcc.n	8006246 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e043      	b.n	8006364 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f2:	d118      	bne.n	8006326 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e013      	b.n	8006338 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e008      	b.n	8006338 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	461a      	mov	r2, r3
 8006346:	2300      	movs	r3, #0
 8006348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	461a      	mov	r2, r3
 8006358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800635c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d3b7      	bcc.n	80062dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800637a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800638c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f043 0210 	orr.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <USB_DevInit+0x2b8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f043 0208 	orr.w	r2, r3, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d107      	bne.n	80063d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063cc:	f043 0304 	orr.w	r3, r3, #4
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e0:	b004      	add	sp, #16
 80063e2:	4770      	bx	lr
 80063e4:	803c3800 	.word	0x803c3800

080063e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	019b      	lsls	r3, r3, #6
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a09      	ldr	r2, [pc, #36]	; (8006430 <USB_FlushTxFifo+0x48>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d901      	bls.n	8006414 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e006      	b.n	8006422 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b20      	cmp	r3, #32
 800641e:	d0f0      	beq.n	8006402 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	00030d40 	.word	0x00030d40

08006434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2210      	movs	r2, #16
 8006444:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a09      	ldr	r2, [pc, #36]	; (8006474 <USB_FlushRxFifo+0x40>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d901      	bls.n	8006458 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e006      	b.n	8006466 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b10      	cmp	r3, #16
 8006462:	d0f0      	beq.n	8006446 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	00030d40 	.word	0x00030d40

08006478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0306 	and.w	r3, r3, #6
 80064c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
 80064ce:	e00a      	b.n	80064e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d002      	beq.n	80064dc <USB_GetDevSpeed+0x32>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b06      	cmp	r3, #6
 80064da:	d102      	bne.n	80064e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064dc:	2302      	movs	r3, #2
 80064de:	75fb      	strb	r3, [r7, #23]
 80064e0:	e001      	b.n	80064e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064e2:	230f      	movs	r3, #15
 80064e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d13a      	bne.n	8006586 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2101      	movs	r1, #1
 8006522:	fa01 f303 	lsl.w	r3, r1, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652e:	4313      	orrs	r3, r2
 8006530:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d155      	bne.n	80065f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006564:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800656c:	4313      	orrs	r3, r2
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e036      	b.n	80065f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	2101      	movs	r1, #1
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11a      	bne.n	80065f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065da:	430b      	orrs	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d161      	bne.n	80066e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006636:	d11f      	bne.n	8006678 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	b29b      	uxth	r3, r3
 8006690:	43db      	mvns	r3, r3
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006698:	4013      	ands	r3, r2
 800669a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066bc:	4013      	ands	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	0159      	lsls	r1, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	440b      	add	r3, r1
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	4619      	mov	r1, r3
 80066dc:	4b35      	ldr	r3, [pc, #212]	; (80067b4 <USB_DeactivateEndpoint+0x1b0>)
 80066de:	4013      	ands	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
 80066e2:	e060      	b.n	80067a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fa:	d11f      	bne.n	800673c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800671a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	440a      	add	r2, r1
 8006732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	2101      	movs	r1, #1
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	041b      	lsls	r3, r3, #16
 8006754:	43db      	mvns	r3, r3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800675c:	4013      	ands	r3, r2
 800675e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2101      	movs	r1, #1
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	43db      	mvns	r3, r3
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006780:	4013      	ands	r3, r2
 8006782:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0159      	lsls	r1, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	440b      	add	r3, r1
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	4619      	mov	r1, r3
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <USB_DeactivateEndpoint+0x1b4>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	ec337800 	.word	0xec337800
 80067b8:	eff37800 	.word	0xeff37800

080067bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4613      	mov	r3, r2
 80067c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 815c 	bne.w	8006a96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d132      	bne.n	800684c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006800:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006804:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	440a      	add	r2, r1
 8006840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006844:	0cdb      	lsrs	r3, r3, #19
 8006846:	04db      	lsls	r3, r3, #19
 8006848:	6113      	str	r3, [r2, #16]
 800684a:	e074      	b.n	8006936 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	0cdb      	lsrs	r3, r3, #19
 8006868:	04db      	lsls	r3, r3, #19
 800686a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800688a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800688e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6959      	ldr	r1, [r3, #20]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	440b      	add	r3, r1
 80068a8:	1e59      	subs	r1, r3, #1
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b2:	04d9      	lsls	r1, r3, #19
 80068b4:	4b9d      	ldr	r3, [pc, #628]	; (8006b2c <USB_EPStartXfer+0x370>)
 80068b6:	400b      	ands	r3, r1
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	0148      	lsls	r0, r1, #5
 80068bc:	69f9      	ldr	r1, [r7, #28]
 80068be:	4401      	add	r1, r0
 80068c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068c4:	4313      	orrs	r3, r2
 80068c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068de:	69b9      	ldr	r1, [r7, #24]
 80068e0:	0148      	lsls	r0, r1, #5
 80068e2:	69f9      	ldr	r1, [r7, #28]
 80068e4:	4401      	add	r1, r0
 80068e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	78db      	ldrb	r3, [r3, #3]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d11f      	bne.n	8006936 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006910:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006914:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006934:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d14b      	bne.n	80069d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d128      	bne.n	80069b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d110      	bne.n	8006992 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e00f      	b.n	80069b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e12f      	b.n	8006c34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	78db      	ldrb	r3, [r3, #3]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d015      	beq.n	8006a28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8117 	beq.w	8006c34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	2101      	movs	r1, #1
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	69f9      	ldr	r1, [r7, #28]
 8006a1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a22:	4313      	orrs	r3, r2
 8006a24:	634b      	str	r3, [r1, #52]	; 0x34
 8006a26:	e105      	b.n	8006c34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d110      	bne.n	8006a5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e00f      	b.n	8006a7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	68d9      	ldr	r1, [r3, #12]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	b298      	uxth	r0, r3
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fa2b 	bl	8006eea <USB_WritePacket>
 8006a94:	e0ce      	b.n	8006c34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	0cdb      	lsrs	r3, r3, #19
 8006ab2:	04db      	lsls	r3, r3, #19
 8006ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ad8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d126      	bne.n	8006b30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af8:	69b9      	ldr	r1, [r7, #24]
 8006afa:	0148      	lsls	r0, r1, #5
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	4401      	add	r1, r0
 8006b00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b04:	4313      	orrs	r3, r2
 8006b06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b26:	6113      	str	r3, [r2, #16]
 8006b28:	e036      	b.n	8006b98 <USB_EPStartXfer+0x3dc>
 8006b2a:	bf00      	nop
 8006b2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4413      	add	r3, r2
 8006b3a:	1e5a      	subs	r2, r3, #1
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	8afb      	ldrh	r3, [r7, #22]
 8006b56:	04d9      	lsls	r1, r3, #19
 8006b58:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <USB_EPStartXfer+0x484>)
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	0148      	lsls	r0, r1, #5
 8006b60:	69f9      	ldr	r1, [r7, #28]
 8006b62:	4401      	add	r1, r0
 8006b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	8af9      	ldrh	r1, [r7, #22]
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	0148      	lsls	r0, r1, #5
 8006b8c:	69f9      	ldr	r1, [r7, #28]
 8006b8e:	4401      	add	r1, r0
 8006b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b94:	4313      	orrs	r3, r2
 8006b96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d10d      	bne.n	8006bba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d128      	bne.n	8006c14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d110      	bne.n	8006bf4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e00f      	b.n	8006c14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	1ff80000 	.word	0x1ff80000

08006c44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 80cd 	bne.w	8006e00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d132      	bne.n	8006cd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	0cdb      	lsrs	r3, r3, #19
 8006cce:	04db      	lsls	r3, r3, #19
 8006cd0:	6113      	str	r3, [r2, #16]
 8006cd2:	e04e      	b.n	8006d72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	0cdb      	lsrs	r3, r3, #19
 8006cf0:	04db      	lsls	r3, r3, #19
 8006cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d903      	bls.n	8006d2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	0148      	lsls	r0, r1, #5
 8006d66:	6979      	ldr	r1, [r7, #20]
 8006d68:	4401      	add	r1, r0
 8006d6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d11e      	bne.n	8006db6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e092      	b.n	8006edc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d07e      	beq.n	8006edc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	2101      	movs	r1, #1
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	634b      	str	r3, [r1, #52]	; 0x34
 8006dfe:	e06d      	b.n	8006edc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1a:	0cdb      	lsrs	r3, r3, #19
 8006e1c:	04db      	lsls	r3, r3, #19
 8006e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	0151      	lsls	r1, r2, #5
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	440a      	add	r2, r1
 8006e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e8a:	6939      	ldr	r1, [r7, #16]
 8006e8c:	0148      	lsls	r0, r1, #5
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	4401      	add	r1, r0
 8006e92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e96:	4313      	orrs	r3, r2
 8006e98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10d      	bne.n	8006ebc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68d9      	ldr	r1, [r3, #12]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	460a      	mov	r2, r1
 8006eba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b089      	sub	sp, #36	; 0x24
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	460b      	mov	r3, r1
 8006efa:	71fb      	strb	r3, [r7, #7]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006f08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11a      	bne.n	8006f46 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f10:	88bb      	ldrh	r3, [r7, #4]
 8006f12:	3303      	adds	r3, #3
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e00f      	b.n	8006f3e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	031a      	lsls	r2, r3, #12
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	3304      	adds	r3, #4
 8006f36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d3eb      	bcc.n	8006f1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3724      	adds	r7, #36	; 0x24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	3303      	adds	r3, #3
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e00b      	b.n	8006f90 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	3304      	adds	r3, #4
 8006f88:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3ef      	bcc.n	8006f78 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006f98:	69fb      	ldr	r3, [r7, #28]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3724      	adds	r7, #36	; 0x24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d12c      	bne.n	800701c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db12      	blt.n	8006ffa <USB_EPSetStall+0x54>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ff8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e02b      	b.n	8007074 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	db12      	blt.n	8007054 <USB_EPSetStall+0xae>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007052:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d128      	bne.n	80070f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	78db      	ldrb	r3, [r3, #3]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d003      	beq.n	80070ce <USB_EPClearStall+0x4c>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	78db      	ldrb	r3, [r3, #3]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d138      	bne.n	8007140 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e027      	b.n	8007140 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800710e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	78db      	ldrb	r3, [r3, #3]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d003      	beq.n	8007120 <USB_EPClearStall+0x9e>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	78db      	ldrb	r3, [r3, #3]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d10f      	bne.n	8007140 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800713e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007170:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071b4:	f023 0303 	bic.w	r3, r3, #3
 80071b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c8:	f023 0302 	bic.w	r3, r3, #2
 80071cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4013      	ands	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4013      	ands	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	0c1b      	lsrs	r3, r3, #16
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	4013      	ands	r3, r2
 800729a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	b29b      	uxth	r3, r3
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072da:	68bb      	ldr	r3, [r7, #8]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
 8007318:	01db      	lsls	r3, r3, #7
 800731a:	b2db      	uxtb	r3, r3
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4013      	ands	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007336:	68bb      	ldr	r3, [r7, #8]
}
 8007338:	4618      	mov	r0, r3
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	460b      	mov	r3, r1
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	333c      	adds	r3, #60	; 0x3c
 80073be:	3304      	adds	r3, #4
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <USB_EP0_OutStart+0xb8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d90a      	bls.n	80073e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073dc:	d101      	bne.n	80073e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e037      	b.n	8007452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	461a      	mov	r2, r3
 80073ea:	2300      	movs	r3, #0
 80073ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007410:	f043 0318 	orr.w	r3, r3, #24
 8007414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10f      	bne.n	8007450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800744e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	4f54300a 	.word	0x4f54300a

08007464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <USB_CoreReset+0x64>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e01b      	b.n	80074ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	daf2      	bge.n	8007470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <USB_CoreReset+0x64>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d0f0      	beq.n	800749a <USB_CoreReset+0x36>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	00030d40 	.word	0x00030d40

080074cc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80074d8:	2010      	movs	r0, #16
 80074da:	f004 fd2b 	bl	800bf34 <USBD_static_malloc>
 80074de:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e01b      	b.n	800752a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7c1b      	ldrb	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2207      	movs	r2, #7
 8007506:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007508:	e002      	b.n	8007510 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220a      	movs	r2, #10
 800750e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007510:	2304      	movs	r3, #4
 8007512:	2203      	movs	r2, #3
 8007514:	2181      	movs	r1, #129	; 0x81
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f004 fbad 	bl	800bc76 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800753e:	2181      	movs	r1, #129	; 0x81
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f004 fbbe 	bl	800bcc2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007562:	4618      	mov	r0, r3
 8007564:	f004 fcf4 	bl	800bf50 <USBD_static_free>
    pdev->pClassData = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e0e8      	b.n	8007772 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d046      	beq.n	800763a <USBD_HID_Setup+0xbe>
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	f040 80d8 	bne.w	8007762 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	3b02      	subs	r3, #2
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	d836      	bhi.n	800762a <USBD_HID_Setup+0xae>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_HID_Setup+0x48>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	0800761b 	.word	0x0800761b
 80075c8:	080075fb 	.word	0x080075fb
 80075cc:	0800762b 	.word	0x0800762b
 80075d0:	0800762b 	.word	0x0800762b
 80075d4:	0800762b 	.word	0x0800762b
 80075d8:	0800762b 	.word	0x0800762b
 80075dc:	0800762b 	.word	0x0800762b
 80075e0:	0800762b 	.word	0x0800762b
 80075e4:	08007609 	.word	0x08007609
 80075e8:	080075ed 	.word	0x080075ed
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	885b      	ldrh	r3, [r3, #2]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]
          break;
 80075f8:	e01e      	b.n	8007638 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fa4c 	bl	8008a9e <USBD_CtlSendData>
          break;
 8007606:	e017      	b.n	8007638 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b29b      	uxth	r3, r3
 8007610:	b2db      	uxtb	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]
          break;
 8007618:	e00e      	b.n	8007638 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3304      	adds	r3, #4
 800761e:	2201      	movs	r2, #1
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fa3b 	bl	8008a9e <USBD_CtlSendData>
          break;
 8007628:	e006      	b.n	8007638 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f9c5 	bl	80089bc <USBD_CtlError>
          ret = USBD_FAIL;
 8007632:	2303      	movs	r3, #3
 8007634:	75fb      	strb	r3, [r7, #23]
          break;
 8007636:	bf00      	nop
      }
      break;
 8007638:	e09a      	b.n	8007770 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b0b      	cmp	r3, #11
 8007640:	f200 8086 	bhi.w	8007750 <USBD_HID_Setup+0x1d4>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <USBD_HID_Setup+0xd0>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	0800767d 	.word	0x0800767d
 8007650:	0800775f 	.word	0x0800775f
 8007654:	08007751 	.word	0x08007751
 8007658:	08007751 	.word	0x08007751
 800765c:	08007751 	.word	0x08007751
 8007660:	08007751 	.word	0x08007751
 8007664:	080076a7 	.word	0x080076a7
 8007668:	08007751 	.word	0x08007751
 800766c:	08007751 	.word	0x08007751
 8007670:	08007751 	.word	0x08007751
 8007674:	080076ff 	.word	0x080076ff
 8007678:	08007729 	.word	0x08007729
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b03      	cmp	r3, #3
 8007686:	d107      	bne.n	8007698 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007688:	f107 030a 	add.w	r3, r7, #10
 800768c:	2202      	movs	r2, #2
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fa04 	bl	8008a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007696:	e063      	b.n	8007760 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f98e 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	75fb      	strb	r3, [r7, #23]
          break;
 80076a4:	e05c      	b.n	8007760 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	885b      	ldrh	r3, [r3, #2]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b22      	cmp	r3, #34	; 0x22
 80076b0:	d108      	bne.n	80076c4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b4a      	cmp	r3, #74	; 0x4a
 80076b8:	bf28      	it	cs
 80076ba:	234a      	movcs	r3, #74	; 0x4a
 80076bc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80076be:	4b2f      	ldr	r3, [pc, #188]	; (800777c <USBD_HID_Setup+0x200>)
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e015      	b.n	80076f0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	885b      	ldrh	r3, [r3, #2]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b21      	cmp	r3, #33	; 0x21
 80076ce:	d108      	bne.n	80076e2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80076d0:	4b2b      	ldr	r3, [pc, #172]	; (8007780 <USBD_HID_Setup+0x204>)
 80076d2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	88db      	ldrh	r3, [r3, #6]
 80076d8:	2b09      	cmp	r3, #9
 80076da:	bf28      	it	cs
 80076dc:	2309      	movcs	r3, #9
 80076de:	82bb      	strh	r3, [r7, #20]
 80076e0:	e006      	b.n	80076f0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f969 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
            break;
 80076ee:	e037      	b.n	8007760 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80076f0:	8abb      	ldrh	r3, [r7, #20]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6939      	ldr	r1, [r7, #16]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 f9d1 	bl	8008a9e <USBD_CtlSendData>
          break;
 80076fc:	e030      	b.n	8007760 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d107      	bne.n	800771a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3308      	adds	r3, #8
 800770e:	2201      	movs	r2, #1
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f9c3 	bl	8008a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007718:	e022      	b.n	8007760 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 f94d 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007722:	2303      	movs	r3, #3
 8007724:	75fb      	strb	r3, [r7, #23]
          break;
 8007726:	e01b      	b.n	8007760 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d106      	bne.n	8007742 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	885b      	ldrh	r3, [r3, #2]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007740:	e00e      	b.n	8007760 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 f939 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 800774a:	2303      	movs	r3, #3
 800774c:	75fb      	strb	r3, [r7, #23]
          break;
 800774e:	e007      	b.n	8007760 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f932 	bl	80089bc <USBD_CtlError>
          ret = USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	75fb      	strb	r3, [r7, #23]
          break;
 800775c:	e000      	b.n	8007760 <USBD_HID_Setup+0x1e4>
          break;
 800775e:	bf00      	nop
      }
      break;
 8007760:	e006      	b.n	8007770 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f929 	bl	80089bc <USBD_CtlError>
      ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	75fb      	strb	r3, [r7, #23]
      break;
 800776e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200000c8 	.word	0x200000c8
 8007780:	200000b0 	.word	0x200000b0

08007784 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007798:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e013      	b.n	80077cc <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d10c      	bne.n	80077ca <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	7b1b      	ldrb	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d108      	bne.n	80077ca <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2201      	movs	r2, #1
 80077bc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	2181      	movs	r1, #129	; 0x81
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f004 fb24 	bl	800be12 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2222      	movs	r2, #34	; 0x22
 80077e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20000044 	.word	0x20000044

080077f4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2222      	movs	r2, #34	; 0x22
 8007800:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007802:	4b03      	ldr	r3, [pc, #12]	; (8007810 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20000068 	.word	0x20000068

08007814 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007822:	4b03      	ldr	r3, [pc, #12]	; (8007830 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	2000008c 	.word	0x2000008c

08007834 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007846:	2200      	movs	r2, #0
 8007848:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	220a      	movs	r2, #10
 8007864:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007866:	4b03      	ldr	r3, [pc, #12]	; (8007874 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	200000bc 	.word	0x200000bc

08007878 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	e01f      	b.n	80078d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	79fa      	ldrb	r2, [r7, #7]
 80078c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f004 f96f 	bl	800bba8 <USBD_LL_Init>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e016      	b.n	800791e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	f107 020e 	add.w	r2, r7, #14
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f004 f986 	bl	800bc40 <USBD_LL_Start>
 8007934:	4603      	mov	r3, r0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	4611      	mov	r1, r2
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
  }

  return USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 ffba 	bl	8008948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d01a      	beq.n	8007a2e <USBD_LL_SetupStage+0x72>
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d822      	bhi.n	8007a42 <USBD_LL_SetupStage+0x86>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <USBD_LL_SetupStage+0x4a>
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d00a      	beq.n	8007a1a <USBD_LL_SetupStage+0x5e>
 8007a04:	e01d      	b.n	8007a42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa62 	bl	8007ed8 <USBD_StdDevReq>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]
      break;
 8007a18:	e020      	b.n	8007a5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fac6 	bl	8007fb4 <USBD_StdItfReq>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2c:	e016      	b.n	8007a5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fb05 	bl	8008046 <USBD_StdEPReq>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e00c      	b.n	8007a5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f004 f955 	bl	800bd00 <USBD_LL_StallEP>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5a:	bf00      	nop
  }

  return ret;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d138      	bne.n	8007aec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d14a      	bne.n	8007b22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d913      	bls.n	8007ac0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	1ad2      	subs	r2, r2, r3
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bf28      	it	cs
 8007ab2:	4613      	movcs	r3, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f001 f81c 	bl	8008af6 <USBD_CtlContinueRx>
 8007abe:	e030      	b.n	8007b22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d10b      	bne.n	8007ae4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 f817 	bl	8008b18 <USBD_CtlSendStatus>
 8007aea:	e01a      	b.n	8007b22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d114      	bne.n	8007b22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	7afa      	ldrb	r2, [r7, #11]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	4798      	blx	r3
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	e000      	b.n	8007b24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	460b      	mov	r3, r1
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d16b      	bne.n	8007c18 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3314      	adds	r3, #20
 8007b44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d156      	bne.n	8007bfe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d914      	bls.n	8007b86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	1ad2      	subs	r2, r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 ffae 	bl	8008ad4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f004 f968 	bl	800be54 <USBD_LL_PrepareReceive>
 8007b84:	e03b      	b.n	8007bfe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d11c      	bne.n	8007bcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d316      	bcc.n	8007bcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d20f      	bcs.n	8007bcc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bac:	2200      	movs	r2, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 ff8f 	bl	8008ad4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f004 f945 	bl	800be54 <USBD_LL_PrepareReceive>
 8007bca:	e018      	b.n	8007bfe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d10b      	bne.n	8007bf0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f004 f884 	bl	800bd00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 ffa0 	bl	8008b3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d122      	bne.n	8007c4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fe98 	bl	800793e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c16:	e01a      	b.n	8007c4e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d114      	bne.n	8007c4e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00e      	beq.n	8007c4e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	7afa      	ldrb	r2, [r7, #11]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	4798      	blx	r3
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	e000      	b.n	8007c50 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e02f      	b.n	8007cec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00f      	beq.n	8007cb6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d009      	beq.n	8007cb6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6852      	ldr	r2, [r2, #4]
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb6:	2340      	movs	r3, #64	; 0x40
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f003 ffda 	bl	800bc76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2240      	movs	r2, #64	; 0x40
 8007cce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f003 ffcc 	bl	800bc76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d106      	bne.n	8007d62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e012      	b.n	8007dac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d10b      	bne.n	8007daa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e014      	b.n	8007df8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d10d      	bne.n	8007df6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	4611      	mov	r1, r2
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e014      	b.n	8007e44 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d10d      	bne.n	8007e42 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	78fa      	ldrb	r2, [r7, #3]
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6852      	ldr	r2, [r2, #4]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
  }

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eb8:	8a3b      	ldrh	r3, [r7, #16]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	b21a      	sxth	r2, r3
 8007ebe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	b21b      	sxth	r3, r3
 8007ec6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d005      	beq.n	8007efe <USBD_StdDevReq+0x26>
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d853      	bhi.n	8007f9e <USBD_StdDevReq+0xc6>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <USBD_StdDevReq+0x3a>
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d14f      	bne.n	8007f9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e04a      	b.n	8007fa8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d83b      	bhi.n	8007f92 <USBD_StdDevReq+0xba>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <USBD_StdDevReq+0x48>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f93 	.word	0x08007f93
 8007f2c:	08007f7f 	.word	0x08007f7f
 8007f30:	08007f93 	.word	0x08007f93
 8007f34:	08007f53 	.word	0x08007f53
 8007f38:	08007f49 	.word	0x08007f49
 8007f3c:	08007f93 	.word	0x08007f93
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f5d 	.word	0x08007f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9de 	bl	800830c <USBD_GetDescriptor>
          break;
 8007f50:	e024      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb6d 	bl	8008634 <USBD_SetAddress>
          break;
 8007f5a:	e01f      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fbac 	bl	80086bc <USBD_SetConfig>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
          break;
 8007f68:	e018      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc4b 	bl	8008808 <USBD_GetConfig>
          break;
 8007f72:	e013      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc7c 	bl	8008874 <USBD_GetStatus>
          break;
 8007f7c:	e00e      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fcab 	bl	80088dc <USBD_SetFeature>
          break;
 8007f86:	e009      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fcba 	bl	8008904 <USBD_ClrFeature>
          break;
 8007f90:	e004      	b.n	8007f9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fd11 	bl	80089bc <USBD_CtlError>
          break;
 8007f9a:	bf00      	nop
      }
      break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fd0b 	bl	80089bc <USBD_CtlError>
      break;
 8007fa6:	bf00      	nop
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d005      	beq.n	8007fda <USBD_StdItfReq+0x26>
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d82f      	bhi.n	8008032 <USBD_StdItfReq+0x7e>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <USBD_StdItfReq+0x26>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d12b      	bne.n	8008032 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d81d      	bhi.n	8008024 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	889b      	ldrh	r3, [r3, #4]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d813      	bhi.n	800801a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	88db      	ldrh	r3, [r3, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d110      	bne.n	800802e <USBD_StdItfReq+0x7a>
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10d      	bne.n	800802e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fd80 	bl	8008b18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008018:	e009      	b.n	800802e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fccd 	bl	80089bc <USBD_CtlError>
          break;
 8008022:	e004      	b.n	800802e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fcc8 	bl	80089bc <USBD_CtlError>
          break;
 800802c:	e000      	b.n	8008030 <USBD_StdItfReq+0x7c>
          break;
 800802e:	bf00      	nop
      }
      break;
 8008030:	e004      	b.n	800803c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fcc1 	bl	80089bc <USBD_CtlError>
      break;
 800803a:	bf00      	nop
  }

  return ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	889b      	ldrh	r3, [r3, #4]
 8008058:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d007      	beq.n	8008076 <USBD_StdEPReq+0x30>
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	f200 8145 	bhi.w	80082f6 <USBD_StdEPReq+0x2b0>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <USBD_StdEPReq+0x44>
 8008070:	2b20      	cmp	r3, #32
 8008072:	f040 8140 	bne.w	80082f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
      break;
 8008088:	e13a      	b.n	8008300 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d007      	beq.n	80080a2 <USBD_StdEPReq+0x5c>
 8008092:	2b03      	cmp	r3, #3
 8008094:	f300 8129 	bgt.w	80082ea <USBD_StdEPReq+0x2a4>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d07f      	beq.n	800819c <USBD_StdEPReq+0x156>
 800809c:	2b01      	cmp	r3, #1
 800809e:	d03c      	beq.n	800811a <USBD_StdEPReq+0xd4>
 80080a0:	e123      	b.n	80082ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d002      	beq.n	80080b4 <USBD_StdEPReq+0x6e>
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d016      	beq.n	80080e0 <USBD_StdEPReq+0x9a>
 80080b2:	e02c      	b.n	800810e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00d      	beq.n	80080d6 <USBD_StdEPReq+0x90>
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b80      	cmp	r3, #128	; 0x80
 80080be:	d00a      	beq.n	80080d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f003 fe1b 	bl	800bd00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f003 fe17 	bl	800bd00 <USBD_LL_StallEP>
 80080d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080d4:	e020      	b.n	8008118 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fc6f 	bl	80089bc <USBD_CtlError>
              break;
 80080de:	e01b      	b.n	8008118 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10e      	bne.n	8008106 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <USBD_StdEPReq+0xc0>
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d008      	beq.n	8008106 <USBD_StdEPReq+0xc0>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f003 fdfd 	bl	800bd00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fd06 	bl	8008b18 <USBD_CtlSendStatus>

              break;
 800810c:	e004      	b.n	8008118 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fc53 	bl	80089bc <USBD_CtlError>
              break;
 8008116:	bf00      	nop
          }
          break;
 8008118:	e0ec      	b.n	80082f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d002      	beq.n	800812c <USBD_StdEPReq+0xe6>
 8008126:	2b03      	cmp	r3, #3
 8008128:	d016      	beq.n	8008158 <USBD_StdEPReq+0x112>
 800812a:	e030      	b.n	800818e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00d      	beq.n	800814e <USBD_StdEPReq+0x108>
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b80      	cmp	r3, #128	; 0x80
 8008136:	d00a      	beq.n	800814e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f003 fddf 	bl	800bd00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f003 fddb 	bl	800bd00 <USBD_LL_StallEP>
 800814a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800814c:	e025      	b.n	800819a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc33 	bl	80089bc <USBD_CtlError>
              break;
 8008156:	e020      	b.n	800819a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	885b      	ldrh	r3, [r3, #2]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d11b      	bne.n	8008198 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008166:	2b00      	cmp	r3, #0
 8008168:	d004      	beq.n	8008174 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f003 fde5 	bl	800bd3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fccf 	bl	8008b18 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800818c:	e004      	b.n	8008198 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc13 	bl	80089bc <USBD_CtlError>
              break;
 8008196:	e000      	b.n	800819a <USBD_StdEPReq+0x154>
              break;
 8008198:	bf00      	nop
          }
          break;
 800819a:	e0ab      	b.n	80082f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d002      	beq.n	80081ae <USBD_StdEPReq+0x168>
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d032      	beq.n	8008212 <USBD_StdEPReq+0x1cc>
 80081ac:	e097      	b.n	80082de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <USBD_StdEPReq+0x17e>
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d004      	beq.n	80081c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fbfd 	bl	80089bc <USBD_CtlError>
                break;
 80081c2:	e091      	b.n	80082e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da0b      	bge.n	80081e4 <USBD_StdEPReq+0x19e>
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	3310      	adds	r3, #16
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	3304      	adds	r3, #4
 80081e2:	e00b      	b.n	80081fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	3304      	adds	r3, #4
 80081fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2202      	movs	r2, #2
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc47 	bl	8008a9e <USBD_CtlSendData>
              break;
 8008210:	e06a      	b.n	80082e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	da11      	bge.n	800823e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	f003 020f 	and.w	r2, r3, #15
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d117      	bne.n	8008264 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fbc0 	bl	80089bc <USBD_CtlError>
                  break;
 800823c:	e054      	b.n	80082e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fbad 	bl	80089bc <USBD_CtlError>
                  break;
 8008262:	e041      	b.n	80082e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	da0b      	bge.n	8008284 <USBD_StdEPReq+0x23e>
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	3310      	adds	r3, #16
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	3304      	adds	r3, #4
 8008282:	e00b      	b.n	800829c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	3304      	adds	r3, #4
 800829c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <USBD_StdEPReq+0x264>
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b80      	cmp	r3, #128	; 0x80
 80082a8:	d103      	bne.n	80082b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e00e      	b.n	80082d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f003 fd60 	bl	800bd7c <USBD_LL_IsStallEP>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2201      	movs	r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	e002      	b.n	80082d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2202      	movs	r2, #2
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fbe1 	bl	8008a9e <USBD_CtlSendData>
              break;
 80082dc:	e004      	b.n	80082e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fb6b 	bl	80089bc <USBD_CtlError>
              break;
 80082e6:	bf00      	nop
          }
          break;
 80082e8:	e004      	b.n	80082f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fb65 	bl	80089bc <USBD_CtlError>
          break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e004      	b.n	8008300 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fb5f 	bl	80089bc <USBD_CtlError>
      break;
 80082fe:	bf00      	nop
  }

  return ret;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	885b      	ldrh	r3, [r3, #2]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	2b0e      	cmp	r3, #14
 800832e:	f200 8152 	bhi.w	80085d6 <USBD_GetDescriptor+0x2ca>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <USBD_GetDescriptor+0x2c>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	080083a9 	.word	0x080083a9
 800833c:	080083c1 	.word	0x080083c1
 8008340:	08008401 	.word	0x08008401
 8008344:	080085d7 	.word	0x080085d7
 8008348:	080085d7 	.word	0x080085d7
 800834c:	08008577 	.word	0x08008577
 8008350:	080085a3 	.word	0x080085a3
 8008354:	080085d7 	.word	0x080085d7
 8008358:	080085d7 	.word	0x080085d7
 800835c:	080085d7 	.word	0x080085d7
 8008360:	080085d7 	.word	0x080085d7
 8008364:	080085d7 	.word	0x080085d7
 8008368:	080085d7 	.word	0x080085d7
 800836c:	080085d7 	.word	0x080085d7
 8008370:	08008375 	.word	0x08008375
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008396:	e126      	b.n	80085e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fb0e 	bl	80089bc <USBD_CtlError>
        err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
      break;
 80083a6:	e11e      	b.n	80085e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
      break;
 80083be:	e112      	b.n	80085e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7c1b      	ldrb	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	f107 0208 	add.w	r2, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	2202      	movs	r2, #2
 80083e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083e2:	e100      	b.n	80085e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f107 0208 	add.w	r2, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	2202      	movs	r2, #2
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e0f2      	b.n	80085e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b05      	cmp	r3, #5
 8008408:	f200 80ac 	bhi.w	8008564 <USBD_GetDescriptor+0x258>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBD_GetDescriptor+0x108>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008461 	.word	0x08008461
 800841c:	08008495 	.word	0x08008495
 8008420:	080084c9 	.word	0x080084c9
 8008424:	080084fd 	.word	0x080084fd
 8008428:	08008531 	.word	0x08008531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7c12      	ldrb	r2, [r2, #16]
 8008444:	f107 0108 	add.w	r1, r7, #8
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800844e:	e091      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fab2 	bl	80089bc <USBD_CtlError>
            err++;
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	3301      	adds	r3, #1
 800845c:	72fb      	strb	r3, [r7, #11]
          break;
 800845e:	e089      	b.n	8008574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7c12      	ldrb	r2, [r2, #16]
 8008478:	f107 0108 	add.w	r1, r7, #8
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
 8008480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008482:	e077      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa98 	bl	80089bc <USBD_CtlError>
            err++;
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	3301      	adds	r3, #1
 8008490:	72fb      	strb	r3, [r7, #11]
          break;
 8008492:	e06f      	b.n	8008574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b6:	e05d      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa7e 	bl	80089bc <USBD_CtlError>
            err++;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	3301      	adds	r3, #1
 80084c4:	72fb      	strb	r3, [r7, #11]
          break;
 80084c6:	e055      	b.n	8008574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e043      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa64 	bl	80089bc <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e03b      	b.n	8008574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e029      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa4a 	bl	80089bc <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e021      	b.n	8008574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e00f      	b.n	8008574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa30 	bl	80089bc <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e007      	b.n	8008574 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa28 	bl	80089bc <USBD_CtlError>
          err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008572:	bf00      	nop
      }
      break;
 8008574:	e037      	b.n	80085e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7c1b      	ldrb	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f107 0208 	add.w	r2, r7, #8
 800858a:	4610      	mov	r0, r2
 800858c:	4798      	blx	r3
 800858e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008590:	e029      	b.n	80085e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa11 	bl	80089bc <USBD_CtlError>
        err++;
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	3301      	adds	r3, #1
 800859e:	72fb      	strb	r3, [r7, #11]
      break;
 80085a0:	e021      	b.n	80085e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7c1b      	ldrb	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f107 0208 	add.w	r2, r7, #8
 80085b6:	4610      	mov	r0, r2
 80085b8:	4798      	blx	r3
 80085ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	2207      	movs	r2, #7
 80085c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c4:	e00f      	b.n	80085e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9f7 	bl	80089bc <USBD_CtlError>
        err++;
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	3301      	adds	r3, #1
 80085d2:	72fb      	strb	r3, [r7, #11]
      break;
 80085d4:	e007      	b.n	80085e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f9ef 	bl	80089bc <USBD_CtlError>
      err++;
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	3301      	adds	r3, #1
 80085e2:	72fb      	strb	r3, [r7, #11]
      break;
 80085e4:	bf00      	nop
  }

  if (err != 0U)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11e      	bne.n	800862a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d016      	beq.n	8008622 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88da      	ldrh	r2, [r3, #6]
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	4293      	cmp	r3, r2
 8008602:	bf28      	it	cs
 8008604:	4613      	movcs	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800860a:	893b      	ldrh	r3, [r7, #8]
 800860c:	461a      	mov	r2, r3
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa44 	bl	8008a9e <USBD_CtlSendData>
 8008616:	e009      	b.n	800862c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9ce 	bl	80089bc <USBD_CtlError>
 8008620:	e004      	b.n	800862c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa78 	bl	8008b18 <USBD_CtlSendStatus>
 8008628:	e000      	b.n	800862c <USBD_GetDescriptor+0x320>
    return;
 800862a:	bf00      	nop
  }
}
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop

08008634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	889b      	ldrh	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d131      	bne.n	80086aa <USBD_SetAddress+0x76>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12d      	bne.n	80086aa <USBD_SetAddress+0x76>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	2b7f      	cmp	r3, #127	; 0x7f
 8008654:	d829      	bhi.n	80086aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d104      	bne.n	8008678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9a3 	bl	80089bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	e01d      	b.n	80086b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7bfa      	ldrb	r2, [r7, #15]
 800867c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f003 fba5 	bl	800bdd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa44 	bl	8008b18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	e009      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a8:	e004      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f985 	bl	80089bc <USBD_CtlError>
  }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	4b4c      	ldr	r3, [pc, #304]	; (8008804 <USBD_SetConfig+0x148>)
 80086d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086d4:	4b4b      	ldr	r3, [pc, #300]	; (8008804 <USBD_SetConfig+0x148>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d905      	bls.n	80086e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f96c 	bl	80089bc <USBD_CtlError>
    return USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e088      	b.n	80087fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d002      	beq.n	80086fa <USBD_SetConfig+0x3e>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d025      	beq.n	8008744 <USBD_SetConfig+0x88>
 80086f8:	e071      	b.n	80087de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086fa:	4b42      	ldr	r3, [pc, #264]	; (8008804 <USBD_SetConfig+0x148>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01c      	beq.n	800873c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008702:	4b40      	ldr	r3, [pc, #256]	; (8008804 <USBD_SetConfig+0x148>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800870c:	4b3d      	ldr	r3, [pc, #244]	; (8008804 <USBD_SetConfig+0x148>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f91e 	bl	8007954 <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f949 	bl	80089bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800872a:	e065      	b.n	80087f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9f3 	bl	8008b18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2203      	movs	r2, #3
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800873a:	e05d      	b.n	80087f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9eb 	bl	8008b18 <USBD_CtlSendStatus>
      break;
 8008742:	e059      	b.n	80087f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008744:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <USBD_SetConfig+0x148>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d112      	bne.n	8008772 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008754:	4b2b      	ldr	r3, [pc, #172]	; (8008804 <USBD_SetConfig+0x148>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800875e:	4b29      	ldr	r3, [pc, #164]	; (8008804 <USBD_SetConfig+0x148>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff f911 	bl	800798c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9d4 	bl	8008b18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008770:	e042      	b.n	80087f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008772:	4b24      	ldr	r3, [pc, #144]	; (8008804 <USBD_SetConfig+0x148>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d02a      	beq.n	80087d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff f8ff 	bl	800798c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800878e:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <USBD_SetConfig+0x148>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008798:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <USBD_SetConfig+0x148>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff f8d8 	bl	8007954 <USBD_SetClassConfig>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00f      	beq.n	80087ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f903 	bl	80089bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff f8e4 	bl	800798c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087cc:	e014      	b.n	80087f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f9a2 	bl	8008b18 <USBD_CtlSendStatus>
      break;
 80087d4:	e010      	b.n	80087f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f99e 	bl	8008b18 <USBD_CtlSendStatus>
      break;
 80087dc:	e00c      	b.n	80087f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f8eb 	bl	80089bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <USBD_SetConfig+0x148>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff f8cd 	bl	800798c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087f2:	2303      	movs	r3, #3
 80087f4:	73fb      	strb	r3, [r7, #15]
      break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000663 	.word	0x20000663

08008808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	88db      	ldrh	r3, [r3, #6]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d004      	beq.n	8008824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8cd 	bl	80089bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008822:	e023      	b.n	800886c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	dc02      	bgt.n	8008836 <USBD_GetConfig+0x2e>
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc03      	bgt.n	800883c <USBD_GetConfig+0x34>
 8008834:	e015      	b.n	8008862 <USBD_GetConfig+0x5a>
 8008836:	2b03      	cmp	r3, #3
 8008838:	d00b      	beq.n	8008852 <USBD_GetConfig+0x4a>
 800883a:	e012      	b.n	8008862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3308      	adds	r3, #8
 8008846:	2201      	movs	r2, #1
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f927 	bl	8008a9e <USBD_CtlSendData>
        break;
 8008850:	e00c      	b.n	800886c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	2201      	movs	r2, #1
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f91f 	bl	8008a9e <USBD_CtlSendData>
        break;
 8008860:	e004      	b.n	800886c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8a9 	bl	80089bc <USBD_CtlError>
        break;
 800886a:	bf00      	nop
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008884:	b2db      	uxtb	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	2b02      	cmp	r3, #2
 800888a:	d81e      	bhi.n	80088ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	88db      	ldrh	r3, [r3, #6]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d004      	beq.n	800889e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f890 	bl	80089bc <USBD_CtlError>
        break;
 800889c:	e01a      	b.n	80088d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f043 0202 	orr.w	r2, r3, #2
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	330c      	adds	r3, #12
 80088be:	2202      	movs	r2, #2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8eb 	bl	8008a9e <USBD_CtlSendData>
      break;
 80088c8:	e004      	b.n	80088d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f875 	bl	80089bc <USBD_CtlError>
      break;
 80088d2:	bf00      	nop
  }
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d106      	bne.n	80088fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f90e 	bl	8008b18 <USBD_CtlSendStatus>
  }
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008914:	b2db      	uxtb	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	2b02      	cmp	r3, #2
 800891a:	d80b      	bhi.n	8008934 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	885b      	ldrh	r3, [r3, #2]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d10c      	bne.n	800893e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8f3 	bl	8008b18 <USBD_CtlSendStatus>
      }
      break;
 8008932:	e004      	b.n	800893e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f840 	bl	80089bc <USBD_CtlError>
      break;
 800893c:	e000      	b.n	8008940 <USBD_ClrFeature+0x3c>
      break;
 800893e:	bf00      	nop
  }
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fa91 	bl	8007e9a <SWAPBYTE>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fa84 	bl	8007e9a <SWAPBYTE>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff fa77 	bl	8007e9a <SWAPBYTE>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	80da      	strh	r2, [r3, #6]
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f003 f999 	bl	800bd00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 f995 	bl	800bd00 <USBD_LL_StallEP>
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d036      	beq.n	8008a62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089f8:	6938      	ldr	r0, [r7, #16]
 80089fa:	f000 f836 	bl	8008a6a <USBD_GetLen>
 80089fe:	4603      	mov	r3, r0
 8008a00:	3301      	adds	r3, #1
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	2203      	movs	r2, #3
 8008a26:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a2e:	e013      	b.n	8008a58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	613b      	str	r3, [r7, #16]
    idx++;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	3301      	adds	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	3301      	adds	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e7      	bne.n	8008a30 <USBD_GetString+0x52>
 8008a60:	e000      	b.n	8008a64 <USBD_GetString+0x86>
    return;
 8008a62:	bf00      	nop
  }
}
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a7a:	e005      	b.n	8008a88 <USBD_GetLen+0x1e>
  {
    len++;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f5      	bne.n	8008a7c <USBD_GetLen+0x12>
  }

  return len;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f003 f9a4 	bl	800be12 <USBD_LL_Transmit>

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f003 f993 	bl	800be12 <USBD_LL_Transmit>

  return USBD_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f003 f9a3 	bl	800be54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2204      	movs	r2, #4
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f003 f96f 	bl	800be12 <USBD_LL_Transmit>

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2200      	movs	r2, #0
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f003 f97d 	bl	800be54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <__NVIC_SetPriority>:
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	db0a      	blt.n	8008b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	490c      	ldr	r1, [pc, #48]	; (8008bb0 <__NVIC_SetPriority+0x4c>)
 8008b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b82:	0112      	lsls	r2, r2, #4
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	440b      	add	r3, r1
 8008b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b8c:	e00a      	b.n	8008ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	4908      	ldr	r1, [pc, #32]	; (8008bb4 <__NVIC_SetPriority+0x50>)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	0112      	lsls	r2, r2, #4
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	761a      	strb	r2, [r3, #24]
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	e000e100 	.word	0xe000e100
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <SysTick_Handler+0x1c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008bc0:	f001 fcfe 	bl	800a5c0 <xTaskGetSchedulerState>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d001      	beq.n	8008bce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008bca:	f002 fae5 	bl	800b198 <xPortSysTickHandler>
  }
}
 8008bce:	bf00      	nop
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	e000e010 	.word	0xe000e010

08008bd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f06f 0004 	mvn.w	r0, #4
 8008be2:	f7ff ffbf 	bl	8008b64 <__NVIC_SetPriority>
#endif
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf2:	f3ef 8305 	mrs	r3, IPSR
 8008bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008bfe:	f06f 0305 	mvn.w	r3, #5
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	e00c      	b.n	8008c20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c06:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <osKernelInitialize+0x44>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d105      	bne.n	8008c1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <osKernelInitialize+0x44>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	e002      	b.n	8008c20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c20:	687b      	ldr	r3, [r7, #4]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000664 	.word	0x20000664

08008c34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c3a:	f3ef 8305 	mrs	r3, IPSR
 8008c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c46:	f06f 0305 	mvn.w	r3, #5
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	e010      	b.n	8008c70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <osKernelStart+0x48>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d109      	bne.n	8008c6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c56:	f7ff ffbf 	bl	8008bd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c5a:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <osKernelStart+0x48>)
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c60:	f001 f866 	bl	8009d30 <vTaskStartScheduler>
      stat = osOK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e002      	b.n	8008c70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c70:	687b      	ldr	r3, [r7, #4]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000664 	.word	0x20000664

08008c80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08e      	sub	sp, #56	; 0x38
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c90:	f3ef 8305 	mrs	r3, IPSR
 8008c94:	617b      	str	r3, [r7, #20]
  return(result);
 8008c96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d17e      	bne.n	8008d9a <osThreadNew+0x11a>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d07b      	beq.n	8008d9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ca6:	2318      	movs	r3, #24
 8008ca8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cae:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d045      	beq.n	8008d46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <osThreadNew+0x48>
        name = attr->name;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <osThreadNew+0x6e>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b38      	cmp	r3, #56	; 0x38
 8008ce0:	d805      	bhi.n	8008cee <osThreadNew+0x6e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <osThreadNew+0x72>
        return (NULL);
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e054      	b.n	8008d9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00e      	beq.n	8008d28 <osThreadNew+0xa8>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b5b      	cmp	r3, #91	; 0x5b
 8008d10:	d90a      	bls.n	8008d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <osThreadNew+0xa8>
        mem = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	e010      	b.n	8008d4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10c      	bne.n	8008d4a <osThreadNew+0xca>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d108      	bne.n	8008d4a <osThreadNew+0xca>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <osThreadNew+0xca>
          mem = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e001      	b.n	8008d4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d110      	bne.n	8008d72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d58:	9202      	str	r2, [sp, #8]
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fe0c 	bl	8009984 <xTaskCreateStatic>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	e013      	b.n	8008d9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d110      	bne.n	8008d9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fe57 	bl	8009a3e <xTaskCreate>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d001      	beq.n	8008d9a <osThreadNew+0x11a>
            hTask = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d9a:	693b      	ldr	r3, [r7, #16]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dac:	f3ef 8305 	mrs	r3, IPSR
 8008db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <osDelay+0x1c>
    stat = osErrorISR;
 8008db8:	f06f 0305 	mvn.w	r3, #5
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e007      	b.n	8008dd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 ff7c 	bl	8009cc8 <vTaskDelay>
    }
  }

  return (stat);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8008dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	4a06      	ldr	r2, [pc, #24]	; (8008e0c <vApplicationGetIdleTaskMemory+0x30>)
 8008df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2280      	movs	r2, #128	; 0x80
 8008df8:	601a      	str	r2, [r3, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000668 	.word	0x20000668
 8008e0c:	200006c4 	.word	0x200006c4

08008e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a07      	ldr	r2, [pc, #28]	; (8008e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8008e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <vApplicationGetTimerTaskMemory+0x30>)
 8008e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e2e:	601a      	str	r2, [r3, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	200008c4 	.word	0x200008c4
 8008e40:	20000920 	.word	0x20000920

08008e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f103 0208 	add.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f103 0208 	add.w	r2, r3, #8
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f103 0208 	add.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d103      	bne.n	8008f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	e00c      	b.n	8008f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	e002      	b.n	8008f14 <vListInsert+0x2e>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d2f6      	bcs.n	8008f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	601a      	str	r2, [r3, #0]
}
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6892      	ldr	r2, [r2, #8]
 8008f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6852      	ldr	r2, [r2, #4]
 8008f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d103      	bne.n	8008f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	1e5a      	subs	r2, r3, #1
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008fd6:	f002 f84d 	bl	800b074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fe6:	fb01 f303 	mul.w	r3, r1, r3
 8008fea:	441a      	add	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	3b01      	subs	r3, #1
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	441a      	add	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	22ff      	movs	r2, #255	; 0xff
 800901a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	22ff      	movs	r2, #255	; 0xff
 8009022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d114      	bne.n	8009056 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01a      	beq.n	800906a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3310      	adds	r3, #16
 8009038:	4618      	mov	r0, r3
 800903a:	f001 f903 	bl	800a244 <xTaskRemoveFromEventList>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d012      	beq.n	800906a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <xQueueGenericReset+0xcc>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	e009      	b.n	800906a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3310      	adds	r3, #16
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff fef2 	bl	8008e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3324      	adds	r3, #36	; 0x24
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff feed 	bl	8008e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f002 f833 	bl	800b0d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800906e:	2301      	movs	r3, #1
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	; 0x38
 8009080:	af02      	add	r7, sp, #8
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <xQueueGenericCreateStatic+0x52>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <xQueueGenericCreateStatic+0x56>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <xQueueGenericCreateStatic+0x58>
 80090d2:	2300      	movs	r3, #0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	623b      	str	r3, [r7, #32]
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <xQueueGenericCreateStatic+0x7e>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueGenericCreateStatic+0x82>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueGenericCreateStatic+0x84>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	61fb      	str	r3, [r7, #28]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800911a:	2350      	movs	r3, #80	; 0x50
 800911c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b50      	cmp	r3, #80	; 0x50
 8009122:	d00a      	beq.n	800913a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	61bb      	str	r3, [r7, #24]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800913a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00d      	beq.n	8009162 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800914e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4613      	mov	r3, r2
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f805 	bl	800916c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009164:	4618      	mov	r0, r3
 8009166:	3730      	adds	r7, #48	; 0x30
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800919a:	2101      	movs	r1, #1
 800919c:	69b8      	ldr	r0, [r7, #24]
 800919e:	f7ff ff05 	bl	8008fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08e      	sub	sp, #56	; 0x38
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091c2:	2300      	movs	r3, #0
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xQueueGenericSend+0x32>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d103      	bne.n	80091f4 <xQueueGenericSend+0x40>
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <xQueueGenericSend+0x44>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <xQueueGenericSend+0x46>
 80091f8:	2300      	movs	r3, #0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <xQueueGenericSend+0x60>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d103      	bne.n	8009222 <xQueueGenericSend+0x6e>
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <xQueueGenericSend+0x72>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <xQueueGenericSend+0x74>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <xQueueGenericSend+0x8e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	623b      	str	r3, [r7, #32]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009242:	f001 f9bd 	bl	800a5c0 <xTaskGetSchedulerState>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <xQueueGenericSend+0x9e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <xQueueGenericSend+0xa2>
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <xQueueGenericSend+0xa4>
 8009256:	2300      	movs	r3, #0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xQueueGenericSend+0xbe>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	61fb      	str	r3, [r7, #28]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009272:	f001 feff 	bl	800b074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	429a      	cmp	r2, r3
 8009280:	d302      	bcc.n	8009288 <xQueueGenericSend+0xd4>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d129      	bne.n	80092dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800928e:	f000 fa0b 	bl	80096a8 <prvCopyDataToQueue>
 8009292:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d010      	beq.n	80092be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ffcf 	bl	800a244 <xTaskRemoveFromEventList>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d013      	beq.n	80092d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092ac:	4b3f      	ldr	r3, [pc, #252]	; (80093ac <xQueueGenericSend+0x1f8>)
 80092ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	e00a      	b.n	80092d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092c4:	4b39      	ldr	r3, [pc, #228]	; (80093ac <xQueueGenericSend+0x1f8>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80092d4:	f001 fefe 	bl	800b0d4 <vPortExitCritical>
				return pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	e063      	b.n	80093a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092e2:	f001 fef7 	bl	800b0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e05c      	b.n	80093a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092f0:	f107 0314 	add.w	r3, r7, #20
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 f809 	bl	800a30c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092fe:	f001 fee9 	bl	800b0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009302:	f000 fd7b 	bl	8009dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009306:	f001 feb5 	bl	800b074 <vPortEnterCritical>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009310:	b25b      	sxtb	r3, r3
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d103      	bne.n	8009320 <xQueueGenericSend+0x16c>
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009326:	b25b      	sxtb	r3, r3
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d103      	bne.n	8009336 <xQueueGenericSend+0x182>
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009336:	f001 fecd 	bl	800b0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800933a:	1d3a      	adds	r2, r7, #4
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fff8 	bl	800a338 <xTaskCheckForTimeOut>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d124      	bne.n	8009398 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800934e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009350:	f000 faa2 	bl	8009898 <prvIsQueueFull>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d018      	beq.n	800938c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	3310      	adds	r3, #16
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ff1e 	bl	800a1a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800936a:	f000 fa2d 	bl	80097c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800936e:	f000 fd53 	bl	8009e18 <xTaskResumeAll>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	f47f af7c 	bne.w	8009272 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <xQueueGenericSend+0x1f8>)
 800937c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	e772      	b.n	8009272 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800938c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800938e:	f000 fa1b 	bl	80097c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009392:	f000 fd41 	bl	8009e18 <xTaskResumeAll>
 8009396:	e76c      	b.n	8009272 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939a:	f000 fa15 	bl	80097c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800939e:	f000 fd3b 	bl	8009e18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3738      	adds	r7, #56	; 0x38
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	e000ed04 	.word	0xe000ed04

080093b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b090      	sub	sp, #64	; 0x40
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <xQueueGenericSendFromISR+0x3c>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <xQueueGenericSendFromISR+0x40>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e000      	b.n	80093f2 <xQueueGenericSendFromISR+0x42>
 80093f0:	2300      	movs	r3, #0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10a      	bne.n	800940c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d103      	bne.n	800941a <xQueueGenericSendFromISR+0x6a>
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <xQueueGenericSendFromISR+0x6e>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericSendFromISR+0x70>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	623b      	str	r3, [r7, #32]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800943a:	f001 fefd 	bl	800b238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800943e:	f3ef 8211 	mrs	r2, BASEPRI
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	61fa      	str	r2, [r7, #28]
 8009454:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009456:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009458:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <xQueueGenericSendFromISR+0xbc>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d12f      	bne.n	80094cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009482:	f000 f911 	bl	80096a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009486:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d112      	bne.n	80094b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	d016      	beq.n	80094c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fed1 	bl	800a244 <xTaskRemoveFromEventList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00e      	beq.n	80094c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	e007      	b.n	80094c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094ba:	3301      	adds	r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	b25a      	sxtb	r2, r3
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094c6:	2301      	movs	r3, #1
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80094ca:	e001      	b.n	80094d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80094da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3740      	adds	r7, #64	; 0x40
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08c      	sub	sp, #48	; 0x30
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xQueueReceive+0x30>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	623b      	str	r3, [r7, #32]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <xQueueReceive+0x3e>
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <xQueueReceive+0x42>
 8009526:	2301      	movs	r3, #1
 8009528:	e000      	b.n	800952c <xQueueReceive+0x44>
 800952a:	2300      	movs	r3, #0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueReceive+0x5e>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	61fb      	str	r3, [r7, #28]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009546:	f001 f83b 	bl	800a5c0 <xTaskGetSchedulerState>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d102      	bne.n	8009556 <xQueueReceive+0x6e>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <xQueueReceive+0x72>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueReceive+0x74>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xQueueReceive+0x8e>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	61bb      	str	r3, [r7, #24]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009576:	f001 fd7d 	bl	800b074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	d01f      	beq.n	80095c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958a:	f000 f8f7 	bl	800977c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	1e5a      	subs	r2, r3, #1
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00f      	beq.n	80095be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	3310      	adds	r3, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fe4e 	bl	800a244 <xTaskRemoveFromEventList>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d007      	beq.n	80095be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095ae:	4b3d      	ldr	r3, [pc, #244]	; (80096a4 <xQueueReceive+0x1bc>)
 80095b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095be:	f001 fd89 	bl	800b0d4 <vPortExitCritical>
				return pdPASS;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e069      	b.n	800969a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d103      	bne.n	80095d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095cc:	f001 fd82 	bl	800b0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e062      	b.n	800969a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095da:	f107 0310 	add.w	r3, r7, #16
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fe94 	bl	800a30c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e8:	f001 fd74 	bl	800b0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095ec:	f000 fc06 	bl	8009dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095f0:	f001 fd40 	bl	800b074 <vPortEnterCritical>
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095fa:	b25b      	sxtb	r3, r3
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d103      	bne.n	800960a <xQueueReceive+0x122>
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009610:	b25b      	sxtb	r3, r3
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d103      	bne.n	8009620 <xQueueReceive+0x138>
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009620:	f001 fd58 	bl	800b0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009624:	1d3a      	adds	r2, r7, #4
 8009626:	f107 0310 	add.w	r3, r7, #16
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fe83 	bl	800a338 <xTaskCheckForTimeOut>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d123      	bne.n	8009680 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963a:	f000 f917 	bl	800986c <prvIsQueueEmpty>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d017      	beq.n	8009674 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	3324      	adds	r3, #36	; 0x24
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fda9 	bl	800a1a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009654:	f000 f8b8 	bl	80097c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009658:	f000 fbde 	bl	8009e18 <xTaskResumeAll>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d189      	bne.n	8009576 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009662:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <xQueueReceive+0x1bc>)
 8009664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	e780      	b.n	8009576 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009676:	f000 f8a7 	bl	80097c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800967a:	f000 fbcd 	bl	8009e18 <xTaskResumeAll>
 800967e:	e77a      	b.n	8009576 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009682:	f000 f8a1 	bl	80097c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009686:	f000 fbc7 	bl	8009e18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800968a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968c:	f000 f8ee 	bl	800986c <prvIsQueueEmpty>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	f43f af6f 	beq.w	8009576 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800969a:	4618      	mov	r0, r3
 800969c:	3730      	adds	r7, #48	; 0x30
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	e000ed04 	.word	0xe000ed04

080096a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10d      	bne.n	80096e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d14d      	bne.n	800976a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ff92 	bl	800a5fc <xTaskPriorityDisinherit>
 80096d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	609a      	str	r2, [r3, #8]
 80096e0:	e043      	b.n	800976a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d119      	bne.n	800971c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6858      	ldr	r0, [r3, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	461a      	mov	r2, r3
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	f008 fd80 	bl	80121f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	441a      	add	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	429a      	cmp	r2, r3
 8009710:	d32b      	bcc.n	800976a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	605a      	str	r2, [r3, #4]
 800971a:	e026      	b.n	800976a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68d8      	ldr	r0, [r3, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	461a      	mov	r2, r3
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	f008 fd66 	bl	80121f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009734:	425b      	negs	r3, r3
 8009736:	441a      	add	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d207      	bcs.n	8009758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	425b      	negs	r3, r3
 8009752:	441a      	add	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d105      	bne.n	800976a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3b01      	subs	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009772:	697b      	ldr	r3, [r7, #20]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d018      	beq.n	80097c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	441a      	add	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d303      	bcc.n	80097b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68d9      	ldr	r1, [r3, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	461a      	mov	r2, r3
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f008 fd1c 	bl	80121f8 <memcpy>
	}
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097d0:	f001 fc50 	bl	800b074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097dc:	e011      	b.n	8009802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d012      	beq.n	800980c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3324      	adds	r3, #36	; 0x24
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fd2a 	bl	800a244 <xTaskRemoveFromEventList>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097f6:	f000 fe01 	bl	800a3fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	dce9      	bgt.n	80097de <prvUnlockQueue+0x16>
 800980a:	e000      	b.n	800980e <prvUnlockQueue+0x46>
					break;
 800980c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	22ff      	movs	r2, #255	; 0xff
 8009812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009816:	f001 fc5d 	bl	800b0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800981a:	f001 fc2b 	bl	800b074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009826:	e011      	b.n	800984c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3310      	adds	r3, #16
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fd05 	bl	800a244 <xTaskRemoveFromEventList>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009840:	f000 fddc 	bl	800a3fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	3b01      	subs	r3, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800984c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009850:	2b00      	cmp	r3, #0
 8009852:	dce9      	bgt.n	8009828 <prvUnlockQueue+0x60>
 8009854:	e000      	b.n	8009858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	22ff      	movs	r2, #255	; 0xff
 800985c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009860:	f001 fc38 	bl	800b0d4 <vPortExitCritical>
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009874:	f001 fbfe 	bl	800b074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e001      	b.n	800988a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800988a:	f001 fc23 	bl	800b0d4 <vPortExitCritical>

	return xReturn;
 800988e:	68fb      	ldr	r3, [r7, #12]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098a0:	f001 fbe8 	bl	800b074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d102      	bne.n	80098b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e001      	b.n	80098ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098ba:	f001 fc0b 	bl	800b0d4 <vPortExitCritical>

	return xReturn;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098d2:	2300      	movs	r3, #0
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e014      	b.n	8009902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098d8:	4a0f      	ldr	r2, [pc, #60]	; (8009918 <vQueueAddToRegistry+0x50>)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10b      	bne.n	80098fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098e4:	490c      	ldr	r1, [pc, #48]	; (8009918 <vQueueAddToRegistry+0x50>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098ee:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <vQueueAddToRegistry+0x50>)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4413      	add	r3, r2
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098fa:	e006      	b.n	800990a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b07      	cmp	r3, #7
 8009906:	d9e7      	bls.n	80098d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	20004fdc 	.word	0x20004fdc

0800991c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800992c:	f001 fba2 	bl	800b074 <vPortEnterCritical>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009936:	b25b      	sxtb	r3, r3
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d103      	bne.n	8009946 <vQueueWaitForMessageRestricted+0x2a>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800994c:	b25b      	sxtb	r3, r3
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d103      	bne.n	800995c <vQueueWaitForMessageRestricted+0x40>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800995c:	f001 fbba 	bl	800b0d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	3324      	adds	r3, #36	; 0x24
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fc3b 	bl	800a1ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009976:	6978      	ldr	r0, [r7, #20]
 8009978:	f7ff ff26 	bl	80097c8 <prvUnlockQueue>
	}
 800997c:	bf00      	nop
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08e      	sub	sp, #56	; 0x38
 8009988:	af04      	add	r7, sp, #16
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	623b      	str	r3, [r7, #32]
}
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xTaskCreateStatic+0x46>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	61fb      	str	r3, [r7, #28]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099ca:	235c      	movs	r3, #92	; 0x5c
 80099cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b5c      	cmp	r3, #92	; 0x5c
 80099d2:	d00a      	beq.n	80099ea <xTaskCreateStatic+0x66>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	61bb      	str	r3, [r7, #24]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01e      	beq.n	8009a30 <xTaskCreateStatic+0xac>
 80099f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01b      	beq.n	8009a30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	2202      	movs	r2, #2
 8009a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	9302      	str	r3, [sp, #8]
 8009a12:	f107 0314 	add.w	r3, r7, #20
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68b9      	ldr	r1, [r7, #8]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 f850 	bl	8009ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a2a:	f000 f8dd 	bl	8009be8 <prvAddNewTaskToReadyList>
 8009a2e:	e001      	b.n	8009a34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a34:	697b      	ldr	r3, [r7, #20]
	}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3728      	adds	r7, #40	; 0x28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b08c      	sub	sp, #48	; 0x30
 8009a42:	af04      	add	r7, sp, #16
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fc30 	bl	800b2b8 <pvPortMalloc>
 8009a58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00e      	beq.n	8009a7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a60:	205c      	movs	r0, #92	; 0x5c
 8009a62:	f001 fc29 	bl	800b2b8 <pvPortMalloc>
 8009a66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
 8009a74:	e005      	b.n	8009a82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a76:	6978      	ldr	r0, [r7, #20]
 8009a78:	f001 fcea 	bl	800b450 <vPortFree>
 8009a7c:	e001      	b.n	8009a82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d017      	beq.n	8009ab8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a90:	88fa      	ldrh	r2, [r7, #6]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f80e 	bl	8009ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aac:	69f8      	ldr	r0, [r7, #28]
 8009aae:	f000 f89b 	bl	8009be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e002      	b.n	8009abe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009abe:	69bb      	ldr	r3, [r7, #24]
	}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	461a      	mov	r2, r3
 8009ae0:	21a5      	movs	r1, #165	; 0xa5
 8009ae2:	f008 fb97 	bl	8012214 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009af0:	3b01      	subs	r3, #1
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	617b      	str	r3, [r7, #20]
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01f      	beq.n	8009b66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b26:	2300      	movs	r3, #0
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	e012      	b.n	8009b52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	7819      	ldrb	r1, [r3, #0]
 8009b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	3334      	adds	r3, #52	; 0x34
 8009b3c:	460a      	mov	r2, r1
 8009b3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d006      	beq.n	8009b5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2b0f      	cmp	r3, #15
 8009b56:	d9e9      	bls.n	8009b2c <prvInitialiseNewTask+0x64>
 8009b58:	e000      	b.n	8009b5c <prvInitialiseNewTask+0x94>
			{
				break;
 8009b5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b64:	e003      	b.n	8009b6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	2b37      	cmp	r3, #55	; 0x37
 8009b72:	d901      	bls.n	8009b78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b74:	2337      	movs	r3, #55	; 0x37
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	2200      	movs	r2, #0
 8009b88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff f978 	bl	8008e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	3318      	adds	r3, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff f973 	bl	8008e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	68f9      	ldr	r1, [r7, #12]
 8009bc6:	69b8      	ldr	r0, [r7, #24]
 8009bc8:	f001 f928 	bl	800ae1c <pxPortInitialiseStack>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bde:	bf00      	nop
 8009be0:	3720      	adds	r7, #32
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bf0:	f001 fa40 	bl	800b074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bf4:	4b2d      	ldr	r3, [pc, #180]	; (8009cac <prvAddNewTaskToReadyList+0xc4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a2c      	ldr	r2, [pc, #176]	; (8009cac <prvAddNewTaskToReadyList+0xc4>)
 8009bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bfe:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c06:	4a2a      	ldr	r2, [pc, #168]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c0c:	4b27      	ldr	r3, [pc, #156]	; (8009cac <prvAddNewTaskToReadyList+0xc4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d110      	bne.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c14:	f000 fc16 	bl	800a444 <prvInitialiseTaskLists>
 8009c18:	e00d      	b.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c1a:	4b26      	ldr	r3, [pc, #152]	; (8009cb4 <prvAddNewTaskToReadyList+0xcc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c22:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d802      	bhi.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c30:	4a1f      	ldr	r2, [pc, #124]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c36:	4b20      	ldr	r3, [pc, #128]	; (8009cb8 <prvAddNewTaskToReadyList+0xd0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <prvAddNewTaskToReadyList+0xd0>)
 8009c3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c40:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <prvAddNewTaskToReadyList+0xd0>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <prvAddNewTaskToReadyList+0xd4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <prvAddNewTaskToReadyList+0x74>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	4a18      	ldr	r2, [pc, #96]	; (8009cbc <prvAddNewTaskToReadyList+0xd4>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4a15      	ldr	r2, [pc, #84]	; (8009cc0 <prvAddNewTaskToReadyList+0xd8>)
 8009c6a:	441a      	add	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7ff f913 	bl	8008e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c78:	f001 fa2c 	bl	800b0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <prvAddNewTaskToReadyList+0xcc>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00e      	beq.n	8009ca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c84:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d207      	bcs.n	8009ca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <prvAddNewTaskToReadyList+0xdc>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200011f4 	.word	0x200011f4
 8009cb0:	20000d20 	.word	0x20000d20
 8009cb4:	20001200 	.word	0x20001200
 8009cb8:	20001210 	.word	0x20001210
 8009cbc:	200011fc 	.word	0x200011fc
 8009cc0:	20000d24 	.word	0x20000d24
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d017      	beq.n	8009d0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <vTaskDelay+0x60>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <vTaskDelay+0x30>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	60bb      	str	r3, [r7, #8]
}
 8009cf4:	bf00      	nop
 8009cf6:	e7fe      	b.n	8009cf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cf8:	f000 f880 	bl	8009dfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fcea 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d04:	f000 f888 	bl	8009e18 <xTaskResumeAll>
 8009d08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d107      	bne.n	8009d20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <vTaskDelay+0x64>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	2000121c 	.word	0x2000121c
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	; 0x28
 8009d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d3e:	463a      	mov	r2, r7
 8009d40:	1d39      	adds	r1, r7, #4
 8009d42:	f107 0308 	add.w	r3, r7, #8
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7ff f848 	bl	8008ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	9202      	str	r2, [sp, #8]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	460a      	mov	r2, r1
 8009d5e:	4921      	ldr	r1, [pc, #132]	; (8009de4 <vTaskStartScheduler+0xb4>)
 8009d60:	4821      	ldr	r0, [pc, #132]	; (8009de8 <vTaskStartScheduler+0xb8>)
 8009d62:	f7ff fe0f 	bl	8009984 <xTaskCreateStatic>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4a20      	ldr	r2, [pc, #128]	; (8009dec <vTaskStartScheduler+0xbc>)
 8009d6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d6c:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <vTaskStartScheduler+0xbc>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d74:	2301      	movs	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e001      	b.n	8009d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d102      	bne.n	8009d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d84:	f000 fcfc 	bl	800a780 <xTimerCreateTimerTask>
 8009d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d116      	bne.n	8009dbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009da4:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <vTaskStartScheduler+0xc0>)
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295
 8009daa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <vTaskStartScheduler+0xc4>)
 8009dae:	2201      	movs	r2, #1
 8009db0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009db2:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <vTaskStartScheduler+0xc8>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009db8:	f001 f8ba 	bl	800af30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dbc:	e00e      	b.n	8009ddc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc4:	d10a      	bne.n	8009ddc <vTaskStartScheduler+0xac>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	60fb      	str	r3, [r7, #12]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <vTaskStartScheduler+0xaa>
}
 8009ddc:	bf00      	nop
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	080123a0 	.word	0x080123a0
 8009de8:	0800a415 	.word	0x0800a415
 8009dec:	20001218 	.word	0x20001218
 8009df0:	20001214 	.word	0x20001214
 8009df4:	20001200 	.word	0x20001200
 8009df8:	200011f8 	.word	0x200011f8

08009dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e00:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <vTaskSuspendAll+0x18>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	4a03      	ldr	r2, [pc, #12]	; (8009e14 <vTaskSuspendAll+0x18>)
 8009e08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e0a:	bf00      	nop
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	2000121c 	.word	0x2000121c

08009e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e26:	4b42      	ldr	r3, [pc, #264]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	603b      	str	r3, [r7, #0]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e44:	f001 f916 	bl	800b074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e48:	4b39      	ldr	r3, [pc, #228]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a38      	ldr	r2, [pc, #224]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e52:	4b37      	ldr	r3, [pc, #220]	; (8009f30 <xTaskResumeAll+0x118>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d162      	bne.n	8009f20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e5a:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <xTaskResumeAll+0x11c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d05e      	beq.n	8009f20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e62:	e02f      	b.n	8009ec4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e64:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <xTaskResumeAll+0x120>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3318      	adds	r3, #24
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff f871 	bl	8008f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff f86c 	bl	8008f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b2d      	ldr	r3, [pc, #180]	; (8009f3c <xTaskResumeAll+0x124>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskResumeAll+0x7c>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a2a      	ldr	r2, [pc, #168]	; (8009f3c <xTaskResumeAll+0x124>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <xTaskResumeAll+0x128>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fff7 	bl	8008e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b23      	ldr	r3, [pc, #140]	; (8009f44 <xTaskResumeAll+0x12c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d302      	bcc.n	8009ec4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ebe:	4b22      	ldr	r3, [pc, #136]	; (8009f48 <xTaskResumeAll+0x130>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <xTaskResumeAll+0x120>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1cb      	bne.n	8009e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ed2:	f000 fb55 	bl	800a580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ed6:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <xTaskResumeAll+0x134>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d010      	beq.n	8009f04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ee2:	f000 f847 	bl	8009f74 <xTaskIncrementTick>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009eec:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <xTaskResumeAll+0x130>)
 8009eee:	2201      	movs	r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1f1      	bne.n	8009ee2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <xTaskResumeAll+0x134>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f04:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <xTaskResumeAll+0x130>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <xTaskResumeAll+0x138>)
 8009f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f20:	f001 f8d8 	bl	800b0d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009f24:	68bb      	ldr	r3, [r7, #8]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	2000121c 	.word	0x2000121c
 8009f34:	200011f4 	.word	0x200011f4
 8009f38:	200011b4 	.word	0x200011b4
 8009f3c:	200011fc 	.word	0x200011fc
 8009f40:	20000d24 	.word	0x20000d24
 8009f44:	20000d20 	.word	0x20000d20
 8009f48:	20001208 	.word	0x20001208
 8009f4c:	20001204 	.word	0x20001204
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <xTaskGetTickCount+0x1c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f60:	687b      	ldr	r3, [r7, #4]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	200011f8 	.word	0x200011f8

08009f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f7e:	4b4f      	ldr	r3, [pc, #316]	; (800a0bc <xTaskIncrementTick+0x148>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f040 808f 	bne.w	800a0a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f88:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f90:	4a4b      	ldr	r2, [pc, #300]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d120      	bne.n	8009fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f9c:	4b49      	ldr	r3, [pc, #292]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <xTaskIncrementTick+0x48>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	603b      	str	r3, [r7, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <xTaskIncrementTick+0x46>
 8009fbc:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a3f      	ldr	r2, [pc, #252]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4a3f      	ldr	r2, [pc, #252]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a3d      	ldr	r2, [pc, #244]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	f000 fad1 	bl	800a580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fde:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d349      	bcc.n	800a07c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fe8:	4b36      	ldr	r3, [pc, #216]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	4b37      	ldr	r3, [pc, #220]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	601a      	str	r2, [r3, #0]
					break;
 8009ffa:	e03f      	b.n	800a07c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffc:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d203      	bcs.n	800a01c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a014:	4a2e      	ldr	r2, [pc, #184]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a01a:	e02f      	b.n	800a07c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe ff99 	bl	8008f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3318      	adds	r3, #24
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe ff90 	bl	8008f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	4b25      	ldr	r3, [pc, #148]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d903      	bls.n	800a04c <xTaskIncrementTick+0xd8>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a05a:	441a      	add	r2, r3
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7fe ff1b 	bl	8008e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d3b8      	bcc.n	8009fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a07a:	e7b5      	b.n	8009fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a07c:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a082:	4915      	ldr	r1, [pc, #84]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d901      	bls.n	800a098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <xTaskIncrementTick+0x16c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e004      	b.n	800a0b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0b0:	697b      	ldr	r3, [r7, #20]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	2000121c 	.word	0x2000121c
 800a0c0:	200011f8 	.word	0x200011f8
 800a0c4:	200011ac 	.word	0x200011ac
 800a0c8:	200011b0 	.word	0x200011b0
 800a0cc:	2000120c 	.word	0x2000120c
 800a0d0:	20001214 	.word	0x20001214
 800a0d4:	200011fc 	.word	0x200011fc
 800a0d8:	20000d24 	.word	0x20000d24
 800a0dc:	20000d20 	.word	0x20000d20
 800a0e0:	20001208 	.word	0x20001208
 800a0e4:	20001204 	.word	0x20001204

0800a0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <vTaskSwitchContext+0xa8>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0f6:	4b27      	ldr	r3, [pc, #156]	; (800a194 <vTaskSwitchContext+0xac>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0fc:	e041      	b.n	800a182 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a0fe:	4b25      	ldr	r3, [pc, #148]	; (800a194 <vTaskSwitchContext+0xac>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b24      	ldr	r3, [pc, #144]	; (800a198 <vTaskSwitchContext+0xb0>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e010      	b.n	800a12e <vTaskSwitchContext+0x46>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vTaskSwitchContext+0x40>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskSwitchContext+0x3e>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	491b      	ldr	r1, [pc, #108]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0e4      	beq.n	800a10c <vTaskSwitchContext+0x24>
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a13      	ldr	r2, [pc, #76]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	605a      	str	r2, [r3, #4]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	3308      	adds	r3, #8
 800a164:	429a      	cmp	r2, r3
 800a166:	d104      	bne.n	800a172 <vTaskSwitchContext+0x8a>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <vTaskSwitchContext+0xb8>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	4a06      	ldr	r2, [pc, #24]	; (800a198 <vTaskSwitchContext+0xb0>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6013      	str	r3, [r2, #0]
}
 800a182:	bf00      	nop
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	2000121c 	.word	0x2000121c
 800a194:	20001208 	.word	0x20001208
 800a198:	200011fc 	.word	0x200011fc
 800a19c:	20000d24 	.word	0x20000d24
 800a1a0:	20000d20 	.word	0x20000d20

0800a1a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60fb      	str	r3, [r7, #12]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <vTaskPlaceOnEventList+0x44>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3318      	adds	r3, #24
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fe fe87 	bl	8008ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1d8:	2101      	movs	r1, #1
 800a1da:	6838      	ldr	r0, [r7, #0]
 800a1dc:	f000 fa7c 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	20000d20 	.word	0x20000d20

0800a1ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	617b      	str	r3, [r7, #20]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a214:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <vTaskPlaceOnEventListRestricted+0x54>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3318      	adds	r3, #24
 800a21a:	4619      	mov	r1, r3
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7fe fe3e 	bl	8008e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a228:	f04f 33ff 	mov.w	r3, #4294967295
 800a22c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	68b8      	ldr	r0, [r7, #8]
 800a232:	f000 fa51 	bl	800a6d8 <prvAddCurrentTaskToDelayedList>
	}
 800a236:	bf00      	nop
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000d20 	.word	0x20000d20

0800a244 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10a      	bne.n	800a270 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	60fb      	str	r3, [r7, #12]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	3318      	adds	r3, #24
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fe6f 	bl	8008f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a27a:	4b1e      	ldr	r3, [pc, #120]	; (800a2f4 <xTaskRemoveFromEventList+0xb0>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d11d      	bne.n	800a2be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	3304      	adds	r3, #4
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fe66 	bl	8008f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a290:	4b19      	ldr	r3, [pc, #100]	; (800a2f8 <xTaskRemoveFromEventList+0xb4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d903      	bls.n	800a2a0 <xTaskRemoveFromEventList+0x5c>
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a16      	ldr	r2, [pc, #88]	; (800a2f8 <xTaskRemoveFromEventList+0xb4>)
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4a13      	ldr	r2, [pc, #76]	; (800a2fc <xTaskRemoveFromEventList+0xb8>)
 800a2ae:	441a      	add	r2, r3
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f7fe fdf1 	bl	8008e9e <vListInsertEnd>
 800a2bc:	e005      	b.n	800a2ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	3318      	adds	r3, #24
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	480e      	ldr	r0, [pc, #56]	; (800a300 <xTaskRemoveFromEventList+0xbc>)
 800a2c6:	f7fe fdea 	bl	8008e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <xTaskRemoveFromEventList+0xc0>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d905      	bls.n	800a2e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <xTaskRemoveFromEventList+0xc4>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	e001      	b.n	800a2e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2e8:	697b      	ldr	r3, [r7, #20]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	2000121c 	.word	0x2000121c
 800a2f8:	200011fc 	.word	0x200011fc
 800a2fc:	20000d24 	.word	0x20000d24
 800a300:	200011b4 	.word	0x200011b4
 800a304:	20000d20 	.word	0x20000d20
 800a308:	20001208 	.word	0x20001208

0800a30c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <vTaskInternalSetTimeOutState+0x24>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <vTaskInternalSetTimeOutState+0x28>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	2000120c 	.word	0x2000120c
 800a334:	200011f8 	.word	0x200011f8

0800a338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	613b      	str	r3, [r7, #16]
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	60fb      	str	r3, [r7, #12]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a37a:	f000 fe7b 	bl	800b074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a37e:	4b1d      	ldr	r3, [pc, #116]	; (800a3f4 <xTaskCheckForTimeOut+0xbc>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d102      	bne.n	800a39e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a398:	2300      	movs	r3, #0
 800a39a:	61fb      	str	r3, [r7, #28]
 800a39c:	e023      	b.n	800a3e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <xTaskCheckForTimeOut+0xc0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d007      	beq.n	800a3ba <xTaskCheckForTimeOut+0x82>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d302      	bcc.n	800a3ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	61fb      	str	r3, [r7, #28]
 800a3b8:	e015      	b.n	800a3e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d20b      	bcs.n	800a3dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ff9b 	bl	800a30c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	e004      	b.n	800a3e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3e6:	f000 fe75 	bl	800b0d4 <vPortExitCritical>

	return xReturn;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3720      	adds	r7, #32
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200011f8 	.word	0x200011f8
 800a3f8:	2000120c 	.word	0x2000120c

0800a3fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a400:	4b03      	ldr	r3, [pc, #12]	; (800a410 <vTaskMissedYield+0x14>)
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20001208 	.word	0x20001208

0800a414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a41c:	f000 f852 	bl	800a4c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <prvIdleTask+0x28>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d9f9      	bls.n	800a41c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a428:	4b05      	ldr	r3, [pc, #20]	; (800a440 <prvIdleTask+0x2c>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a438:	e7f0      	b.n	800a41c <prvIdleTask+0x8>
 800a43a:	bf00      	nop
 800a43c:	20000d24 	.word	0x20000d24
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
 800a44e:	e00c      	b.n	800a46a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4a12      	ldr	r2, [pc, #72]	; (800a4a4 <prvInitialiseTaskLists+0x60>)
 800a45c:	4413      	add	r3, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fcf0 	bl	8008e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3301      	adds	r3, #1
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b37      	cmp	r3, #55	; 0x37
 800a46e:	d9ef      	bls.n	800a450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a470:	480d      	ldr	r0, [pc, #52]	; (800a4a8 <prvInitialiseTaskLists+0x64>)
 800a472:	f7fe fce7 	bl	8008e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a476:	480d      	ldr	r0, [pc, #52]	; (800a4ac <prvInitialiseTaskLists+0x68>)
 800a478:	f7fe fce4 	bl	8008e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a47c:	480c      	ldr	r0, [pc, #48]	; (800a4b0 <prvInitialiseTaskLists+0x6c>)
 800a47e:	f7fe fce1 	bl	8008e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a482:	480c      	ldr	r0, [pc, #48]	; (800a4b4 <prvInitialiseTaskLists+0x70>)
 800a484:	f7fe fcde 	bl	8008e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a488:	480b      	ldr	r0, [pc, #44]	; (800a4b8 <prvInitialiseTaskLists+0x74>)
 800a48a:	f7fe fcdb 	bl	8008e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a48e:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <prvInitialiseTaskLists+0x78>)
 800a490:	4a05      	ldr	r2, [pc, #20]	; (800a4a8 <prvInitialiseTaskLists+0x64>)
 800a492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a494:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <prvInitialiseTaskLists+0x7c>)
 800a496:	4a05      	ldr	r2, [pc, #20]	; (800a4ac <prvInitialiseTaskLists+0x68>)
 800a498:	601a      	str	r2, [r3, #0]
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000d24 	.word	0x20000d24
 800a4a8:	20001184 	.word	0x20001184
 800a4ac:	20001198 	.word	0x20001198
 800a4b0:	200011b4 	.word	0x200011b4
 800a4b4:	200011c8 	.word	0x200011c8
 800a4b8:	200011e0 	.word	0x200011e0
 800a4bc:	200011ac 	.word	0x200011ac
 800a4c0:	200011b0 	.word	0x200011b0

0800a4c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4ca:	e019      	b.n	800a500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4cc:	f000 fdd2 	bl	800b074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d0:	4b10      	ldr	r3, [pc, #64]	; (800a514 <prvCheckTasksWaitingTermination+0x50>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fd3b 	bl	8008f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <prvCheckTasksWaitingTermination+0x54>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	4a0b      	ldr	r2, [pc, #44]	; (800a518 <prvCheckTasksWaitingTermination+0x54>)
 800a4ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a4f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4f6:	f000 fded 	bl	800b0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f810 	bl	800a520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e1      	bne.n	800a4cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200011c8 	.word	0x200011c8
 800a518:	200011f4 	.word	0x200011f4
 800a51c:	200011dc 	.word	0x200011dc

0800a520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	4618      	mov	r0, r3
 800a538:	f000 ff8a 	bl	800b450 <vPortFree>
				vPortFree( pxTCB );
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 ff87 	bl	800b450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a542:	e018      	b.n	800a576 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d103      	bne.n	800a556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 ff7e 	bl	800b450 <vPortFree>
	}
 800a554:	e00f      	b.n	800a576 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d00a      	beq.n	800a576 <prvDeleteTCB+0x56>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <prvDeleteTCB+0x54>
	}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a586:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <prvResetNextTaskUnblockTime+0x38>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d104      	bne.n	800a59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <prvResetNextTaskUnblockTime+0x3c>)
 800a592:	f04f 32ff 	mov.w	r2, #4294967295
 800a596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a598:	e008      	b.n	800a5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <prvResetNextTaskUnblockTime+0x38>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a04      	ldr	r2, [pc, #16]	; (800a5bc <prvResetNextTaskUnblockTime+0x3c>)
 800a5aa:	6013      	str	r3, [r2, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	200011ac 	.word	0x200011ac
 800a5bc:	20001214 	.word	0x20001214

0800a5c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <xTaskGetSchedulerState+0x34>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d102      	bne.n	800a5d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e008      	b.n	800a5e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5d4:	4b08      	ldr	r3, [pc, #32]	; (800a5f8 <xTaskGetSchedulerState+0x38>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d102      	bne.n	800a5e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	607b      	str	r3, [r7, #4]
 800a5e0:	e001      	b.n	800a5e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5e6:	687b      	ldr	r3, [r7, #4]
	}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	20001200 	.word	0x20001200
 800a5f8:	2000121c 	.word	0x2000121c

0800a5fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d056      	beq.n	800a6c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a612:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <xTaskPriorityDisinherit+0xd0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d00a      	beq.n	800a632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60fb      	str	r3, [r7, #12]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60bb      	str	r3, [r7, #8]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a662:	429a      	cmp	r2, r3
 800a664:	d02c      	beq.n	800a6c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d128      	bne.n	800a6c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3304      	adds	r3, #4
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fc70 	bl	8008f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <xTaskPriorityDisinherit+0xd4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d903      	bls.n	800a6a0 <xTaskPriorityDisinherit+0xa4>
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a0c      	ldr	r2, [pc, #48]	; (800a6d0 <xTaskPriorityDisinherit+0xd4>)
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4a09      	ldr	r2, [pc, #36]	; (800a6d4 <xTaskPriorityDisinherit+0xd8>)
 800a6ae:	441a      	add	r2, r3
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7fe fbf1 	bl	8008e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6c0:	697b      	ldr	r3, [r7, #20]
	}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20000d20 	.word	0x20000d20
 800a6d0:	200011fc 	.word	0x200011fc
 800a6d4:	20000d24 	.word	0x20000d24

0800a6d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6e2:	4b21      	ldr	r3, [pc, #132]	; (800a768 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e8:	4b20      	ldr	r3, [pc, #128]	; (800a76c <prvAddCurrentTaskToDelayedList+0x94>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fc32 	bl	8008f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d10a      	bne.n	800a712 <prvAddCurrentTaskToDelayedList+0x3a>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a702:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <prvAddCurrentTaskToDelayedList+0x94>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4819      	ldr	r0, [pc, #100]	; (800a770 <prvAddCurrentTaskToDelayedList+0x98>)
 800a70c:	f7fe fbc7 	bl	8008e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a710:	e026      	b.n	800a760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4413      	add	r3, r2
 800a718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a71a:	4b14      	ldr	r3, [pc, #80]	; (800a76c <prvAddCurrentTaskToDelayedList+0x94>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	429a      	cmp	r2, r3
 800a728:	d209      	bcs.n	800a73e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <prvAddCurrentTaskToDelayedList+0x94>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f7fe fbd5 	bl	8008ee6 <vListInsert>
}
 800a73c:	e010      	b.n	800a760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a73e:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <prvAddCurrentTaskToDelayedList+0x94>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3304      	adds	r3, #4
 800a748:	4619      	mov	r1, r3
 800a74a:	4610      	mov	r0, r2
 800a74c:	f7fe fbcb 	bl	8008ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d202      	bcs.n	800a760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a75a:	4a08      	ldr	r2, [pc, #32]	; (800a77c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	6013      	str	r3, [r2, #0]
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	200011f8 	.word	0x200011f8
 800a76c:	20000d20 	.word	0x20000d20
 800a770:	200011e0 	.word	0x200011e0
 800a774:	200011b0 	.word	0x200011b0
 800a778:	200011ac 	.word	0x200011ac
 800a77c:	20001214 	.word	0x20001214

0800a780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08a      	sub	sp, #40	; 0x28
 800a784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a78a:	f000 fb07 	bl	800ad9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a78e:	4b1c      	ldr	r3, [pc, #112]	; (800a800 <xTimerCreateTimerTask+0x80>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d021      	beq.n	800a7da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a79e:	1d3a      	adds	r2, r7, #4
 800a7a0:	f107 0108 	add.w	r1, r7, #8
 800a7a4:	f107 030c 	add.w	r3, r7, #12
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fb31 	bl	8008e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	9202      	str	r2, [sp, #8]
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	460a      	mov	r2, r1
 800a7c0:	4910      	ldr	r1, [pc, #64]	; (800a804 <xTimerCreateTimerTask+0x84>)
 800a7c2:	4811      	ldr	r0, [pc, #68]	; (800a808 <xTimerCreateTimerTask+0x88>)
 800a7c4:	f7ff f8de 	bl	8009984 <xTaskCreateStatic>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	4a10      	ldr	r2, [pc, #64]	; (800a80c <xTimerCreateTimerTask+0x8c>)
 800a7cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <xTimerCreateTimerTask+0x8c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	613b      	str	r3, [r7, #16]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a7f6:	697b      	ldr	r3, [r7, #20]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20001250 	.word	0x20001250
 800a804:	080123a8 	.word	0x080123a8
 800a808:	0800a945 	.word	0x0800a945
 800a80c:	20001254 	.word	0x20001254

0800a810 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a81e:	2300      	movs	r3, #0
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	623b      	str	r3, [r7, #32]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a83e:	4b1a      	ldr	r3, [pc, #104]	; (800a8a8 <xTimerGenericCommand+0x98>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d02a      	beq.n	800a89c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b05      	cmp	r3, #5
 800a856:	dc18      	bgt.n	800a88a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a858:	f7ff feb2 	bl	800a5c0 <xTaskGetSchedulerState>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d109      	bne.n	800a876 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a862:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <xTimerGenericCommand+0x98>)
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	f107 0110 	add.w	r1, r7, #16
 800a86a:	2300      	movs	r3, #0
 800a86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86e:	f7fe fca1 	bl	80091b4 <xQueueGenericSend>
 800a872:	6278      	str	r0, [r7, #36]	; 0x24
 800a874:	e012      	b.n	800a89c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a876:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <xTimerGenericCommand+0x98>)
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	f107 0110 	add.w	r1, r7, #16
 800a87e:	2300      	movs	r3, #0
 800a880:	2200      	movs	r2, #0
 800a882:	f7fe fc97 	bl	80091b4 <xQueueGenericSend>
 800a886:	6278      	str	r0, [r7, #36]	; 0x24
 800a888:	e008      	b.n	800a89c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a88a:	4b07      	ldr	r3, [pc, #28]	; (800a8a8 <xTimerGenericCommand+0x98>)
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	f107 0110 	add.w	r1, r7, #16
 800a892:	2300      	movs	r3, #0
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	f7fe fd8b 	bl	80093b0 <xQueueGenericSendFromISR>
 800a89a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3728      	adds	r7, #40	; 0x28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20001250 	.word	0x20001250

0800a8ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b6:	4b22      	ldr	r3, [pc, #136]	; (800a940 <prvProcessExpiredTimer+0x94>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fb47 	bl	8008f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d022      	beq.n	800a91e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	18d1      	adds	r1, r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	6978      	ldr	r0, [r7, #20]
 800a8e6:	f000 f8d1 	bl	800aa8c <prvInsertTimerInActiveList>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01f      	beq.n	800a930 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	6978      	ldr	r0, [r7, #20]
 800a8fc:	f7ff ff88 	bl	800a810 <xTimerGenericCommand>
 800a900:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d113      	bne.n	800a930 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	60fb      	str	r3, [r7, #12]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a924:	f023 0301 	bic.w	r3, r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	6978      	ldr	r0, [r7, #20]
 800a936:	4798      	blx	r3
}
 800a938:	bf00      	nop
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20001248 	.word	0x20001248

0800a944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a94c:	f107 0308 	add.w	r3, r7, #8
 800a950:	4618      	mov	r0, r3
 800a952:	f000 f857 	bl	800aa04 <prvGetNextExpireTime>
 800a956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f803 	bl	800a968 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a962:	f000 f8d5 	bl	800ab10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a966:	e7f1      	b.n	800a94c <prvTimerTask+0x8>

0800a968 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a972:	f7ff fa43 	bl	8009dfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 f866 	bl	800aa4c <prvSampleTimeNow>
 800a980:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d130      	bne.n	800a9ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <prvProcessTimerOrBlockTask+0x3c>
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	429a      	cmp	r2, r3
 800a994:	d806      	bhi.n	800a9a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a996:	f7ff fa3f 	bl	8009e18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a99a:	68f9      	ldr	r1, [r7, #12]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff ff85 	bl	800a8ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9a2:	e024      	b.n	800a9ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d008      	beq.n	800a9bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9aa:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <prvProcessTimerOrBlockTask+0x90>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <prvProcessTimerOrBlockTask+0x50>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e000      	b.n	800a9ba <prvProcessTimerOrBlockTask+0x52>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <prvProcessTimerOrBlockTask+0x94>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	f7fe ffa7 	bl	800991c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9ce:	f7ff fa23 	bl	8009e18 <xTaskResumeAll>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9d8:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <prvProcessTimerOrBlockTask+0x98>)
 800a9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	f3bf 8f6f 	isb	sy
}
 800a9e8:	e001      	b.n	800a9ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9ea:	f7ff fa15 	bl	8009e18 <xTaskResumeAll>
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	2000124c 	.word	0x2000124c
 800a9fc:	20001250 	.word	0x20001250
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa0c:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <prvGetNextExpireTime+0x44>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <prvGetNextExpireTime+0x16>
 800aa16:	2201      	movs	r2, #1
 800aa18:	e000      	b.n	800aa1c <prvGetNextExpireTime+0x18>
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d105      	bne.n	800aa34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <prvGetNextExpireTime+0x44>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e001      	b.n	800aa38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa38:	68fb      	ldr	r3, [r7, #12]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20001248 	.word	0x20001248

0800aa4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa54:	f7ff fa7e 	bl	8009f54 <xTaskGetTickCount>
 800aa58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa5a:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <prvSampleTimeNow+0x3c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d205      	bcs.n	800aa70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa64:	f000 f936 	bl	800acd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa76:	4a04      	ldr	r2, [pc, #16]	; (800aa88 <prvSampleTimeNow+0x3c>)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001258 	.word	0x20001258

0800aa8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d812      	bhi.n	800aad8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	1ad2      	subs	r2, r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d302      	bcc.n	800aac6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e01b      	b.n	800aafe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aac6:	4b10      	ldr	r3, [pc, #64]	; (800ab08 <prvInsertTimerInActiveList+0x7c>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7fe fa08 	bl	8008ee6 <vListInsert>
 800aad6:	e012      	b.n	800aafe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d206      	bcs.n	800aaee <prvInsertTimerInActiveList+0x62>
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d302      	bcc.n	800aaee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aae8:	2301      	movs	r3, #1
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	e007      	b.n	800aafe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <prvInsertTimerInActiveList+0x80>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4610      	mov	r0, r2
 800aafa:	f7fe f9f4 	bl	8008ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aafe:	697b      	ldr	r3, [r7, #20]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	2000124c 	.word	0x2000124c
 800ab0c:	20001248 	.word	0x20001248

0800ab10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08e      	sub	sp, #56	; 0x38
 800ab14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab16:	e0ca      	b.n	800acae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da18      	bge.n	800ab50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab1e:	1d3b      	adds	r3, r7, #4
 800ab20:	3304      	adds	r3, #4
 800ab22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10a      	bne.n	800ab40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	61fb      	str	r3, [r7, #28]
}
 800ab3c:	bf00      	nop
 800ab3e:	e7fe      	b.n	800ab3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab46:	6850      	ldr	r0, [r2, #4]
 800ab48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab4a:	6892      	ldr	r2, [r2, #8]
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f2c0 80aa 	blt.w	800acac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	3304      	adds	r3, #4
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe f9f5 	bl	8008f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab6e:	463b      	mov	r3, r7
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff ff6b 	bl	800aa4c <prvSampleTimeNow>
 800ab76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b09      	cmp	r3, #9
 800ab7c:	f200 8097 	bhi.w	800acae <prvProcessReceivedCommands+0x19e>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <prvProcessReceivedCommands+0x78>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb1 	.word	0x0800abb1
 800ab90:	0800abb1 	.word	0x0800abb1
 800ab94:	0800ac25 	.word	0x0800ac25
 800ab98:	0800ac39 	.word	0x0800ac39
 800ab9c:	0800ac83 	.word	0x0800ac83
 800aba0:	0800abb1 	.word	0x0800abb1
 800aba4:	0800abb1 	.word	0x0800abb1
 800aba8:	0800ac25 	.word	0x0800ac25
 800abac:	0800ac39 	.word	0x0800ac39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb6:	f043 0301 	orr.w	r3, r3, #1
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	18d1      	adds	r1, r2, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd0:	f7ff ff5c 	bl	800aa8c <prvInsertTimerInActiveList>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d069      	beq.n	800acae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d05e      	beq.n	800acae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	441a      	add	r2, r3
 800abf8:	2300      	movs	r3, #0
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	2300      	movs	r3, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac02:	f7ff fe05 	bl	800a810 <xTimerGenericCommand>
 800ac06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d14f      	bne.n	800acae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	61bb      	str	r3, [r7, #24]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac2a:	f023 0301 	bic.w	r3, r3, #1
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac36:	e03a      	b.n	800acae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	617b      	str	r3, [r7, #20]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	18d1      	adds	r1, r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac7c:	f7ff ff06 	bl	800aa8c <prvInsertTimerInActiveList>
					break;
 800ac80:	e015      	b.n	800acae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ac90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac92:	f000 fbdd 	bl	800b450 <vPortFree>
 800ac96:	e00a      	b.n	800acae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9e:	f023 0301 	bic.w	r3, r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acaa:	e000      	b.n	800acae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800acac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acae:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <prvProcessReceivedCommands+0x1c0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	1d39      	adds	r1, r7, #4
 800acb4:	2200      	movs	r2, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fc16 	bl	80094e8 <xQueueReceive>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f47f af2a 	bne.w	800ab18 <prvProcessReceivedCommands+0x8>
	}
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	3730      	adds	r7, #48	; 0x30
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20001250 	.word	0x20001250

0800acd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acda:	e048      	b.n	800ad6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acdc:	4b2d      	ldr	r3, [pc, #180]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace6:	4b2b      	ldr	r3, [pc, #172]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe f92f 	bl	8008f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d02e      	beq.n	800ad6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4413      	add	r3, r2
 800ad18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d90e      	bls.n	800ad40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad2e:	4b19      	ldr	r3, [pc, #100]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7fe f8d4 	bl	8008ee6 <vListInsert>
 800ad3e:	e016      	b.n	800ad6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad40:	2300      	movs	r3, #0
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	2300      	movs	r3, #0
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	2100      	movs	r1, #0
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7ff fd60 	bl	800a810 <xTimerGenericCommand>
 800ad50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	603b      	str	r3, [r7, #0]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad6e:	4b09      	ldr	r3, [pc, #36]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1b1      	bne.n	800acdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad7e:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <prvSwitchTimerLists+0xc4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a04      	ldr	r2, [pc, #16]	; (800ad94 <prvSwitchTimerLists+0xc0>)
 800ad84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad86:	4a04      	ldr	r2, [pc, #16]	; (800ad98 <prvSwitchTimerLists+0xc4>)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	6013      	str	r3, [r2, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	20001248 	.word	0x20001248
 800ad98:	2000124c 	.word	0x2000124c

0800ad9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ada2:	f000 f967 	bl	800b074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <prvCheckForValidListAndQueue+0x60>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d120      	bne.n	800adf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adae:	4814      	ldr	r0, [pc, #80]	; (800ae00 <prvCheckForValidListAndQueue+0x64>)
 800adb0:	f7fe f848 	bl	8008e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adb4:	4813      	ldr	r0, [pc, #76]	; (800ae04 <prvCheckForValidListAndQueue+0x68>)
 800adb6:	f7fe f845 	bl	8008e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adba:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <prvCheckForValidListAndQueue+0x6c>)
 800adbc:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <prvCheckForValidListAndQueue+0x64>)
 800adbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adc0:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <prvCheckForValidListAndQueue+0x70>)
 800adc2:	4a10      	ldr	r2, [pc, #64]	; (800ae04 <prvCheckForValidListAndQueue+0x68>)
 800adc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adc6:	2300      	movs	r3, #0
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4b11      	ldr	r3, [pc, #68]	; (800ae10 <prvCheckForValidListAndQueue+0x74>)
 800adcc:	4a11      	ldr	r2, [pc, #68]	; (800ae14 <prvCheckForValidListAndQueue+0x78>)
 800adce:	2110      	movs	r1, #16
 800add0:	200a      	movs	r0, #10
 800add2:	f7fe f953 	bl	800907c <xQueueGenericCreateStatic>
 800add6:	4603      	mov	r3, r0
 800add8:	4a08      	ldr	r2, [pc, #32]	; (800adfc <prvCheckForValidListAndQueue+0x60>)
 800adda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800addc:	4b07      	ldr	r3, [pc, #28]	; (800adfc <prvCheckForValidListAndQueue+0x60>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ade4:	4b05      	ldr	r3, [pc, #20]	; (800adfc <prvCheckForValidListAndQueue+0x60>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	490b      	ldr	r1, [pc, #44]	; (800ae18 <prvCheckForValidListAndQueue+0x7c>)
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fd6c 	bl	80098c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adf0:	f000 f970 	bl	800b0d4 <vPortExitCritical>
}
 800adf4:	bf00      	nop
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20001250 	.word	0x20001250
 800ae00:	20001220 	.word	0x20001220
 800ae04:	20001234 	.word	0x20001234
 800ae08:	20001248 	.word	0x20001248
 800ae0c:	2000124c 	.word	0x2000124c
 800ae10:	200012fc 	.word	0x200012fc
 800ae14:	2000125c 	.word	0x2000125c
 800ae18:	080123b0 	.word	0x080123b0

0800ae1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3b04      	subs	r3, #4
 800ae2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b04      	subs	r3, #4
 800ae3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f023 0201 	bic.w	r2, r3, #1
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3b04      	subs	r3, #4
 800ae4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae4c:	4a0c      	ldr	r2, [pc, #48]	; (800ae80 <pxPortInitialiseStack+0x64>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3b14      	subs	r3, #20
 800ae56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3b04      	subs	r3, #4
 800ae62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f06f 0202 	mvn.w	r2, #2
 800ae6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3b20      	subs	r3, #32
 800ae70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae72:	68fb      	ldr	r3, [r7, #12]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	0800ae85 	.word	0x0800ae85

0800ae84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae8e:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <prvTaskExitError+0x54>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae96:	d00a      	beq.n	800aeae <prvTaskExitError+0x2a>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	60fb      	str	r3, [r7, #12]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <prvTaskExitError+0x28>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	60bb      	str	r3, [r7, #8]
}
 800aec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aec2:	bf00      	nop
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0fc      	beq.n	800aec4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000114 	.word	0x20000114
 800aedc:	00000000 	.word	0x00000000

0800aee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <pxCurrentTCBConst2>)
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	6808      	ldr	r0, [r1, #0]
 800aee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	f380 8809 	msr	PSP, r0
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f04f 0000 	mov.w	r0, #0
 800aef6:	f380 8811 	msr	BASEPRI, r0
 800aefa:	4770      	bx	lr
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst2>:
 800af00:	20000d20 	.word	0x20000d20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af08:	4808      	ldr	r0, [pc, #32]	; (800af2c <prvPortStartFirstTask+0x24>)
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	6800      	ldr	r0, [r0, #0]
 800af0e:	f380 8808 	msr	MSP, r0
 800af12:	f04f 0000 	mov.w	r0, #0
 800af16:	f380 8814 	msr	CONTROL, r0
 800af1a:	b662      	cpsie	i
 800af1c:	b661      	cpsie	f
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	df00      	svc	0
 800af28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af2a:	bf00      	nop
 800af2c:	e000ed08 	.word	0xe000ed08

0800af30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af36:	4b46      	ldr	r3, [pc, #280]	; (800b050 <xPortStartScheduler+0x120>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a46      	ldr	r2, [pc, #280]	; (800b054 <xPortStartScheduler+0x124>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d10a      	bne.n	800af56 <xPortStartScheduler+0x26>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	613b      	str	r3, [r7, #16]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af56:	4b3e      	ldr	r3, [pc, #248]	; (800b050 <xPortStartScheduler+0x120>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a3f      	ldr	r2, [pc, #252]	; (800b058 <xPortStartScheduler+0x128>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10a      	bne.n	800af76 <xPortStartScheduler+0x46>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af76:	4b39      	ldr	r3, [pc, #228]	; (800b05c <xPortStartScheduler+0x12c>)
 800af78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	22ff      	movs	r2, #255	; 0xff
 800af86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	4b31      	ldr	r3, [pc, #196]	; (800b060 <xPortStartScheduler+0x130>)
 800af9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af9e:	4b31      	ldr	r3, [pc, #196]	; (800b064 <xPortStartScheduler+0x134>)
 800afa0:	2207      	movs	r2, #7
 800afa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afa4:	e009      	b.n	800afba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800afa6:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <xPortStartScheduler+0x134>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3b01      	subs	r3, #1
 800afac:	4a2d      	ldr	r2, [pc, #180]	; (800b064 <xPortStartScheduler+0x134>)
 800afae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc2:	2b80      	cmp	r3, #128	; 0x80
 800afc4:	d0ef      	beq.n	800afa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afc6:	4b27      	ldr	r3, [pc, #156]	; (800b064 <xPortStartScheduler+0x134>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f1c3 0307 	rsb	r3, r3, #7
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d00a      	beq.n	800afe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60bb      	str	r3, [r7, #8]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <xPortStartScheduler+0x134>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	4a1d      	ldr	r2, [pc, #116]	; (800b064 <xPortStartScheduler+0x134>)
 800aff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aff2:	4b1c      	ldr	r3, [pc, #112]	; (800b064 <xPortStartScheduler+0x134>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800affa:	4a1a      	ldr	r2, [pc, #104]	; (800b064 <xPortStartScheduler+0x134>)
 800affc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	b2da      	uxtb	r2, r3
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <xPortStartScheduler+0x138>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a17      	ldr	r2, [pc, #92]	; (800b068 <xPortStartScheduler+0x138>)
 800b00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <xPortStartScheduler+0x138>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a14      	ldr	r2, [pc, #80]	; (800b068 <xPortStartScheduler+0x138>)
 800b018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b01e:	f000 f8dd 	bl	800b1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <xPortStartScheduler+0x13c>)
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b028:	f000 f8fc 	bl	800b224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b02c:	4b10      	ldr	r3, [pc, #64]	; (800b070 <xPortStartScheduler+0x140>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a0f      	ldr	r2, [pc, #60]	; (800b070 <xPortStartScheduler+0x140>)
 800b032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b038:	f7ff ff66 	bl	800af08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b03c:	f7ff f854 	bl	800a0e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b040:	f7ff ff20 	bl	800ae84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	e000ed00 	.word	0xe000ed00
 800b054:	410fc271 	.word	0x410fc271
 800b058:	410fc270 	.word	0x410fc270
 800b05c:	e000e400 	.word	0xe000e400
 800b060:	2000134c 	.word	0x2000134c
 800b064:	20001350 	.word	0x20001350
 800b068:	e000ed20 	.word	0xe000ed20
 800b06c:	20000114 	.word	0x20000114
 800b070:	e000ef34 	.word	0xe000ef34

0800b074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	607b      	str	r3, [r7, #4]
}
 800b08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <vPortEnterCritical+0x58>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	4a0d      	ldr	r2, [pc, #52]	; (800b0cc <vPortEnterCritical+0x58>)
 800b096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <vPortEnterCritical+0x58>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d10f      	bne.n	800b0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <vPortEnterCritical+0x5c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	603b      	str	r3, [r7, #0]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <vPortEnterCritical+0x4a>
	}
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	20000114 	.word	0x20000114
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0da:	4b12      	ldr	r3, [pc, #72]	; (800b124 <vPortExitCritical+0x50>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <vPortExitCritical+0x24>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	607b      	str	r3, [r7, #4]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <vPortExitCritical+0x50>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4a09      	ldr	r2, [pc, #36]	; (800b124 <vPortExitCritical+0x50>)
 800b100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b102:	4b08      	ldr	r3, [pc, #32]	; (800b124 <vPortExitCritical+0x50>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d105      	bne.n	800b116 <vPortExitCritical+0x42>
 800b10a:	2300      	movs	r3, #0
 800b10c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	f383 8811 	msr	BASEPRI, r3
}
 800b114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20000114 	.word	0x20000114
	...

0800b130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b130:	f3ef 8009 	mrs	r0, PSP
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	4b15      	ldr	r3, [pc, #84]	; (800b190 <pxCurrentTCBConst>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	f01e 0f10 	tst.w	lr, #16
 800b140:	bf08      	it	eq
 800b142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	6010      	str	r0, [r2, #0]
 800b14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b154:	f380 8811 	msr	BASEPRI, r0
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f7fe ffc2 	bl	800a0e8 <vTaskSwitchContext>
 800b164:	f04f 0000 	mov.w	r0, #0
 800b168:	f380 8811 	msr	BASEPRI, r0
 800b16c:	bc09      	pop	{r0, r3}
 800b16e:	6819      	ldr	r1, [r3, #0]
 800b170:	6808      	ldr	r0, [r1, #0]
 800b172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b176:	f01e 0f10 	tst.w	lr, #16
 800b17a:	bf08      	it	eq
 800b17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b180:	f380 8809 	msr	PSP, r0
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	f3af 8000 	nop.w

0800b190 <pxCurrentTCBConst>:
 800b190:	20000d20 	.word	0x20000d20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop

0800b198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
}
 800b1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1b2:	f7fe fedf 	bl	8009f74 <xTaskIncrementTick>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <xPortSysTickHandler+0x40>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f383 8811 	msr	BASEPRI, r3
}
 800b1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <vPortSetupTimerInterrupt+0x38>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <vPortSetupTimerInterrupt+0x3c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <vPortSetupTimerInterrupt+0x40>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	099b      	lsrs	r3, r3, #6
 800b1f8:	4a09      	ldr	r2, [pc, #36]	; (800b220 <vPortSetupTimerInterrupt+0x44>)
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b200:	2207      	movs	r2, #7
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	e000e010 	.word	0xe000e010
 800b214:	e000e018 	.word	0xe000e018
 800b218:	20000000 	.word	0x20000000
 800b21c:	10624dd3 	.word	0x10624dd3
 800b220:	e000e014 	.word	0xe000e014

0800b224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b234 <vPortEnableVFP+0x10>
 800b228:	6801      	ldr	r1, [r0, #0]
 800b22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b22e:	6001      	str	r1, [r0, #0]
 800b230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b232:	bf00      	nop
 800b234:	e000ed88 	.word	0xe000ed88

0800b238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b23e:	f3ef 8305 	mrs	r3, IPSR
 800b242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b0f      	cmp	r3, #15
 800b248:	d914      	bls.n	800b274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b24a:	4a17      	ldr	r2, [pc, #92]	; (800b2a8 <vPortValidateInterruptPriority+0x70>)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	4413      	add	r3, r2
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b254:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <vPortValidateInterruptPriority+0x74>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	7afa      	ldrb	r2, [r7, #11]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d20a      	bcs.n	800b274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	607b      	str	r3, [r7, #4]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b274:	4b0e      	ldr	r3, [pc, #56]	; (800b2b0 <vPortValidateInterruptPriority+0x78>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b27c:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <vPortValidateInterruptPriority+0x7c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d90a      	bls.n	800b29a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	603b      	str	r3, [r7, #0]
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <vPortValidateInterruptPriority+0x60>
	}
 800b29a:	bf00      	nop
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	e000e3f0 	.word	0xe000e3f0
 800b2ac:	2000134c 	.word	0x2000134c
 800b2b0:	e000ed0c 	.word	0xe000ed0c
 800b2b4:	20001350 	.word	0x20001350

0800b2b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08a      	sub	sp, #40	; 0x28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2c4:	f7fe fd9a 	bl	8009dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2c8:	4b5b      	ldr	r3, [pc, #364]	; (800b438 <pvPortMalloc+0x180>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2d0:	f000 f920 	bl	800b514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2d4:	4b59      	ldr	r3, [pc, #356]	; (800b43c <pvPortMalloc+0x184>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8093 	bne.w	800b408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01d      	beq.n	800b324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d014      	beq.n	800b324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f023 0307 	bic.w	r3, r3, #7
 800b300:	3308      	adds	r3, #8
 800b302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <pvPortMalloc+0x6c>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	617b      	str	r3, [r7, #20]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d06e      	beq.n	800b408 <pvPortMalloc+0x150>
 800b32a:	4b45      	ldr	r3, [pc, #276]	; (800b440 <pvPortMalloc+0x188>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d869      	bhi.n	800b408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b334:	4b43      	ldr	r3, [pc, #268]	; (800b444 <pvPortMalloc+0x18c>)
 800b336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b338:	4b42      	ldr	r3, [pc, #264]	; (800b444 <pvPortMalloc+0x18c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b33e:	e004      	b.n	800b34a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d903      	bls.n	800b35c <pvPortMalloc+0xa4>
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f1      	bne.n	800b340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b35c:	4b36      	ldr	r3, [pc, #216]	; (800b438 <pvPortMalloc+0x180>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b362:	429a      	cmp	r2, r3
 800b364:	d050      	beq.n	800b408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2208      	movs	r2, #8
 800b36c:	4413      	add	r3, r2
 800b36e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	2308      	movs	r3, #8
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	429a      	cmp	r2, r3
 800b386:	d91f      	bls.n	800b3c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4413      	add	r3, r2
 800b38e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	613b      	str	r3, [r7, #16]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3c2:	69b8      	ldr	r0, [r7, #24]
 800b3c4:	f000 f908 	bl	800b5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3c8:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <pvPortMalloc+0x188>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	4a1b      	ldr	r2, [pc, #108]	; (800b440 <pvPortMalloc+0x188>)
 800b3d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <pvPortMalloc+0x188>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <pvPortMalloc+0x190>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d203      	bcs.n	800b3ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3e2:	4b17      	ldr	r3, [pc, #92]	; (800b440 <pvPortMalloc+0x188>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a18      	ldr	r2, [pc, #96]	; (800b448 <pvPortMalloc+0x190>)
 800b3e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	4b13      	ldr	r3, [pc, #76]	; (800b43c <pvPortMalloc+0x184>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3fe:	4b13      	ldr	r3, [pc, #76]	; (800b44c <pvPortMalloc+0x194>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a11      	ldr	r2, [pc, #68]	; (800b44c <pvPortMalloc+0x194>)
 800b406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b408:	f7fe fd06 	bl	8009e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f003 0307 	and.w	r3, r3, #7
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <pvPortMalloc+0x174>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	60fb      	str	r3, [r7, #12]
}
 800b428:	bf00      	nop
 800b42a:	e7fe      	b.n	800b42a <pvPortMalloc+0x172>
	return pvReturn;
 800b42c:	69fb      	ldr	r3, [r7, #28]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3728      	adds	r7, #40	; 0x28
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20004f5c 	.word	0x20004f5c
 800b43c:	20004f70 	.word	0x20004f70
 800b440:	20004f60 	.word	0x20004f60
 800b444:	20004f54 	.word	0x20004f54
 800b448:	20004f64 	.word	0x20004f64
 800b44c:	20004f68 	.word	0x20004f68

0800b450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d04d      	beq.n	800b4fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b462:	2308      	movs	r3, #8
 800b464:	425b      	negs	r3, r3
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4413      	add	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	4b24      	ldr	r3, [pc, #144]	; (800b508 <vPortFree+0xb8>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4013      	ands	r3, r2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10a      	bne.n	800b494 <vPortFree+0x44>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60fb      	str	r3, [r7, #12]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <vPortFree+0x62>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60bb      	str	r3, [r7, #8]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <vPortFree+0xb8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01e      	beq.n	800b4fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11a      	bne.n	800b4fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <vPortFree+0xb8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	401a      	ands	r2, r3
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4d8:	f7fe fc90 	bl	8009dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <vPortFree+0xbc>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	4a09      	ldr	r2, [pc, #36]	; (800b50c <vPortFree+0xbc>)
 800b4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4ea:	6938      	ldr	r0, [r7, #16]
 800b4ec:	f000 f874 	bl	800b5d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <vPortFree+0xc0>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4a06      	ldr	r2, [pc, #24]	; (800b510 <vPortFree+0xc0>)
 800b4f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4fa:	f7fe fc8d 	bl	8009e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20004f70 	.word	0x20004f70
 800b50c:	20004f60 	.word	0x20004f60
 800b510:	20004f6c 	.word	0x20004f6c

0800b514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b51a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b520:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <prvHeapInit+0xac>)
 800b522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00c      	beq.n	800b548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3307      	adds	r3, #7
 800b532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0307 	bic.w	r3, r3, #7
 800b53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	4a1f      	ldr	r2, [pc, #124]	; (800b5c0 <prvHeapInit+0xac>)
 800b544:	4413      	add	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <prvHeapInit+0xb0>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <prvHeapInit+0xb0>)
 800b554:	2200      	movs	r2, #0
 800b556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b560:	2208      	movs	r2, #8
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0307 	bic.w	r3, r3, #7
 800b56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <prvHeapInit+0xb4>)
 800b574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <prvHeapInit+0xb4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b57e:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <prvHeapInit+0xb4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <prvHeapInit+0xb4>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4a0a      	ldr	r2, [pc, #40]	; (800b5cc <prvHeapInit+0xb8>)
 800b5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <prvHeapInit+0xbc>)
 800b5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <prvHeapInit+0xc0>)
 800b5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5b2:	601a      	str	r2, [r3, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20001354 	.word	0x20001354
 800b5c4:	20004f54 	.word	0x20004f54
 800b5c8:	20004f5c 	.word	0x20004f5c
 800b5cc:	20004f64 	.word	0x20004f64
 800b5d0:	20004f60 	.word	0x20004f60
 800b5d4:	20004f70 	.word	0x20004f70

0800b5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5e0:	4b28      	ldr	r3, [pc, #160]	; (800b684 <prvInsertBlockIntoFreeList+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e002      	b.n	800b5ec <prvInsertBlockIntoFreeList+0x14>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d8f7      	bhi.n	800b5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	4413      	add	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d108      	bne.n	800b61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	441a      	add	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	441a      	add	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d118      	bne.n	800b660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d00d      	beq.n	800b656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	441a      	add	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e008      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e003      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d002      	beq.n	800b676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20004f54 	.word	0x20004f54
 800b688:	20004f5c 	.word	0x20004f5c

0800b68c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b690:	2200      	movs	r2, #0
 800b692:	490e      	ldr	r1, [pc, #56]	; (800b6cc <MX_USB_DEVICE_Init+0x40>)
 800b694:	480e      	ldr	r0, [pc, #56]	; (800b6d0 <MX_USB_DEVICE_Init+0x44>)
 800b696:	f7fc f8ef 	bl	8007878 <USBD_Init>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6a0:	f7f5 ff40 	bl	8001524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b6a4:	490b      	ldr	r1, [pc, #44]	; (800b6d4 <MX_USB_DEVICE_Init+0x48>)
 800b6a6:	480a      	ldr	r0, [pc, #40]	; (800b6d0 <MX_USB_DEVICE_Init+0x44>)
 800b6a8:	f7fc f916 	bl	80078d8 <USBD_RegisterClass>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6b2:	f7f5 ff37 	bl	8001524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6b6:	4806      	ldr	r0, [pc, #24]	; (800b6d0 <MX_USB_DEVICE_Init+0x44>)
 800b6b8:	f7fc f935 	bl	8007926 <USBD_Start>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b6c2:	f7f5 ff2f 	bl	8001524 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6c6:	bf00      	nop
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000118 	.word	0x20000118
 800b6d0:	2000501c 	.word	0x2000501c
 800b6d4:	2000000c 	.word	0x2000000c

0800b6d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2212      	movs	r2, #18
 800b6e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20000138 	.word	0x20000138

0800b6fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	6039      	str	r1, [r7, #0]
 800b706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2204      	movs	r2, #4
 800b70c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b70e:	4b03      	ldr	r3, [pc, #12]	; (800b71c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20000158 	.word	0x20000158

0800b720 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	6039      	str	r1, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d105      	bne.n	800b73e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4907      	ldr	r1, [pc, #28]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
 800b736:	4808      	ldr	r0, [pc, #32]	; (800b758 <USBD_FS_ProductStrDescriptor+0x38>)
 800b738:	f7fd f951 	bl	80089de <USBD_GetString>
 800b73c:	e004      	b.n	800b748 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4904      	ldr	r1, [pc, #16]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
 800b742:	4805      	ldr	r0, [pc, #20]	; (800b758 <USBD_FS_ProductStrDescriptor+0x38>)
 800b744:	f7fd f94b 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b748:	4b02      	ldr	r3, [pc, #8]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	200052ec 	.word	0x200052ec
 800b758:	080123b8 	.word	0x080123b8

0800b75c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	4904      	ldr	r1, [pc, #16]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b76c:	4804      	ldr	r0, [pc, #16]	; (800b780 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b76e:	f7fd f936 	bl	80089de <USBD_GetString>
  return USBD_StrDesc;
 800b772:	4b02      	ldr	r3, [pc, #8]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200052ec 	.word	0x200052ec
 800b780:	080123d0 	.word	0x080123d0

0800b784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	221a      	movs	r2, #26
 800b794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b796:	f000 f855 	bl	800b844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b79a:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	2000015c 	.word	0x2000015c

0800b7a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d105      	bne.n	800b7c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	4907      	ldr	r1, [pc, #28]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7be:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c0:	f7fd f90d 	bl	80089de <USBD_GetString>
 800b7c4:	e004      	b.n	800b7d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	4904      	ldr	r1, [pc, #16]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ca:	4805      	ldr	r0, [pc, #20]	; (800b7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7cc:	f7fd f907 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d0:	4b02      	ldr	r3, [pc, #8]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	200052ec 	.word	0x200052ec
 800b7e0:	080123e4 	.word	0x080123e4

0800b7e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d105      	bne.n	800b802 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7fa:	4808      	ldr	r0, [pc, #32]	; (800b81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7fc:	f7fd f8ef 	bl	80089de <USBD_GetString>
 800b800:	e004      	b.n	800b80c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	4904      	ldr	r1, [pc, #16]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b806:	4805      	ldr	r0, [pc, #20]	; (800b81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b808:	f7fd f8e9 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200052ec 	.word	0x200052ec
 800b81c:	080123f0 	.word	0x080123f0

0800b820 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	220c      	movs	r2, #12
 800b830:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b832:	4b03      	ldr	r3, [pc, #12]	; (800b840 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	2000014c 	.word	0x2000014c

0800b844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <Get_SerialNum+0x44>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b850:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <Get_SerialNum+0x48>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b856:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <Get_SerialNum+0x4c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4413      	add	r3, r2
 800b862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d009      	beq.n	800b87e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b86a:	2208      	movs	r2, #8
 800b86c:	4909      	ldr	r1, [pc, #36]	; (800b894 <Get_SerialNum+0x50>)
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 f814 	bl	800b89c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b874:	2204      	movs	r2, #4
 800b876:	4908      	ldr	r1, [pc, #32]	; (800b898 <Get_SerialNum+0x54>)
 800b878:	68b8      	ldr	r0, [r7, #8]
 800b87a:	f000 f80f 	bl	800b89c <IntToUnicode>
  }
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	1fff7a10 	.word	0x1fff7a10
 800b88c:	1fff7a14 	.word	0x1fff7a14
 800b890:	1fff7a18 	.word	0x1fff7a18
 800b894:	2000015e 	.word	0x2000015e
 800b898:	2000016e 	.word	0x2000016e

0800b89c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	75fb      	strb	r3, [r7, #23]
 800b8b2:	e027      	b.n	800b904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	0f1b      	lsrs	r3, r3, #28
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d80b      	bhi.n	800b8d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	0f1b      	lsrs	r3, r3, #28
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	440b      	add	r3, r1
 800b8cc:	3230      	adds	r2, #48	; 0x30
 800b8ce:	b2d2      	uxtb	r2, r2
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	e00a      	b.n	800b8ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	0f1b      	lsrs	r3, r3, #28
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	4619      	mov	r1, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	440b      	add	r3, r1
 800b8e4:	3237      	adds	r2, #55	; 0x37
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	3301      	adds	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
 800b904:	7dfa      	ldrb	r2, [r7, #23]
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d3d3      	bcc.n	800b8b4 <IntToUnicode+0x18>
  }
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	371c      	adds	r7, #28
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
	...

0800b91c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08a      	sub	sp, #40	; 0x28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b924:	f107 0314 	add.w	r3, r7, #20
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	60da      	str	r2, [r3, #12]
 800b932:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b93c:	d13a      	bne.n	800b9b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b93e:	2300      	movs	r3, #0
 800b940:	613b      	str	r3, [r7, #16]
 800b942:	4b1e      	ldr	r3, [pc, #120]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b946:	4a1d      	ldr	r2, [pc, #116]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b948:	f043 0301 	orr.w	r3, r3, #1
 800b94c:	6313      	str	r3, [r2, #48]	; 0x30
 800b94e:	4b1b      	ldr	r3, [pc, #108]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b95a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b960:	2302      	movs	r3, #2
 800b962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b964:	2300      	movs	r3, #0
 800b966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b968:	2303      	movs	r3, #3
 800b96a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b96c:	230a      	movs	r3, #10
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	4619      	mov	r1, r3
 800b976:	4812      	ldr	r0, [pc, #72]	; (800b9c0 <HAL_PCD_MspInit+0xa4>)
 800b978:	f7f6 fa66 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b980:	4a0e      	ldr	r2, [pc, #56]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b986:	6353      	str	r3, [r2, #52]	; 0x34
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b990:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b996:	6453      	str	r3, [r2, #68]	; 0x44
 800b998:	4b08      	ldr	r3, [pc, #32]	; (800b9bc <HAL_PCD_MspInit+0xa0>)
 800b99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2105      	movs	r1, #5
 800b9a8:	2043      	movs	r0, #67	; 0x43
 800b9aa:	f7f6 fa23 	bl	8001df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9ae:	2043      	movs	r0, #67	; 0x43
 800b9b0:	f7f6 fa3c 	bl	8001e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9b4:	bf00      	nop
 800b9b6:	3728      	adds	r7, #40	; 0x28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	40023800 	.word	0x40023800
 800b9c0:	40020000 	.word	0x40020000

0800b9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4610      	mov	r0, r2
 800b9dc:	f7fb ffee 	bl	80079bc <USBD_LL_SetupStage>
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b9fa:	78fa      	ldrb	r2, [r7, #3]
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f7fc f828 	bl	8007a66 <USBD_LL_DataOutStage>
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	460b      	mov	r3, r1
 800ba28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ba30:	78fa      	ldrb	r2, [r7, #3]
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	1a9b      	subs	r3, r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	3348      	adds	r3, #72	; 0x48
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	78fb      	ldrb	r3, [r7, #3]
 800ba44:	4619      	mov	r1, r3
 800ba46:	f7fc f871 	bl	8007b2c <USBD_LL_DataInStage>
}
 800ba4a:	bf00      	nop
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fc f985 	bl	8007d70 <USBD_LL_SOF>
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba76:	2301      	movs	r3, #1
 800ba78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
 800ba86:	e008      	b.n	800ba9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d102      	bne.n	800ba96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
 800ba94:	e001      	b.n	800ba9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ba96:	f7f5 fd45 	bl	8001524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baa0:	7bfa      	ldrb	r2, [r7, #15]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fc f925 	bl	8007cf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fc f8d1 	bl	8007c58 <USBD_LL_Reset>
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
	...

0800bac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fc f920 	bl	8007d14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6812      	ldr	r2, [r2, #0]
 800bae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bae6:	f043 0301 	orr.w	r3, r3, #1
 800baea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <HAL_PCD_SuspendCallback+0x48>)
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	4a03      	ldr	r2, [pc, #12]	; (800bb08 <HAL_PCD_SuspendCallback+0x48>)
 800bafa:	f043 0306 	orr.w	r3, r3, #6
 800bafe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	e000ed00 	.word	0xe000ed00

0800bb0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fc f910 	bl	8007d40 <USBD_LL_Resume>
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fc f95e 	bl	8007e00 <USBD_LL_IsoOUTIncomplete>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb5e:	78fa      	ldrb	r2, [r7, #3]
 800bb60:	4611      	mov	r1, r2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fc f926 	bl	8007db4 <USBD_LL_IsoINIncomplete>
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fc f964 	bl	8007e4c <USBD_LL_DevConnected>
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fc f961 	bl	8007e62 <USBD_LL_DevDisconnected>
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d13c      	bne.n	800bc32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bbb8:	4a20      	ldr	r2, [pc, #128]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a1e      	ldr	r2, [pc, #120]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bbce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbd2:	2206      	movs	r2, #6
 800bbd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bbd6:	4b19      	ldr	r3, [pc, #100]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbd8:	2202      	movs	r2, #2
 800bbda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbdc:	4b17      	ldr	r3, [pc, #92]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbe2:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bbe8:	4b14      	ldr	r3, [pc, #80]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bbee:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bbf4:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bbfa:	4b10      	ldr	r3, [pc, #64]	; (800bc3c <USBD_LL_Init+0x94>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc00:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <USBD_LL_Init+0x94>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc06:	480d      	ldr	r0, [pc, #52]	; (800bc3c <USBD_LL_Init+0x94>)
 800bc08:	f7f6 fae3 	bl	80021d2 <HAL_PCD_Init>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bc12:	f7f5 fc87 	bl	8001524 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bc16:	2180      	movs	r1, #128	; 0x80
 800bc18:	4808      	ldr	r0, [pc, #32]	; (800bc3c <USBD_LL_Init+0x94>)
 800bc1a:	f7f7 fc5c 	bl	80034d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bc1e:	2240      	movs	r2, #64	; 0x40
 800bc20:	2100      	movs	r1, #0
 800bc22:	4806      	ldr	r0, [pc, #24]	; (800bc3c <USBD_LL_Init+0x94>)
 800bc24:	f7f7 fc10 	bl	8003448 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bc28:	2280      	movs	r2, #128	; 0x80
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	4803      	ldr	r0, [pc, #12]	; (800bc3c <USBD_LL_Init+0x94>)
 800bc2e:	f7f7 fc0b 	bl	8003448 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	200054ec 	.word	0x200054ec

0800bc40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7f6 fbdf 	bl	800241a <HAL_PCD_Start>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 f97e 	bl	800bf64 <USBD_Get_USB_Status>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	4608      	mov	r0, r1
 800bc80:	4611      	mov	r1, r2
 800bc82:	461a      	mov	r2, r3
 800bc84:	4603      	mov	r3, r0
 800bc86:	70fb      	strb	r3, [r7, #3]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70bb      	strb	r3, [r7, #2]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc9e:	78bb      	ldrb	r3, [r7, #2]
 800bca0:	883a      	ldrh	r2, [r7, #0]
 800bca2:	78f9      	ldrb	r1, [r7, #3]
 800bca4:	f7f6 fff0 	bl	8002c88 <HAL_PCD_EP_Open>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f958 	bl	800bf64 <USBD_Get_USB_Status>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	460b      	mov	r3, r1
 800bccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcdc:	78fa      	ldrb	r2, [r7, #3]
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7f7 f839 	bl	8002d58 <HAL_PCD_EP_Close>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f939 	bl	800bf64 <USBD_Get_USB_Status>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd1a:	78fa      	ldrb	r2, [r7, #3]
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7f7 f8f9 	bl	8002f16 <HAL_PCD_EP_SetStall>
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f91a 	bl	800bf64 <USBD_Get_USB_Status>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	460b      	mov	r3, r1
 800bd48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd58:	78fa      	ldrb	r2, [r7, #3]
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7f7 f93e 	bl	8002fde <HAL_PCD_EP_ClrStall>
 800bd62:	4603      	mov	r3, r0
 800bd64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 f8fb 	bl	800bf64 <USBD_Get_USB_Status>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da0b      	bge.n	800bdb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd98:	78fb      	ldrb	r3, [r7, #3]
 800bd9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd9e:	68f9      	ldr	r1, [r7, #12]
 800bda0:	4613      	mov	r3, r2
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	1a9b      	subs	r3, r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	440b      	add	r3, r1
 800bdaa:	333e      	adds	r3, #62	; 0x3e
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	e00b      	b.n	800bdc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	1a9b      	subs	r3, r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	440b      	add	r3, r1
 800bdc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7f6 ff23 	bl	8002c3e <HAL_PCD_SetAddress>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f8b0 	bl	800bf64 <USBD_Get_USB_Status>
 800be04:	4603      	mov	r3, r0
 800be06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be08:	7bbb      	ldrb	r3, [r7, #14]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
 800be1e:	460b      	mov	r3, r1
 800be20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be30:	7af9      	ldrb	r1, [r7, #11]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	f7f7 f824 	bl	8002e82 <HAL_PCD_EP_Transmit>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	4618      	mov	r0, r3
 800be42:	f000 f88f 	bl	800bf64 <USBD_Get_USB_Status>
 800be46:	4603      	mov	r3, r0
 800be48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	607a      	str	r2, [r7, #4]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	460b      	mov	r3, r1
 800be62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be64:	2300      	movs	r3, #0
 800be66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be72:	7af9      	ldrb	r1, [r7, #11]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	f7f6 ffb8 	bl	8002dec <HAL_PCD_EP_Receive>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	4618      	mov	r0, r3
 800be84:	f000 f86e 	bl	800bf64 <USBD_Get_USB_Status>
 800be88:	4603      	mov	r3, r0
 800be8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bea4:	78fb      	ldrb	r3, [r7, #3]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <HAL_PCDEx_LPM_Callback+0x18>
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d01f      	beq.n	800beee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800beae:	e03b      	b.n	800bf28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d007      	beq.n	800bec8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800beb8:	f7f5 f98a 	bl	80011d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bebc:	4b1c      	ldr	r3, [pc, #112]	; (800bf30 <HAL_PCDEx_LPM_Callback+0x98>)
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	4a1b      	ldr	r2, [pc, #108]	; (800bf30 <HAL_PCDEx_LPM_Callback+0x98>)
 800bec2:	f023 0306 	bic.w	r3, r3, #6
 800bec6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	6812      	ldr	r2, [r2, #0]
 800bed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800beda:	f023 0301 	bic.w	r3, r3, #1
 800bede:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fb ff2a 	bl	8007d40 <USBD_LL_Resume>
    break;
 800beec:	e01c      	b.n	800bf28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	6812      	ldr	r2, [r2, #0]
 800befc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf00:	f043 0301 	orr.w	r3, r3, #1
 800bf04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fb ff01 	bl	8007d14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf1a:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf20:	f043 0306 	orr.w	r3, r3, #6
 800bf24:	6113      	str	r3, [r2, #16]
    break;
 800bf26:	bf00      	nop
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	e000ed00 	.word	0xe000ed00

0800bf34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf3c:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <USBD_static_malloc+0x18>)
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	20004f74 	.word	0x20004f74

0800bf50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]

}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	2b03      	cmp	r3, #3
 800bf76:	d817      	bhi.n	800bfa8 <USBD_Get_USB_Status+0x44>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <USBD_Get_USB_Status+0x1c>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bf91 	.word	0x0800bf91
 800bf84:	0800bf97 	.word	0x0800bf97
 800bf88:	0800bf9d 	.word	0x0800bf9d
 800bf8c:	0800bfa3 	.word	0x0800bfa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
    break;
 800bf94:	e00b      	b.n	800bfae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf96:	2303      	movs	r3, #3
 800bf98:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9a:	e008      	b.n	800bfae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa0:	e005      	b.n	800bfae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa6:	e002      	b.n	800bfae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bfac:	bf00      	nop
  }
  return usb_status;
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	70fb      	strb	r3, [r7, #3]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	70bb      	strb	r3, [r7, #2]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	707b      	strb	r3, [r7, #1]
                return 0;
 800bfd6:	2300      	movs	r3, #0
        }
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	70fb      	strb	r3, [r7, #3]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70bb      	strb	r3, [r7, #2]
 800bffa:	4613      	mov	r3, r2
 800bffc:	707b      	strb	r3, [r7, #1]
                return 0;
 800bffe:	2300      	movs	r3, #0
        }
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
                return 0;
 800c014:	2300      	movs	r3, #0
        }
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
                return 0;
 800c02a:	2300      	movs	r3, #0
        }
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
                return 0;
 800c040:	2300      	movs	r3, #0
        }
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c04e:	b480      	push	{r7}
 800c050:	b083      	sub	sp, #12
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
                return;
 800c05a:	bf00      	nop
        } // Note used for hubs only!
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	807b      	strh	r3, [r7, #2]
 800c072:	4613      	mov	r3, r2
 800c074:	803b      	strh	r3, [r7, #0]
                return false;
 800c076:	2300      	movs	r3, #0
        }
 800c078:	4618      	mov	r0, r3
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c090:	2300      	movs	r3, #0
        }
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	70fb      	strb	r3, [r7, #3]
                return true;
 800c0aa:	2301      	movs	r3, #1
        }
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c0c0:	687b      	ldr	r3, [r7, #4]
        };
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c0ce:	b480      	push	{r7}
 800c0d0:	b085      	sub	sp, #20
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
 800c0de:	2b0f      	cmp	r3, #15
 800c0e0:	d812      	bhi.n	800c108 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c0e2:	7bfa      	ldrb	r2, [r7, #15]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	321e      	adds	r2, #30
 800c0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d107      	bne.n	800c100 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c0f0:	7bfa      	ldrb	r2, [r7, #15]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	321e      	adds	r2, #30
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e004      	b.n	800c10a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	3301      	adds	r3, #1
 800c104:	73fb      	strb	r3, [r7, #15]
 800c106:	e7e9      	b.n	800c0dc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c108:	23d3      	movs	r3, #211	; 0xd3
        };
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	705a      	strb	r2, [r3, #1]
 800c12a:	2200      	movs	r2, #0
 800c12c:	709a      	strb	r2, [r3, #2]
 800c12e:	2200      	movs	r2, #0
 800c130:	70da      	strb	r2, [r3, #3]
 800c132:	2200      	movs	r2, #0
 800c134:	711a      	strb	r2, [r3, #4]
        };
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	711a      	strb	r2, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	715a      	strb	r2, [r3, #5]
        };
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	715a      	strb	r2, [r3, #5]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	795a      	ldrb	r2, [r3, #5]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	711a      	strb	r2, [r3, #4]
        };
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	711a      	strb	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	80da      	strh	r2, [r3, #6]
        };
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	80da      	strh	r2, [r3, #6]
        };
 800c1de:	bf00      	nop
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
 800c1f6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	791b      	ldrb	r3, [r3, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c200:	2b01      	cmp	r3, #1
 800c202:	d009      	beq.n	800c218 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c204:	e029      	b.n	800c25a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	887a      	ldrh	r2, [r7, #2]
 800c20a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	791b      	ldrb	r3, [r3, #4]
 800c210:	3301      	adds	r3, #1
 800c212:	b2da      	uxtb	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	88db      	ldrh	r3, [r3, #6]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d015      	beq.n	800c24c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d011      	beq.n	800c24c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	88db      	ldrh	r3, [r3, #6]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	b29a      	uxth	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	80da      	strh	r2, [r3, #6]
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	3b01      	subs	r3, #1
 800c244:	b29a      	uxth	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	801a      	strh	r2, [r3, #0]
 800c24a:	e7e5      	b.n	800c218 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	88db      	ldrh	r3, [r3, #6]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d102      	bne.n	800c25a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	88db      	ldrh	r3, [r3, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bf0c      	ite	eq
 800c262:	2301      	moveq	r3, #1
 800c264:	2300      	movne	r3, #0
 800c266:	b2db      	uxtb	r3, r3
        };
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	4608      	mov	r0, r1
 800c27e:	4611      	mov	r1, r2
 800c280:	461a      	mov	r2, r3
 800c282:	4603      	mov	r3, r0
 800c284:	70fb      	strb	r3, [r7, #3]
 800c286:	460b      	mov	r3, r1
 800c288:	70bb      	strb	r3, [r7, #2]
 800c28a:	4613      	mov	r3, r2
 800c28c:	707b      	strb	r3, [r7, #1]
        };
 800c28e:	bf00      	nop
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
	...

0800c29c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	4a04      	ldr	r2, [pc, #16]	; (800c2b8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr
 800c2b8:	080125d4 	.word	0x080125d4

0800c2bc <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	4a04      	ldr	r2, [pc, #16]	; (800c2d8 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	080125bc 	.word	0x080125bc

0800c2dc <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c31c:	78fb      	ldrb	r3, [r7, #3]
 800c31e:	2be0      	cmp	r3, #224	; 0xe0
 800c320:	bf0c      	ite	eq
 800c322:	2301      	moveq	r3, #1
 800c324:	2300      	movne	r3, #0
 800c326:	b2db      	uxtb	r3, r3
        };
 800c328:	4618      	mov	r0, r3
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	807b      	strh	r3, [r7, #2]
 800c340:	4613      	mov	r3, r2
 800c342:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c344:	887b      	ldrh	r3, [r7, #2]
 800c346:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d104      	bne.n	800c358 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c34e:	883b      	ldrh	r3, [r7, #0]
 800c350:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c354:	4293      	cmp	r3, r2
 800c356:	d009      	beq.n	800c36c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c358:	887b      	ldrh	r3, [r7, #2]
 800c35a:	f240 520d 	movw	r2, #1293	; 0x50d
 800c35e:	4293      	cmp	r3, r2
 800c360:	d106      	bne.n	800c370 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c362:	883b      	ldrh	r3, [r7, #0]
 800c364:	f240 625a 	movw	r2, #1626	; 0x65a
 800c368:	4293      	cmp	r3, r2
 800c36a:	d101      	bne.n	800c370 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e02d      	b.n	800c3cc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7d1b      	ldrb	r3, [r3, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d113      	bne.n	800c3a0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7d5b      	ldrb	r3, [r3, #21]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10f      	bne.n	800c3a0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7d9b      	ldrb	r3, [r3, #22]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10b      	bne.n	800c3a0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7ddb      	ldrb	r3, [r3, #23]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d107      	bne.n	800c3a0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7e1b      	ldrb	r3, [r3, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7e5b      	ldrb	r3, [r3, #25]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d014      	beq.n	800c3ca <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c3a0:	887b      	ldrh	r3, [r7, #2]
 800c3a2:	f240 524c 	movw	r2, #1356	; 0x54c
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d10f      	bne.n	800c3ca <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c3aa:	883b      	ldrh	r3, [r7, #0]
 800c3ac:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c3b0:	d009      	beq.n	800c3c6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c3b2:	883b      	ldrh	r3, [r7, #0]
 800c3b4:	f240 422f 	movw	r2, #1071	; 0x42f
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d004      	beq.n	800c3c6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c3bc:	883b      	ldrh	r3, [r7, #0]
 800c3be:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d101      	bne.n	800c3ca <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e000      	b.n	800c3cc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c3ca:	2300      	movs	r3, #0
        };
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff ff59 	bl	800c29c <_ZN15USBDeviceConfigC1Ev>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ff64 	bl	800c2bc <_ZN17UsbConfigXtracterC1Ev>
 800c3f4:	4a2b      	ldr	r2, [pc, #172]	; (800c4a4 <_ZN3BTDC1EP3USB+0xcc>)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	4a2b      	ldr	r2, [pc, #172]	; (800c4a8 <_ZN3BTDC1EP3USB+0xd0>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	605a      	str	r2, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	64da      	str	r2, [r3, #76]	; 0x4c
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	661a      	str	r2, [r3, #96]	; 0x60
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	2b03      	cmp	r3, #3
 800c464:	d80a      	bhi.n	800c47c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	3318      	adds	r3, #24
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	2200      	movs	r2, #0
 800c472:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c474:	7bfb      	ldrb	r3, [r7, #15]
 800c476:	3301      	adds	r3, #1
 800c478:	73fb      	strb	r3, [r7, #15]
 800c47a:	e7f1      	b.n	800c460 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fa7d 	bl	800c97c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c486:	2b00      	cmp	r3, #0
 800c488:	d006      	beq.n	800c498 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff fe1b 	bl	800c0ce <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0801257c 	.word	0x0801257c
 800c4a8:	080125b0 	.word	0x080125b0

0800c4ac <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b08f      	sub	sp, #60	; 0x3c
 800c4b0:	af02      	add	r7, sp, #8
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	70fb      	strb	r3, [r7, #3]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70bb      	strb	r3, [r7, #2]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c4c6:	2312      	movs	r3, #18
 800c4c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa4e 	bl	800c97c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff fde7 	bl	800c0b8 <_ZN3USB14GetAddressPoolEv>
 800c4ea:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d001      	beq.n	800c4fa <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c4f6:	23d9      	movs	r3, #217	; 0xd9
 800c4f8:	e087      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2100      	movs	r1, #0
 800c502:	69f8      	ldr	r0, [r7, #28]
 800c504:	4798      	blx	r3
 800c506:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c50e:	23d6      	movs	r3, #214	; 0xd6
 800c510:	e07b      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c51a:	23d7      	movs	r3, #215	; 0xd7
 800c51c:	e075      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	787a      	ldrb	r2, [r7, #1]
 800c532:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c538:	f107 0308 	add.w	r3, r7, #8
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	2312      	movs	r3, #18
 800c540:	2200      	movs	r2, #0
 800c542:	2100      	movs	r1, #0
 800c544:	f005 fa13 	bl	801196e <_ZN3USB11getDevDescrEhhtPh>
 800c548:	4603      	mov	r3, r0
 800c54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	6a3a      	ldr	r2, [r7, #32]
 800c552:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d146      	bne.n	800c5ea <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3304      	adds	r3, #4
 800c562:	681c      	ldr	r4, [r3, #0]
 800c564:	78bb      	ldrb	r3, [r7, #2]
 800c566:	78f9      	ldrb	r1, [r7, #3]
 800c568:	2200      	movs	r2, #0
 800c56a:	69f8      	ldr	r0, [r7, #28]
 800c56c:	47a0      	blx	r4
 800c56e:	4603      	mov	r3, r0
 800c570:	461a      	mov	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c582:	23d4      	movs	r3, #212	; 0xd4
 800c584:	e041      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	791b      	ldrb	r3, [r3, #4]
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	d017      	beq.n	800c5be <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	79da      	ldrb	r2, [r3, #7]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	7c5a      	ldrb	r2, [r3, #17]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	891b      	ldrh	r3, [r3, #8]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	895b      	ldrh	r3, [r3, #10]
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c5ba:	23e0      	movs	r3, #224	; 0xe0
 800c5bc:	e025      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c5be:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f005 fa6b 	bl	8011aa8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c5d2:	23d1      	movs	r3, #209	; 0xd1
 800c5d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	4798      	blx	r3
        return rcode;
 800c5e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5e8:	e00f      	b.n	800c60a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c5ea:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c5ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5f0:	2b0d      	cmp	r3, #13
 800c5f2:	d002      	beq.n	800c5fa <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c5f4:	23e1      	movs	r3, #225	; 0xe1
 800c5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3308      	adds	r3, #8
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	4798      	blx	r3
        return rcode;
 800c606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c60a:	4618      	mov	r0, r3
 800c60c:	3734      	adds	r7, #52	; 0x34
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd90      	pop	{r4, r7, pc}

0800c612 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c612:	b580      	push	{r7, lr}
 800c614:	b096      	sub	sp, #88	; 0x58
 800c616:	af02      	add	r7, sp, #8
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	4608      	mov	r0, r1
 800c61c:	4611      	mov	r1, r2
 800c61e:	461a      	mov	r2, r3
 800c620:	4603      	mov	r3, r0
 800c622:	70fb      	strb	r3, [r7, #3]
 800c624:	460b      	mov	r3, r1
 800c626:	70bb      	strb	r3, [r7, #2]
 800c628:	4613      	mov	r3, r2
 800c62a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c632:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff fd38 	bl	800c0b8 <_ZN3USB14GetAddressPoolEv>
 800c648:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c64a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c656:	4611      	mov	r1, r2
 800c658:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c65a:	4798      	blx	r3
 800c65c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c664:	23d6      	movs	r3, #214	; 0xd6
 800c666:	e185      	b.n	800c974 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c668:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c66c:	f7f5 fae6 	bl	8001c3c <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	f005 fa13 	bl	8011aa8 <_ZN3USB7setAddrEhhh>
 800c682:	4603      	mov	r3, r0
 800c684:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c692:	2200      	movs	r2, #0
 800c694:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c696:	e165      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c69a:	2200      	movs	r2, #0
 800c69c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6ae:	4798      	blx	r3
 800c6b0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c6b8:	23d6      	movs	r3, #214	; 0xd6
 800c6ba:	e15b      	b.n	800c974 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6be:	787a      	ldrb	r2, [r7, #1]
 800c6c0:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3351      	adds	r3, #81	; 0x51
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f004 f8dc 	bl	801088e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c6dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f040 8128 	bne.w	800c936 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c6ec:	f240 524c 	movw	r2, #1356	; 0x54c
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d177      	bne.n	800c7e4 <_ZN3BTD4InitEhhb+0x1d2>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c6fa:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c6fe:	d00d      	beq.n	800c71c <_ZN3BTD4InitEhhb+0x10a>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c706:	f240 422f 	movw	r2, #1071	; 0x42f
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d006      	beq.n	800c71c <_ZN3BTD4InitEhhb+0x10a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c714:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c718:	4293      	cmp	r3, r2
 800c71a:	d163      	bne.n	800c7e4 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800c71c:	2064      	movs	r0, #100	; 0x64
 800c71e:	f7f5 fa8d 	bl	8001c3c <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c732:	2301      	movs	r3, #1
 800c734:	f005 f9e6 	bl	8011b04 <_ZN3USB7setConfEhhh>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c73e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c742:	2b00      	cmp	r3, #0
 800c744:	f040 80f9 	bne.w	800c93a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7d1b      	ldrb	r3, [r3, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d113      	bne.n	800c778 <_ZN3BTD4InitEhhb+0x166>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7d5b      	ldrb	r3, [r3, #21]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10f      	bne.n	800c778 <_ZN3BTD4InitEhhb+0x166>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7d9b      	ldrb	r3, [r3, #22]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10b      	bne.n	800c778 <_ZN3BTD4InitEhhb+0x166>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7ddb      	ldrb	r3, [r3, #23]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d107      	bne.n	800c778 <_ZN3BTD4InitEhhb+0x166>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7e1b      	ldrb	r3, [r3, #24]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <_ZN3BTD4InitEhhb+0x166>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7e5b      	ldrb	r3, [r3, #25]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d019      	beq.n	800c7ac <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c77e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c782:	d006      	beq.n	800c792 <_ZN3BTD4InitEhhb+0x180>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c78a:	f240 422f 	movw	r2, #1071	; 0x42f
 800c78e:	4293      	cmp	r3, r2
 800c790:	d106      	bne.n	800c7a0 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3314      	adds	r3, #20
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f002 f8b0 	bl	800e8fe <_ZN3BTD9setBdaddrEPh>
 800c79e:	e005      	b.n	800c7ac <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3314      	adds	r3, #20
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f002 f8e9 	bl	800e97e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f005 f9a1 	bl	8011b04 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f005 f96a 	bl	8011aa8 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800c7e0:	23d1      	movs	r3, #209	; 0xd1
 800c7e2:	e0c7      	b.n	800c974 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c7ea:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c7ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d25e      	bcs.n	800c8b4 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c7fc:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c800:	4293      	cmp	r3, r2
 800c802:	d106      	bne.n	800c812 <_ZN3BTD4InitEhhb+0x200>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c80a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c80e:	4293      	cmp	r3, r2
 800c810:	d00d      	beq.n	800c82e <_ZN3BTD4InitEhhb+0x21c>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c818:	f240 520d 	movw	r2, #1293	; 0x50d
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d120      	bne.n	800c862 <_ZN3BTD4InitEhhb+0x250>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c826:	f240 625a 	movw	r2, #1626	; 0x65a
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d119      	bne.n	800c862 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	f107 0308 	add.w	r3, r7, #8
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f002 f8f3 	bl	800ea24 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c848:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c84c:	f107 0308 	add.w	r3, r7, #8
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	4613      	mov	r3, r2
 800c854:	2200      	movs	r2, #0
 800c856:	f005 f8da 	bl	8011a0e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800c85a:	4603      	mov	r3, r0
 800c85c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c860:	e018      	b.n	800c894 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1d1a      	adds	r2, r3, #4
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	4611      	mov	r1, r2
 800c86c:	4618      	mov	r0, r3
 800c86e:	f002 f927 	bl	800eac0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c87c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c880:	f107 0308 	add.w	r3, r7, #8
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	4613      	mov	r3, r2
 800c888:	2200      	movs	r2, #0
 800c88a:	f005 f8c0 	bl	8011a0e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800c88e:	4603      	mov	r3, r0
 800c890:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800c894:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d150      	bne.n	800c93e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d805      	bhi.n	800c8b2 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800c8a6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c8b0:	e79b      	b.n	800c7ea <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800c8b2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d945      	bls.n	800c94a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3351      	adds	r3, #81	; 0x51
 800c8d2:	f003 ffdc 	bl	801088e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c8dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d12e      	bne.n	800c942 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8fa:	f005 f903 	bl	8011b04 <_ZN3USB7setConfEhhh>
 800c8fe:	4603      	mov	r3, r0
 800c900:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d11c      	bne.n	800c946 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2264      	movs	r2, #100	; 0x64
 800c910:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800c932:	2300      	movs	r3, #0
 800c934:	e01e      	b.n	800c974 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800c936:	bf00      	nop
 800c938:	e014      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800c93a:	bf00      	nop
 800c93c:	e012      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800c93e:	bf00      	nop
 800c940:	e010      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800c942:	bf00      	nop
 800c944:	e00e      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800c946:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800c948:	e00c      	b.n	800c964 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800c94a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c956:	2300      	movs	r3, #0
 800c958:	2200      	movs	r2, #0
 800c95a:	f005 f8a5 	bl	8011aa8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c95e:	23d1      	movs	r3, #209	; 0xd1
 800c960:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3308      	adds	r3, #8
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	4798      	blx	r3
        return rcode;
 800c970:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c974:	4618      	mov	r0, r3
 800c976:	3750      	adds	r7, #80	; 0x50
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d845      	bhi.n	800ca1a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800c98e:	7bfa      	ldrb	r2, [r7, #15]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	440b      	add	r3, r1
 800c99a:	3351      	adds	r3, #81	; 0x51
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <_ZN3BTD10InitializeEv+0x2e>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e000      	b.n	800c9ac <_ZN3BTD10InitializeEv+0x30>
 800c9aa:	2008      	movs	r0, #8
 800c9ac:	7bfa      	ldrb	r2, [r7, #15]
 800c9ae:	6879      	ldr	r1, [r7, #4]
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	4413      	add	r3, r2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	3352      	adds	r3, #82	; 0x52
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800c9be:	7bfa      	ldrb	r2, [r7, #15]
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	4413      	add	r3, r2
 800c9c8:	440b      	add	r3, r1
 800c9ca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800c9ce:	78d3      	ldrb	r3, [r2, #3]
 800c9d0:	f36f 0300 	bfc	r3, #0, #1
 800c9d4:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800c9d6:	7bfa      	ldrb	r2, [r7, #15]
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	440b      	add	r3, r1
 800c9e2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800c9e6:	78d3      	ldrb	r3, [r2, #3]
 800c9e8:	f36f 0341 	bfc	r3, #1, #1
 800c9ec:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <_ZN3BTD10InitializeEv+0x7c>
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	e000      	b.n	800c9fa <_ZN3BTD10InitializeEv+0x7e>
 800c9f8:	210f      	movs	r1, #15
 800c9fa:	7bfa      	ldrb	r2, [r7, #15]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	4413      	add	r3, r2
 800ca04:	4403      	add	r3, r0
 800ca06:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ca0a:	78d3      	ldrb	r3, [r2, #3]
 800ca0c:	f361 0387 	bfi	r3, r1, #2, #6
 800ca10:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
 800ca14:	3301      	adds	r3, #1
 800ca16:	73fb      	strb	r3, [r7, #15]
 800ca18:	e7b6      	b.n	800c988 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d81c      	bhi.n	800ca5e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	3318      	adds	r3, #24
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d010      	beq.n	800ca56 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	3318      	adds	r3, #24
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	6859      	ldr	r1, [r3, #4]
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	3318      	adds	r3, #24
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3308      	adds	r3, #8
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4608      	mov	r0, r1
 800ca54:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	73fb      	strb	r3, [r7, #15]
 800ca5c:	e7df      	b.n	800ca1e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cab4:	bf00      	nop
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	4608      	mov	r0, r1
 800cac6:	4611      	mov	r1, r2
 800cac8:	461a      	mov	r2, r3
 800caca:	4603      	mov	r3, r0
 800cacc:	70fb      	strb	r3, [r7, #3]
 800cace:	460b      	mov	r3, r1
 800cad0:	70bb      	strb	r3, [r7, #2]
 800cad2:	4613      	mov	r3, r2
 800cad4:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cad6:	787b      	ldrb	r3, [r7, #1]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d15d      	bne.n	800cb98 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	78fa      	ldrb	r2, [r7, #3]
 800cae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	78db      	ldrb	r3, [r3, #3]
 800cae8:	f003 0303 	and.w	r3, r3, #3
 800caec:	2b03      	cmp	r3, #3
 800caee:	d114      	bne.n	800cb1a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	789b      	ldrb	r3, [r3, #2]
 800caf4:	b25b      	sxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	da0f      	bge.n	800cb1a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cafe:	7bfa      	ldrb	r2, [r7, #15]
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	4613      	mov	r3, r2
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	4413      	add	r3, r2
 800cb08:	440b      	add	r3, r1
 800cb0a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cb0e:	78d3      	ldrb	r3, [r2, #3]
 800cb10:	2101      	movs	r1, #1
 800cb12:	f361 0387 	bfi	r3, r1, #2, #6
 800cb16:	70d3      	strb	r3, [r2, #3]
 800cb18:	e00e      	b.n	800cb38 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	78db      	ldrb	r3, [r3, #3]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d13a      	bne.n	800cb9c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	789b      	ldrb	r3, [r3, #2]
 800cb2a:	b25b      	sxtb	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da01      	bge.n	800cb34 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800cb30:	2302      	movs	r3, #2
 800cb32:	e000      	b.n	800cb36 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800cb34:	2303      	movs	r3, #3
 800cb36:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	789b      	ldrb	r3, [r3, #2]
 800cb3c:	7bfa      	ldrb	r2, [r7, #15]
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	b2d8      	uxtb	r0, r3
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	440b      	add	r3, r1
 800cb4e:	3351      	adds	r3, #81	; 0x51
 800cb50:	4602      	mov	r2, r0
 800cb52:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	889b      	ldrh	r3, [r3, #4]
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	7bfa      	ldrb	r2, [r7, #15]
 800cb5c:	b2d8      	uxtb	r0, r3
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	4613      	mov	r3, r2
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	4413      	add	r3, r2
 800cb66:	440b      	add	r3, r1
 800cb68:	3352      	adds	r3, #82	; 0x52
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	799b      	ldrb	r3, [r3, #6]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d204      	bcs.n	800cb86 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	799a      	ldrb	r2, [r3, #6]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800cb96:	e002      	b.n	800cb9e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800cb98:	bf00      	nop
 800cb9a:	e000      	b.n	800cb9e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800cb9c:	bf00      	nop
}
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800cba8:	f1a0 0004 	sub.w	r0, r0, #4
 800cbac:	f7ff bf86 	b.w	800cabc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800cbb0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff fedf 	bl	800c97c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7ff fa78 	bl	800c0b8 <_ZN3USB14GetAddressPoolEv>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	3208      	adds	r2, #8
 800cbce:	6812      	ldr	r2, [r2, #0]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	4790      	blx	r2
        return 0;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cbf2:	f083 0301 	eor.w	r3, r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e01d      	b.n	800cc3c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800cc00:	f7f5 f810 	bl	8001c24 <HAL_GetTick>
 800cc04:	4602      	mov	r2, r0
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	0fdb      	lsrs	r3, r3, #31
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d011      	beq.n	800cc3a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cc16:	f7f5 f805 	bl	8001c24 <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cc22:	441a      	add	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f80b 	bl	800cc44 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fb22 	bl	800d278 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fe4b 	bl	800d8d0 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800cc44:	b5b0      	push	{r4, r5, r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800cc4c:	2340      	movs	r3, #64	; 0x40
 800cc4e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3389      	adds	r3, #137	; 0x89
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cc6a:	f107 050c 	add.w	r5, r7, #12
 800cc6e:	9201      	str	r2, [sp, #4]
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	462b      	mov	r3, r5
 800cc74:	4622      	mov	r2, r4
 800cc76:	f003 ff72 	bl	8010b5e <_ZN3USB10inTransferEhhPtPhh>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	f040 82f1 	bne.w	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cc92:	3b01      	subs	r3, #1
 800cc94:	2b35      	cmp	r3, #53	; 0x35
 800cc96:	f200 82ea 	bhi.w	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cc9a:	a201      	add	r2, pc, #4	; (adr r2, 800cca0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ce81 	.word	0x0800ce81
 800cca4:	0800cee1 	.word	0x0800cee1
 800cca8:	0800d039 	.word	0x0800d039
 800ccac:	0800d123 	.word	0x0800d123
 800ccb0:	0800d095 	.word	0x0800d095
 800ccb4:	0800d1e1 	.word	0x0800d1e1
 800ccb8:	0800d0c7 	.word	0x0800d0c7
 800ccbc:	0800d259 	.word	0x0800d259
 800ccc0:	0800d259 	.word	0x0800d259
 800ccc4:	0800d26f 	.word	0x0800d26f
 800ccc8:	0800d26f 	.word	0x0800d26f
 800cccc:	0800d259 	.word	0x0800d259
 800ccd0:	0800d259 	.word	0x0800d259
 800ccd4:	0800cd79 	.word	0x0800cd79
 800ccd8:	0800d259 	.word	0x0800d259
 800ccdc:	0800d26f 	.word	0x0800d26f
 800cce0:	0800d26f 	.word	0x0800d26f
 800cce4:	0800d259 	.word	0x0800d259
 800cce8:	0800d259 	.word	0x0800d259
 800ccec:	0800d26f 	.word	0x0800d26f
 800ccf0:	0800d26f 	.word	0x0800d26f
 800ccf4:	0800d1af 	.word	0x0800d1af
 800ccf8:	0800d1d9 	.word	0x0800d1d9
 800ccfc:	0800d259 	.word	0x0800d259
 800cd00:	0800d259 	.word	0x0800d259
 800cd04:	0800d259 	.word	0x0800d259
 800cd08:	0800d259 	.word	0x0800d259
 800cd0c:	0800d26f 	.word	0x0800d26f
 800cd10:	0800d26f 	.word	0x0800d26f
 800cd14:	0800d26f 	.word	0x0800d26f
 800cd18:	0800d26f 	.word	0x0800d26f
 800cd1c:	0800d259 	.word	0x0800d259
 800cd20:	0800d26f 	.word	0x0800d26f
 800cd24:	0800d26f 	.word	0x0800d26f
 800cd28:	0800d26f 	.word	0x0800d26f
 800cd2c:	0800d26f 	.word	0x0800d26f
 800cd30:	0800d26f 	.word	0x0800d26f
 800cd34:	0800d26f 	.word	0x0800d26f
 800cd38:	0800d26f 	.word	0x0800d26f
 800cd3c:	0800d26f 	.word	0x0800d26f
 800cd40:	0800d26f 	.word	0x0800d26f
 800cd44:	0800d26f 	.word	0x0800d26f
 800cd48:	0800d26f 	.word	0x0800d26f
 800cd4c:	0800d26f 	.word	0x0800d26f
 800cd50:	0800d26f 	.word	0x0800d26f
 800cd54:	0800d26f 	.word	0x0800d26f
 800cd58:	0800d26f 	.word	0x0800d26f
 800cd5c:	0800d26f 	.word	0x0800d26f
 800cd60:	0800d249 	.word	0x0800d249
 800cd64:	0800d259 	.word	0x0800d259
 800cd68:	0800d251 	.word	0x0800d251
 800cd6c:	0800d26f 	.word	0x0800d26f
 800cd70:	0800d26f 	.word	0x0800d26f
 800cd74:	0800d259 	.word	0x0800d259
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 826c 	bne.w	800d25c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cd8a:	f043 0301 	orr.w	r3, r3, #1
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d114      	bne.n	800cdca <_ZN3BTD14HCI_event_taskEv+0x186>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800cda6:	2b10      	cmp	r3, #16
 800cda8:	d10f      	bne.n	800cdca <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800cdc8:	e059      	b.n	800ce7e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	d12a      	bne.n	800ce2a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800cdda:	2b10      	cmp	r3, #16
 800cddc:	d125      	bne.n	800ce2a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cde4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d114      	bne.n	800ce16 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10f      	bne.n	800ce16 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800cdfc:	f003 0308 	and.w	r3, r3, #8
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800ce0c:	e003      	b.n	800ce16 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ce1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800ce28:	e029      	b.n	800ce7e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ce30:	2b09      	cmp	r3, #9
 800ce32:	f040 8213 	bne.w	800d25c <_ZN3BTD14HCI_event_taskEv+0x618>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ce3c:	2b10      	cmp	r3, #16
 800ce3e:	f040 820d 	bne.w	800d25c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800ce42:	2300      	movs	r3, #0
 800ce44:	75fb      	strb	r3, [r7, #23]
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	2b05      	cmp	r3, #5
 800ce4a:	d80e      	bhi.n	800ce6a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	1d9a      	adds	r2, r3, #6
 800ce50:	7dfb      	ldrb	r3, [r7, #23]
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	440a      	add	r2, r1
 800ce56:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	460a      	mov	r2, r1
 800ce60:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	3301      	adds	r3, #1
 800ce66:	75fb      	strb	r3, [r7, #23]
 800ce68:	e7ed      	b.n	800ce46 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ce70:	f043 0320 	orr.w	r3, r3, #32
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800ce7c:	e1ee      	b.n	800d25c <_ZN3BTD14HCI_event_taskEv+0x618>
 800ce7e:	e1ed      	b.n	800d25c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ce86:	2b04      	cmp	r3, #4
 800ce88:	d921      	bls.n	800cece <_ZN3BTD14HCI_event_taskEv+0x28a>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d104      	bne.n	800ce9e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d017      	beq.n	800cece <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	220a      	movs	r2, #10
 800ceca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ced4:	3301      	adds	r3, #1
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800cede:	e1c6      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 81ba 	beq.w	800d260 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800ceec:	2300      	movs	r3, #0
 800ceee:	75bb      	strb	r3, [r7, #22]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800cef6:	7dba      	ldrb	r2, [r7, #22]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	f080 81b1 	bcs.w	800d260 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	7dbb      	ldrb	r3, [r7, #22]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	0049      	lsls	r1, r1, #1
 800cf0e:	440b      	add	r3, r1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800cf16:	2300      	movs	r3, #0
 800cf18:	757b      	strb	r3, [r7, #21]
 800cf1a:	7d7b      	ldrb	r3, [r7, #21]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d811      	bhi.n	800cf44 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800cf20:	7d7b      	ldrb	r3, [r7, #21]
 800cf22:	1d1a      	adds	r2, r3, #4
 800cf24:	7bbb      	ldrb	r3, [r7, #14]
 800cf26:	441a      	add	r2, r3
 800cf28:	7d7b      	ldrb	r3, [r7, #21]
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	440a      	add	r2, r1
 800cf2e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4413      	add	r3, r2
 800cf36:	460a      	mov	r2, r1
 800cf38:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800cf3c:	7d7b      	ldrb	r3, [r7, #21]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	757b      	strb	r3, [r7, #21]
 800cf42:	e7ea      	b.n	800cf1a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d038      	beq.n	800cfc0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d133      	bne.n	800cfc0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800cf5e:	2b05      	cmp	r3, #5
 800cf60:	d12e      	bne.n	800cfc0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800cf68:	f003 030c 	and.w	r3, r3, #12
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d027      	beq.n	800cfc0 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	753b      	strb	r3, [r7, #20]
 800cf7c:	7d3b      	ldrb	r3, [r7, #20]
 800cf7e:	2b05      	cmp	r3, #5
 800cf80:	d814      	bhi.n	800cfac <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800cf82:	7d3b      	ldrb	r3, [r7, #20]
 800cf84:	1cd9      	adds	r1, r3, #3
 800cf86:	7dba      	ldrb	r2, [r7, #22]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	18ca      	adds	r2, r1, r3
 800cf92:	7d3b      	ldrb	r3, [r7, #20]
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	440a      	add	r2, r1
 800cf98:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800cfa4:	7d3b      	ldrb	r3, [r7, #20]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	753b      	strb	r3, [r7, #20]
 800cfaa:	e7e7      	b.n	800cf7c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cfb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800cfbe:	e03a      	b.n	800d036 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d031      	beq.n	800d02e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800cfd0:	f003 030f 	and.w	r3, r3, #15
 800cfd4:	2b05      	cmp	r3, #5
 800cfd6:	d12a      	bne.n	800d02e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800cfde:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d023      	beq.n	800d02e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	74fb      	strb	r3, [r7, #19]
 800cfea:	7cfb      	ldrb	r3, [r7, #19]
 800cfec:	2b05      	cmp	r3, #5
 800cfee:	d814      	bhi.n	800d01a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800cff0:	7cfb      	ldrb	r3, [r7, #19]
 800cff2:	1cd9      	adds	r1, r3, #3
 800cff4:	7dba      	ldrb	r2, [r7, #22]
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	18ca      	adds	r2, r1, r3
 800d000:	7cfb      	ldrb	r3, [r7, #19]
 800d002:	6879      	ldr	r1, [r7, #4]
 800d004:	440a      	add	r2, r1
 800d006:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	460a      	mov	r2, r1
 800d010:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d012:	7cfb      	ldrb	r3, [r7, #19]
 800d014:	3301      	adds	r3, #1
 800d016:	74fb      	strb	r3, [r7, #19]
 800d018:	e7e7      	b.n	800cfea <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d02c:	e003      	b.n	800d036 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d02e:	7dbb      	ldrb	r3, [r7, #22]
 800d030:	3301      	adds	r3, #1
 800d032:	75bb      	strb	r3, [r7, #22]
 800d034:	e75c      	b.n	800cef0 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d036:	e113      	b.n	800d260 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d042:	b29a      	uxth	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d050:	2b00      	cmp	r3, #0
 800d052:	d11a      	bne.n	800d08a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d05a:	b21a      	sxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d062:	021b      	lsls	r3, r3, #8
 800d064:	b21b      	sxth	r3, r3
 800d066:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d06a:	b21b      	sxth	r3, r3
 800d06c:	4313      	orrs	r3, r2
 800d06e:	b21b      	sxth	r3, r3
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d07c:	f043 0302 	orr.w	r3, r3, #2
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d088:	e0f1      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2206      	movs	r2, #6
 800d08e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d092:	e0ec      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f040 80e2 	bne.w	800d264 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0a6:	f043 0304 	orr.w	r3, r3, #4
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0b8:	f023 0302 	bic.w	r3, r3, #2
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d0c4:	e0ce      	b.n	800d264 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 80cb 	bne.w	800d268 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	74bb      	strb	r3, [r7, #18]
 800d0d6:	7cbb      	ldrb	r3, [r7, #18]
 800d0d8:	2b1d      	cmp	r3, #29
 800d0da:	d818      	bhi.n	800d10e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d0dc:	7cbb      	ldrb	r3, [r7, #18]
 800d0de:	f103 0209 	add.w	r2, r3, #9
 800d0e2:	7cbb      	ldrb	r3, [r7, #18]
 800d0e4:	6879      	ldr	r1, [r7, #4]
 800d0e6:	440a      	add	r2, r1
 800d0e8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	460a      	mov	r2, r1
 800d0f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d0f6:	7cbb      	ldrb	r3, [r7, #18]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d104:	7cbb      	ldrb	r3, [r7, #18]
 800d106:	3301      	adds	r3, #1
 800d108:	74bb      	strb	r3, [r7, #18]
 800d10a:	e7e4      	b.n	800d0d6 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d10c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d114:	f043 0308 	orr.w	r3, r3, #8
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d120:	e0a2      	b.n	800d268 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d122:	2300      	movs	r3, #0
 800d124:	747b      	strb	r3, [r7, #17]
 800d126:	7c7b      	ldrb	r3, [r7, #17]
 800d128:	2b05      	cmp	r3, #5
 800d12a:	d80e      	bhi.n	800d14a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d12c:	7c7b      	ldrb	r3, [r7, #17]
 800d12e:	1c9a      	adds	r2, r3, #2
 800d130:	7c7b      	ldrb	r3, [r7, #17]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	440a      	add	r2, r1
 800d136:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	460a      	mov	r2, r1
 800d140:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d142:	7c7b      	ldrb	r3, [r7, #17]
 800d144:	3301      	adds	r3, #1
 800d146:	747b      	strb	r3, [r7, #17]
 800d148:	e7ed      	b.n	800d126 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d14a:	2300      	movs	r3, #0
 800d14c:	743b      	strb	r3, [r7, #16]
 800d14e:	7c3b      	ldrb	r3, [r7, #16]
 800d150:	2b02      	cmp	r3, #2
 800d152:	d810      	bhi.n	800d176 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d154:	7c3b      	ldrb	r3, [r7, #16]
 800d156:	f103 0208 	add.w	r2, r3, #8
 800d15a:	7c3b      	ldrb	r3, [r7, #16]
 800d15c:	6879      	ldr	r1, [r7, #4]
 800d15e:	440a      	add	r2, r1
 800d160:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	4413      	add	r3, r2
 800d168:	460a      	mov	r2, r1
 800d16a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d16e:	7c3b      	ldrb	r3, [r7, #16]
 800d170:	3301      	adds	r3, #1
 800d172:	743b      	strb	r3, [r7, #16]
 800d174:	e7eb      	b.n	800d14e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d17c:	f003 030f 	and.w	r3, r3, #15
 800d180:	2b05      	cmp	r3, #5
 800d182:	d10a      	bne.n	800d19a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d18a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d1a0:	f043 0310 	orr.w	r3, r3, #16
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d1ac:	e05f      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 feec 	bl	800df96 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d1be:	e056      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fee4 	bl	800df96 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d1ce:	e04e      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 ff93 	bl	800e0fc <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d1d6:	e04a      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 ffca 	bl	800e172 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d1de:	e046      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d123      	bne.n	800d232 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00c      	beq.n	800d20e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1fa:	f083 0301 	eor.w	r3, r3, #1
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d004      	beq.n	800d20e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d20c:	e02e      	b.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d214:	2b00      	cmp	r3, #0
 800d216:	d029      	beq.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d21e:	f083 0301 	eor.w	r3, r3, #1
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d021      	beq.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d230:	e01c      	b.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8b5b      	ldrh	r3, [r3, #26]
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 f882 	bl	800e342 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2210      	movs	r2, #16
 800d242:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d246:	e011      	b.n	800d26c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 ffcd 	bl	800e1e8 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d24e:	e00e      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f001 f810 	bl	800e276 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d256:	e00a      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d258:	bf00      	nop
 800d25a:	e008      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d25c:	bf00      	nop
 800d25e:	e006      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d260:	bf00      	nop
 800d262:	e004      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d264:	bf00      	nop
 800d266:	e002      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d268:	bf00      	nop
 800d26a:	e000      	b.n	800d26e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d26c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d26e:	bf00      	nop
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bdb0      	pop	{r4, r5, r7, pc}
 800d276:	bf00      	nop

0800d278 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d286:	2b13      	cmp	r3, #19
 800d288:	f200 82ef 	bhi.w	800d86a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d28c:	a201      	add	r2, pc, #4	; (adr r2, 800d294 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d292:	bf00      	nop
 800d294:	0800d2e5 	.word	0x0800d2e5
 800d298:	0800d31f 	.word	0x0800d31f
 800d29c:	0800d3a5 	.word	0x0800d3a5
 800d2a0:	0800d3c5 	.word	0x0800d3c5
 800d2a4:	0800d3e5 	.word	0x0800d3e5
 800d2a8:	0800d439 	.word	0x0800d439
 800d2ac:	0800d4df 	.word	0x0800d4df
 800d2b0:	0800d50d 	.word	0x0800d50d
 800d2b4:	0800d547 	.word	0x0800d547
 800d2b8:	0800d56f 	.word	0x0800d56f
 800d2bc:	0800d5a5 	.word	0x0800d5a5
 800d2c0:	0800d603 	.word	0x0800d603
 800d2c4:	0800d641 	.word	0x0800d641
 800d2c8:	0800d767 	.word	0x0800d767
 800d2cc:	0800d86b 	.word	0x0800d86b
 800d2d0:	0800d7ad 	.word	0x0800d7ad
 800d2d4:	0800d7db 	.word	0x0800d7db
 800d2d8:	0800d46f 	.word	0x0800d46f
 800d2dc:	0800d4a5 	.word	0x0800d4a5
 800d2e0:	0800d4c5 	.word	0x0800d4c5
                case HCI_INIT_STATE:
                        hci_counter++;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d300:	429a      	cmp	r2, r3
 800d302:	f240 82b4 	bls.w	800d86e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fb7d 	bl	800da06 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d31c:	e2a7      	b.n	800d86e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d324:	3301      	adds	r3, #1
 800d326:	b29a      	uxth	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2202      	movs	r2, #2
 800d348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f830 	bl	800e3b2 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d352:	e28e      	b.n	800d872 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d360:	429a      	cmp	r2, r3
 800d362:	f240 8286 	bls.w	800d872 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d36c:	461a      	mov	r2, r3
 800d36e:	0092      	lsls	r2, r2, #2
 800d370:	4413      	add	r3, r2
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	b29a      	uxth	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d386:	d904      	bls.n	800d392 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d38e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d3a2:	e266      	b.n	800d872 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8261 	beq.w	800d876 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2203      	movs	r2, #3
 800d3b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fb72 	bl	800daa6 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d3c2:	e258      	b.n	800d876 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3ca:	f003 0320 	and.w	r3, r3, #32
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 8253 	beq.w	800d87a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 fb8a 	bl	800daee <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d3e2:	e24a      	b.n	800d87a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 8245 	beq.w	800d87e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00a      	beq.n	800d412 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fc5d 	bl	800dcc2 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2205      	movs	r2, #5
 800d40c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d410:	e235      	b.n	800d87e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d008      	beq.n	800d42e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d41c:	2100      	movs	r1, #0
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fb89 	bl	800db36 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2211      	movs	r2, #17
 800d428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d42c:	e227      	b.n	800d87e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2206      	movs	r2, #6
 800d432:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d436:	e222      	b.n	800d87e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 821d 	beq.w	800d882 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d008      	beq.n	800d464 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d452:	2100      	movs	r1, #0
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fb6e 	bl	800db36 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2211      	movs	r2, #17
 800d45e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d462:	e20e      	b.n	800d882 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2206      	movs	r2, #6
 800d468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d46c:	e209      	b.n	800d882 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 8204 	beq.w	800d886 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d484:	2b00      	cmp	r3, #0
 800d486:	d008      	beq.n	800d49a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d488:	2101      	movs	r1, #1
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fc9d 	bl	800ddca <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2212      	movs	r2, #18
 800d494:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d498:	e1f5      	b.n	800d886 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2206      	movs	r2, #6
 800d49e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d4a2:	e1f0      	b.n	800d886 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 81eb 	beq.w	800d88a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fc4d 	bl	800dd54 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2213      	movs	r2, #19
 800d4be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d4c2:	e1e2      	b.n	800d88a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 81dd 	beq.w	800d88e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2206      	movs	r2, #6
 800d4d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d4dc:	e1d7      	b.n	800d88e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d104      	bne.n	800d4f2 <_ZN3BTD8HCI_taskEv+0x27a>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d007      	beq.n	800d502 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fc8f 	bl	800de16 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2207      	movs	r2, #7
 800d4fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d500:	e1d8      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	220a      	movs	r2, #10
 800d506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d50a:	e1d3      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d516:	2b00      	cmp	r3, #0
 800d518:	f000 81bb 	beq.w	800d892 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fcb2 	bl	800de86 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d007      	beq.n	800d53c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fb74 	bl	800dc1a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	220c      	movs	r2, #12
 800d536:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d53a:	e1aa      	b.n	800d892 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2208      	movs	r2, #8
 800d540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d544:	e1a5      	b.n	800d892 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 81a0 	beq.w	800d896 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fcac 	bl	800debc <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2209      	movs	r2, #9
 800d568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d56c:	e193      	b.n	800d896 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 818e 	beq.w	800d89a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d584:	f003 0302 	and.w	r3, r3, #2
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fead 	bl	800e2ec <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	220a      	movs	r2, #10
 800d596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d59a:	e17e      	b.n	800d89a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fc8d 	bl	800debc <_ZN3BTD11hci_connectEv>
                        break;
 800d5a2:	e17a      	b.n	800d89a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5aa:	f083 0301 	eor.w	r3, r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8174 	beq.w	800d89e <_ZN3BTD8HCI_taskEv+0x626>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5bc:	f083 0301 	eor.w	r3, r3, #1
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 816b 	beq.w	800d89e <_ZN3BTD8HCI_taskEv+0x626>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5ce:	f083 0301 	eor.w	r3, r3, #1
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 8162 	beq.w	800d89e <_ZN3BTD8HCI_taskEv+0x626>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d5e0:	f083 0301 	eor.w	r3, r3, #1
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f000 8159 	beq.w	800d89e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fa29 	bl	800da44 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	220b      	movs	r2, #11
 800d5fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d600:	e14d      	b.n	800d89e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d608:	f003 0310 	and.w	r3, r3, #16
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 faff 	bl	800dc1a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	220c      	movs	r2, #12
 800d620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d624:	e13d      	b.n	800d8a2 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 8136 	beq.w	800d8a2 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2210      	movs	r2, #16
 800d63a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d63e:	e130      	b.n	800d8a2 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d646:	f003 0308 	and.w	r3, r3, #8
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 812b 	beq.w	800d8a6 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3322      	adds	r3, #34	; 0x22
 800d654:	2208      	movs	r2, #8
 800d656:	4999      	ldr	r1, [pc, #612]	; (800d8bc <_ZN3BTD8HCI_taskEv+0x644>)
 800d658:	4618      	mov	r0, r3
 800d65a:	f004 fe27 	bl	80122ac <strncmp>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d147      	bne.n	800d6f4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3322      	adds	r3, #34	; 0x22
 800d688:	2216      	movs	r2, #22
 800d68a:	498d      	ldr	r1, [pc, #564]	; (800d8c0 <_ZN3BTD8HCI_taskEv+0x648>)
 800d68c:	4618      	mov	r0, r3
 800d68e:	f004 fe0d 	bl	80122ac <strncmp>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d104      	bne.n	800d6a2 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6a0:	e028      	b.n	800d6f4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	3322      	adds	r3, #34	; 0x22
 800d6a6:	2216      	movs	r2, #22
 800d6a8:	4986      	ldr	r1, [pc, #536]	; (800d8c4 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f004 fdfe 	bl	80122ac <strncmp>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d110      	bne.n	800d6d8 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6d6:	e00d      	b.n	800d6f4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3322      	adds	r3, #34	; 0x22
 800d6dc:	2213      	movs	r2, #19
 800d6de:	497a      	ldr	r1, [pc, #488]	; (800d8c8 <_ZN3BTD8HCI_taskEv+0x650>)
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f004 fde3 	bl	80122ac <strncmp>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d103      	bne.n	800d6f4 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d117      	bne.n	800d72e <_ZN3BTD8HCI_taskEv+0x4b6>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d704:	2b25      	cmp	r3, #37	; 0x25
 800d706:	d112      	bne.n	800d72e <_ZN3BTD8HCI_taskEv+0x4b6>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d70e:	2b08      	cmp	r3, #8
 800d710:	d10d      	bne.n	800d72e <_ZN3BTD8HCI_taskEv+0x4b6>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	3322      	adds	r3, #34	; 0x22
 800d716:	2213      	movs	r2, #19
 800d718:	496c      	ldr	r1, [pc, #432]	; (800d8cc <_ZN3BTD8HCI_taskEv+0x654>)
 800d71a:	4618      	mov	r0, r3
 800d71c:	f004 fdc6 	bl	80122ac <strncmp>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d103      	bne.n	800d72e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d734:	2b00      	cmp	r3, #0
 800d736:	d104      	bne.n	800d742 <_ZN3BTD8HCI_taskEv+0x4ca>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <_ZN3BTD8HCI_taskEv+0x4de>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2208      	movs	r2, #8
 800d750:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800d754:	e0a7      	b.n	800d8a6 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 fa17 	bl	800db8a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	220d      	movs	r2, #13
 800d760:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d764:	e09f      	b.n	800d8a6 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d76c:	f003 0302 	and.w	r3, r3, #2
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 809a 	beq.w	800d8aa <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	220f      	movs	r2, #15
 800d7a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7aa:	e07e      	b.n	800d8aa <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d7c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7c6:	d972      	bls.n	800d8ae <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	220a      	movs	r2, #10
 800d7d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7d8:	e069      	b.n	800d8ae <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7e0:	f003 0304 	and.w	r3, r3, #4
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d064      	beq.n	800d8b2 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3389      	adds	r3, #137	; 0x89
 800d7f4:	2240      	movs	r2, #64	; 0x40
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f004 fd0b 	bl	8012214 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	33c9      	adds	r3, #201	; 0xc9
 800d802:	2240      	movs	r2, #64	; 0x40
 800d804:	2100      	movs	r1, #0
 800d806:	4618      	mov	r0, r3
 800d808:	f004 fd04 	bl	8012214 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	220a      	movs	r2, #10
 800d864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d868:	e023      	b.n	800d8b2 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800d86a:	bf00      	nop
 800d86c:	e022      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d86e:	bf00      	nop
 800d870:	e020      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d872:	bf00      	nop
 800d874:	e01e      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d876:	bf00      	nop
 800d878:	e01c      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d87a:	bf00      	nop
 800d87c:	e01a      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d87e:	bf00      	nop
 800d880:	e018      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d882:	bf00      	nop
 800d884:	e016      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d886:	bf00      	nop
 800d888:	e014      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d88a:	bf00      	nop
 800d88c:	e012      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d88e:	bf00      	nop
 800d890:	e010      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d892:	bf00      	nop
 800d894:	e00e      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d896:	bf00      	nop
 800d898:	e00c      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d89a:	bf00      	nop
 800d89c:	e00a      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d89e:	bf00      	nop
 800d8a0:	e008      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d8a2:	bf00      	nop
 800d8a4:	e006      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d8a6:	bf00      	nop
 800d8a8:	e004      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d8aa:	bf00      	nop
 800d8ac:	e002      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d8ae:	bf00      	nop
 800d8b0:	e000      	b.n	800d8b4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800d8b2:	bf00      	nop
        }
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	08012400 	.word	0x08012400
 800d8c0:	0801240c 	.word	0x0801240c
 800d8c4:	08012424 	.word	0x08012424
 800d8c8:	0801243c 	.word	0x0801243c
 800d8cc:	08012450 	.word	0x08012450

0800d8d0 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800d8d0:	b5b0      	push	{r4, r5, r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af02      	add	r7, sp, #8
 800d8d6:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800d8d8:	2340      	movs	r3, #64	; 0x40
 800d8da:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	33c9      	adds	r3, #201	; 0xc9
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800d8f6:	f107 050a 	add.w	r5, r7, #10
 800d8fa:	9201      	str	r2, [sp, #4]
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	462b      	mov	r3, r5
 800d900:	4622      	mov	r2, r4
 800d902:	f003 f92c 	bl	8010b5e <_ZN3USB10inTransferEhhPtPhh>
 800d906:	4603      	mov	r3, r0
 800d908:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800d90a:	7b7b      	ldrb	r3, [r7, #13]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d125      	bne.n	800d95c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800d910:	897b      	ldrh	r3, [r7, #10]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d022      	beq.n	800d95c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	d81d      	bhi.n	800d95c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800d920:	7bfb      	ldrb	r3, [r7, #15]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	3318      	adds	r3, #24
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	4413      	add	r3, r2
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d011      	beq.n	800d954 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	3318      	adds	r3, #24
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	6858      	ldr	r0, [r3, #4]
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	3318      	adds	r3, #24
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	4413      	add	r3, r2
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	32c9      	adds	r2, #201	; 0xc9
 800d950:	4611      	mov	r1, r2
 800d952:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d954:	7bfb      	ldrb	r3, [r7, #15]
 800d956:	3301      	adds	r3, #1
 800d958:	73fb      	strb	r3, [r7, #15]
 800d95a:	e7de      	b.n	800d91a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d95c:	2300      	movs	r3, #0
 800d95e:	73bb      	strb	r3, [r7, #14]
 800d960:	7bbb      	ldrb	r3, [r7, #14]
 800d962:	2b03      	cmp	r3, #3
 800d964:	d81c      	bhi.n	800d9a0 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800d966:	7bbb      	ldrb	r3, [r7, #14]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	3318      	adds	r3, #24
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d010      	beq.n	800d998 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	3318      	adds	r3, #24
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	6859      	ldr	r1, [r3, #4]
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	3318      	adds	r3, #24
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3304      	adds	r3, #4
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4608      	mov	r0, r1
 800d996:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d998:	7bbb      	ldrb	r3, [r7, #14]
 800d99a:	3301      	adds	r3, #1
 800d99c:	73bb      	strb	r3, [r7, #14]
 800d99e:	e7df      	b.n	800d960 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9a8 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08c      	sub	sp, #48	; 0x30
 800d9ac:	af08      	add	r7, sp, #32
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d9bc:	f023 0301 	bic.w	r3, r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800d9d8:	2300      	movs	r3, #0
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	88fb      	ldrh	r3, [r7, #6]
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	88fb      	ldrh	r3, [r7, #6]
 800d9e6:	9304      	str	r3, [sp, #16]
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9303      	str	r3, [sp, #12]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9302      	str	r3, [sp, #8]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	9301      	str	r3, [sp, #4]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	f002 ffd8 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800d9fe:	bf00      	nop
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2203      	movs	r2, #3
 800da1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	220c      	movs	r2, #12
 800da22:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3389      	adds	r3, #137	; 0x89
 800da32:	2203      	movs	r2, #3
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff ffb6 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da52:	f023 0310 	bic.w	r3, r3, #16
 800da56:	b29a      	uxth	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	221a      	movs	r2, #26
 800da62:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	220c      	movs	r2, #12
 800da6a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d004      	beq.n	800da88 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2203      	movs	r2, #3
 800da82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800da86:	e003      	b.n	800da90 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3389      	adds	r3, #137	; 0x89
 800da94:	2204      	movs	r2, #4
 800da96:	4619      	mov	r1, r3
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ff85 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b082      	sub	sp, #8
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dab4:	f023 0320 	bic.w	r3, r3, #32
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2209      	movs	r2, #9
 800dac4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2210      	movs	r2, #16
 800dacc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	3389      	adds	r3, #137	; 0x89
 800dadc:	2203      	movs	r2, #3
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff ff61 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800dae6:	bf00      	nop
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dafc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2210      	movs	r2, #16
 800db14:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3389      	adds	r3, #137	; 0x89
 800db24:	2203      	movs	r2, #3
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7ff ff3d 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800db36:	b580      	push	{r7, lr}
 800db38:	b082      	sub	sp, #8
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	460b      	mov	r3, r1
 800db40:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800db48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2204      	movs	r2, #4
 800db58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2210      	movs	r2, #16
 800db60:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3389      	adds	r3, #137	; 0x89
 800db78:	2204      	movs	r2, #4
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff ff13 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b082      	sub	sp, #8
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800db98:	f023 0302 	bic.w	r3, r3, #2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2209      	movs	r2, #9
 800dba8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2204      	movs	r2, #4
 800dbb0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2207      	movs	r2, #7
 800dbb8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7f1a      	ldrb	r2, [r3, #28]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	7f5a      	ldrb	r2, [r3, #29]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7f9a      	ldrb	r2, [r3, #30]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7fda      	ldrb	r2, [r3, #31]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3389      	adds	r3, #137	; 0x89
 800dc08:	220a      	movs	r2, #10
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff fecb 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800dc12:	bf00      	nop
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dc28:	f023 0308 	bic.w	r3, r3, #8
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2219      	movs	r2, #25
 800dc38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2204      	movs	r2, #4
 800dc40:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	220a      	movs	r2, #10
 800dc48:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	7f1a      	ldrb	r2, [r3, #28]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7f5a      	ldrb	r2, [r3, #29]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7f9a      	ldrb	r2, [r3, #30]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	7fda      	ldrb	r2, [r3, #31]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3389      	adds	r3, #137	; 0x89
 800dcb0:	220d      	movs	r2, #13
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7ff fe77 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800dcba:	bf00      	nop
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800dcc2:	b590      	push	{r4, r7, lr}
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2213      	movs	r2, #19
 800dcd0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	220c      	movs	r2, #12
 800dcd8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800dcdc:	6838      	ldr	r0, [r7, #0]
 800dcde:	f7f2 fa97 	bl	8000210 <strlen>
 800dce2:	4603      	mov	r3, r0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	3301      	adds	r3, #1
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
 800dcf4:	7bfc      	ldrb	r4, [r7, #15]
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f7f2 fa8a 	bl	8000210 <strlen>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	429c      	cmp	r4, r3
 800dd00:	d20e      	bcs.n	800dd20 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	441a      	add	r2, r3
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	3303      	adds	r3, #3
 800dd0c:	7811      	ldrb	r1, [r2, #0]
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	4413      	add	r3, r2
 800dd12:	460a      	mov	r2, r1
 800dd14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	73fb      	strb	r3, [r7, #15]
 800dd1e:	e7e9      	b.n	800dcf4 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	3303      	adds	r3, #3
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	4413      	add	r3, r2
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800dd34:	6838      	ldr	r0, [r7, #0]
 800dd36:	f7f2 fa6b 	bl	8000210 <strlen>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	3304      	adds	r3, #4
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	461a      	mov	r2, r3
 800dd44:	4621      	mov	r1, r4
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7ff fe2e 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800dd4c:	bf00      	nop
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd90      	pop	{r4, r7, pc}

0800dd54 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	220c      	movs	r2, #12
 800dd68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2208      	movs	r2, #8
 800dd70:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	22ff      	movs	r2, #255	; 0xff
 800dd78:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	22ff      	movs	r2, #255	; 0xff
 800dd80:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	22ff      	movs	r2, #255	; 0xff
 800dd88:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	22ff      	movs	r2, #255	; 0xff
 800dd90:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	22ff      	movs	r2, #255	; 0xff
 800dd98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	221f      	movs	r2, #31
 800dda0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	22ff      	movs	r2, #255	; 0xff
 800dda8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3389      	adds	r3, #137	; 0x89
 800ddb8:	220b      	movs	r2, #11
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fdf3 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2256      	movs	r2, #86	; 0x56
 800ddda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	220c      	movs	r2, #12
 800dde2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800ddee:	78fb      	ldrb	r3, [r7, #3]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	e000      	b.n	800ddfa <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3389      	adds	r3, #137	; 0x89
 800de04:	2204      	movs	r2, #4
 800de06:	4619      	mov	r1, r3
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff fdcd 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de28:	b29a      	uxth	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2204      	movs	r2, #4
 800de3c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2205      	movs	r2, #5
 800de44:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2233      	movs	r2, #51	; 0x33
 800de4c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	228b      	movs	r2, #139	; 0x8b
 800de54:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	229e      	movs	r2, #158	; 0x9e
 800de5c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2230      	movs	r2, #48	; 0x30
 800de64:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	220a      	movs	r2, #10
 800de6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3389      	adds	r3, #137	; 0x89
 800de74:	2208      	movs	r2, #8
 800de76:	4619      	mov	r1, r3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff fd95 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800de7e:	bf00      	nop
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800de86:	b580      	push	{r7, lr}
 800de88:	b082      	sub	sp, #8
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2202      	movs	r2, #2
 800de92:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2204      	movs	r2, #4
 800de9a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	3389      	adds	r3, #137	; 0x89
 800deaa:	2203      	movs	r2, #3
 800deac:	4619      	mov	r1, r3
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff fd7a 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800deb4:	bf00      	nop
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	331c      	adds	r3, #28
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f804 	bl	800ded8 <_ZN3BTD11hci_connectEPh>
}
 800ded0:	bf00      	nop
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dee8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800deec:	b29a      	uxth	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2205      	movs	r2, #5
 800def8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2204      	movs	r2, #4
 800df00:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	220d      	movs	r2, #13
 800df08:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	781a      	ldrb	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	785a      	ldrb	r2, [r3, #1]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	789a      	ldrb	r2, [r3, #2]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	78da      	ldrb	r2, [r3, #3]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	791a      	ldrb	r2, [r3, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	795a      	ldrb	r2, [r3, #5]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2218      	movs	r2, #24
 800df4c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	22cc      	movs	r2, #204	; 0xcc
 800df54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	3389      	adds	r3, #137	; 0x89
 800df84:	2210      	movs	r2, #16
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff fd0d 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800df96:	b590      	push	{r4, r7, lr}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	220d      	movs	r2, #13
 800dfa2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2204      	movs	r2, #4
 800dfaa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2217      	movs	r2, #23
 800dfb2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	7f1a      	ldrb	r2, [r3, #28]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7f5a      	ldrb	r2, [r3, #29]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	7f9a      	ldrb	r2, [r3, #30]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7fda      	ldrb	r2, [r3, #31]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d03f      	beq.n	800e080 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2206      	movs	r2, #6
 800e004:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d013      	beq.n	800e03a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e012:	2300      	movs	r3, #0
 800e014:	73fb      	strb	r3, [r7, #15]
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	2b05      	cmp	r3, #5
 800e01a:	d822      	bhi.n	800e062 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e01c:	7bfa      	ldrb	r2, [r7, #15]
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	330a      	adds	r3, #10
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	440a      	add	r2, r1
 800e026:	7d11      	ldrb	r1, [r2, #20]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	4413      	add	r3, r2
 800e02c:	460a      	mov	r2, r1
 800e02e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e032:	7bfb      	ldrb	r3, [r7, #15]
 800e034:	3301      	adds	r3, #1
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	e7ed      	b.n	800e016 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e03a:	2300      	movs	r3, #0
 800e03c:	73bb      	strb	r3, [r7, #14]
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	2b05      	cmp	r3, #5
 800e042:	d80e      	bhi.n	800e062 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e044:	7bba      	ldrb	r2, [r7, #14]
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	330a      	adds	r3, #10
 800e04a:	6879      	ldr	r1, [r7, #4]
 800e04c:	440a      	add	r2, r1
 800e04e:	7f11      	ldrb	r1, [r2, #28]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	4413      	add	r3, r2
 800e054:	460a      	mov	r2, r1
 800e056:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	3301      	adds	r3, #1
 800e05e:	73bb      	strb	r3, [r7, #14]
 800e060:	e7ed      	b.n	800e03e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e062:	2310      	movs	r3, #16
 800e064:	737b      	strb	r3, [r7, #13]
 800e066:	7b7b      	ldrb	r3, [r7, #13]
 800e068:	2b19      	cmp	r3, #25
 800e06a:	d83c      	bhi.n	800e0e6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e06c:	7b7b      	ldrb	r3, [r7, #13]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	4413      	add	r3, r2
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e078:	7b7b      	ldrb	r3, [r7, #13]
 800e07a:	3301      	adds	r3, #1
 800e07c:	737b      	strb	r3, [r7, #13]
 800e07e:	e7f2      	b.n	800e066 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	4618      	mov	r0, r3
 800e086:	f7f2 f8c3 	bl	8000210 <strlen>
 800e08a:	4603      	mov	r3, r0
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e094:	2300      	movs	r3, #0
 800e096:	733b      	strb	r3, [r7, #12]
 800e098:	7b3c      	ldrb	r4, [r7, #12]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f2 f8b6 	bl	8000210 <strlen>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	429c      	cmp	r4, r3
 800e0a8:	d20f      	bcs.n	800e0ca <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	691a      	ldr	r2, [r3, #16]
 800e0ae:	7b3b      	ldrb	r3, [r7, #12]
 800e0b0:	441a      	add	r2, r3
 800e0b2:	7b3b      	ldrb	r3, [r7, #12]
 800e0b4:	330a      	adds	r3, #10
 800e0b6:	7811      	ldrb	r1, [r2, #0]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	460a      	mov	r2, r1
 800e0be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e0c2:	7b3b      	ldrb	r3, [r7, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	733b      	strb	r3, [r7, #12]
 800e0c8:	e7e6      	b.n	800e098 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e0ca:	7b3b      	ldrb	r3, [r7, #12]
 800e0cc:	2b0f      	cmp	r3, #15
 800e0ce:	d80a      	bhi.n	800e0e6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e0d0:	7b3b      	ldrb	r3, [r7, #12]
 800e0d2:	330a      	adds	r3, #10
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e0de:	7b3b      	ldrb	r3, [r7, #12]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	733b      	strb	r3, [r7, #12]
 800e0e4:	e7f1      	b.n	800e0ca <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3389      	adds	r3, #137	; 0x89
 800e0ea:	221a      	movs	r2, #26
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff fc5a 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e0f4:	bf00      	nop
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd90      	pop	{r4, r7, pc}

0800e0fc <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	220e      	movs	r2, #14
 800e108:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2204      	movs	r2, #4
 800e110:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2206      	movs	r2, #6
 800e118:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7f1a      	ldrb	r2, [r3, #28]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	7f5a      	ldrb	r2, [r3, #29]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	7f9a      	ldrb	r2, [r3, #30]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	7fda      	ldrb	r2, [r3, #31]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3389      	adds	r3, #137	; 0x89
 800e160:	2209      	movs	r2, #9
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff fc1f 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e16a:	bf00      	nop
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e172:	b580      	push	{r7, lr}
 800e174:	b082      	sub	sp, #8
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	220c      	movs	r2, #12
 800e17e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2204      	movs	r2, #4
 800e186:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2206      	movs	r2, #6
 800e18e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	7f1a      	ldrb	r2, [r3, #28]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7f5a      	ldrb	r2, [r3, #29]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	7f9a      	ldrb	r2, [r3, #30]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	7fda      	ldrb	r2, [r3, #31]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	3389      	adds	r3, #137	; 0x89
 800e1d6:	2209      	movs	r2, #9
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7ff fbe4 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	222b      	movs	r2, #43	; 0x2b
 800e1f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2204      	movs	r2, #4
 800e1fc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2209      	movs	r2, #9
 800e204:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7f1a      	ldrb	r2, [r3, #28]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7f5a      	ldrb	r2, [r3, #29]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	7f9a      	ldrb	r2, [r3, #30]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	7fda      	ldrb	r2, [r3, #31]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2203      	movs	r2, #3
 800e24c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3389      	adds	r3, #137	; 0x89
 800e264:	220c      	movs	r2, #12
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fb9d 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e276:	b580      	push	{r7, lr}
 800e278:	b082      	sub	sp, #8
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	222c      	movs	r2, #44	; 0x2c
 800e282:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2204      	movs	r2, #4
 800e28a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2206      	movs	r2, #6
 800e292:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7f1a      	ldrb	r2, [r3, #28]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	7f5a      	ldrb	r2, [r3, #29]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7f9a      	ldrb	r2, [r3, #30]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	7fda      	ldrb	r2, [r3, #31]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	3389      	adds	r3, #137	; 0x89
 800e2da:	2209      	movs	r2, #9
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fb62 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2211      	movs	r2, #17
 800e2f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2204      	movs	r2, #4
 800e300:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2202      	movs	r2, #2
 800e308:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	8b5b      	ldrh	r3, [r3, #26]
 800e310:	b2da      	uxtb	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	8b5b      	ldrh	r3, [r3, #26]
 800e31c:	121b      	asrs	r3, r3, #8
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	f003 030f 	and.w	r3, r3, #15
 800e324:	b2da      	uxtb	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3389      	adds	r3, #137	; 0x89
 800e330:	2205      	movs	r2, #5
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff fb37 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e33a:	bf00      	nop
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e354:	f023 0304 	bic.w	r3, r3, #4
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2206      	movs	r2, #6
 800e364:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2204      	movs	r2, #4
 800e36c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2203      	movs	r2, #3
 800e374:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e378:	887b      	ldrh	r3, [r7, #2]
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e382:	887b      	ldrh	r3, [r7, #2]
 800e384:	121b      	asrs	r3, r3, #8
 800e386:	b2db      	uxtb	r3, r3
 800e388:	f003 030f 	and.w	r3, r3, #15
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2213      	movs	r2, #19
 800e398:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3389      	adds	r3, #137	; 0x89
 800e3a0:	2206      	movs	r2, #6
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff faff 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b082      	sub	sp, #8
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2224      	movs	r2, #36	; 0x24
 800e3be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	220c      	movs	r2, #12
 800e3c6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2203      	movs	r2, #3
 800e3ce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2204      	movs	r2, #4
 800e3d6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2208      	movs	r2, #8
 800e3de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	3389      	adds	r3, #137	; 0x89
 800e3ee:	2206      	movs	r2, #6
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7ff fad8 	bl	800d9a8 <_ZN3BTD11HCI_CommandEPht>
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e400:	b5b0      	push	{r4, r5, r7, lr}
 800e402:	b08a      	sub	sp, #40	; 0x28
 800e404:	af02      	add	r7, sp, #8
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	461a      	mov	r2, r3
 800e40c:	460b      	mov	r3, r1
 800e40e:	817b      	strh	r3, [r7, #10]
 800e410:	4613      	mov	r3, r2
 800e412:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e414:	466b      	mov	r3, sp
 800e416:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e418:	7a7b      	ldrb	r3, [r7, #9]
 800e41a:	1ddc      	adds	r4, r3, #7
 800e41c:	61bc      	str	r4, [r7, #24]
 800e41e:	4623      	mov	r3, r4
 800e420:	3301      	adds	r3, #1
 800e422:	4618      	mov	r0, r3
 800e424:	f04f 0100 	mov.w	r1, #0
 800e428:	f04f 0200 	mov.w	r2, #0
 800e42c:	f04f 0300 	mov.w	r3, #0
 800e430:	00cb      	lsls	r3, r1, #3
 800e432:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e436:	00c2      	lsls	r2, r0, #3
 800e438:	4623      	mov	r3, r4
 800e43a:	3301      	adds	r3, #1
 800e43c:	4618      	mov	r0, r3
 800e43e:	f04f 0100 	mov.w	r1, #0
 800e442:	f04f 0200 	mov.w	r2, #0
 800e446:	f04f 0300 	mov.w	r3, #0
 800e44a:	00cb      	lsls	r3, r1, #3
 800e44c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e450:	00c2      	lsls	r2, r0, #3
 800e452:	4623      	mov	r3, r4
 800e454:	3301      	adds	r3, #1
 800e456:	3307      	adds	r3, #7
 800e458:	08db      	lsrs	r3, r3, #3
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	ebad 0d03 	sub.w	sp, sp, r3
 800e460:	ab02      	add	r3, sp, #8
 800e462:	3300      	adds	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e466:	897b      	ldrh	r3, [r7, #10]
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e46e:	897b      	ldrh	r3, [r7, #10]
 800e470:	121b      	asrs	r3, r3, #8
 800e472:	b25b      	sxtb	r3, r3
 800e474:	f003 030f 	and.w	r3, r3, #15
 800e478:	b25b      	sxtb	r3, r3
 800e47a:	f043 0320 	orr.w	r3, r3, #32
 800e47e:	b25b      	sxtb	r3, r3
 800e480:	b2da      	uxtb	r2, r3
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e486:	7a7b      	ldrb	r3, [r7, #9]
 800e488:	3304      	adds	r3, #4
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e490:	7a7b      	ldrb	r3, [r7, #9]
 800e492:	3304      	adds	r3, #4
 800e494:	121b      	asrs	r3, r3, #8
 800e496:	b2da      	uxtb	r2, r3
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	7a7a      	ldrb	r2, [r7, #9]
 800e4a0:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e4a2:	7a7b      	ldrb	r3, [r7, #9]
 800e4a4:	121b      	asrs	r3, r3, #8
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e4b2:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e4ba:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e4bc:	2300      	movs	r3, #0
 800e4be:	83fb      	strh	r3, [r7, #30]
 800e4c0:	7a7b      	ldrb	r3, [r7, #9]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	8bfa      	ldrh	r2, [r7, #30]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d20b      	bcs.n	800e4e2 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e4ca:	8bfb      	ldrh	r3, [r7, #30]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	441a      	add	r2, r3
 800e4d0:	8bfb      	ldrh	r3, [r7, #30]
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	7811      	ldrb	r1, [r2, #0]
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e4da:	8bfb      	ldrh	r3, [r7, #30]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	83fb      	strh	r3, [r7, #30]
 800e4e0:	e7ee      	b.n	800e4c0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e4f2:	7a7b      	ldrb	r3, [r7, #9]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	b29c      	uxth	r4, r3
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	4623      	mov	r3, r4
 800e500:	f002 fc34 	bl	8010d6c <_ZN3USB11outTransferEhhtPh>
 800e504:	4603      	mov	r3, r0
 800e506:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e508:	7cfb      	ldrb	r3, [r7, #19]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e50e:	2064      	movs	r0, #100	; 0x64
 800e510:	f7f3 fb94 	bl	8001c3c <HAL_Delay>
 800e514:	46ad      	mov	sp, r5
}
 800e516:	bf00      	nop
 800e518:	3720      	adds	r7, #32
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bdb0      	pop	{r4, r5, r7, pc}

0800e51e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e51e:	b580      	push	{r7, lr}
 800e520:	b086      	sub	sp, #24
 800e522:	af02      	add	r7, sp, #8
 800e524:	60f8      	str	r0, [r7, #12]
 800e526:	607b      	str	r3, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	817b      	strh	r3, [r7, #10]
 800e52c:	4613      	mov	r3, r2
 800e52e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2202      	movs	r2, #2
 800e534:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	7a7a      	ldrb	r2, [r7, #9]
 800e53c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2204      	movs	r2, #4
 800e544:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e550:	8b3b      	ldrh	r3, [r7, #24]
 800e552:	b2da      	uxtb	r2, r3
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e55a:	8b3b      	ldrh	r3, [r7, #24]
 800e55c:	121b      	asrs	r3, r3, #8
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	781a      	ldrb	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	785a      	ldrb	r2, [r3, #1]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e580:	8979      	ldrh	r1, [r7, #10]
 800e582:	2300      	movs	r3, #0
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	2301      	movs	r3, #1
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	2308      	movs	r3, #8
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7ff ff37 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e592:	bf00      	nop
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b086      	sub	sp, #24
 800e59e:	af02      	add	r7, sp, #8
 800e5a0:	60f8      	str	r0, [r7, #12]
 800e5a2:	607b      	str	r3, [r7, #4]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	817b      	strh	r3, [r7, #10]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	7a7a      	ldrb	r2, [r7, #9]
 800e5b8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2208      	movs	r2, #8
 800e5c0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	785a      	ldrb	r2, [r3, #1]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	781a      	ldrb	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	785a      	ldrb	r2, [r3, #1]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	7f3a      	ldrb	r2, [r7, #28]
 800e5f8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e61a:	8979      	ldrh	r1, [r7, #10]
 800e61c:	2300      	movs	r3, #0
 800e61e:	9301      	str	r3, [sp, #4]
 800e620:	2301      	movs	r3, #1
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	230c      	movs	r3, #12
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7ff feea 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e62c:	bf00      	nop
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af02      	add	r7, sp, #8
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	607b      	str	r3, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	817b      	strh	r3, [r7, #10]
 800e642:	4613      	mov	r3, r2
 800e644:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2204      	movs	r2, #4
 800e64a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	7a7a      	ldrb	r2, [r7, #9]
 800e652:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2208      	movs	r2, #8
 800e65a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	781a      	ldrb	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	785a      	ldrb	r2, [r3, #1]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2202      	movs	r2, #2
 800e696:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	22ff      	movs	r2, #255	; 0xff
 800e69e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	22ff      	movs	r2, #255	; 0xff
 800e6a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e6b0:	8979      	ldrh	r1, [r7, #10]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	230c      	movs	r3, #12
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f7ff fe9f 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b086      	sub	sp, #24
 800e6ce:	af02      	add	r7, sp, #8
 800e6d0:	60f8      	str	r0, [r7, #12]
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	817b      	strh	r3, [r7, #10]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2205      	movs	r2, #5
 800e6e0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	7a7a      	ldrb	r2, [r7, #9]
 800e6e8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	220a      	movs	r2, #10
 800e6f0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	781a      	ldrb	r2, [r3, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	785a      	ldrb	r2, [r3, #1]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2202      	movs	r2, #2
 800e73c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	22a0      	movs	r2, #160	; 0xa0
 800e744:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2202      	movs	r2, #2
 800e74c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e756:	8979      	ldrh	r1, [r7, #10]
 800e758:	2300      	movs	r3, #0
 800e75a:	9301      	str	r3, [sp, #4]
 800e75c:	2301      	movs	r3, #1
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	230e      	movs	r3, #14
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f7ff fe4c 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e768:	bf00      	nop
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af02      	add	r7, sp, #8
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	607b      	str	r3, [r7, #4]
 800e77a:	460b      	mov	r3, r1
 800e77c:	817b      	strh	r3, [r7, #10]
 800e77e:	4613      	mov	r3, r2
 800e780:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2206      	movs	r2, #6
 800e786:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	7a7a      	ldrb	r2, [r7, #9]
 800e78e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2204      	movs	r2, #4
 800e796:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	781a      	ldrb	r2, [r3, #0]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	785a      	ldrb	r2, [r3, #1]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	781a      	ldrb	r2, [r3, #0]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	785a      	ldrb	r2, [r3, #1]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e7d0:	8979      	ldrh	r1, [r7, #10]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	2308      	movs	r3, #8
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f7ff fe0f 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e7e2:	bf00      	nop
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b086      	sub	sp, #24
 800e7ee:	af02      	add	r7, sp, #8
 800e7f0:	60f8      	str	r0, [r7, #12]
 800e7f2:	607b      	str	r3, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	817b      	strh	r3, [r7, #10]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2207      	movs	r2, #7
 800e800:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	7a7a      	ldrb	r2, [r7, #9]
 800e808:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2204      	movs	r2, #4
 800e810:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	781a      	ldrb	r2, [r3, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	785a      	ldrb	r2, [r3, #1]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	781a      	ldrb	r2, [r3, #0]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	785a      	ldrb	r2, [r3, #1]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e84a:	8979      	ldrh	r1, [r7, #10]
 800e84c:	2300      	movs	r3, #0
 800e84e:	9301      	str	r3, [sp, #4]
 800e850:	2301      	movs	r3, #1
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	2308      	movs	r3, #8
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff fdd2 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af02      	add	r7, sp, #8
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	461a      	mov	r2, r3
 800e872:	4603      	mov	r3, r0
 800e874:	807b      	strh	r3, [r7, #2]
 800e876:	460b      	mov	r3, r1
 800e878:	707b      	strb	r3, [r7, #1]
 800e87a:	4613      	mov	r3, r2
 800e87c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	220b      	movs	r2, #11
 800e882:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	787a      	ldrb	r2, [r7, #1]
 800e88a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2208      	movs	r2, #8
 800e892:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	783a      	ldrb	r2, [r7, #0]
 800e8a2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7c3a      	ldrb	r2, [r7, #16]
 800e8aa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e8e4:	8879      	ldrh	r1, [r7, #2]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7ff fd85 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e8f6:	bf00      	nop
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b08e      	sub	sp, #56	; 0x38
 800e902:	af08      	add	r7, sp, #32
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800e908:	2301      	movs	r3, #1
 800e90a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800e90c:	2300      	movs	r3, #0
 800e90e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800e910:	2300      	movs	r3, #0
 800e912:	75fb      	strb	r3, [r7, #23]
 800e914:	7dfb      	ldrb	r3, [r7, #23]
 800e916:	2b05      	cmp	r3, #5
 800e918:	d811      	bhi.n	800e93e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	f1c3 0305 	rsb	r3, r3, #5
 800e920:	461a      	mov	r2, r3
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	441a      	add	r2, r3
 800e926:	7dfb      	ldrb	r3, [r7, #23]
 800e928:	3302      	adds	r3, #2
 800e92a:	7812      	ldrb	r2, [r2, #0]
 800e92c:	f107 0118 	add.w	r1, r7, #24
 800e930:	440b      	add	r3, r1
 800e932:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800e936:	7dfb      	ldrb	r3, [r7, #23]
 800e938:	3301      	adds	r3, #1
 800e93a:	75fb      	strb	r3, [r7, #23]
 800e93c:	e7ea      	b.n	800e914 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e94e:	2300      	movs	r3, #0
 800e950:	9307      	str	r3, [sp, #28]
 800e952:	f107 030c 	add.w	r3, r7, #12
 800e956:	9306      	str	r3, [sp, #24]
 800e958:	2308      	movs	r3, #8
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	2308      	movs	r3, #8
 800e95e:	9304      	str	r3, [sp, #16]
 800e960:	2300      	movs	r3, #0
 800e962:	9303      	str	r3, [sp, #12]
 800e964:	2303      	movs	r3, #3
 800e966:	9302      	str	r3, [sp, #8]
 800e968:	23f5      	movs	r3, #245	; 0xf5
 800e96a:	9301      	str	r3, [sp, #4]
 800e96c:	2309      	movs	r3, #9
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	2321      	movs	r3, #33	; 0x21
 800e972:	f002 f81c 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800e976:	bf00      	nop
 800e978:	3718      	adds	r7, #24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800e97e:	b580      	push	{r7, lr}
 800e980:	b08e      	sub	sp, #56	; 0x38
 800e982:	af08      	add	r7, sp, #32
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800e988:	2305      	movs	r3, #5
 800e98a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800e98c:	2310      	movs	r3, #16
 800e98e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800e990:	2301      	movs	r3, #1
 800e992:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800e994:	2302      	movs	r3, #2
 800e996:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800e998:	2312      	movs	r3, #18
 800e99a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800e99c:	2300      	movs	r3, #0
 800e99e:	75fb      	strb	r3, [r7, #23]
 800e9a0:	7dfb      	ldrb	r3, [r7, #23]
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	d80e      	bhi.n	800e9c4 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	683a      	ldr	r2, [r7, #0]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	7812      	ldrb	r2, [r2, #0]
 800e9b2:	f107 0118 	add.w	r1, r7, #24
 800e9b6:	440b      	add	r3, r1
 800e9b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	75fb      	strb	r3, [r7, #23]
 800e9c2:	e7ed      	b.n	800e9a0 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	f107 030c 	add.w	r3, r7, #12
 800e9dc:	9306      	str	r3, [sp, #24]
 800e9de:	230b      	movs	r3, #11
 800e9e0:	9305      	str	r3, [sp, #20]
 800e9e2:	230b      	movs	r3, #11
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9303      	str	r3, [sp, #12]
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	9302      	str	r3, [sp, #8]
 800e9ee:	2305      	movs	r3, #5
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	2309      	movs	r3, #9
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	2321      	movs	r3, #33	; 0x21
 800e9f8:	f001 ffd9 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800e9fc:	bf00      	nop
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	4a04      	ldr	r2, [pc, #16]	; (800ea20 <_ZN13USBReadParserC1Ev+0x1c>)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	080125c8 	.word	0x080125c8

0800ea24 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff ffe7 	bl	800ea04 <_ZN13USBReadParserC1Ev>
 800ea36:	4a21      	ldr	r2, [pc, #132]	; (800eabc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	605a      	str	r2, [r3, #4]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3308      	adds	r3, #8
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fd fb65 	bl	800c116 <_ZN16MultiValueBufferC1Ev>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3310      	adds	r3, #16
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fd fb77 	bl	800c144 <_ZN20MultiByteValueParserC1Ev>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3318      	adds	r3, #24
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fd fb9e 	bl	800c19c <_ZN11ByteSkipperC1Ev>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f103 0220 	add.w	r2, r3, #32
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f103 0210 	add.w	r2, r3, #16
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3308      	adds	r3, #8
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f7fd fb67 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f103 0218 	add.w	r2, r3, #24
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7fd fb8a 	bl	800c1c4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	08012570 	.word	0x08012570

0800eac0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff ff99 	bl	800ea04 <_ZN13USBReadParserC1Ev>
 800ead2:	4a21      	ldr	r2, [pc, #132]	; (800eb58 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	601a      	str	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	605a      	str	r2, [r3, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3308      	adds	r3, #8
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fd fb17 	bl	800c116 <_ZN16MultiValueBufferC1Ev>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	3310      	adds	r3, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fd fb29 	bl	800c144 <_ZN20MultiByteValueParserC1Ev>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	3318      	adds	r3, #24
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fd fb50 	bl	800c19c <_ZN11ByteSkipperC1Ev>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f103 0220 	add.w	r2, r3, #32
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f103 0210 	add.w	r2, r3, #16
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3308      	adds	r3, #8
 800eb32:	4619      	mov	r1, r3
 800eb34:	4610      	mov	r0, r2
 800eb36:	f7fd fb19 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f103 0218 	add.w	r2, r3, #24
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3308      	adds	r3, #8
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7fd fb3c 	bl	800c1c4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	08012564 	.word	0x08012564

0800eb5c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	607a      	str	r2, [r7, #4]
 800eb66:	603b      	str	r3, [r7, #0]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800eb6c:	897b      	ldrh	r3, [r7, #10]
 800eb6e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800eb74:	8afb      	ldrh	r3, [r7, #22]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00f      	beq.n	800eb9a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800eb7a:	f107 0216 	add.w	r2, r7, #22
 800eb7e:	f107 0310 	add.w	r3, r7, #16
 800eb82:	4619      	mov	r1, r3
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f000 f82d 	bl	800ebe4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	f083 0301 	eor.w	r3, r3, #1
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d100      	bne.n	800eb98 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800eb96:	e7ed      	b.n	800eb74 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800eb98:	bf00      	nop
}
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	607a      	str	r2, [r7, #4]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	460b      	mov	r3, r1
 800ebae:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ebb0:	897b      	ldrh	r3, [r7, #10]
 800ebb2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800ebb8:	8afb      	ldrh	r3, [r7, #22]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00f      	beq.n	800ebde <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ebbe:	f107 0216 	add.w	r2, r7, #22
 800ebc2:	f107 0310 	add.w	r3, r7, #16
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f000 f981 	bl	800eed0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f083 0301 	eor.w	r3, r3, #1
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d100      	bne.n	800ebdc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ebda:	e7ed      	b.n	800ebb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ebdc:	bf00      	nop
}
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800ebe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe6:	b089      	sub	sp, #36	; 0x24
 800ebe8:	af02      	add	r7, sp, #8
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3320      	adds	r3, #32
 800ebf4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3320      	adds	r3, #32
 800ebfa:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec02:	2b04      	cmp	r3, #4
 800ec04:	f200 815e 	bhi.w	800eec4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800ec08:	a201      	add	r2, pc, #4	; (adr r2, 800ec10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800ec0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0e:	bf00      	nop
 800ec10:	0800ec25 	.word	0x0800ec25
 800ec14:	0800ec45 	.word	0x0800ec45
 800ec18:	0800ec87 	.word	0x0800ec87
 800ec1c:	0800ec9b 	.word	0x0800ec9b
 800ec20:	0800ed5f 	.word	0x0800ed5f
                case 0:
                        theBuffer.valueSize = 2;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2202      	movs	r2, #2
 800ec28:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f103 0210 	add.w	r2, r3, #16
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3308      	adds	r3, #8
 800ec34:	4619      	mov	r1, r3
 800ec36:	4610      	mov	r0, r2
 800ec38:	f7fd fa98 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	3310      	adds	r3, #16
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	68b9      	ldr	r1, [r7, #8]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f003 fa49 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ec52:	4603      	mov	r3, r0
 800ec54:	f083 0301 	eor.w	r3, r3, #1
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	e131      	b.n	800eec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ec68:	781a      	ldrb	r2, [r3, #0]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ec76:	785a      	ldrb	r2, [r3, #1]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2202      	movs	r2, #2
 800ec82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	3320      	adds	r3, #32
 800ec8a:	1c9a      	adds	r2, r3, #2
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2203      	movs	r2, #3
 800ec96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800eca0:	3b02      	subs	r3, #2
 800eca2:	2b1f      	cmp	r3, #31
 800eca4:	d847      	bhi.n	800ed36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ed37 	.word	0x0800ed37
 800ecb0:	0800ed37 	.word	0x0800ed37
 800ecb4:	0800ed2d 	.word	0x0800ed2d
 800ecb8:	0800ed37 	.word	0x0800ed37
 800ecbc:	0800ed37 	.word	0x0800ed37
 800ecc0:	0800ed37 	.word	0x0800ed37
 800ecc4:	0800ed37 	.word	0x0800ed37
 800ecc8:	0800ed37 	.word	0x0800ed37
 800eccc:	0800ed37 	.word	0x0800ed37
 800ecd0:	0800ed37 	.word	0x0800ed37
 800ecd4:	0800ed37 	.word	0x0800ed37
 800ecd8:	0800ed37 	.word	0x0800ed37
 800ecdc:	0800ed37 	.word	0x0800ed37
 800ece0:	0800ed37 	.word	0x0800ed37
 800ece4:	0800ed37 	.word	0x0800ed37
 800ece8:	0800ed37 	.word	0x0800ed37
 800ecec:	0800ed37 	.word	0x0800ed37
 800ecf0:	0800ed37 	.word	0x0800ed37
 800ecf4:	0800ed37 	.word	0x0800ed37
 800ecf8:	0800ed37 	.word	0x0800ed37
 800ecfc:	0800ed37 	.word	0x0800ed37
 800ed00:	0800ed37 	.word	0x0800ed37
 800ed04:	0800ed37 	.word	0x0800ed37
 800ed08:	0800ed37 	.word	0x0800ed37
 800ed0c:	0800ed37 	.word	0x0800ed37
 800ed10:	0800ed37 	.word	0x0800ed37
 800ed14:	0800ed37 	.word	0x0800ed37
 800ed18:	0800ed37 	.word	0x0800ed37
 800ed1c:	0800ed37 	.word	0x0800ed37
 800ed20:	0800ed37 	.word	0x0800ed37
 800ed24:	0800ed37 	.word	0x0800ed37
 800ed28:	0800ed37 	.word	0x0800ed37
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800ed34:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed3c:	3b02      	subs	r3, #2
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f103 0210 	add.w	r2, r3, #16
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3308      	adds	r3, #8
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4610      	mov	r0, r2
 800ed52:	f7fd fa0b 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2204      	movs	r2, #4
 800ed5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ed64:	2b05      	cmp	r3, #5
 800ed66:	d055      	beq.n	800ee14 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800ed68:	2b05      	cmp	r3, #5
 800ed6a:	f300 8085 	bgt.w	800ee78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d002      	beq.n	800ed78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800ed72:	2b04      	cmp	r3, #4
 800ed74:	d015      	beq.n	800eda2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800ed76:	e07f      	b.n	800ee78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3310      	adds	r3, #16
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f003 f9af 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f083 0301 	eor.w	r3, r3, #1
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800ed92:	2300      	movs	r3, #0
 800ed94:	e097      	b.n	800eec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	795a      	ldrb	r2, [r3, #5]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800eda0:	e086      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	3310      	adds	r3, #16
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	68b9      	ldr	r1, [r7, #8]
 800edaa:	4618      	mov	r0, r3
 800edac:	f003 f99a 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800edb0:	4603      	mov	r3, r0
 800edb2:	f083 0301 	eor.w	r3, r3, #1
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800edbc:	2300      	movs	r3, #0
 800edbe:	e082      	b.n	800eec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	795b      	ldrb	r3, [r3, #5]
 800edc4:	2be0      	cmp	r3, #224	; 0xe0
 800edc6:	d16c      	bne.n	800eea2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	799b      	ldrb	r3, [r3, #6]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d16a      	bne.n	800eea6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d004      	beq.n	800ede4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	79db      	ldrb	r3, [r3, #7]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d104      	bne.n	800edec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800ede2:	e065      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	79db      	ldrb	r3, [r3, #7]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d15e      	bne.n	800eeaa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	789a      	ldrb	r2, [r3, #2]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	78da      	ldrb	r2, [r3, #3]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	79da      	ldrb	r2, [r3, #7]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800ee12:	e04d      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3310      	adds	r3, #16
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f003 f961 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f083 0301 	eor.w	r3, r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e049      	b.n	800eec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d038      	beq.n	800eeae <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d034      	beq.n	800eeae <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6858      	ldr	r0, [r3, #4]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681c      	ldr	r4, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	3220      	adds	r2, #32
 800ee6c:	9201      	str	r2, [sp, #4]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	4633      	mov	r3, r6
 800ee72:	462a      	mov	r2, r5
 800ee74:	47a0      	blx	r4
                                        break;
 800ee76:	e01a      	b.n	800eeae <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f103 0018 	add.w	r0, r3, #24
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3b02      	subs	r3, #2
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	68b9      	ldr	r1, [r7, #8]
 800ee8e:	f7fd f9ac 	bl	800c1ea <_ZN11ByteSkipper4SkipEPPhPtt>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f083 0301 	eor.w	r3, r3, #1
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d008      	beq.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e011      	b.n	800eec6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800eea2:	bf00      	nop
 800eea4:	e004      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800eea6:	bf00      	nop
 800eea8:	e002      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800eeaa:	bf00      	nop
 800eeac:	e000      	b.n	800eeb0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800eeae:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f103 0220 	add.w	r2, r3, #32
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800eec4:	2301      	movs	r3, #1
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	371c      	adds	r7, #28
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eece:	bf00      	nop

0800eed0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800eed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed2:	b089      	sub	sp, #36	; 0x24
 800eed4:	af02      	add	r7, sp, #8
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	3320      	adds	r3, #32
 800eee0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	3320      	adds	r3, #32
 800eee6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eeee:	2b04      	cmp	r3, #4
 800eef0:	f200 815e 	bhi.w	800f1b0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800eef4:	a201      	add	r2, pc, #4	; (adr r2, 800eefc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800eef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefa:	bf00      	nop
 800eefc:	0800ef11 	.word	0x0800ef11
 800ef00:	0800ef31 	.word	0x0800ef31
 800ef04:	0800ef73 	.word	0x0800ef73
 800ef08:	0800ef87 	.word	0x0800ef87
 800ef0c:	0800f04b 	.word	0x0800f04b
                        theBuffer.valueSize = 2;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2202      	movs	r2, #2
 800ef14:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f103 0210 	add.w	r2, r3, #16
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	3308      	adds	r3, #8
 800ef20:	4619      	mov	r1, r3
 800ef22:	4610      	mov	r0, r2
 800ef24:	f7fd f922 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3310      	adds	r3, #16
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	68b9      	ldr	r1, [r7, #8]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f003 f8d3 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	f083 0301 	eor.w	r3, r3, #1
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	e131      	b.n	800f1b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef54:	781a      	ldrb	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef62:	785a      	ldrb	r2, [r3, #1]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3320      	adds	r3, #32
 800ef76:	1c9a      	adds	r2, r3, #2
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2203      	movs	r2, #3
 800ef82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef8c:	3b02      	subs	r3, #2
 800ef8e:	2b1f      	cmp	r3, #31
 800ef90:	d847      	bhi.n	800f022 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800ef92:	a201      	add	r2, pc, #4	; (adr r2, 800ef98 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800ef94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef98:	0800f023 	.word	0x0800f023
 800ef9c:	0800f023 	.word	0x0800f023
 800efa0:	0800f019 	.word	0x0800f019
 800efa4:	0800f023 	.word	0x0800f023
 800efa8:	0800f023 	.word	0x0800f023
 800efac:	0800f023 	.word	0x0800f023
 800efb0:	0800f023 	.word	0x0800f023
 800efb4:	0800f023 	.word	0x0800f023
 800efb8:	0800f023 	.word	0x0800f023
 800efbc:	0800f023 	.word	0x0800f023
 800efc0:	0800f023 	.word	0x0800f023
 800efc4:	0800f023 	.word	0x0800f023
 800efc8:	0800f023 	.word	0x0800f023
 800efcc:	0800f023 	.word	0x0800f023
 800efd0:	0800f023 	.word	0x0800f023
 800efd4:	0800f023 	.word	0x0800f023
 800efd8:	0800f023 	.word	0x0800f023
 800efdc:	0800f023 	.word	0x0800f023
 800efe0:	0800f023 	.word	0x0800f023
 800efe4:	0800f023 	.word	0x0800f023
 800efe8:	0800f023 	.word	0x0800f023
 800efec:	0800f023 	.word	0x0800f023
 800eff0:	0800f023 	.word	0x0800f023
 800eff4:	0800f023 	.word	0x0800f023
 800eff8:	0800f023 	.word	0x0800f023
 800effc:	0800f023 	.word	0x0800f023
 800f000:	0800f023 	.word	0x0800f023
 800f004:	0800f023 	.word	0x0800f023
 800f008:	0800f023 	.word	0x0800f023
 800f00c:	0800f023 	.word	0x0800f023
 800f010:	0800f023 	.word	0x0800f023
 800f014:	0800f023 	.word	0x0800f023
                                        isGoodInterface = false;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f020:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f028:	3b02      	subs	r3, #2
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f103 0210 	add.w	r2, r3, #16
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3308      	adds	r3, #8
 800f03a:	4619      	mov	r1, r3
 800f03c:	4610      	mov	r0, r2
 800f03e:	f7fd f895 	bl	800c16c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2204      	movs	r2, #4
 800f046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f050:	2b05      	cmp	r3, #5
 800f052:	d055      	beq.n	800f100 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f054:	2b05      	cmp	r3, #5
 800f056:	f300 8085 	bgt.w	800f164 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	d002      	beq.n	800f064 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f05e:	2b04      	cmp	r3, #4
 800f060:	d015      	beq.n	800f08e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f062:	e07f      	b.n	800f164 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3310      	adds	r3, #16
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	68b9      	ldr	r1, [r7, #8]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f003 f839 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f072:	4603      	mov	r3, r0
 800f074:	f083 0301 	eor.w	r3, r3, #1
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f07e:	2300      	movs	r3, #0
 800f080:	e097      	b.n	800f1b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	795a      	ldrb	r2, [r3, #5]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f08c:	e086      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3310      	adds	r3, #16
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	68b9      	ldr	r1, [r7, #8]
 800f096:	4618      	mov	r0, r3
 800f098:	f003 f824 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f09c:	4603      	mov	r3, r0
 800f09e:	f083 0301 	eor.w	r3, r3, #1
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e082      	b.n	800f1b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	795b      	ldrb	r3, [r3, #5]
 800f0b0:	2bff      	cmp	r3, #255	; 0xff
 800f0b2:	d16c      	bne.n	800f18e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	799b      	ldrb	r3, [r3, #6]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d16a      	bne.n	800f192 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d004      	beq.n	800f0d0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	79db      	ldrb	r3, [r3, #7]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d104      	bne.n	800f0d8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f0ce:	e065      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	79db      	ldrb	r3, [r3, #7]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d15e      	bne.n	800f196 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	789a      	ldrb	r2, [r3, #2]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	78da      	ldrb	r2, [r3, #3]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	79da      	ldrb	r2, [r3, #7]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f0fe:	e04d      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3310      	adds	r3, #16
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	68b9      	ldr	r1, [r7, #8]
 800f108:	4618      	mov	r0, r3
 800f10a:	f002 ffeb 	bl	80120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f10e:	4603      	mov	r3, r0
 800f110:	f083 0301 	eor.w	r3, r3, #1
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f11a:	2300      	movs	r3, #0
 800f11c:	e049      	b.n	800f1b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f124:	2b00      	cmp	r3, #0
 800f126:	d038      	beq.n	800f19a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d034      	beq.n	800f19a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6858      	ldr	r0, [r3, #4]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681c      	ldr	r4, [r3, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	3220      	adds	r2, #32
 800f158:	9201      	str	r2, [sp, #4]
 800f15a:	9300      	str	r3, [sp, #0]
 800f15c:	4633      	mov	r3, r6
 800f15e:	462a      	mov	r2, r5
 800f160:	47a0      	blx	r4
                                        break;
 800f162:	e01a      	b.n	800f19a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f103 0018 	add.w	r0, r3, #24
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f170:	b29b      	uxth	r3, r3
 800f172:	3b02      	subs	r3, #2
 800f174:	b29b      	uxth	r3, r3
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	f7fd f836 	bl	800c1ea <_ZN11ByteSkipper4SkipEPPhPtt>
 800f17e:	4603      	mov	r3, r0
 800f180:	f083 0301 	eor.w	r3, r3, #1
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d008      	beq.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f18a:	2300      	movs	r3, #0
 800f18c:	e011      	b.n	800f1b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f18e:	bf00      	nop
 800f190:	e004      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f192:	bf00      	nop
 800f194:	e002      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f196:	bf00      	nop
 800f198:	e000      	b.n	800f19c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f19a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f103 0220 	add.w	r2, r3, #32
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f1b0:	2301      	movs	r3, #1
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	371c      	adds	r7, #28
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ba:	bf00      	nop

0800f1bc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f1bc:	b480      	push	{r7}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	73fb      	strb	r3, [r7, #15]
 800f1ca:	7bfb      	ldrb	r3, [r7, #15]
 800f1cc:	2b03      	cmp	r3, #3
 800f1ce:	d815      	bhi.n	800f1fc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f1d0:	7bfb      	ldrb	r3, [r7, #15]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	3318      	adds	r3, #24
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d109      	bne.n	800f1f4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	3318      	adds	r3, #24
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	4413      	add	r3, r2
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1f2:	e005      	b.n	800f200 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	73fb      	strb	r3, [r7, #15]
 800f1fa:	e7e6      	b.n	800f1ca <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f1fc:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	4a0a      	ldr	r2, [pc, #40]	; (800f240 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	601a      	str	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d005      	beq.n	800f236 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ffc3 	bl	800f1bc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	0801262c 	.word	0x0801262c

0800f244 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	4613      	mov	r3, r2
 800f250:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	88fb      	ldrh	r3, [r7, #6]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d10b      	bne.n	800f278 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3301      	adds	r3, #1
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	88fb      	ldrh	r3, [r7, #6]
 800f26a:	121b      	asrs	r3, r3, #8
 800f26c:	f043 0320 	orr.w	r3, r3, #32
 800f270:	429a      	cmp	r2, r3
 800f272:	d101      	bne.n	800f278 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f274:	2301      	movs	r3, #1
 800f276:	e000      	b.n	800f27a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f278:	2300      	movs	r3, #0
        }
 800f27a:	4618      	mov	r0, r3
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f286:	b480      	push	{r7}
 800f288:	b085      	sub	sp, #20
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	460b      	mov	r3, r1
 800f290:	607a      	str	r2, [r7, #4]
 800f292:	72fb      	strb	r3, [r7, #11]
                return;
 800f294:	bf00      	nop
        };
 800f296:	3714      	adds	r7, #20
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
                return;
 800f2a8:	bf00      	nop
        };
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
                return;
 800f2bc:	bf00      	nop
        }
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	603b      	str	r3, [r7, #0]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7ff ff95 	bl	800f20c <_ZN16BluetoothServiceC1EP3BTD>
 800f2e2:	4a1f      	ldr	r2, [pc, #124]	; (800f360 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	75fb      	strb	r3, [r7, #23]
 800f2f4:	7dfb      	ldrb	r3, [r7, #23]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d809      	bhi.n	800f30e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f2fa:	7dfa      	ldrb	r2, [r7, #23]
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	3208      	adds	r2, #8
 800f300:	2100      	movs	r1, #0
 800f302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	3301      	adds	r3, #1
 800f30a:	75fb      	strb	r3, [r7, #23]
 800f30c:	e7f2      	b.n	800f2f4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	79fa      	ldrb	r2, [r7, #7]
 800f314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2250      	movs	r2, #80	; 0x50
 800f324:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2270      	movs	r2, #112	; 0x70
 800f334:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2271      	movs	r2, #113	; 0x71
 800f344:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 f807 	bl	800f364 <_ZN5BTHID5ResetEv>
}
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	4618      	mov	r0, r3
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	08012600 	.word	0x08012600

0800f364 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	220a      	movs	r2, #10
 800f38c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3320      	adds	r3, #32
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	4798      	blx	r3
}
 800f3a2:	bf00      	nop
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f3aa:	b590      	push	{r4, r7, lr}
 800f3ac:	b085      	sub	sp, #20
 800f3ae:	af02      	add	r7, sp, #8
 800f3b0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d014      	beq.n	800f3e6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6898      	ldr	r0, [r3, #8]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	8999      	ldrh	r1, [r3, #12]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	7d1b      	ldrb	r3, [r3, #20]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	751a      	strb	r2, [r3, #20]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7d1a      	ldrb	r2, [r3, #20]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f103 041b 	add.w	r4, r3, #27
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	336f      	adds	r3, #111	; 0x6f
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	4623      	mov	r3, r4
 800f3e2:	f7ff f9c5 	bl	800e770 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6898      	ldr	r0, [r3, #8]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	8999      	ldrh	r1, [r3, #12]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	7d1b      	ldrb	r3, [r3, #20]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	b2da      	uxtb	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	751a      	strb	r2, [r3, #20]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	7d1a      	ldrb	r2, [r3, #20]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f103 0418 	add.w	r4, r3, #24
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	336d      	adds	r3, #109	; 0x6d
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	4623      	mov	r3, r4
 800f40c:	f7ff f9b0 	bl	800e770 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3308      	adds	r3, #8
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	220e      	movs	r2, #14
 800f420:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2209      	movs	r2, #9
 800f426:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f42a:	bf00      	nop
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd90      	pop	{r4, r7, pc}

0800f432 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f432:	b590      	push	{r4, r7, lr}
 800f434:	b087      	sub	sp, #28
 800f436:	af02      	add	r7, sp, #8
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7d5b      	ldrb	r3, [r3, #21]
 800f440:	f083 0301 	eor.w	r3, r3, #1
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b00      	cmp	r3, #0
 800f448:	d023      	beq.n	800f492 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	3308      	adds	r3, #8
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b02      	cmp	r3, #2
 800f452:	d11e      	bne.n	800f492 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	330c      	adds	r3, #12
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	461a      	mov	r2, r3
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	330d      	adds	r3, #13
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	021b      	lsls	r3, r3, #8
 800f464:	4313      	orrs	r3, r2
 800f466:	2b01      	cmp	r3, #1
 800f468:	d113      	bne.n	800f492 <_ZN5BTHID7ACLDataEPh+0x60>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	689b      	ldr	r3, [r3, #8]
 800f46e:	7a9b      	ldrb	r3, [r3, #10]
 800f470:	f083 0301 	eor.w	r3, r3, #1
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00b      	beq.n	800f492 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	2201      	movs	r2, #1
 800f480:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	8b5a      	ldrh	r2, [r3, #26]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	220a      	movs	r2, #10
 800f490:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	7a5b      	ldrb	r3, [r3, #9]
 800f498:	f083 0301 	eor.w	r3, r3, #1
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d03a      	beq.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d034      	beq.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7d5b      	ldrb	r3, [r3, #21]
 800f4b2:	f083 0301 	eor.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d02d      	beq.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4c2:	f083 0301 	eor.w	r3, r3, #1
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d025      	beq.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d120      	bne.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	330c      	adds	r3, #12
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	330d      	adds	r3, #13
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	021b      	lsls	r3, r3, #8
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	2b11      	cmp	r3, #17
 800f4ea:	d115      	bne.n	800f518 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	8b5a      	ldrh	r2, [r3, #26]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	899b      	ldrh	r3, [r3, #12]
 800f51e:	461a      	mov	r2, r3
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	f7ff fe8f 	bl	800f244 <_ZN16BluetoothService14checkHciHandleEPht>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 83d9 	beq.w	800fce0 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	3306      	adds	r3, #6
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	461a      	mov	r2, r3
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	3307      	adds	r3, #7
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	021b      	lsls	r3, r3, #8
 800f53e:	4313      	orrs	r3, r2
 800f540:	2b01      	cmp	r3, #1
 800f542:	f040 829b 	bne.w	800fa7c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	3308      	adds	r3, #8
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	f000 83c1 	beq.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	3308      	adds	r3, #8
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b03      	cmp	r3, #3
 800f55a:	f040 808d 	bne.w	800f678 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	3310      	adds	r3, #16
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	461a      	mov	r2, r3
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	3311      	adds	r3, #17
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	021b      	lsls	r3, r3, #8
 800f56e:	4313      	orrs	r3, r2
 800f570:	2b00      	cmp	r3, #0
 800f572:	f040 83af 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	3312      	adds	r3, #18
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	3313      	adds	r3, #19
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	021b      	lsls	r3, r3, #8
 800f586:	4313      	orrs	r3, r2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f040 83a3 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	330e      	adds	r3, #14
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d124      	bne.n	800f5e8 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	330f      	adds	r3, #15
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d11c      	bne.n	800f5e8 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	7a5a      	ldrb	r2, [r3, #9]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	7b1a      	ldrb	r2, [r3, #12]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	7b5a      	ldrb	r2, [r3, #13]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6898      	ldr	r0, [r3, #8]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	8999      	ldrh	r1, [r3, #12]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	7d1a      	ldrb	r2, [r3, #20]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	331b      	adds	r3, #27
 800f5e2:	f7ff f827 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>
 800f5e6:	e375      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	330e      	adds	r3, #14
 800f5ec:	781a      	ldrb	r2, [r3, #0]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d11a      	bne.n	800f62e <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	330f      	adds	r3, #15
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f604:	429a      	cmp	r2, r3
 800f606:	d112      	bne.n	800f62e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	7a5a      	ldrb	r2, [r3, #9]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	7b1a      	ldrb	r2, [r3, #12]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	7b5a      	ldrb	r2, [r3, #13]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	f043 0204 	orr.w	r2, r3, #4
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	611a      	str	r2, [r3, #16]
 800f62c:	e352      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	330e      	adds	r3, #14
 800f632:	781a      	ldrb	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f63a:	429a      	cmp	r2, r3
 800f63c:	f040 834a 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	330f      	adds	r3, #15
 800f644:	781a      	ldrb	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f64c:	429a      	cmp	r2, r3
 800f64e:	f040 8341 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	7a5a      	ldrb	r2, [r3, #9]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	7b1a      	ldrb	r2, [r3, #12]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	7b5a      	ldrb	r2, [r3, #13]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	691b      	ldr	r3, [r3, #16]
 800f66e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	611a      	str	r2, [r3, #16]
 800f676:	e32d      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	3308      	adds	r3, #8
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d15a      	bne.n	800f738 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	330c      	adds	r3, #12
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	330d      	adds	r3, #13
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	021b      	lsls	r3, r3, #8
 800f692:	4313      	orrs	r3, r2
 800f694:	2b01      	cmp	r3, #1
 800f696:	d112      	bne.n	800f6be <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	7a5a      	ldrb	r2, [r3, #9]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	7b9a      	ldrb	r2, [r3, #14]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	7bda      	ldrb	r2, [r3, #15]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	611a      	str	r2, [r3, #16]
 800f6bc:	e30a      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	330c      	adds	r3, #12
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	330d      	adds	r3, #13
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	021b      	lsls	r3, r3, #8
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	2b11      	cmp	r3, #17
 800f6d2:	d112      	bne.n	800f6fa <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	7a5a      	ldrb	r2, [r3, #9]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	7b9a      	ldrb	r2, [r3, #14]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	7bda      	ldrb	r2, [r3, #15]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	f043 0201 	orr.w	r2, r3, #1
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	611a      	str	r2, [r3, #16]
 800f6f8:	e2ec      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	330c      	adds	r3, #12
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	461a      	mov	r2, r3
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	330d      	adds	r3, #13
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	021b      	lsls	r3, r3, #8
 800f70a:	4313      	orrs	r3, r2
 800f70c:	2b13      	cmp	r3, #19
 800f70e:	f040 82e1 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	7a5a      	ldrb	r2, [r3, #9]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	7b9a      	ldrb	r2, [r3, #14]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	7bda      	ldrb	r2, [r3, #15]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	f043 0210 	orr.w	r2, r3, #16
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	611a      	str	r2, [r3, #16]
 800f736:	e2cd      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	3308      	adds	r3, #8
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	2b05      	cmp	r3, #5
 800f740:	d15e      	bne.n	800f800 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	3310      	adds	r3, #16
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	461a      	mov	r2, r3
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	3311      	adds	r3, #17
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	021b      	lsls	r3, r3, #8
 800f752:	4313      	orrs	r3, r2
 800f754:	2b00      	cmp	r3, #0
 800f756:	f040 82bd 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	330c      	adds	r3, #12
 800f75e:	781a      	ldrb	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f766:	429a      	cmp	r2, r3
 800f768:	d112      	bne.n	800f790 <_ZN5BTHID7ACLDataEPh+0x35e>
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	330d      	adds	r3, #13
 800f76e:	781a      	ldrb	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f776:	429a      	cmp	r2, r3
 800f778:	d10a      	bne.n	800f790 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	7a5a      	ldrb	r2, [r3, #9]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	611a      	str	r2, [r3, #16]
 800f78e:	e2a1      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	330c      	adds	r3, #12
 800f794:	781a      	ldrb	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d112      	bne.n	800f7c6 <_ZN5BTHID7ACLDataEPh+0x394>
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	330d      	adds	r3, #13
 800f7a4:	781a      	ldrb	r2, [r3, #0]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d10a      	bne.n	800f7c6 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	7a5a      	ldrb	r2, [r3, #9]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	f043 0202 	orr.w	r2, r3, #2
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	611a      	str	r2, [r3, #16]
 800f7c4:	e286      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	330c      	adds	r3, #12
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	f040 827e 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	330d      	adds	r3, #13
 800f7dc:	781a      	ldrb	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	f040 8275 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	7a5a      	ldrb	r2, [r3, #9]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	f043 0220 	orr.w	r2, r3, #32
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	611a      	str	r2, [r3, #16]
 800f7fe:	e269      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	3308      	adds	r3, #8
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	2b04      	cmp	r3, #4
 800f808:	d155      	bne.n	800f8b6 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	330c      	adds	r3, #12
 800f80e:	781a      	ldrb	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f816:	429a      	cmp	r2, r3
 800f818:	d113      	bne.n	800f842 <_ZN5BTHID7ACLDataEPh+0x410>
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	330d      	adds	r3, #13
 800f81e:	781a      	ldrb	r2, [r3, #0]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f826:	429a      	cmp	r2, r3
 800f828:	d10b      	bne.n	800f842 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6898      	ldr	r0, [r3, #8]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	8999      	ldrh	r1, [r3, #12]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	3309      	adds	r3, #9
 800f836:	781a      	ldrb	r2, [r3, #0]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	331b      	adds	r3, #27
 800f83c:	f7fe ff45 	bl	800e6ca <_ZN3BTD21l2cap_config_responseEthPh>
 800f840:	e248      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	330c      	adds	r3, #12
 800f846:	781a      	ldrb	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f84e:	429a      	cmp	r2, r3
 800f850:	d113      	bne.n	800f87a <_ZN5BTHID7ACLDataEPh+0x448>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	330d      	adds	r3, #13
 800f856:	781a      	ldrb	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f85e:	429a      	cmp	r2, r3
 800f860:	d10b      	bne.n	800f87a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6898      	ldr	r0, [r3, #8]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8999      	ldrh	r1, [r3, #12]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	3309      	adds	r3, #9
 800f86e:	781a      	ldrb	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3316      	adds	r3, #22
 800f874:	f7fe ff29 	bl	800e6ca <_ZN3BTD21l2cap_config_responseEthPh>
 800f878:	e22c      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	330c      	adds	r3, #12
 800f87e:	781a      	ldrb	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f886:	429a      	cmp	r2, r3
 800f888:	f040 8224 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	330d      	adds	r3, #13
 800f890:	781a      	ldrb	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f898:	429a      	cmp	r2, r3
 800f89a:	f040 821b 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6898      	ldr	r0, [r3, #8]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	8999      	ldrh	r1, [r3, #12]
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	3309      	adds	r3, #9
 800f8aa:	781a      	ldrb	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3318      	adds	r3, #24
 800f8b0:	f7fe ff0b 	bl	800e6ca <_ZN3BTD21l2cap_config_responseEthPh>
 800f8b4:	e20e      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b06      	cmp	r3, #6
 800f8be:	d170      	bne.n	800f9a2 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	330c      	adds	r3, #12
 800f8c4:	781a      	ldrb	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d112      	bne.n	800f8f6 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	330d      	adds	r3, #13
 800f8d4:	781a      	ldrb	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d10a      	bne.n	800f8f6 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	7a5a      	ldrb	r2, [r3, #9]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	611a      	str	r2, [r3, #16]
 800f8f4:	e1ee      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	330c      	adds	r3, #12
 800f8fa:	781a      	ldrb	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f902:	429a      	cmp	r2, r3
 800f904:	d121      	bne.n	800f94a <_ZN5BTHID7ACLDataEPh+0x518>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	330d      	adds	r3, #13
 800f90a:	781a      	ldrb	r2, [r3, #0]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f912:	429a      	cmp	r2, r3
 800f914:	d119      	bne.n	800f94a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	7a5a      	ldrb	r2, [r3, #9]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6898      	ldr	r0, [r3, #8]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8999      	ldrh	r1, [r3, #12]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	7d1a      	ldrb	r2, [r3, #20]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3316      	adds	r3, #22
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	4623      	mov	r3, r4
 800f938:	f7fe ff57 	bl	800e7ea <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3308      	adds	r3, #8
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	4798      	blx	r3
 800f948:	e1c4      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	330c      	adds	r3, #12
 800f94e:	781a      	ldrb	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f956:	429a      	cmp	r2, r3
 800f958:	f040 81bc 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	330d      	adds	r3, #13
 800f960:	781a      	ldrb	r2, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f968:	429a      	cmp	r2, r3
 800f96a:	f040 81b3 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	7a5a      	ldrb	r2, [r3, #9]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6898      	ldr	r0, [r3, #8]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8999      	ldrh	r1, [r3, #12]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	7d1a      	ldrb	r2, [r3, #20]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3318      	adds	r3, #24
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	4623      	mov	r3, r4
 800f990:	f7fe ff2b 	bl	800e7ea <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3308      	adds	r3, #8
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	4798      	blx	r3
 800f9a0:	e198      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b07      	cmp	r3, #7
 800f9aa:	d14c      	bne.n	800fa46 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	330c      	adds	r3, #12
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	7edb      	ldrb	r3, [r3, #27]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d111      	bne.n	800f9de <_ZN5BTHID7ACLDataEPh+0x5ac>
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	330d      	adds	r3, #13
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7f1b      	ldrb	r3, [r3, #28]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d10a      	bne.n	800f9de <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	7a5a      	ldrb	r2, [r3, #9]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	611a      	str	r2, [r3, #16]
 800f9dc:	e17a      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	330c      	adds	r3, #12
 800f9e2:	781a      	ldrb	r2, [r3, #0]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	7d9b      	ldrb	r3, [r3, #22]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d111      	bne.n	800fa10 <_ZN5BTHID7ACLDataEPh+0x5de>
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	330d      	adds	r3, #13
 800f9f0:	781a      	ldrb	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	7ddb      	ldrb	r3, [r3, #23]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d10a      	bne.n	800fa10 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	7a5a      	ldrb	r2, [r3, #9]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	691b      	ldr	r3, [r3, #16]
 800fa06:	f043 0208 	orr.w	r2, r3, #8
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	611a      	str	r2, [r3, #16]
 800fa0e:	e161      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	330c      	adds	r3, #12
 800fa14:	781a      	ldrb	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	7e1b      	ldrb	r3, [r3, #24]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	f040 815a 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	330d      	adds	r3, #13
 800fa24:	781a      	ldrb	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	7e5b      	ldrb	r3, [r3, #25]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	f040 8152 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	7a5a      	ldrb	r2, [r3, #9]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	611a      	str	r2, [r3, #16]
 800fa44:	e146      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	3308      	adds	r3, #8
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b0a      	cmp	r3, #10
 800fa4e:	f040 8141 	bne.w	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	7a5a      	ldrb	r2, [r3, #9]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6898      	ldr	r0, [r3, #8]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	8999      	ldrh	r1, [r3, #12]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	7d1a      	ldrb	r2, [r3, #20]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	330c      	adds	r3, #12
 800fa6a:	781c      	ldrb	r4, [r3, #0]
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	330d      	adds	r3, #13
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4623      	mov	r3, r4
 800fa76:	f7fe fef5 	bl	800e864 <_ZN3BTD26l2cap_information_responseEthhh>
 800fa7a:	e12b      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	3306      	adds	r3, #6
 800fa80:	781a      	ldrb	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	f040 8087 	bne.w	800fb9c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	3307      	adds	r3, #7
 800fa92:	781a      	ldrb	r2, [r3, #0]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d17e      	bne.n	800fb9c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	3308      	adds	r3, #8
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	d131      	bne.n	800fb0c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2203      	movs	r2, #3
 800faac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	7a5a      	ldrb	r2, [r3, #9]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	7a9a      	ldrb	r2, [r3, #10]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2205      	movs	r2, #5
 800fad0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3328      	adds	r3, #40	; 0x28
 800fb00:	220a      	movs	r2, #10
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fb6d 	bl	80101e4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fb0a:	e0e0      	b.n	800fcce <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	3308      	adds	r3, #8
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2b04      	cmp	r3, #4
 800fb14:	d131      	bne.n	800fb7a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2205      	movs	r2, #5
 800fb1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	7a5a      	ldrb	r2, [r3, #9]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	7a9a      	ldrb	r2, [r3, #10]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2205      	movs	r2, #5
 800fb3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2202      	movs	r2, #2
 800fb4e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2235      	movs	r2, #53	; 0x35
 800fb56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	3328      	adds	r3, #40	; 0x28
 800fb6e:	220a      	movs	r2, #10
 800fb70:	4619      	mov	r1, r3
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fb36 	bl	80101e4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fb78:	e0a9      	b.n	800fcce <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	2b06      	cmp	r3, #6
 800fb82:	f040 80a4 	bne.w	800fcce <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	3309      	adds	r3, #9
 800fb8a:	7819      	ldrb	r1, [r3, #0]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	330a      	adds	r3, #10
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fb3f 	bl	8010218 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fb9a:	e098      	b.n	800fcce <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	3306      	adds	r3, #6
 800fba0:	781a      	ldrb	r2, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d162      	bne.n	800fc72 <_ZN5BTHID7ACLDataEPh+0x840>
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	3307      	adds	r3, #7
 800fbb0:	781a      	ldrb	r2, [r3, #0]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d15a      	bne.n	800fc72 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2ba1      	cmp	r3, #161	; 0xa1
 800fbc4:	f040 8085 	bne.w	800fcd2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800fbc8:	f7f2 f82c 	bl	8001c24 <HAL_GetTick>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	3305      	adds	r3, #5
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	021b      	lsls	r3, r3, #8
 800fbda:	b21a      	sxth	r2, r3
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	b21b      	sxth	r3, r3
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	b21b      	sxth	r3, r3
 800fbe8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3314      	adds	r3, #20
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	89fa      	ldrh	r2, [r7, #14]
 800fbf4:	b2d2      	uxtb	r2, r2
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	b2d1      	uxtb	r1, r2
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	3209      	adds	r2, #9
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	3309      	adds	r3, #9
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d002      	beq.n	800fc12 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d016      	beq.n	800fc3e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800fc10:	e05f      	b.n	800fcd2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d027      	beq.n	800fc6a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6a18      	ldr	r0, [r3, #32]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a1b      	ldr	r3, [r3, #32]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681c      	ldr	r4, [r3, #0]
 800fc26:	89fb      	ldrh	r3, [r7, #14]
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	3b02      	subs	r3, #2
 800fc2c:	b2da      	uxtb	r2, r3
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	330a      	adds	r3, #10
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	4613      	mov	r3, r2
 800fc36:	2200      	movs	r2, #0
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	47a0      	blx	r4
                                                break;
 800fc3c:	e015      	b.n	800fc6a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d013      	beq.n	800fc6e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681c      	ldr	r4, [r3, #0]
 800fc52:	89fb      	ldrh	r3, [r7, #14]
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	3b02      	subs	r3, #2
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	330a      	adds	r3, #10
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	4613      	mov	r3, r2
 800fc62:	2200      	movs	r2, #0
 800fc64:	6879      	ldr	r1, [r7, #4]
 800fc66:	47a0      	blx	r4
                                                break;
 800fc68:	e001      	b.n	800fc6e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800fc6a:	bf00      	nop
 800fc6c:	e031      	b.n	800fcd2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800fc6e:	bf00      	nop
                        }
 800fc70:	e02f      	b.n	800fcd2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	3306      	adds	r3, #6
 800fc76:	781a      	ldrb	r2, [r3, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d128      	bne.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	3307      	adds	r3, #7
 800fc86:	781a      	ldrb	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d120      	bne.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	3308      	adds	r3, #8
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2ba3      	cmp	r3, #163	; 0xa3
 800fc9a:	d11b      	bne.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	3305      	adds	r3, #5
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	b21a      	sxth	r2, r3
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	b21b      	sxth	r3, r3
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	b21b      	sxth	r3, r3
 800fcb2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	3318      	adds	r3, #24
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	89ba      	ldrh	r2, [r7, #12]
 800fcbe:	b2d2      	uxtb	r2, r2
 800fcc0:	3a01      	subs	r2, #1
 800fcc2:	b2d1      	uxtb	r1, r2
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	3209      	adds	r2, #9
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	4798      	blx	r3
 800fccc:	e002      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fcce:	bf00      	nop
 800fcd0:	e000      	b.n	800fcd4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800fcd2:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f807 	bl	800fce8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f8b4 	bl	800fe48 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800fce0:	bf00      	nop
 800fce2:	3714      	adds	r7, #20
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd90      	pop	{r4, r7, pc}

0800fce8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800fce8:	b5b0      	push	{r4, r5, r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	7e9b      	ldrb	r3, [r3, #26]
 800fcf4:	2b0e      	cmp	r3, #14
 800fcf6:	f000 8084 	beq.w	800fe02 <_ZN5BTHID8SDP_taskEv+0x11a>
 800fcfa:	2b0e      	cmp	r3, #14
 800fcfc:	f300 809f 	bgt.w	800fe3e <_ZN5BTHID8SDP_taskEv+0x156>
 800fd00:	2b0a      	cmp	r3, #10
 800fd02:	d002      	beq.n	800fd0a <_ZN5BTHID8SDP_taskEv+0x22>
 800fd04:	2b0b      	cmp	r3, #11
 800fd06:	d068      	beq.n	800fdda <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800fd08:	e099      	b.n	800fe3e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d041      	beq.n	800fd9a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6898      	ldr	r0, [r3, #8]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	8999      	ldrh	r1, [r3, #12]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	7d1a      	ldrb	r2, [r3, #20]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	331b      	adds	r3, #27
 800fd38:	2501      	movs	r5, #1
 800fd3a:	9501      	str	r5, [sp, #4]
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	4623      	mov	r3, r4
 800fd40:	f7fe fc2b 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800fd44:	2001      	movs	r0, #1
 800fd46:	f7f1 ff79 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6898      	ldr	r0, [r3, #8]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8999      	ldrh	r1, [r3, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7d1a      	ldrb	r2, [r3, #20]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	331b      	adds	r3, #27
 800fd60:	2500      	movs	r5, #0
 800fd62:	9501      	str	r5, [sp, #4]
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	4623      	mov	r3, r4
 800fd68:	f7fe fc17 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	7d1b      	ldrb	r3, [r3, #20]
 800fd70:	3301      	adds	r3, #1
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800fd78:	2001      	movs	r0, #1
 800fd7a:	f7f1 ff5f 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6898      	ldr	r0, [r3, #8]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	8999      	ldrh	r1, [r3, #12]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	7d1a      	ldrb	r2, [r3, #20]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	331b      	adds	r3, #27
 800fd8e:	f7fe fc51 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	220b      	movs	r2, #11
 800fd96:	769a      	strb	r2, [r3, #26]
                        break;
 800fd98:	e04c      	b.n	800fe34 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d046      	beq.n	800fe34 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6898      	ldr	r0, [r3, #8]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8999      	ldrh	r1, [r3, #12]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1a      	ldrb	r2, [r3, #20]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	331b      	adds	r3, #27
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	f7fe fd09 	bl	800e7ea <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800fdd8:	e02c      	b.n	800fe34 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d028      	beq.n	800fe38 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	691b      	ldr	r3, [r3, #16]
 800fdea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	220a      	movs	r2, #10
 800fdfe:	769a      	strb	r2, [r3, #26]
                        break;
 800fe00:	e01a      	b.n	800fe38 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	691b      	ldr	r3, [r3, #16]
 800fe06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d016      	beq.n	800fe3c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	689a      	ldr	r2, [r3, #8]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	899b      	ldrh	r3, [r3, #12]
 800fe16:	4619      	mov	r1, r3
 800fe18:	4610      	mov	r0, r2
 800fe1a:	f7fe fa92 	bl	800e342 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe24:	819a      	strh	r2, [r3, #12]
                                Reset();
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	4798      	blx	r3
                        break;
 800fe32:	e003      	b.n	800fe3c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 800fe34:	bf00      	nop
 800fe36:	e002      	b.n	800fe3e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800fe38:	bf00      	nop
 800fe3a:	e000      	b.n	800fe3e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800fe3c:	bf00      	nop
}
 800fe3e:	bf00      	nop
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fe48 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800fe48:	b5b0      	push	{r4, r5, r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af02      	add	r7, sp, #8
 800fe4e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800fe56:	3b01      	subs	r3, #1
 800fe58:	2b08      	cmp	r3, #8
 800fe5a:	f200 812c 	bhi.w	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 800fe5e:	a201      	add	r2, pc, #4	; (adr r2, 800fe64 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800fe60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe64:	08010095 	.word	0x08010095
 800fe68:	0800ff2f 	.word	0x0800ff2f
 800fe6c:	0800ff67 	.word	0x0800ff67
 800fe70:	0800fe89 	.word	0x0800fe89
 800fe74:	08010061 	.word	0x08010061
 800fe78:	0800fea7 	.word	0x0800fea7
 800fe7c:	0800ffaf 	.word	0x0800ffaf
 800fe80:	0800ffe5 	.word	0x0800ffe5
 800fe84:	08010021 	.word	0x08010021
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	691b      	ldr	r3, [r3, #16]
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 8101 	beq.w	8010098 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f9f9 	bl	801028e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2206      	movs	r2, #6
 800fea0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800fea4:	e0f8      	b.n	8010098 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	f003 0310 	and.w	r3, r3, #16
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80f4 	beq.w	801009c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6898      	ldr	r0, [r3, #8]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	8999      	ldrh	r1, [r3, #12]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	7d1a      	ldrb	r2, [r3, #20]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	3318      	adds	r3, #24
 800feca:	2501      	movs	r5, #1
 800fecc:	9501      	str	r5, [sp, #4]
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	4623      	mov	r3, r4
 800fed2:	f7fe fb62 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800fed6:	2001      	movs	r0, #1
 800fed8:	f7f1 feb0 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6898      	ldr	r0, [r3, #8]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	8999      	ldrh	r1, [r3, #12]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	7d1a      	ldrb	r2, [r3, #20]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3318      	adds	r3, #24
 800fef2:	2500      	movs	r5, #0
 800fef4:	9501      	str	r5, [sp, #4]
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	4623      	mov	r3, r4
 800fefa:	f7fe fb4e 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	7d1b      	ldrb	r3, [r3, #20]
 800ff02:	3301      	adds	r3, #1
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	f7f1 fe96 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6898      	ldr	r0, [r3, #8]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8999      	ldrh	r1, [r3, #12]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	7d1a      	ldrb	r2, [r3, #20]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	3318      	adds	r3, #24
 800ff20:	f7fe fb88 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2208      	movs	r2, #8
 800ff28:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800ff2c:	e0b6      	b.n	801009c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	f003 0304 	and.w	r3, r3, #4
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 80b2 	beq.w	80100a0 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7d1b      	ldrb	r3, [r3, #20]
 800ff40:	3301      	adds	r3, #1
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6898      	ldr	r0, [r3, #8]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	8999      	ldrh	r1, [r3, #12]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	7d1a      	ldrb	r2, [r3, #20]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3316      	adds	r3, #22
 800ff58:	f7fe fb6c 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2203      	movs	r2, #3
 800ff60:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800ff64:	e09c      	b.n	80100a0 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	691b      	ldr	r3, [r3, #16]
 800ff6a:	f003 0302 	and.w	r3, r3, #2
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f000 8098 	beq.w	80100a4 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f98a 	bl	801028e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	f7f1 fe5e 	bl	8001c3c <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7d1b      	ldrb	r3, [r3, #20]
 800ff84:	3301      	adds	r3, #1
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6898      	ldr	r0, [r3, #8]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	8999      	ldrh	r1, [r3, #12]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	7d1a      	ldrb	r2, [r3, #20]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	336d      	adds	r3, #109	; 0x6d
 800ff9c:	2413      	movs	r4, #19
 800ff9e:	9400      	str	r4, [sp, #0]
 800ffa0:	f7fe fabd 	bl	800e51e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2207      	movs	r2, #7
 800ffa8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800ffac:	e07a      	b.n	80100a4 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d076      	beq.n	80100a8 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	7d1b      	ldrb	r3, [r3, #20]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6898      	ldr	r0, [r3, #8]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	8999      	ldrh	r1, [r3, #12]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	7d1a      	ldrb	r2, [r3, #20]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3318      	adds	r3, #24
 800ffd6:	f7fe fb2d 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2208      	movs	r2, #8
 800ffde:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800ffe2:	e061      	b.n	80100a8 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	f003 0320 	and.w	r3, r3, #32
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d05d      	beq.n	80100ac <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2201      	movs	r2, #1
 8010008:	755a      	strb	r2, [r3, #21]
                                onInit();
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	3310      	adds	r3, #16
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801001e:	e045      	b.n	80100ac <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010028:	2b00      	cmp	r3, #0
 801002a:	d041      	beq.n	80100b0 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	7d1b      	ldrb	r3, [r3, #20]
 8010030:	3301      	adds	r3, #1
 8010032:	b2da      	uxtb	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6898      	ldr	r0, [r3, #8]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	8999      	ldrh	r1, [r3, #12]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d1a      	ldrb	r2, [r3, #20]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f103 0416 	add.w	r4, r3, #22
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	336b      	adds	r3, #107	; 0x6b
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	4623      	mov	r3, r4
 8010052:	f7fe fb8d 	bl	800e770 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2205      	movs	r2, #5
 801005a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801005e:	e027      	b.n	80100b0 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	f003 0308 	and.w	r3, r3, #8
 8010068:	2b00      	cmp	r3, #0
 801006a:	d023      	beq.n	80100b4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	689a      	ldr	r2, [r3, #8]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	899b      	ldrh	r3, [r3, #12]
 8010074:	4619      	mov	r1, r3
 8010076:	4610      	mov	r0, r2
 8010078:	f7fe f963 	bl	800e342 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010082:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2200      	movs	r2, #0
 801008e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010092:	e00f      	b.n	80100b4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010094:	bf00      	nop
 8010096:	e00e      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010098:	bf00      	nop
 801009a:	e00c      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801009c:	bf00      	nop
 801009e:	e00a      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100a0:	bf00      	nop
 80100a2:	e008      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100a4:	bf00      	nop
 80100a6:	e006      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100a8:	bf00      	nop
 80100aa:	e004      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100ac:	bf00      	nop
 80100ae:	e002      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100b0:	bf00      	nop
 80100b2:	e000      	b.n	80100b6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80100b4:	bf00      	nop
        }
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bdb0      	pop	{r4, r5, r7, pc}
 80100be:	bf00      	nop

080100c0 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 80100c0:	b5b0      	push	{r4, r5, r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af02      	add	r7, sp, #8
 80100c6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f040 8084 	bne.w	80101dc <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d03a      	beq.n	8010156 <_ZN5BTHID3RunEv+0x96>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	7a5b      	ldrb	r3, [r3, #9]
 80100e6:	f083 0301 	eor.w	r3, r3, #1
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d032      	beq.n	8010156 <_ZN5BTHID3RunEv+0x96>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	7d5b      	ldrb	r3, [r3, #21]
 80100f4:	f083 0301 	eor.w	r3, r3, #1
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d02b      	beq.n	8010156 <_ZN5BTHID3RunEv+0x96>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010104:	f083 0301 	eor.w	r3, r3, #1
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d023      	beq.n	8010156 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	2201      	movs	r2, #1
 8010114:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2201      	movs	r2, #1
 801011a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	8b5a      	ldrh	r2, [r3, #26]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6898      	ldr	r0, [r3, #8]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	8999      	ldrh	r1, [r3, #12]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	7d1a      	ldrb	r2, [r3, #20]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	336b      	adds	r3, #107	; 0x6b
 8010144:	2411      	movs	r4, #17
 8010146:	9400      	str	r4, [sp, #0]
 8010148:	f7fe f9e9 	bl	800e51e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2202      	movs	r2, #2
 8010150:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8010154:	e041      	b.n	80101da <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	f003 0301 	and.w	r3, r3, #1
 801015e:	2b00      	cmp	r3, #0
 8010160:	d03b      	beq.n	80101da <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6898      	ldr	r0, [r3, #8]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	8999      	ldrh	r1, [r3, #12]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	7d1a      	ldrb	r2, [r3, #20]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3316      	adds	r3, #22
 8010178:	2501      	movs	r5, #1
 801017a:	9501      	str	r5, [sp, #4]
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	4623      	mov	r3, r4
 8010180:	f7fe fa0b 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010184:	2001      	movs	r0, #1
 8010186:	f7f1 fd59 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6898      	ldr	r0, [r3, #8]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8999      	ldrh	r1, [r3, #12]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	7d1a      	ldrb	r2, [r3, #20]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3316      	adds	r3, #22
 80101a0:	2500      	movs	r5, #0
 80101a2:	9501      	str	r5, [sp, #4]
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	4623      	mov	r3, r4
 80101a8:	f7fe f9f7 	bl	800e59a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
 80101b0:	3301      	adds	r3, #1
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80101b8:	2001      	movs	r0, #1
 80101ba:	f7f1 fd3f 	bl	8001c3c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6898      	ldr	r0, [r3, #8]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8999      	ldrh	r1, [r3, #12]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1a      	ldrb	r2, [r3, #20]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3316      	adds	r3, #22
 80101ce:	f7fe fa31 	bl	800e634 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2204      	movs	r2, #4
 80101d6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 80101da:	bf00      	nop
        }
}
 80101dc:	bf00      	nop
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bdb0      	pop	{r4, r5, r7, pc}

080101e4 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80101e4:	b590      	push	{r4, r7, lr}
 80101e6:	b087      	sub	sp, #28
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	4613      	mov	r3, r2
 80101f0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6898      	ldr	r0, [r3, #8]
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	8999      	ldrh	r1, [r3, #12]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7edb      	ldrb	r3, [r3, #27]
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	7f12      	ldrb	r2, [r2, #28]
 8010202:	79fc      	ldrb	r4, [r7, #7]
 8010204:	9201      	str	r2, [sp, #4]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4623      	mov	r3, r4
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	f7fe f8f8 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}

08010218 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	70fb      	strb	r3, [r7, #3]
 8010224:	4613      	mov	r3, r2
 8010226:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2207      	movs	r2, #7
 801022c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	78fa      	ldrb	r2, [r7, #3]
 8010234:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	78ba      	ldrb	r2, [r7, #2]
 801023c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2205      	movs	r2, #5
 801024c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2202      	movs	r2, #2
 801025c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2235      	movs	r2, #53	; 0x35
 8010264:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2200      	movs	r2, #0
 8010274:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3328      	adds	r3, #40	; 0x28
 801027c:	220a      	movs	r2, #10
 801027e:	4619      	mov	r1, r3
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff ffaf 	bl	80101e4 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801028e:	b590      	push	{r4, r7, lr}
 8010290:	b087      	sub	sp, #28
 8010292:	af02      	add	r7, sp, #8
 8010294:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801029c:	2b00      	cmp	r3, #0
 801029e:	d008      	beq.n	80102b2 <_ZN5BTHID11setProtocolEv+0x24>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d003      	beq.n	80102b2 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80102b8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6898      	ldr	r0, [r3, #8]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	8999      	ldrh	r1, [r3, #12]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	7d9b      	ldrb	r3, [r3, #22]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	7dd2      	ldrb	r2, [r2, #23]
 80102d0:	f107 040f 	add.w	r4, r7, #15
 80102d4:	9201      	str	r2, [sp, #4]
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	2301      	movs	r3, #1
 80102da:	4622      	mov	r2, r4
 80102dc:	f7fe f890 	bl	800e400 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80102e0:	bf00      	nop
 80102e2:	3714      	adds	r7, #20
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd90      	pop	{r4, r7, pc}

080102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80102f4:	78fb      	ldrb	r3, [r7, #3]
 80102f6:	2b03      	cmp	r3, #3
 80102f8:	d86e      	bhi.n	80103d8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80102fa:	a201      	add	r2, pc, #4	; (adr r2, 8010300 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80102fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010300:	08010311 	.word	0x08010311
 8010304:	08010343 	.word	0x08010343
 8010308:	08010375 	.word	0x08010375
 801030c:	080103a7 	.word	0x080103a7
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	7a1b      	ldrb	r3, [r3, #8]
 8010314:	f003 030f 	and.w	r3, r3, #15
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b07      	cmp	r3, #7
 801031c:	d00d      	beq.n	801033a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	7a1b      	ldrb	r3, [r3, #8]
 8010322:	f003 030f 	and.w	r3, r3, #15
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d006      	beq.n	801033a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7a1b      	ldrb	r3, [r3, #8]
 8010330:	f003 030f 	and.w	r3, r3, #15
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b01      	cmp	r3, #1
 8010338:	d101      	bne.n	801033e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801033a:	2301      	movs	r3, #1
 801033c:	e04d      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801033e:	2300      	movs	r3, #0
 8010340:	e04b      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	7a1b      	ldrb	r3, [r3, #8]
 8010346:	f003 030f 	and.w	r3, r3, #15
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b01      	cmp	r3, #1
 801034e:	d00d      	beq.n	801036c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7a1b      	ldrb	r3, [r3, #8]
 8010354:	f003 030f 	and.w	r3, r3, #15
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b02      	cmp	r3, #2
 801035c:	d006      	beq.n	801036c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	7a1b      	ldrb	r3, [r3, #8]
 8010362:	f003 030f 	and.w	r3, r3, #15
 8010366:	b2db      	uxtb	r3, r3
 8010368:	2b03      	cmp	r3, #3
 801036a:	d101      	bne.n	8010370 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801036c:	2301      	movs	r3, #1
 801036e:	e034      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010370:	2300      	movs	r3, #0
 8010372:	e032      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	7a1b      	ldrb	r3, [r3, #8]
 8010378:	f003 030f 	and.w	r3, r3, #15
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b03      	cmp	r3, #3
 8010380:	d00d      	beq.n	801039e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	7a1b      	ldrb	r3, [r3, #8]
 8010386:	f003 030f 	and.w	r3, r3, #15
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b04      	cmp	r3, #4
 801038e:	d006      	beq.n	801039e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	7a1b      	ldrb	r3, [r3, #8]
 8010394:	f003 030f 	and.w	r3, r3, #15
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b05      	cmp	r3, #5
 801039c:	d101      	bne.n	80103a2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801039e:	2301      	movs	r3, #1
 80103a0:	e01b      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80103a2:	2300      	movs	r3, #0
 80103a4:	e019      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	7a1b      	ldrb	r3, [r3, #8]
 80103aa:	f003 030f 	and.w	r3, r3, #15
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	2b05      	cmp	r3, #5
 80103b2:	d00d      	beq.n	80103d0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	7a1b      	ldrb	r3, [r3, #8]
 80103b8:	f003 030f 	and.w	r3, r3, #15
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b06      	cmp	r3, #6
 80103c0:	d006      	beq.n	80103d0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	7a1b      	ldrb	r3, [r3, #8]
 80103c6:	f003 030f 	and.w	r3, r3, #15
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b07      	cmp	r3, #7
 80103ce:	d101      	bne.n	80103d4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80103d0:	2301      	movs	r3, #1
 80103d2:	e002      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80103d4:	2300      	movs	r3, #0
 80103d6:	e000      	b.n	80103da <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80103d8:	2300      	movs	r3, #0
        }
}
 80103da:	4618      	mov	r0, r3
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop

080103e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	2b03      	cmp	r3, #3
 80103f8:	d806      	bhi.n	8010408 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80103fa:	78fb      	ldrb	r3, [r7, #3]
 80103fc:	4619      	mov	r1, r3
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f7ff ff72 	bl	80102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010404:	4603      	mov	r3, r0
 8010406:	e011      	b.n	801042c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010410:	4619      	mov	r1, r3
 8010412:	78fb      	ldrb	r3, [r7, #3]
 8010414:	4a07      	ldr	r2, [pc, #28]	; (8010434 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8010416:	4413      	add	r3, r2
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	fa21 f303 	lsr.w	r3, r1, r3
 801041e:	f003 0301 	and.w	r3, r3, #1
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf14      	ite	ne
 8010426:	2301      	movne	r3, #1
 8010428:	2300      	moveq	r3, #0
 801042a:	b2db      	uxtb	r3, r3
}
 801042c:	4618      	mov	r0, r3
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	08012640 	.word	0x08012640

08010438 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	460b      	mov	r3, r1
 8010442:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8010444:	78fb      	ldrb	r3, [r7, #3]
 8010446:	4a1b      	ldr	r2, [pc, #108]	; (80104b4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8010448:	4413      	add	r3, r2
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	461a      	mov	r2, r3
 801044e:	2301      	movs	r3, #1
 8010450:	4093      	lsls	r3, r2
 8010452:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801045a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801045e:	021b      	lsls	r3, r3, #8
 8010460:	4313      	orrs	r3, r2
 8010462:	461a      	mov	r2, r3
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	4013      	ands	r3, r2
 8010468:	2b00      	cmp	r3, #0
 801046a:	bf14      	ite	ne
 801046c:	2301      	movne	r3, #1
 801046e:	2300      	moveq	r3, #0
 8010470:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801047c:	021b      	lsls	r3, r3, #8
 801047e:	4313      	orrs	r3, r2
 8010480:	461a      	mov	r2, r3
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	43db      	mvns	r3, r3
 8010486:	4013      	ands	r3, r2
 8010488:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	b2d1      	uxtb	r1, r2
 8010490:	2000      	movs	r0, #0
 8010492:	4301      	orrs	r1, r0
 8010494:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010498:	0a12      	lsrs	r2, r2, #8
 801049a:	b292      	uxth	r2, r2
 801049c:	2100      	movs	r1, #0
 801049e:	430a      	orrs	r2, r1
 80104a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 80104a4:	7afb      	ldrb	r3, [r7, #11]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	08012640 	.word	0x08012640

080104b8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80104c4:	78fb      	ldrb	r3, [r7, #3]
 80104c6:	2b08      	cmp	r3, #8
 80104c8:	d102      	bne.n	80104d0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	7adb      	ldrb	r3, [r3, #11]
 80104ce:	e006      	b.n	80104de <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80104d0:	78fb      	ldrb	r3, [r7, #3]
 80104d2:	2b09      	cmp	r3, #9
 80104d4:	d102      	bne.n	80104dc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	7b1b      	ldrb	r3, [r3, #12]
 80104da:	e000      	b.n	80104de <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80104ea:	b480      	push	{r7}
 80104ec:	b083      	sub	sp, #12
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	460b      	mov	r3, r1
 80104f4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80104f6:	78fb      	ldrb	r3, [r7, #3]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	4413      	add	r3, r2
 80104fc:	791b      	ldrb	r3, [r3, #4]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 801050a:	b580      	push	{r7, lr}
 801050c:	b086      	sub	sp, #24
 801050e:	af00      	add	r7, sp, #0
 8010510:	60f8      	str	r0, [r7, #12]
 8010512:	460b      	mov	r3, r1
 8010514:	607a      	str	r2, [r7, #4]
 8010516:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8010518:	7afb      	ldrb	r3, [r7, #11]
 801051a:	2b01      	cmp	r3, #1
 801051c:	f240 80a6 	bls.w	801066c <_ZN9PS4Parser5ParseEhPh+0x162>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 80a2 	beq.w	801066c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d10e      	bne.n	801054e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	1d18      	adds	r0, r3, #4
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	1c59      	adds	r1, r3, #1
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	3b01      	subs	r3, #1
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b3c      	cmp	r3, #60	; 0x3c
 8010540:	bf28      	it	cs
 8010542:	233c      	movcs	r3, #60	; 0x3c
 8010544:	b2db      	uxtb	r3, r3
 8010546:	461a      	mov	r2, r3
 8010548:	f001 fe56 	bl	80121f8 <memcpy>
 801054c:	e016      	b.n	801057c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	2b11      	cmp	r3, #17
 8010554:	f040 8098 	bne.w	8010688 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8010558:	7afb      	ldrb	r3, [r7, #11]
 801055a:	2b03      	cmp	r3, #3
 801055c:	f240 8096 	bls.w	801068c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	1d18      	adds	r0, r3, #4
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	1cd9      	adds	r1, r3, #3
 8010568:	7afb      	ldrb	r3, [r7, #11]
 801056a:	3b03      	subs	r3, #3
 801056c:	b2db      	uxtb	r3, r3
 801056e:	2b3c      	cmp	r3, #60	; 0x3c
 8010570:	bf28      	it	cs
 8010572:	233c      	movcs	r3, #60	; 0x3c
 8010574:	b2db      	uxtb	r3, r3
 8010576:	461a      	mov	r2, r3
 8010578:	f001 fe3e 	bl	80121f8 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010588:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801058c:	429a      	cmp	r2, r3
 801058e:	d06d      	beq.n	801066c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010598:	461a      	mov	r2, r3
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801059e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80105a2:	43db      	mvns	r3, r3
 80105a4:	4013      	ands	r3, r2
 80105a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	b2d1      	uxtb	r1, r2
 80105ae:	2000      	movs	r0, #0
 80105b0:	4301      	orrs	r1, r0
 80105b2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80105b6:	0a12      	lsrs	r2, r2, #8
 80105b8:	b292      	uxth	r2, r2
 80105ba:	2100      	movs	r1, #0
 80105bc:	430a      	orrs	r2, r1
 80105be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80105ce:	f361 0317 	bfi	r3, r1, #0, #24
 80105d2:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80105d8:	2100      	movs	r1, #0
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7ff fe84 	bl	80102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 80105e6:	7dfb      	ldrb	r3, [r7, #23]
 80105e8:	f043 0301 	orr.w	r3, r3, #1
 80105ec:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80105ee:	2101      	movs	r1, #1
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7ff fe79 	bl	80102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d003      	beq.n	8010604 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 80105fc:	7dfb      	ldrb	r3, [r7, #23]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8010604:	2102      	movs	r1, #2
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f7ff fe6e 	bl	80102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	f043 0304 	orr.w	r3, r3, #4
 8010618:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 801061a:	2103      	movs	r1, #3
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f7ff fe63 	bl	80102e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d003      	beq.n	8010630 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8010628:	7dfb      	ldrb	r3, [r7, #23]
 801062a:	f043 0308 	orr.w	r3, r3, #8
 801062e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010636:	7dfa      	ldrb	r2, [r7, #23]
 8010638:	429a      	cmp	r2, r3
 801063a:	d017      	beq.n	801066c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010642:	b25b      	sxtb	r3, r3
 8010644:	43db      	mvns	r3, r3
 8010646:	b25a      	sxtb	r2, r3
 8010648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801064c:	4013      	ands	r3, r2
 801064e:	b25b      	sxtb	r3, r3
 8010650:	f003 030f 	and.w	r3, r3, #15
 8010654:	b2d9      	uxtb	r1, r3
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 801065c:	f361 0303 	bfi	r3, r1, #0, #4
 8010660:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	7dfa      	ldrb	r2, [r7, #23]
 8010668:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00b      	beq.n	801068e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	3246      	adds	r2, #70	; 0x46
 8010680:	4611      	mov	r1, r2
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	4798      	blx	r3
 8010686:	e002      	b.n	801068e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010688:	bf00      	nop
 801068a:	e000      	b.n	801068e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801068c:	bf00      	nop
}
 801068e:	3718      	adds	r7, #24
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 801069c:	2300      	movs	r3, #0
 801069e:	73fb      	strb	r3, [r7, #15]
 80106a0:	7bfb      	ldrb	r3, [r7, #15]
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d808      	bhi.n	80106b8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	4413      	add	r3, r2
 80106ac:	227f      	movs	r2, #127	; 0x7f
 80106ae:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
 80106b2:	3301      	adds	r3, #1
 80106b4:	73fb      	strb	r3, [r7, #15]
 80106b6:	e7f3      	b.n	80106a0 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	6893      	ldr	r3, [r2, #8]
 80106bc:	f36f 0317 	bfc	r3, #0, #24
 80106c0:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106c6:	f36f 0317 	bfc	r3, #0, #24
 80106ca:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80106cc:	2300      	movs	r3, #0
 80106ce:	73fb      	strb	r3, [r7, #15]
 80106d0:	7bfb      	ldrb	r3, [r7, #15]
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d808      	bhi.n	80106e8 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	4413      	add	r3, r2
 80106dc:	2200      	movs	r2, #0
 80106de:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
 80106e2:	3301      	adds	r3, #1
 80106e4:	73fb      	strb	r3, [r7, #15]
 80106e6:	e7f3      	b.n	80106d0 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80106e8:	2300      	movs	r3, #0
 80106ea:	73fb      	strb	r3, [r7, #15]
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d81b      	bhi.n	801072a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80106f2:	2300      	movs	r3, #0
 80106f4:	73bb      	strb	r3, [r7, #14]
 80106f6:	7bbb      	ldrb	r3, [r7, #14]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d812      	bhi.n	8010722 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 80106fc:	7bfa      	ldrb	r2, [r7, #15]
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
 8010700:	6879      	ldr	r1, [r7, #4]
 8010702:	0098      	lsls	r0, r3, #2
 8010704:	4613      	mov	r3, r2
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	4413      	add	r3, r2
 801070a:	4403      	add	r3, r0
 801070c:	440b      	add	r3, r1
 801070e:	f103 0220 	add.w	r2, r3, #32
 8010712:	7993      	ldrb	r3, [r2, #6]
 8010714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010718:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 801071a:	7bbb      	ldrb	r3, [r7, #14]
 801071c:	3301      	adds	r3, #1
 801071e:	73bb      	strb	r3, [r7, #14]
 8010720:	e7e9      	b.n	80106f6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	3301      	adds	r3, #1
 8010726:	73fb      	strb	r3, [r7, #15]
 8010728:	e7e0      	b.n	80106ec <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	7a13      	ldrb	r3, [r2, #8]
 801072e:	2108      	movs	r1, #8
 8010730:	f361 0303 	bfi	r3, r1, #0, #4
 8010734:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801073c:	2108      	movs	r1, #8
 801073e:	f361 0303 	bfi	r3, r1, #0, #4
 8010742:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 801074c:	f36f 0303 	bfc	r3, #0, #4
 8010750:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 80107ac:	bf00      	nop
 80107ae:	3714      	adds	r7, #20
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80107b8:	b580      	push	{r7, lr}
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	2180      	movs	r1, #128	; 0x80
 80107be:	4803      	ldr	r0, [pc, #12]	; (80107cc <_ZN2P95IsSetEv+0x14>)
 80107c0:	f7f1 fcd6 	bl	8002170 <HAL_GPIO_ReadPin>
 80107c4:	4603      	mov	r3, r0
 80107c6:	4618      	mov	r0, r3
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	40020800 	.word	0x40020800

080107d0 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f001 f9bb 	bl	8011b54 <_ZN8MAX3421eI3P102P9EC1Ev>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f001 f9d3 	bl	8011b8c <_ZN15AddressPoolImplILh16EEC1Ev>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2200      	movs	r2, #0
 80107ea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 80107ee:	4b05      	ldr	r3, [pc, #20]	; (8010804 <_ZN3USBC1Ev+0x34>)
 80107f0:	2211      	movs	r2, #17
 80107f2:	701a      	strb	r2, [r3, #0]
        init();
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f807 	bl	8010808 <_ZN3USB4initEv>
}
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	20004f89 	.word	0x20004f89

08010808 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010818:	bf00      	nop
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010824:	b580      	push	{r7, lr}
 8010826:	b086      	sub	sp, #24
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	70fb      	strb	r3, [r7, #3]
 8010830:	4613      	mov	r3, r2
 8010832:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	78fa      	ldrb	r2, [r7, #3]
 8010838:	4611      	mov	r1, r2
 801083a:	4618      	mov	r0, r3
 801083c:	f001 f9e0 	bl	8011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010840:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d003      	beq.n	8010850 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d101      	bne.n	8010854 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010850:	2300      	movs	r3, #0
 8010852:	e018      	b.n	8010886 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 801085a:	2300      	movs	r3, #0
 801085c:	74fb      	strb	r3, [r7, #19]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	795b      	ldrb	r3, [r3, #5]
 8010862:	7cfa      	ldrb	r2, [r7, #19]
 8010864:	429a      	cmp	r2, r3
 8010866:	d20d      	bcs.n	8010884 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	78ba      	ldrb	r2, [r7, #2]
 801086e:	429a      	cmp	r2, r3
 8010870:	d101      	bne.n	8010876 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	e007      	b.n	8010886 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	3303      	adds	r3, #3
 801087a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 801087c:	7cfb      	ldrb	r3, [r7, #19]
 801087e:	3301      	adds	r3, #1
 8010880:	74fb      	strb	r3, [r7, #19]
 8010882:	e7ec      	b.n	801085e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3718      	adds	r7, #24
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 801088e:	b580      	push	{r7, lr}
 8010890:	b086      	sub	sp, #24
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	607b      	str	r3, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	72fb      	strb	r3, [r7, #11]
 801089c:	4613      	mov	r3, r2
 801089e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d101      	bne.n	80108aa <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 80108a6:	23d8      	movs	r3, #216	; 0xd8
 80108a8:	e015      	b.n	80108d6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	7afa      	ldrb	r2, [r7, #11]
 80108ae:	4611      	mov	r1, r2
 80108b0:	4618      	mov	r0, r3
 80108b2:	f001 f9a5 	bl	8011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80108b6:	6178      	str	r0, [r7, #20]

        if(!p)
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80108be:	23d6      	movs	r3, #214	; 0xd6
 80108c0:	e009      	b.n	80108d6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	7afa      	ldrb	r2, [r7, #11]
 80108c6:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	7aba      	ldrb	r2, [r7, #10]
 80108d2:	715a      	strb	r2, [r3, #5]

        return 0;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3718      	adds	r7, #24
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 80108de:	b580      	push	{r7, lr}
 80108e0:	b086      	sub	sp, #24
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	60f8      	str	r0, [r7, #12]
 80108e6:	607b      	str	r3, [r7, #4]
 80108e8:	460b      	mov	r3, r1
 80108ea:	72fb      	strb	r3, [r7, #11]
 80108ec:	4613      	mov	r3, r2
 80108ee:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	7afa      	ldrb	r2, [r7, #11]
 80108f4:	4611      	mov	r1, r2
 80108f6:	4618      	mov	r0, r3
 80108f8:	f001 f982 	bl	8011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80108fc:	6178      	str	r0, [r7, #20]

        if(!p)
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d101      	bne.n	8010908 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010904:	23d6      	movs	r3, #214	; 0xd6
 8010906:	e04e      	b.n	80109a6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d101      	bne.n	8010914 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010910:	23d7      	movs	r3, #215	; 0xd7
 8010912:	e048      	b.n	80109a6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010914:	7aba      	ldrb	r2, [r7, #10]
 8010916:	7afb      	ldrb	r3, [r7, #11]
 8010918:	4619      	mov	r1, r3
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f7ff ff82 	bl	8010824 <_ZN3USB14getEpInfoEntryEhh>
 8010920:	4602      	mov	r2, r0
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d101      	bne.n	8010932 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 801092e:	23db      	movs	r3, #219	; 0xdb
 8010930:	e039      	b.n	80109a6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	789b      	ldrb	r3, [r3, #2]
 8010938:	f3c3 0385 	ubfx	r3, r3, #2, #6
 801093c:	b2db      	uxtb	r3, r3
 801093e:	2b0f      	cmp	r3, #15
 8010940:	bf28      	it	cs
 8010942:	230f      	movcs	r3, #15
 8010944:	b2db      	uxtb	r3, r3
 8010946:	461a      	mov	r2, r3
 8010948:	2301      	movs	r3, #1
 801094a:	4093      	lsls	r3, r2
 801094c:	b29a      	uxth	r2, r3
 801094e:	6a3b      	ldr	r3, [r7, #32]
 8010950:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010952:	6a3b      	ldr	r3, [r7, #32]
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	3b01      	subs	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 801095e:	7afb      	ldrb	r3, [r7, #11]
 8010960:	461a      	mov	r2, r3
 8010962:	21e0      	movs	r1, #224	; 0xe0
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7f0 fe39 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 801096a:	21d8      	movs	r1, #216	; 0xd8
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f7f0 fe87 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010972:	4603      	mov	r3, r0
 8010974:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	799b      	ldrb	r3, [r3, #6]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d009      	beq.n	8010992 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010984:	7cfb      	ldrb	r3, [r7, #19]
 8010986:	4313      	orrs	r3, r2
 8010988:	b2db      	uxtb	r3, r3
 801098a:	f043 0302 	orr.w	r3, r3, #2
 801098e:	b2db      	uxtb	r3, r3
 8010990:	e003      	b.n	801099a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010992:	7cfb      	ldrb	r3, [r7, #19]
 8010994:	f023 0306 	bic.w	r3, r3, #6
 8010998:	b2db      	uxtb	r3, r3
 801099a:	461a      	mov	r2, r3
 801099c:	21d8      	movs	r1, #216	; 0xd8
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7f0 fe1c 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 80109ae:	b590      	push	{r4, r7, lr}
 80109b0:	b08b      	sub	sp, #44	; 0x2c
 80109b2:	af02      	add	r7, sp, #8
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	4608      	mov	r0, r1
 80109b8:	4611      	mov	r1, r2
 80109ba:	461a      	mov	r2, r3
 80109bc:	4603      	mov	r3, r0
 80109be:	70fb      	strb	r3, [r7, #3]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70bb      	strb	r3, [r7, #2]
 80109c4:	4613      	mov	r3, r2
 80109c6:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 80109c8:	2300      	movs	r3, #0
 80109ca:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 80109cc:	2300      	movs	r3, #0
 80109ce:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80109d4:	f107 000c 	add.w	r0, r7, #12
 80109d8:	78ba      	ldrb	r2, [r7, #2]
 80109da:	78f9      	ldrb	r1, [r7, #3]
 80109dc:	f107 030a 	add.w	r3, r7, #10
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	4603      	mov	r3, r0
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7ff ff7a 	bl	80108de <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80109ea:	4603      	mov	r3, r0
 80109ec:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 80109ee:	7ffb      	ldrb	r3, [r7, #31]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 80109f4:	7ffb      	ldrb	r3, [r7, #31]
 80109f6:	e0ae      	b.n	8010b56 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 80109f8:	787b      	ldrb	r3, [r7, #1]
 80109fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	bfcc      	ite	gt
 8010a02:	2301      	movgt	r3, #1
 8010a04:	2300      	movle	r3, #0
 8010a06:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010a08:	787b      	ldrb	r3, [r7, #1]
 8010a0a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010a10:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010a12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010a16:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010a18:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010a1c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a20:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010a22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a26:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010a28:	f107 0310 	add.w	r3, r7, #16
 8010a2c:	2208      	movs	r2, #8
 8010a2e:	2120      	movs	r1, #32
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f001 f90b 	bl	8011c4c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010a36:	897b      	ldrh	r3, [r7, #10]
 8010a38:	78ba      	ldrb	r2, [r7, #2]
 8010a3a:	2110      	movs	r1, #16
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 faf2 	bl	8011026 <_ZN3USB11dispatchPktEhht>
 8010a42:	4603      	mov	r3, r0
 8010a44:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010a46:	7ffb      	ldrb	r3, [r7, #31]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010a4c:	7ffb      	ldrb	r3, [r7, #31]
 8010a4e:	e082      	b.n	8010b56 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d072      	beq.n	8010b3c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010a56:	7efb      	ldrb	r3, [r7, #27]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d057      	beq.n	8010b0c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a60:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	7893      	ldrb	r3, [r2, #2]
 8010a66:	f043 0302 	orr.w	r3, r3, #2
 8010a6a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010a6c:	8bbb      	ldrh	r3, [r7, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d05f      	beq.n	8010b32 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010a72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010a76:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010a78:	68f9      	ldr	r1, [r7, #12]
 8010a7a:	897a      	ldrh	r2, [r7, #10]
 8010a7c:	f107 0008 	add.w	r0, r7, #8
 8010a80:	2300      	movs	r3, #0
 8010a82:	9301      	str	r3, [sp, #4]
 8010a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	4603      	mov	r3, r0
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f8a6 	bl	8010bdc <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010a90:	4603      	mov	r3, r0
 8010a92:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010a94:	7ffb      	ldrb	r3, [r7, #31]
 8010a96:	2b06      	cmp	r3, #6
 8010a98:	d114      	bne.n	8010ac4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010a9a:	21f8      	movs	r1, #248	; 0xf8
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f7f0 fdef 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f003 0320 	and.w	r3, r3, #32
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bf0c      	ite	eq
 8010aac:	2301      	moveq	r3, #1
 8010aae:	2300      	movne	r3, #0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	f003 0301 	and.w	r3, r3, #1
 8010ab8:	b2d9      	uxtb	r1, r3
 8010aba:	7893      	ldrb	r3, [r2, #2]
 8010abc:	f361 0341 	bfi	r3, r1, #1, #1
 8010ac0:	7093      	strb	r3, [r2, #2]
 8010ac2:	e7d3      	b.n	8010a6c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010ac4:	7ffb      	ldrb	r3, [r7, #31]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010aca:	7ffb      	ldrb	r3, [r7, #31]
 8010acc:	e043      	b.n	8010b56 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010ace:	7ffb      	ldrb	r3, [r7, #31]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d111      	bne.n	8010af8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00e      	beq.n	8010af8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681c      	ldr	r4, [r3, #0]
 8010ae0:	8939      	ldrh	r1, [r7, #8]
 8010ae2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ae6:	8bbb      	ldrh	r3, [r7, #28]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	833b      	strh	r3, [r7, #24]
 8010aee:	f107 0318 	add.w	r3, r7, #24
 8010af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010af4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010af6:	47a0      	blx	r4

                                left -= read;
 8010af8:	893b      	ldrh	r3, [r7, #8]
 8010afa:	8bba      	ldrh	r2, [r7, #28]
 8010afc:	1ad3      	subs	r3, r2, r3
 8010afe:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010b00:	893b      	ldrh	r3, [r7, #8]
 8010b02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d812      	bhi.n	8010b30 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010b0a:	e7af      	b.n	8010a6c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	7893      	ldrb	r3, [r2, #2]
 8010b10:	f043 0301 	orr.w	r3, r3, #1
 8010b14:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010b16:	68f9      	ldr	r1, [r7, #12]
 8010b18:	897a      	ldrh	r2, [r7, #10]
 8010b1a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	4603      	mov	r3, r0
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f000 f953 	bl	8010dd0 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	77fb      	strb	r3, [r7, #31]
 8010b2e:	e000      	b.n	8010b32 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010b30:	bf00      	nop
                }
                if(rcode) //return error
 8010b32:	7ffb      	ldrb	r3, [r7, #31]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010b38:	7ffb      	ldrb	r3, [r7, #31]
 8010b3a:	e00c      	b.n	8010b56 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010b3c:	7efb      	ldrb	r3, [r7, #27]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d001      	beq.n	8010b46 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010b42:	21a0      	movs	r1, #160	; 0xa0
 8010b44:	e000      	b.n	8010b48 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010b46:	2180      	movs	r1, #128	; 0x80
 8010b48:	897b      	ldrh	r3, [r7, #10]
 8010b4a:	78ba      	ldrb	r2, [r7, #2]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 fa6a 	bl	8011026 <_ZN3USB11dispatchPktEhht>
 8010b52:	4603      	mov	r3, r0
 8010b54:	bf00      	nop
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3724      	adds	r7, #36	; 0x24
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd90      	pop	{r4, r7, pc}

08010b5e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b08a      	sub	sp, #40	; 0x28
 8010b62:	af02      	add	r7, sp, #8
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	607b      	str	r3, [r7, #4]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	72fb      	strb	r3, [r7, #11]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010b78:	f107 0018 	add.w	r0, r7, #24
 8010b7c:	7aba      	ldrb	r2, [r7, #10]
 8010b7e:	7af9      	ldrb	r1, [r7, #11]
 8010b80:	f107 0316 	add.w	r3, r7, #22
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	4603      	mov	r3, r0
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f7ff fea8 	bl	80108de <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010b92:	7ffb      	ldrb	r3, [r7, #31]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d010      	beq.n	8010bba <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010b98:	7ffb      	ldrb	r3, [r7, #31]
 8010b9a:	2181      	movs	r1, #129	; 0x81
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f001 f883 	bl	8011ca8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010ba2:	7afb      	ldrb	r3, [r7, #11]
 8010ba4:	2181      	movs	r1, #129	; 0x81
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f001 f87e 	bl	8011ca8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010bac:	7abb      	ldrb	r3, [r7, #10]
 8010bae:	2181      	movs	r1, #129	; 0x81
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f001 f879 	bl	8011ca8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010bb6:	7ffb      	ldrb	r3, [r7, #31]
 8010bb8:	e00c      	b.n	8010bd4 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010bba:	69b9      	ldr	r1, [r7, #24]
 8010bbc:	8afa      	ldrh	r2, [r7, #22]
 8010bbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010bc2:	9301      	str	r3, [sp, #4]
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	9300      	str	r3, [sp, #0]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f000 f806 	bl	8010bdc <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	bf00      	nop
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	603b      	str	r3, [r7, #0]
 8010be8:	4613      	mov	r3, r2
 8010bea:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010bec:	2300      	movs	r3, #0
 8010bee:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	785b      	ldrb	r3, [r3, #1]
 8010bfa:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	789b      	ldrb	r3, [r3, #2]
 8010c06:	f003 0302 	and.w	r3, r3, #2
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010c10:	2320      	movs	r3, #32
 8010c12:	e000      	b.n	8010c16 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010c14:	2310      	movs	r3, #16
 8010c16:	461a      	mov	r2, r3
 8010c18:	21e8      	movs	r1, #232	; 0xe8
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f7f0 fcde 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	781a      	ldrb	r2, [r3, #0]
 8010c24:	88fb      	ldrh	r3, [r7, #6]
 8010c26:	2100      	movs	r1, #0
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f000 f9fc 	bl	8011026 <_ZN3USB11dispatchPktEhht>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	2b06      	cmp	r3, #6
 8010c36:	d123      	bne.n	8010c80 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010c38:	21f8      	movs	r1, #248	; 0xf8
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7f0 fd20 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c40:	4603      	mov	r3, r0
 8010c42:	f003 0310 	and.w	r3, r3, #16
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	bf0c      	ite	eq
 8010c4a:	2301      	moveq	r3, #1
 8010c4c:	2300      	movne	r3, #0
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	f003 0301 	and.w	r3, r3, #1
 8010c54:	b2d9      	uxtb	r1, r3
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	7893      	ldrb	r3, [r2, #2]
 8010c5a:	f361 0341 	bfi	r3, r1, #1, #1
 8010c5e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	789b      	ldrb	r3, [r3, #2]
 8010c64:	f003 0302 	and.w	r3, r3, #2
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010c6e:	2320      	movs	r3, #32
 8010c70:	e000      	b.n	8010c74 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010c72:	2310      	movs	r3, #16
 8010c74:	461a      	mov	r2, r3
 8010c76:	21e8      	movs	r1, #232	; 0xe8
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f7f0 fcaf 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010c7e:	e06e      	b.n	8010d5e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010c80:	7dfb      	ldrb	r3, [r7, #23]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d16c      	bne.n	8010d60 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010c86:	21c8      	movs	r1, #200	; 0xc8
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7f0 fcf9 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	f003 0304 	and.w	r3, r3, #4
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	bf0c      	ite	eq
 8010c98:	2301      	moveq	r3, #1
 8010c9a:	2300      	movne	r3, #0
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d002      	beq.n	8010ca8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010ca2:	23f0      	movs	r3, #240	; 0xf0
 8010ca4:	75fb      	strb	r3, [r7, #23]
                        break;
 8010ca6:	e05c      	b.n	8010d62 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010ca8:	2130      	movs	r1, #48	; 0x30
 8010caa:	68f8      	ldr	r0, [r7, #12]
 8010cac:	f7f0 fce8 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010cb4:	7dba      	ldrb	r2, [r7, #22]
 8010cb6:	8a7b      	ldrh	r3, [r7, #18]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	dd01      	ble.n	8010cc0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010cbc:	8a7b      	ldrh	r3, [r7, #18]
 8010cbe:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	8a7a      	ldrh	r2, [r7, #18]
 8010cca:	1ad3      	subs	r3, r2, r3
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	da01      	bge.n	8010cdc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010cdc:	7dba      	ldrb	r2, [r7, #22]
 8010cde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	bfa8      	it	ge
 8010ce6:	4613      	movge	r3, r2
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	2108      	movs	r1, #8
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f000 ffe6 	bl	8011cc0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8010cf4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8010cf6:	2204      	movs	r2, #4
 8010cf8:	21c8      	movs	r1, #200	; 0xc8
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f7f0 fc6e 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	881a      	ldrh	r2, [r3, #0]
 8010d04:	7dbb      	ldrb	r3, [r7, #22]
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	4413      	add	r3, r2
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8010d10:	7dba      	ldrb	r2, [r7, #22]
 8010d12:	7c7b      	ldrb	r3, [r7, #17]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d304      	bcc.n	8010d22 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	8a7a      	ldrh	r2, [r7, #18]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d813      	bhi.n	8010d4a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8010d22:	21f8      	movs	r1, #248	; 0xf8
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7f0 fcab 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f003 0310 	and.w	r3, r3, #16
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8010d34:	2101      	movs	r1, #1
 8010d36:	e000      	b.n	8010d3a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8010d38:	2100      	movs	r1, #0
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	7893      	ldrb	r3, [r2, #2]
 8010d3e:	f361 0341 	bfi	r3, r1, #1, #1
 8010d42:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]
                        break;
 8010d48:	e00b      	b.n	8010d62 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8010d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f43f af66 	beq.w	8010c20 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8010d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f0 ff6f 	bl	8001c3c <HAL_Delay>
        } //while( 1 )
 8010d5e:	e75f      	b.n	8010c20 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8010d60:	bf00      	nop
        return ( rcode);
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3718      	adds	r7, #24
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	4608      	mov	r0, r1
 8010d76:	4611      	mov	r1, r2
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	70fb      	strb	r3, [r7, #3]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	70bb      	strb	r3, [r7, #2]
 8010d82:	4613      	mov	r3, r2
 8010d84:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010d8e:	f107 0010 	add.w	r0, r7, #16
 8010d92:	78ba      	ldrb	r2, [r7, #2]
 8010d94:	78f9      	ldrb	r1, [r7, #3]
 8010d96:	f107 030e 	add.w	r3, r7, #14
 8010d9a:	9300      	str	r3, [sp, #0]
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff fd9d 	bl	80108de <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010da4:	4603      	mov	r3, r0
 8010da6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d001      	beq.n	8010db2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	e00a      	b.n	8010dc8 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8010db2:	6939      	ldr	r1, [r7, #16]
 8010db4:	89fa      	ldrh	r2, [r7, #14]
 8010db6:	8838      	ldrh	r0, [r7, #0]
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 f806 	bl	8010dd0 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	bf00      	nop
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3718      	adds	r7, #24
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	; 0x28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	4611      	mov	r1, r2
 8010ddc:	461a      	mov	r2, r3
 8010dde:	460b      	mov	r3, r1
 8010de0:	80fb      	strh	r3, [r7, #6]
 8010de2:	4613      	mov	r3, r2
 8010de4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8010de6:	2300      	movs	r3, #0
 8010de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 8010dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dee:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8010df0:	88bb      	ldrh	r3, [r7, #4]
 8010df2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	785b      	ldrb	r3, [r3, #1]
 8010df8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 8010dfa:	7efb      	ldrb	r3, [r7, #27]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8010e00:	7efb      	ldrb	r3, [r7, #27]
 8010e02:	2b40      	cmp	r3, #64	; 0x40
 8010e04:	d901      	bls.n	8010e0a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8010e06:	23da      	movs	r3, #218	; 0xda
 8010e08:	e109      	b.n	801101e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8010e0a:	f7f0 ff0b 	bl	8001c24 <HAL_GetTick>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010e14:	3308      	adds	r3, #8
 8010e16:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	789b      	ldrb	r3, [r3, #2]
 8010e1c:	f003 0301 	and.w	r3, r3, #1
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d001      	beq.n	8010e2a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8010e26:	2380      	movs	r3, #128	; 0x80
 8010e28:	e000      	b.n	8010e2c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 8010e2a:	2340      	movs	r3, #64	; 0x40
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	21e8      	movs	r1, #232	; 0xe8
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f7f0 fbd3 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8010e36:	8bbb      	ldrh	r3, [r7, #28]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 80da 	beq.w	8010ff2 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8010e48:	7efb      	ldrb	r3, [r7, #27]
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	8bba      	ldrh	r2, [r7, #28]
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	bf28      	it	cs
 8010e52:	4613      	movcs	r3, r2
 8010e54:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8010e56:	8a7b      	ldrh	r3, [r7, #18]
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	6a3b      	ldr	r3, [r7, #32]
 8010e5c:	2110      	movs	r1, #16
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f000 fef4 	bl	8011c4c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8010e64:	8a7b      	ldrh	r3, [r7, #18]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	461a      	mov	r2, r3
 8010e6a:	2138      	movs	r1, #56	; 0x38
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	f7f0 fbb5 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	f043 0320 	orr.w	r3, r3, #32
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	21f0      	movs	r1, #240	; 0xf0
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f7f0 fbab 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8010e86:	21c8      	movs	r1, #200	; 0xc8
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f7f0 fbf9 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	b25b      	sxtb	r3, r3
 8010e92:	43db      	mvns	r3, r3
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	09db      	lsrs	r3, r3, #7
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d000      	beq.n	8010ea0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 8010e9e:	e7f2      	b.n	8010e86 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8010ea0:	2280      	movs	r2, #128	; 0x80
 8010ea2:	21c8      	movs	r1, #200	; 0xc8
 8010ea4:	68f8      	ldr	r0, [r7, #12]
 8010ea6:	f7f0 fb99 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 8010eaa:	21f8      	movs	r1, #248	; 0xf8
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7f0 fbe7 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	f003 030f 	and.w	r3, r3, #15
 8010eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8010ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d008      	beq.n	8010ed6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8010ec4:	f7f0 feae 	bl	8001c24 <HAL_GetTick>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	1ad3      	subs	r3, r2, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	da01      	bge.n	8010ed6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f000 8081 	beq.w	8010fe0 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 8010ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ee2:	2b0e      	cmp	r3, #14
 8010ee4:	d012      	beq.n	8010f0c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8010ee6:	2b0e      	cmp	r3, #14
 8010ee8:	f300 8085 	bgt.w	8010ff6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 8010eec:	2b04      	cmp	r3, #4
 8010eee:	d002      	beq.n	8010ef6 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8010ef0:	2b06      	cmp	r3, #6
 8010ef2:	d015      	beq.n	8010f20 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8010ef4:	e07f      	b.n	8010ff6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8010ef6:	8bfb      	ldrh	r3, [r7, #30]
 8010ef8:	3301      	adds	r3, #1
 8010efa:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 8010efc:	88fb      	ldrh	r3, [r7, #6]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d032      	beq.n	8010f68 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8010f02:	8bfa      	ldrh	r2, [r7, #30]
 8010f04:	88fb      	ldrh	r3, [r7, #6]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d12e      	bne.n	8010f68 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 8010f0a:	e075      	b.n	8010ff8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 8010f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f10:	3301      	adds	r3, #1
 8010f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8010f16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f1a:	2b03      	cmp	r3, #3
 8010f1c:	d126      	bne.n	8010f6c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 8010f1e:	e06b      	b.n	8010ff8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010f20:	21f8      	movs	r1, #248	; 0xf8
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f7f0 fbac 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	f003 0320 	and.w	r3, r3, #32
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	bf0c      	ite	eq
 8010f32:	2301      	moveq	r3, #1
 8010f34:	2300      	movne	r3, #0
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	b2d9      	uxtb	r1, r3
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	7893      	ldrb	r3, [r2, #2]
 8010f42:	f361 0300 	bfi	r3, r1, #0, #1
 8010f46:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	789b      	ldrb	r3, [r3, #2]
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8010f56:	2380      	movs	r3, #128	; 0x80
 8010f58:	e000      	b.n	8010f5c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 8010f5a:	2340      	movs	r3, #64	; 0x40
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	21e8      	movs	r1, #232	; 0xe8
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7f0 fb3b 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8010f66:	e002      	b.n	8010f6e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8010f68:	bf00      	nop
 8010f6a:	e000      	b.n	8010f6e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8010f6c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 8010f6e:	2200      	movs	r2, #0
 8010f70:	2138      	movs	r1, #56	; 0x38
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7f0 fb32 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8010f78:	6a3b      	ldr	r3, [r7, #32]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	2110      	movs	r1, #16
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f7f0 fb2b 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8010f86:	8a7b      	ldrh	r3, [r7, #18]
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	2138      	movs	r1, #56	; 0x38
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7f0 fb24 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	f043 0320 	orr.w	r3, r3, #32
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	21f0      	movs	r1, #240	; 0xf0
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7f0 fb1a 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8010fa8:	21c8      	movs	r1, #200	; 0xc8
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7f0 fb68 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	b25b      	sxtb	r3, r3
 8010fb4:	43db      	mvns	r3, r3
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	09db      	lsrs	r3, r3, #7
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d000      	beq.n	8010fc2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8010fc0:	e7f2      	b.n	8010fa8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8010fc2:	2280      	movs	r2, #128	; 0x80
 8010fc4:	21c8      	movs	r1, #200	; 0xc8
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f7f0 fb08 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 8010fcc:	21f8      	movs	r1, #248	; 0xf8
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7f0 fb56 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	f003 030f 	and.w	r3, r3, #15
 8010fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8010fde:	e76d      	b.n	8010ebc <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8010fe0:	8bba      	ldrh	r2, [r7, #28]
 8010fe2:	8a7b      	ldrh	r3, [r7, #18]
 8010fe4:	1ad3      	subs	r3, r2, r3
 8010fe6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8010fe8:	8a7b      	ldrh	r3, [r7, #18]
 8010fea:	6a3a      	ldr	r2, [r7, #32]
 8010fec:	4413      	add	r3, r2
 8010fee:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8010ff0:	e721      	b.n	8010e36 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8010ff2:	bf00      	nop
 8010ff4:	e000      	b.n	8010ff8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8010ff6:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8010ff8:	21f8      	movs	r1, #248	; 0xf8
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f7f0 fb40 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011000:	4603      	mov	r3, r0
 8011002:	f003 0320 	and.w	r3, r3, #32
 8011006:	2b00      	cmp	r3, #0
 8011008:	d001      	beq.n	801100e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801100a:	2101      	movs	r1, #1
 801100c:	e000      	b.n	8011010 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801100e:	2100      	movs	r1, #0
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	7893      	ldrb	r3, [r2, #2]
 8011014:	f361 0300 	bfi	r3, r1, #0, #1
 8011018:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801101a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801101e:	4618      	mov	r0, r3
 8011020:	3728      	adds	r7, #40	; 0x28
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8011026:	b580      	push	{r7, lr}
 8011028:	b086      	sub	sp, #24
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	4608      	mov	r0, r1
 8011030:	4611      	mov	r1, r2
 8011032:	461a      	mov	r2, r3
 8011034:	4603      	mov	r3, r0
 8011036:	70fb      	strb	r3, [r7, #3]
 8011038:	460b      	mov	r3, r1
 801103a:	70bb      	strb	r3, [r7, #2]
 801103c:	4613      	mov	r3, r2
 801103e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8011040:	f7f0 fdf0 	bl	8001c24 <HAL_GetTick>
 8011044:	4603      	mov	r3, r0
 8011046:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801104a:	3308      	adds	r3, #8
 801104c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801104e:	2300      	movs	r3, #0
 8011050:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8011052:	2300      	movs	r3, #0
 8011054:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8011056:	2300      	movs	r3, #0
 8011058:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801105a:	f7f0 fde3 	bl	8001c24 <HAL_GetTick>
 801105e:	4602      	mov	r2, r0
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	0fdb      	lsrs	r3, r3, #31
 8011066:	b2db      	uxtb	r3, r3
 8011068:	2b00      	cmp	r3, #0
 801106a:	d04c      	beq.n	8011106 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801106c:	78fa      	ldrb	r2, [r7, #3]
 801106e:	78bb      	ldrb	r3, [r7, #2]
 8011070:	4313      	orrs	r3, r2
 8011072:	b2db      	uxtb	r3, r3
 8011074:	461a      	mov	r2, r3
 8011076:	21f0      	movs	r1, #240	; 0xf0
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7f0 faaf 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801107e:	23ff      	movs	r3, #255	; 0xff
 8011080:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011082:	f7f0 fdcf 	bl	8001c24 <HAL_GetTick>
 8011086:	4602      	mov	r2, r0
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	0fdb      	lsrs	r3, r3, #31
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b00      	cmp	r3, #0
 8011092:	d010      	beq.n	80110b6 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011094:	21c8      	movs	r1, #200	; 0xc8
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f7f0 faf2 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801109c:	4603      	mov	r3, r0
 801109e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80110a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	daec      	bge.n	8011082 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80110a8:	2280      	movs	r2, #128	; 0x80
 80110aa:	21c8      	movs	r1, #200	; 0xc8
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7f0 fa95 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80110b2:	2300      	movs	r3, #0
 80110b4:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80110b6:	21f8      	movs	r1, #248	; 0xf8
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7f0 fae1 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80110be:	4603      	mov	r3, r0
 80110c0:	f003 030f 	and.w	r3, r3, #15
 80110c4:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
 80110c8:	2b04      	cmp	r3, #4
 80110ca:	d002      	beq.n	80110d2 <_ZN3USB11dispatchPktEhht+0xac>
 80110cc:	2b0e      	cmp	r3, #14
 80110ce:	d00c      	beq.n	80110ea <_ZN3USB11dispatchPktEhht+0xc4>
 80110d0:	e013      	b.n	80110fa <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 80110d2:	8abb      	ldrh	r3, [r7, #20]
 80110d4:	3301      	adds	r3, #1
 80110d6:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 80110d8:	883b      	ldrh	r3, [r7, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00f      	beq.n	80110fe <_ZN3USB11dispatchPktEhht+0xd8>
 80110de:	8aba      	ldrh	r2, [r7, #20]
 80110e0:	883b      	ldrh	r3, [r7, #0]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d10b      	bne.n	80110fe <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
 80110e8:	e00e      	b.n	8011108 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 80110ea:	7dbb      	ldrb	r3, [r7, #22]
 80110ec:	3301      	adds	r3, #1
 80110ee:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 80110f0:	7dbb      	ldrb	r3, [r7, #22]
 80110f2:	2b03      	cmp	r3, #3
 80110f4:	d105      	bne.n	8011102 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
 80110f8:	e006      	b.n	8011108 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 80110fa:	7dfb      	ldrb	r3, [r7, #23]
 80110fc:	e004      	b.n	8011108 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 80110fe:	bf00      	nop
 8011100:	e7ab      	b.n	801105a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8011102:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8011104:	e7a9      	b.n	801105a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8011106:	7dfb      	ldrb	r3, [r7, #23]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8011118:	2300      	movs	r3, #0
 801111a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 fdfd 	bl	8011d1c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 fe12 	bl	8011d4c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8011128:	4603      	mov	r3, r0
 801112a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801112c:	7b3b      	ldrb	r3, [r7, #12]
 801112e:	2b03      	cmp	r3, #3
 8011130:	d82e      	bhi.n	8011190 <_ZN3USB4TaskEv+0x80>
 8011132:	a201      	add	r2, pc, #4	; (adr r2, 8011138 <_ZN3USB4TaskEv+0x28>)
 8011134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011138:	08011155 	.word	0x08011155
 801113c:	08011149 	.word	0x08011149
 8011140:	08011171 	.word	0x08011171
 8011144:	0801116d 	.word	0x0801116d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8011148:	4bbf      	ldr	r3, [pc, #764]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801114a:	2213      	movs	r2, #19
 801114c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801114e:	2300      	movs	r3, #0
 8011150:	73fb      	strb	r3, [r7, #15]
                        break;
 8011152:	e01d      	b.n	8011190 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8011154:	4bbc      	ldr	r3, [pc, #752]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801115c:	2b10      	cmp	r3, #16
 801115e:	d002      	beq.n	8011166 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011160:	4bb9      	ldr	r3, [pc, #740]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 8011162:	2211      	movs	r2, #17
 8011164:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011166:	2300      	movs	r3, #0
 8011168:	73fb      	strb	r3, [r7, #15]
                        break;
 801116a:	e011      	b.n	8011190 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801116c:	2301      	movs	r3, #1
 801116e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011170:	4bb5      	ldr	r3, [pc, #724]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011178:	2b10      	cmp	r3, #16
 801117a:	d108      	bne.n	801118e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801117c:	f7f0 fd52 	bl	8001c24 <HAL_GetTick>
 8011180:	4603      	mov	r3, r0
 8011182:	33c8      	adds	r3, #200	; 0xc8
 8011184:	4ab1      	ldr	r2, [pc, #708]	; (801144c <_ZN3USB4TaskEv+0x33c>)
 8011186:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011188:	4baf      	ldr	r3, [pc, #700]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801118a:	2220      	movs	r2, #32
 801118c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801118e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011190:	2300      	movs	r3, #0
 8011192:	73bb      	strb	r3, [r7, #14]
 8011194:	7bbb      	ldrb	r3, [r7, #14]
 8011196:	2b0f      	cmp	r3, #15
 8011198:	d81b      	bhi.n	80111d2 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801119a:	7bba      	ldrb	r2, [r7, #14]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	321e      	adds	r2, #30
 80111a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d010      	beq.n	80111ca <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80111a8:	7bba      	ldrb	r2, [r7, #14]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	321e      	adds	r2, #30
 80111ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111b2:	7bba      	ldrb	r2, [r7, #14]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	321e      	adds	r2, #30
 80111b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	330c      	adds	r3, #12
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4608      	mov	r0, r1
 80111c4:	4798      	blx	r3
 80111c6:	4603      	mov	r3, r0
 80111c8:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80111ca:	7bbb      	ldrb	r3, [r7, #14]
 80111cc:	3301      	adds	r3, #1
 80111ce:	73bb      	strb	r3, [r7, #14]
 80111d0:	e7e0      	b.n	8011194 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 80111d2:	4b9d      	ldr	r3, [pc, #628]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	2ba0      	cmp	r3, #160	; 0xa0
 80111d8:	f000 8123 	beq.w	8011422 <_ZN3USB4TaskEv+0x312>
 80111dc:	2ba0      	cmp	r3, #160	; 0xa0
 80111de:	f300 812f 	bgt.w	8011440 <_ZN3USB4TaskEv+0x330>
 80111e2:	2b90      	cmp	r3, #144	; 0x90
 80111e4:	f000 811f 	beq.w	8011426 <_ZN3USB4TaskEv+0x316>
 80111e8:	2b90      	cmp	r3, #144	; 0x90
 80111ea:	f300 8129 	bgt.w	8011440 <_ZN3USB4TaskEv+0x330>
 80111ee:	2b80      	cmp	r3, #128	; 0x80
 80111f0:	f000 80fe 	beq.w	80113f0 <_ZN3USB4TaskEv+0x2e0>
 80111f4:	2b80      	cmp	r3, #128	; 0x80
 80111f6:	f300 8123 	bgt.w	8011440 <_ZN3USB4TaskEv+0x330>
 80111fa:	2b51      	cmp	r3, #81	; 0x51
 80111fc:	f000 80ea 	beq.w	80113d4 <_ZN3USB4TaskEv+0x2c4>
 8011200:	2b51      	cmp	r3, #81	; 0x51
 8011202:	f300 811d 	bgt.w	8011440 <_ZN3USB4TaskEv+0x330>
 8011206:	2b40      	cmp	r3, #64	; 0x40
 8011208:	dc6a      	bgt.n	80112e0 <_ZN3USB4TaskEv+0x1d0>
 801120a:	2b11      	cmp	r3, #17
 801120c:	f2c0 8118 	blt.w	8011440 <_ZN3USB4TaskEv+0x330>
 8011210:	3b11      	subs	r3, #17
 8011212:	2b2f      	cmp	r3, #47	; 0x2f
 8011214:	f200 8114 	bhi.w	8011440 <_ZN3USB4TaskEv+0x330>
 8011218:	a201      	add	r2, pc, #4	; (adr r2, 8011220 <_ZN3USB4TaskEv+0x110>)
 801121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801121e:	bf00      	nop
 8011220:	080112e7 	.word	0x080112e7
 8011224:	0801142b 	.word	0x0801142b
 8011228:	0801142b 	.word	0x0801142b
 801122c:	08011441 	.word	0x08011441
 8011230:	08011441 	.word	0x08011441
 8011234:	08011441 	.word	0x08011441
 8011238:	08011441 	.word	0x08011441
 801123c:	08011441 	.word	0x08011441
 8011240:	08011441 	.word	0x08011441
 8011244:	08011441 	.word	0x08011441
 8011248:	08011441 	.word	0x08011441
 801124c:	08011441 	.word	0x08011441
 8011250:	08011441 	.word	0x08011441
 8011254:	08011441 	.word	0x08011441
 8011258:	08011441 	.word	0x08011441
 801125c:	08011337 	.word	0x08011337
 8011260:	08011441 	.word	0x08011441
 8011264:	08011441 	.word	0x08011441
 8011268:	08011441 	.word	0x08011441
 801126c:	08011441 	.word	0x08011441
 8011270:	08011441 	.word	0x08011441
 8011274:	08011441 	.word	0x08011441
 8011278:	08011441 	.word	0x08011441
 801127c:	08011441 	.word	0x08011441
 8011280:	08011441 	.word	0x08011441
 8011284:	08011441 	.word	0x08011441
 8011288:	08011441 	.word	0x08011441
 801128c:	08011441 	.word	0x08011441
 8011290:	08011441 	.word	0x08011441
 8011294:	08011441 	.word	0x08011441
 8011298:	08011441 	.word	0x08011441
 801129c:	08011353 	.word	0x08011353
 80112a0:	08011441 	.word	0x08011441
 80112a4:	08011441 	.word	0x08011441
 80112a8:	08011441 	.word	0x08011441
 80112ac:	08011441 	.word	0x08011441
 80112b0:	08011441 	.word	0x08011441
 80112b4:	08011441 	.word	0x08011441
 80112b8:	08011441 	.word	0x08011441
 80112bc:	08011441 	.word	0x08011441
 80112c0:	08011441 	.word	0x08011441
 80112c4:	08011441 	.word	0x08011441
 80112c8:	08011441 	.word	0x08011441
 80112cc:	08011441 	.word	0x08011441
 80112d0:	08011441 	.word	0x08011441
 80112d4:	08011441 	.word	0x08011441
 80112d8:	08011441 	.word	0x08011441
 80112dc:	08011365 	.word	0x08011365
 80112e0:	2b50      	cmp	r3, #80	; 0x50
 80112e2:	d05f      	beq.n	80113a4 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 80112e4:	e0ac      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        init();
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff fa8e 	bl	8010808 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80112ec:	2300      	movs	r3, #0
 80112ee:	737b      	strb	r3, [r7, #13]
 80112f0:	7b7b      	ldrb	r3, [r7, #13]
 80112f2:	2b0f      	cmp	r3, #15
 80112f4:	d81b      	bhi.n	801132e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 80112f6:	7b7a      	ldrb	r2, [r7, #13]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	321e      	adds	r2, #30
 80112fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d010      	beq.n	8011326 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8011304:	7b7a      	ldrb	r2, [r7, #13]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	321e      	adds	r2, #30
 801130a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801130e:	7b7a      	ldrb	r2, [r7, #13]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	321e      	adds	r2, #30
 8011314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	3308      	adds	r3, #8
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4608      	mov	r0, r1
 8011320:	4798      	blx	r3
 8011322:	4603      	mov	r3, r0
 8011324:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011326:	7b7b      	ldrb	r3, [r7, #13]
 8011328:	3301      	adds	r3, #1
 801132a:	737b      	strb	r3, [r7, #13]
 801132c:	e7e0      	b.n	80112f0 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801132e:	4b46      	ldr	r3, [pc, #280]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 8011330:	2212      	movs	r2, #18
 8011332:	701a      	strb	r2, [r3, #0]
                        break;
 8011334:	e084      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8011336:	f7f0 fc75 	bl	8001c24 <HAL_GetTick>
 801133a:	4602      	mov	r2, r0
 801133c:	4b43      	ldr	r3, [pc, #268]	; (801144c <_ZN3USB4TaskEv+0x33c>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	43db      	mvns	r3, r3
 8011344:	0fdb      	lsrs	r3, r3, #31
 8011346:	b2db      	uxtb	r3, r3
 8011348:	2b00      	cmp	r3, #0
 801134a:	d070      	beq.n	801142e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801134c:	4b3e      	ldr	r3, [pc, #248]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801134e:	2230      	movs	r2, #48	; 0x30
 8011350:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011352:	2201      	movs	r2, #1
 8011354:	21e8      	movs	r1, #232	; 0xe8
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7f0 f940 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801135c:	4b3a      	ldr	r3, [pc, #232]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801135e:	2240      	movs	r2, #64	; 0x40
 8011360:	701a      	strb	r2, [r3, #0]
                        break;
 8011362:	e06d      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011364:	21e8      	movs	r1, #232	; 0xe8
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7f0 f98a 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801136c:	4603      	mov	r3, r0
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	bf0c      	ite	eq
 8011376:	2301      	moveq	r3, #1
 8011378:	2300      	movne	r3, #0
 801137a:	b2db      	uxtb	r3, r3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d058      	beq.n	8011432 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011380:	21d8      	movs	r1, #216	; 0xd8
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7f0 f97c 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011388:	4603      	mov	r3, r0
 801138a:	f043 0308 	orr.w	r3, r3, #8
 801138e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011390:	7b3b      	ldrb	r3, [r7, #12]
 8011392:	461a      	mov	r2, r3
 8011394:	21d8      	movs	r1, #216	; 0xd8
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7f0 f920 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801139c:	4b2a      	ldr	r3, [pc, #168]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801139e:	2250      	movs	r2, #80	; 0x50
 80113a0:	701a      	strb	r2, [r3, #0]
                        break;
 80113a2:	e046      	b.n	8011432 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80113a4:	21c8      	movs	r1, #200	; 0xc8
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7f0 f96a 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80113ac:	4603      	mov	r3, r0
 80113ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	bf14      	ite	ne
 80113b6:	2301      	movne	r3, #1
 80113b8:	2300      	moveq	r3, #0
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d03a      	beq.n	8011436 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 80113c0:	4b21      	ldr	r3, [pc, #132]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 80113c2:	2251      	movs	r2, #81	; 0x51
 80113c4:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 80113c6:	f7f0 fc2d 	bl	8001c24 <HAL_GetTick>
 80113ca:	4603      	mov	r3, r0
 80113cc:	3314      	adds	r3, #20
 80113ce:	4a1f      	ldr	r2, [pc, #124]	; (801144c <_ZN3USB4TaskEv+0x33c>)
 80113d0:	6013      	str	r3, [r2, #0]
                        break;
 80113d2:	e030      	b.n	8011436 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 80113d4:	f7f0 fc26 	bl	8001c24 <HAL_GetTick>
 80113d8:	4602      	mov	r2, r0
 80113da:	4b1c      	ldr	r3, [pc, #112]	; (801144c <_ZN3USB4TaskEv+0x33c>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	43db      	mvns	r3, r3
 80113e2:	0fdb      	lsrs	r3, r3, #31
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d027      	beq.n	801143a <_ZN3USB4TaskEv+0x32a>
 80113ea:	4b17      	ldr	r3, [pc, #92]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	2200      	movs	r2, #0
 80113f4:	2100      	movs	r1, #0
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f000 f920 	bl	801163c <_ZN3USB11ConfiguringEhhb>
 80113fc:	4603      	mov	r3, r0
 80113fe:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8011400:	7afb      	ldrb	r3, [r7, #11]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d009      	beq.n	801141a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8011406:	7afb      	ldrb	r3, [r7, #11]
 8011408:	2bd2      	cmp	r3, #210	; 0xd2
 801140a:	d018      	beq.n	801143e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801140c:	4a10      	ldr	r2, [pc, #64]	; (8011450 <_ZN3USB4TaskEv+0x340>)
 801140e:	7afb      	ldrb	r3, [r7, #11]
 8011410:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8011412:	4b0d      	ldr	r3, [pc, #52]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 8011414:	22a0      	movs	r2, #160	; 0xa0
 8011416:	701a      	strb	r2, [r3, #0]
                        break;
 8011418:	e011      	b.n	801143e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801141a:	4b0b      	ldr	r3, [pc, #44]	; (8011448 <_ZN3USB4TaskEv+0x338>)
 801141c:	2290      	movs	r2, #144	; 0x90
 801141e:	701a      	strb	r2, [r3, #0]
                        break;
 8011420:	e00d      	b.n	801143e <_ZN3USB4TaskEv+0x32e>
                        break;
 8011422:	bf00      	nop
 8011424:	e00c      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        break;
 8011426:	bf00      	nop
 8011428:	e00a      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        break;
 801142a:	bf00      	nop
 801142c:	e008      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801142e:	bf00      	nop
 8011430:	e006      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        break;
 8011432:	bf00      	nop
 8011434:	e004      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        break;
 8011436:	bf00      	nop
 8011438:	e002      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801143a:	bf00      	nop
 801143c:	e000      	b.n	8011440 <_ZN3USB4TaskEv+0x330>
                        break;
 801143e:	bf00      	nop
}
 8011440:	bf00      	nop
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	20004f89 	.word	0x20004f89
 801144c:	20004f8c 	.word	0x20004f8c
 8011450:	20004f88 	.word	0x20004f88

08011454 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8011454:	b580      	push	{r7, lr}
 8011456:	b086      	sub	sp, #24
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	4608      	mov	r0, r1
 801145e:	4611      	mov	r1, r2
 8011460:	461a      	mov	r2, r3
 8011462:	4603      	mov	r3, r0
 8011464:	70fb      	strb	r3, [r7, #3]
 8011466:	460b      	mov	r3, r1
 8011468:	70bb      	strb	r3, [r7, #2]
 801146a:	4613      	mov	r3, r2
 801146c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801146e:	2300      	movs	r3, #0
 8011470:	617b      	str	r3, [r7, #20]
 8011472:	2300      	movs	r3, #0
 8011474:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2100      	movs	r1, #0
 801147a:	4618      	mov	r0, r3
 801147c:	f000 fbc0 	bl	8011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011480:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d101      	bne.n	801148c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011488:	23d6      	movs	r3, #214	; 0xd6
 801148a:	e03a      	b.n	8011502 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d101      	bne.n	8011498 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011494:	23d7      	movs	r3, #215	; 0xd7
 8011496:	e034      	b.n	8011502 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	787a      	ldrb	r2, [r7, #1]
 801149c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	78bb      	ldrb	r3, [r7, #2]
 80114a2:	78f9      	ldrb	r1, [r7, #3]
 80114a4:	2200      	movs	r2, #0
 80114a6:	f000 fc5f 	bl	8011d68 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 80114aa:	4603      	mov	r3, r0
 80114ac:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 80114ae:	7bfb      	ldrb	r3, [r7, #15]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d101      	bne.n	80114b8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80114b4:	23d4      	movs	r3, #212	; 0xd4
 80114b6:	e024      	b.n	8011502 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7bfa      	ldrb	r2, [r7, #15]
 80114bc:	4611      	mov	r1, r2
 80114be:	4618      	mov	r0, r3
 80114c0:	f000 fb9e 	bl	8011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80114c4:	6138      	str	r0, [r7, #16]

        if(!p)
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80114cc:	23d6      	movs	r3, #214	; 0xd6
 80114ce:	e018      	b.n	8011502 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	787a      	ldrb	r2, [r7, #1]
 80114d4:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 80114d6:	7bfb      	ldrb	r3, [r7, #15]
 80114d8:	2200      	movs	r2, #0
 80114da:	2100      	movs	r1, #0
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f000 fae3 	bl	8011aa8 <_ZN3USB7setAddrEhhh>
 80114e2:	4603      	mov	r3, r0
 80114e4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d009      	beq.n	8011500 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	7bfa      	ldrb	r2, [r7, #15]
 80114f0:	4611      	mov	r1, r2
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 fcd0 	bl	8011e98 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	73fb      	strb	r3, [r7, #15]
                return rcode;
 80114fc:	7bbb      	ldrb	r3, [r7, #14]
 80114fe:	e000      	b.n	8011502 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8011500:	2300      	movs	r3, #0
};
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 801150a:	b590      	push	{r4, r7, lr}
 801150c:	b085      	sub	sp, #20
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	4608      	mov	r0, r1
 8011514:	4611      	mov	r1, r2
 8011516:	461a      	mov	r2, r3
 8011518:	4603      	mov	r3, r0
 801151a:	70fb      	strb	r3, [r7, #3]
 801151c:	460b      	mov	r3, r1
 801151e:	70bb      	strb	r3, [r7, #2]
 8011520:	4613      	mov	r3, r2
 8011522:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8011528:	78fa      	ldrb	r2, [r7, #3]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	321e      	adds	r2, #30
 801152e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011532:	78fa      	ldrb	r2, [r7, #3]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	321e      	adds	r2, #30
 8011538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3304      	adds	r3, #4
 8011540:	681c      	ldr	r4, [r3, #0]
 8011542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011546:	787a      	ldrb	r2, [r7, #1]
 8011548:	78b9      	ldrb	r1, [r7, #2]
 801154a:	47a0      	blx	r4
 801154c:	4603      	mov	r3, r0
 801154e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8011550:	7bbb      	ldrb	r3, [r7, #14]
 8011552:	2be0      	cmp	r3, #224	; 0xe0
 8011554:	d11c      	bne.n	8011590 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8011556:	78bb      	ldrb	r3, [r7, #2]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d108      	bne.n	801156e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801155c:	2201      	movs	r2, #1
 801155e:	21e8      	movs	r1, #232	; 0xe8
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f7f0 f83b 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011566:	2066      	movs	r0, #102	; 0x66
 8011568:	f7f0 fb68 	bl	8001c3c <HAL_Delay>
 801156c:	e022      	b.n	80115b4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801156e:	78ba      	ldrb	r2, [r7, #2]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	321e      	adds	r2, #30
 8011574:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011578:	78ba      	ldrb	r2, [r7, #2]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	321e      	adds	r2, #30
 801157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3314      	adds	r3, #20
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	787a      	ldrb	r2, [r7, #1]
 801158a:	4611      	mov	r1, r2
 801158c:	4798      	blx	r3
 801158e:	e011      	b.n	80115b4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011590:	7bbb      	ldrb	r3, [r7, #14]
 8011592:	2b0d      	cmp	r3, #13
 8011594:	d109      	bne.n	80115aa <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011596:	7bfb      	ldrb	r3, [r7, #15]
 8011598:	2b02      	cmp	r3, #2
 801159a:	d806      	bhi.n	80115aa <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801159c:	2064      	movs	r0, #100	; 0x64
 801159e:	f7f0 fb4d 	bl	8001c3c <HAL_Delay>
                retries++;
 80115a2:	7bfb      	ldrb	r3, [r7, #15]
 80115a4:	3301      	adds	r3, #1
 80115a6:	73fb      	strb	r3, [r7, #15]
                goto again;
 80115a8:	e7be      	b.n	8011528 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 80115aa:	7bbb      	ldrb	r3, [r7, #14]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d001      	beq.n	80115b4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 80115b0:	7bbb      	ldrb	r3, [r7, #14]
 80115b2:	e03f      	b.n	8011634 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 80115b4:	78fa      	ldrb	r2, [r7, #3]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	321e      	adds	r2, #30
 80115ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80115be:	78fa      	ldrb	r2, [r7, #3]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	321e      	adds	r2, #30
 80115c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	681c      	ldr	r4, [r3, #0]
 80115cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115d0:	787a      	ldrb	r2, [r7, #1]
 80115d2:	78b9      	ldrb	r1, [r7, #2]
 80115d4:	47a0      	blx	r4
 80115d6:	4603      	mov	r3, r0
 80115d8:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80115da:	7bbb      	ldrb	r3, [r7, #14]
 80115dc:	2b0d      	cmp	r3, #13
 80115de:	d109      	bne.n	80115f4 <_ZN3USB13AttemptConfigEhhhb+0xea>
 80115e0:	7bfb      	ldrb	r3, [r7, #15]
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d806      	bhi.n	80115f4 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 80115e6:	2064      	movs	r0, #100	; 0x64
 80115e8:	f7f0 fb28 	bl	8001c3c <HAL_Delay>
                retries++;
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
 80115ee:	3301      	adds	r3, #1
 80115f0:	73fb      	strb	r3, [r7, #15]
                goto again;
 80115f2:	e799      	b.n	8011528 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 80115f4:	7bbb      	ldrb	r3, [r7, #14]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d01b      	beq.n	8011632 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 80115fa:	78bb      	ldrb	r3, [r7, #2]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d108      	bne.n	8011612 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011600:	2201      	movs	r2, #1
 8011602:	21e8      	movs	r1, #232	; 0xe8
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7ef ffe9 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 801160a:	2066      	movs	r0, #102	; 0x66
 801160c:	f7f0 fb16 	bl	8001c3c <HAL_Delay>
 8011610:	e00f      	b.n	8011632 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8011612:	78ba      	ldrb	r2, [r7, #2]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	321e      	adds	r2, #30
 8011618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801161c:	78ba      	ldrb	r2, [r7, #2]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	321e      	adds	r2, #30
 8011622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	3314      	adds	r3, #20
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	787a      	ldrb	r2, [r7, #1]
 801162e:	4611      	mov	r1, r2
 8011630:	4798      	blx	r3
                }
        }
        return rcode;
 8011632:	7bbb      	ldrb	r3, [r7, #14]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}

0801163c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 801163c:	b580      	push	{r7, lr}
 801163e:	b090      	sub	sp, #64	; 0x40
 8011640:	af02      	add	r7, sp, #8
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	4608      	mov	r0, r1
 8011646:	4611      	mov	r1, r2
 8011648:	461a      	mov	r2, r3
 801164a:	4603      	mov	r3, r0
 801164c:	70fb      	strb	r3, [r7, #3]
 801164e:	460b      	mov	r3, r1
 8011650:	70bb      	strb	r3, [r7, #2]
 8011652:	4613      	mov	r3, r2
 8011654:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8011656:	2300      	movs	r3, #0
 8011658:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 801165c:	f107 030c 	add.w	r3, r7, #12
 8011660:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011662:	2300      	movs	r3, #0
 8011664:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011666:	2300      	movs	r3, #0
 8011668:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 801166a:	2300      	movs	r3, #0
 801166c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801166e:	2308      	movs	r3, #8
 8011670:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011672:	7abb      	ldrb	r3, [r7, #10]
 8011674:	f36f 0300 	bfc	r3, #0, #1
 8011678:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801167a:	7abb      	ldrb	r3, [r7, #10]
 801167c:	f36f 0341 	bfc	r3, #1, #1
 8011680:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011682:	7abb      	ldrb	r3, [r7, #10]
 8011684:	220f      	movs	r2, #15
 8011686:	f362 0387 	bfi	r3, r2, #2, #6
 801168a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7fa fd13 	bl	800c0b8 <_ZN3USB14GetAddressPoolEv>
 8011692:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2100      	movs	r1, #0
 801169c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801169e:	4798      	blx	r3
 80116a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 80116a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d101      	bne.n	80116ac <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80116a8:	23d6      	movs	r3, #214	; 0xd6
 80116aa:	e15c      	b.n	8011966 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 80116b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b4:	f107 0208 	add.w	r2, r7, #8
 80116b8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 80116ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116bc:	787a      	ldrb	r2, [r7, #1]
 80116be:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 80116c0:	f107 030c 	add.w	r3, r7, #12
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	2312      	movs	r3, #18
 80116c8:	2200      	movs	r2, #0
 80116ca:	2100      	movs	r1, #0
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f94e 	bl	801196e <_ZN3USB11getDevDescrEhhtPh>
 80116d2:	4603      	mov	r3, r0
 80116d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116dc:	601a      	str	r2, [r3, #0]

        if(rcode) {
 80116de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 80116e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116ea:	e13c      	b.n	8011966 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	7a1a      	ldrb	r2, [r3, #8]
 80116f0:	7a5b      	ldrb	r3, [r3, #9]
 80116f2:	021b      	lsls	r3, r3, #8
 80116f4:	4313      	orrs	r3, r2
 80116f6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	7a9a      	ldrb	r2, [r3, #10]
 80116fc:	7adb      	ldrb	r3, [r3, #11]
 80116fe:	021b      	lsls	r3, r3, #8
 8011700:	4313      	orrs	r3, r2
 8011702:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8011704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011706:	791b      	ldrb	r3, [r3, #4]
 8011708:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	795b      	ldrb	r3, [r3, #5]
 801170e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011710:	2300      	movs	r3, #0
 8011712:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801171a:	2b0f      	cmp	r3, #15
 801171c:	f200 8081 	bhi.w	8011822 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011720:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	321e      	adds	r2, #30
 8011728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d06e      	beq.n	801180e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011730:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	321e      	adds	r2, #30
 8011738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801173c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	321e      	adds	r2, #30
 8011744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	3310      	adds	r3, #16
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4608      	mov	r0, r1
 8011750:	4798      	blx	r3
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	bf14      	ite	ne
 8011758:	2301      	movne	r3, #1
 801175a:	2300      	moveq	r3, #0
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d157      	bne.n	8011812 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011762:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	321e      	adds	r2, #30
 801176a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801176e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	321e      	adds	r2, #30
 8011776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3320      	adds	r3, #32
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	7fba      	ldrb	r2, [r7, #30]
 8011782:	4611      	mov	r1, r2
 8011784:	4798      	blx	r3
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d02b      	beq.n	80117e4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 801178c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	321e      	adds	r2, #30
 8011794:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011798:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	321e      	adds	r2, #30
 80117a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	3318      	adds	r3, #24
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	8c3a      	ldrh	r2, [r7, #32]
 80117ac:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80117ae:	4798      	blx	r3
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d114      	bne.n	80117e0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 80117b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	321e      	adds	r2, #30
 80117be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80117c2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	321e      	adds	r2, #30
 80117ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	331c      	adds	r3, #28
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	7ffa      	ldrb	r2, [r7, #31]
 80117d6:	4611      	mov	r1, r2
 80117d8:	4798      	blx	r3
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 80117e0:	2301      	movs	r3, #1
 80117e2:	e000      	b.n	80117e6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 80117e4:	2300      	movs	r3, #0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d014      	beq.n	8011814 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 80117ea:	78b8      	ldrb	r0, [r7, #2]
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80117f2:	787b      	ldrb	r3, [r7, #1]
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	4603      	mov	r3, r0
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff fe86 	bl	801150a <_ZN3USB13AttemptConfigEhhhb>
 80117fe:	4603      	mov	r3, r0
 8011800:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011808:	2bd1      	cmp	r3, #209	; 0xd1
 801180a:	d109      	bne.n	8011820 <_ZN3USB11ConfiguringEhhb+0x1e4>
 801180c:	e002      	b.n	8011814 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 801180e:	bf00      	nop
 8011810:	e000      	b.n	8011814 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011812:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011818:	3301      	adds	r3, #1
 801181a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801181e:	e77a      	b.n	8011716 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011820:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011826:	2b0f      	cmp	r3, #15
 8011828:	d802      	bhi.n	8011830 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 801182a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801182e:	e09a      	b.n	8011966 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011830:	2300      	movs	r3, #0
 8011832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801183a:	2b0f      	cmp	r3, #15
 801183c:	f200 8088 	bhi.w	8011950 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011840:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	321e      	adds	r2, #30
 8011848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d074      	beq.n	801193a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011850:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	321e      	adds	r2, #30
 8011858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801185c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	321e      	adds	r2, #30
 8011864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3310      	adds	r3, #16
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4608      	mov	r0, r1
 8011870:	4798      	blx	r3
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	bf14      	ite	ne
 8011878:	2301      	movne	r3, #1
 801187a:	2300      	moveq	r3, #0
 801187c:	b2db      	uxtb	r3, r3
 801187e:	2b00      	cmp	r3, #0
 8011880:	d15d      	bne.n	801193e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011882:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	321e      	adds	r2, #30
 801188a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801188e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	321e      	adds	r2, #30
 8011896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	3320      	adds	r3, #32
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	7fba      	ldrb	r2, [r7, #30]
 80118a2:	4611      	mov	r1, r2
 80118a4:	4798      	blx	r3
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d02b      	beq.n	8011904 <_ZN3USB11ConfiguringEhhb+0x2c8>
 80118ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	321e      	adds	r2, #30
 80118b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	321e      	adds	r2, #30
 80118c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	3318      	adds	r3, #24
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	8c3a      	ldrh	r2, [r7, #32]
 80118cc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80118ce:	4798      	blx	r3
 80118d0:	4603      	mov	r3, r0
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d114      	bne.n	8011900 <_ZN3USB11ConfiguringEhhb+0x2c4>
 80118d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	321e      	adds	r2, #30
 80118de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	321e      	adds	r2, #30
 80118ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	331c      	adds	r3, #28
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	7ffa      	ldrb	r2, [r7, #31]
 80118f6:	4611      	mov	r1, r2
 80118f8:	4798      	blx	r3
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011900:	2301      	movs	r3, #1
 8011902:	e000      	b.n	8011906 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011904:	2300      	movs	r3, #0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d11b      	bne.n	8011942 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 801190a:	78b8      	ldrb	r0, [r7, #2]
 801190c:	78fa      	ldrb	r2, [r7, #3]
 801190e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011912:	787b      	ldrb	r3, [r7, #1]
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	4603      	mov	r3, r0
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff fdf6 	bl	801150a <_ZN3USB13AttemptConfigEhhhb>
 801191e:	4603      	mov	r3, r0
 8011920:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011924:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011928:	2bd1      	cmp	r3, #209	; 0xd1
 801192a:	d00b      	beq.n	8011944 <_ZN3USB11ConfiguringEhhb+0x308>
 801192c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011930:	2bd9      	cmp	r3, #217	; 0xd9
 8011932:	d007      	beq.n	8011944 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011934:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011938:	e015      	b.n	8011966 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 801193a:	bf00      	nop
 801193c:	e002      	b.n	8011944 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 801193e:	bf00      	nop
 8011940:	e000      	b.n	8011944 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011942:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011948:	3301      	adds	r3, #1
 801194a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801194e:	e772      	b.n	8011836 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011950:	787b      	ldrb	r3, [r7, #1]
 8011952:	78ba      	ldrb	r2, [r7, #2]
 8011954:	78f9      	ldrb	r1, [r7, #3]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff fd7c 	bl	8011454 <_ZN3USB17DefaultAddressingEhhb>
 801195c:	4603      	mov	r3, r0
 801195e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011962:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011966:	4618      	mov	r0, r3
 8011968:	3738      	adds	r7, #56	; 0x38
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 801196e:	b580      	push	{r7, lr}
 8011970:	b08a      	sub	sp, #40	; 0x28
 8011972:	af08      	add	r7, sp, #32
 8011974:	6078      	str	r0, [r7, #4]
 8011976:	4608      	mov	r0, r1
 8011978:	4611      	mov	r1, r2
 801197a:	461a      	mov	r2, r3
 801197c:	4603      	mov	r3, r0
 801197e:	70fb      	strb	r3, [r7, #3]
 8011980:	460b      	mov	r3, r1
 8011982:	70bb      	strb	r3, [r7, #2]
 8011984:	4613      	mov	r3, r2
 8011986:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011988:	78ba      	ldrb	r2, [r7, #2]
 801198a:	78f9      	ldrb	r1, [r7, #3]
 801198c:	2300      	movs	r3, #0
 801198e:	9307      	str	r3, [sp, #28]
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	9306      	str	r3, [sp, #24]
 8011994:	883b      	ldrh	r3, [r7, #0]
 8011996:	9305      	str	r3, [sp, #20]
 8011998:	883b      	ldrh	r3, [r7, #0]
 801199a:	9304      	str	r3, [sp, #16]
 801199c:	2300      	movs	r3, #0
 801199e:	9303      	str	r3, [sp, #12]
 80119a0:	2301      	movs	r3, #1
 80119a2:	9302      	str	r3, [sp, #8]
 80119a4:	2300      	movs	r3, #0
 80119a6:	9301      	str	r3, [sp, #4]
 80119a8:	2306      	movs	r3, #6
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	2380      	movs	r3, #128	; 0x80
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7fe fffd 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80119b4:	4603      	mov	r3, r0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 80119be:	b580      	push	{r7, lr}
 80119c0:	b08a      	sub	sp, #40	; 0x28
 80119c2:	af08      	add	r7, sp, #32
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	4608      	mov	r0, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	461a      	mov	r2, r3
 80119cc:	4603      	mov	r3, r0
 80119ce:	70fb      	strb	r3, [r7, #3]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70bb      	strb	r3, [r7, #2]
 80119d4:	4613      	mov	r3, r2
 80119d6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 80119d8:	78ba      	ldrb	r2, [r7, #2]
 80119da:	78f9      	ldrb	r1, [r7, #3]
 80119dc:	2300      	movs	r3, #0
 80119de:	9307      	str	r3, [sp, #28]
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	9306      	str	r3, [sp, #24]
 80119e4:	883b      	ldrh	r3, [r7, #0]
 80119e6:	9305      	str	r3, [sp, #20]
 80119e8:	883b      	ldrh	r3, [r7, #0]
 80119ea:	9304      	str	r3, [sp, #16]
 80119ec:	2300      	movs	r3, #0
 80119ee:	9303      	str	r3, [sp, #12]
 80119f0:	2302      	movs	r3, #2
 80119f2:	9302      	str	r3, [sp, #8]
 80119f4:	7c3b      	ldrb	r3, [r7, #16]
 80119f6:	9301      	str	r3, [sp, #4]
 80119f8:	2306      	movs	r3, #6
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	2380      	movs	r3, #128	; 0x80
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7fe ffd5 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011a04:	4603      	mov	r3, r0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b09e      	sub	sp, #120	; 0x78
 8011a12:	af08      	add	r7, sp, #32
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	4608      	mov	r0, r1
 8011a18:	4611      	mov	r1, r2
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	70fb      	strb	r3, [r7, #3]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70bb      	strb	r3, [r7, #2]
 8011a24:	4613      	mov	r3, r2
 8011a26:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011a28:	2340      	movs	r3, #64	; 0x40
 8011a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011a2e:	f107 030c 	add.w	r3, r7, #12
 8011a32:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011a34:	78ba      	ldrb	r2, [r7, #2]
 8011a36:	78f9      	ldrb	r1, [r7, #3]
 8011a38:	f107 030c 	add.w	r3, r7, #12
 8011a3c:	9301      	str	r3, [sp, #4]
 8011a3e:	787b      	ldrb	r3, [r7, #1]
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	2309      	movs	r3, #9
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7ff ffba 	bl	80119be <_ZN3USB12getConfDescrEhhthPh>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011a50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011a58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011a5c:	e020      	b.n	8011aa0 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a60:	789a      	ldrb	r2, [r3, #2]
 8011a62:	78db      	ldrb	r3, [r3, #3]
 8011a64:	021b      	lsls	r3, r3, #8
 8011a66:	4313      	orrs	r3, r2
 8011a68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011a6c:	78ba      	ldrb	r2, [r7, #2]
 8011a6e:	78f9      	ldrb	r1, [r7, #3]
 8011a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a72:	9307      	str	r3, [sp, #28]
 8011a74:	f107 030c 	add.w	r3, r7, #12
 8011a78:	9306      	str	r3, [sp, #24]
 8011a7a:	2340      	movs	r3, #64	; 0x40
 8011a7c:	9305      	str	r3, [sp, #20]
 8011a7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011a82:	9304      	str	r3, [sp, #16]
 8011a84:	2300      	movs	r3, #0
 8011a86:	9303      	str	r3, [sp, #12]
 8011a88:	2302      	movs	r3, #2
 8011a8a:	9302      	str	r3, [sp, #8]
 8011a8c:	787b      	ldrb	r3, [r7, #1]
 8011a8e:	9301      	str	r3, [sp, #4]
 8011a90:	2306      	movs	r3, #6
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	2380      	movs	r3, #128	; 0x80
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7fe ff89 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	bf00      	nop
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3758      	adds	r7, #88	; 0x58
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b08c      	sub	sp, #48	; 0x30
 8011aac:	af08      	add	r7, sp, #32
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	4608      	mov	r0, r1
 8011ab2:	4611      	mov	r1, r2
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	70fb      	strb	r3, [r7, #3]
 8011aba:	460b      	mov	r3, r1
 8011abc:	70bb      	strb	r3, [r7, #2]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011ac2:	78ba      	ldrb	r2, [r7, #2]
 8011ac4:	78f9      	ldrb	r1, [r7, #3]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	9307      	str	r3, [sp, #28]
 8011aca:	2300      	movs	r3, #0
 8011acc:	9306      	str	r3, [sp, #24]
 8011ace:	2300      	movs	r3, #0
 8011ad0:	9305      	str	r3, [sp, #20]
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	9304      	str	r3, [sp, #16]
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	9303      	str	r3, [sp, #12]
 8011ada:	2300      	movs	r3, #0
 8011adc:	9302      	str	r3, [sp, #8]
 8011ade:	787b      	ldrb	r3, [r7, #1]
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	2305      	movs	r3, #5
 8011ae4:	9300      	str	r3, [sp, #0]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7fe ff60 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011aee:	4603      	mov	r3, r0
 8011af0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011af2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011af6:	f7f0 f8a1 	bl	8001c3c <HAL_Delay>
        return rcode;
 8011afa:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3710      	adds	r7, #16
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08a      	sub	sp, #40	; 0x28
 8011b08:	af08      	add	r7, sp, #32
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	4611      	mov	r1, r2
 8011b10:	461a      	mov	r2, r3
 8011b12:	4603      	mov	r3, r0
 8011b14:	70fb      	strb	r3, [r7, #3]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70bb      	strb	r3, [r7, #2]
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011b1e:	78ba      	ldrb	r2, [r7, #2]
 8011b20:	78f9      	ldrb	r1, [r7, #3]
 8011b22:	2300      	movs	r3, #0
 8011b24:	9307      	str	r3, [sp, #28]
 8011b26:	2300      	movs	r3, #0
 8011b28:	9306      	str	r3, [sp, #24]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	9305      	str	r3, [sp, #20]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	9304      	str	r3, [sp, #16]
 8011b32:	2300      	movs	r3, #0
 8011b34:	9303      	str	r3, [sp, #12]
 8011b36:	2300      	movs	r3, #0
 8011b38:	9302      	str	r3, [sp, #8]
 8011b3a:	787b      	ldrb	r3, [r7, #1]
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	2309      	movs	r3, #9
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	2300      	movs	r3, #0
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7fe ff32 	bl	80109ae <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011b4a:	4603      	mov	r3, r0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
};
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
	...

08011b6c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	4a04      	ldr	r2, [pc, #16]	; (8011b88 <_ZN11AddressPoolC1Ev+0x1c>)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr
 8011b88:	08012670 	.word	0x08012670

08011b8c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff ffe8 	bl	8011b6c <_ZN11AddressPoolC1Ev>
 8011b9c:	4a17      	ldr	r2, [pc, #92]	; (8011bfc <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	601a      	str	r2, [r3, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011ba8:	2100      	movs	r1, #0
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f000 f990 	bl	8011ed0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	1d1a      	adds	r2, r3, #4
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2208      	movs	r2, #8
 8011bc8:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011bca:	687a      	ldr	r2, [r7, #4]
 8011bcc:	7993      	ldrb	r3, [r2, #6]
 8011bce:	f36f 0300 	bfc	r3, #0, #1
 8011bd2:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	7993      	ldrb	r3, [r2, #6]
 8011bd8:	f36f 0341 	bfc	r3, #1, #1
 8011bdc:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	7993      	ldrb	r3, [r2, #6]
 8011be2:	210f      	movs	r1, #15
 8011be4:	f361 0387 	bfi	r3, r1, #2, #6
 8011be8:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 f9a1 	bl	8011f32 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	0801265c 	.word	0x0801265c

08011c00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011c0c:	78fb      	ldrb	r3, [r7, #3]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d102      	bne.n	8011c18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	3308      	adds	r3, #8
 8011c16:	e014      	b.n	8011c42 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011c18:	78fb      	ldrb	r3, [r7, #3]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 f9a1 	bl	8011f64 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011c22:	4603      	mov	r3, r0
 8011c24:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d008      	beq.n	8011c3e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f103 0108 	add.w	r1, r3, #8
 8011c32:	7bfa      	ldrb	r2, [r7, #15]
 8011c34:	4613      	mov	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	1a9b      	subs	r3, r3, r2
 8011c3a:	440b      	add	r3, r1
 8011c3c:	e000      	b.n	8011c40 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	bf00      	nop
        };
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
	...

08011c4c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	607b      	str	r3, [r7, #4]
 8011c56:	460b      	mov	r3, r1
 8011c58:	72fb      	strb	r3, [r7, #11]
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011c5e:	f7ee fe1f 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011c62:	7afb      	ldrb	r3, [r7, #11]
 8011c64:	f043 0302 	orr.w	r3, r3, #2
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011c6c:	f107 0117 	add.w	r1, r7, #23
 8011c70:	f04f 33ff 	mov.w	r3, #4294967295
 8011c74:	2201      	movs	r2, #1
 8011c76:	480b      	ldr	r0, [pc, #44]	; (8011ca4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011c78:	f7f2 fdb1 	bl	80047de <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011c7c:	7abb      	ldrb	r3, [r7, #10]
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	6879      	ldr	r1, [r7, #4]
 8011c86:	4807      	ldr	r0, [pc, #28]	; (8011ca4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011c88:	f7f2 fda9 	bl	80047de <HAL_SPI_Transmit>
        data_p += nbytes;
 8011c8c:	7abb      	ldrb	r3, [r7, #10]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	4413      	add	r3, r2
 8011c92:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011c94:	f7ee fdf8 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011c98:	687b      	ldr	r3, [r7, #4]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3718      	adds	r7, #24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	20000310 	.word	0x20000310

08011ca8 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	4603      	mov	r3, r0
 8011cb0:	6039      	str	r1, [r7, #0]
 8011cb2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011cb4:	bf00      	nop
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	607b      	str	r3, [r7, #4]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	72fb      	strb	r3, [r7, #11]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011cd2:	f7ee fde5 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011cd6:	f107 010b 	add.w	r1, r7, #11
 8011cda:	f04f 33ff 	mov.w	r3, #4294967295
 8011cde:	2201      	movs	r2, #1
 8011ce0:	480d      	ldr	r0, [pc, #52]	; (8011d18 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011ce2:	f7f2 fd7c 	bl	80047de <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011ce6:	7abb      	ldrb	r3, [r7, #10]
 8011ce8:	461a      	mov	r2, r3
 8011cea:	2100      	movs	r1, #0
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 fa91 	bl	8012214 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011cf2:	7abb      	ldrb	r3, [r7, #10]
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	4806      	ldr	r0, [pc, #24]	; (8011d18 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011cfe:	f7f2 feaa 	bl	8004a56 <HAL_SPI_Receive>
        data_p += nbytes;
 8011d02:	7abb      	ldrb	r3, [r7, #10]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	4413      	add	r3, r2
 8011d08:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011d0a:	f7ee fdbd 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011d0e:	687b      	ldr	r3, [r7, #4]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	20000310 	.word	0x20000310

08011d1c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8011d24:	2300      	movs	r3, #0
 8011d26:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8011d28:	f7fe fd46 	bl	80107b8 <_ZN2P95IsSetEv>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d104      	bne.n	8011d40 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f937 	bl	8011faa <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8011d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3710      	adds	r7, #16
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
	...

08011d4c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
                return vbusState;
 8011d54:	4b03      	ldr	r3, [pc, #12]	; (8011d64 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8011d56:	781b      	ldrb	r3, [r3, #0]
        };
 8011d58:	4618      	mov	r0, r3
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	20000662 	.word	0x20000662

08011d68 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	4608      	mov	r0, r1
 8011d72:	4611      	mov	r1, r2
 8011d74:	461a      	mov	r2, r3
 8011d76:	4603      	mov	r3, r0
 8011d78:	70fb      	strb	r3, [r7, #3]
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	70bb      	strb	r3, [r7, #2]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8011d82:	78fb      	ldrb	r3, [r7, #3]
 8011d84:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8011d86:	7b3b      	ldrb	r3, [r7, #12]
 8011d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d102      	bne.n	8011d98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8011d92:	787b      	ldrb	r3, [r7, #1]
 8011d94:	2b07      	cmp	r3, #7
 8011d96:	d901      	bls.n	8011d9c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	e079      	b.n	8011e90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8011d9c:	78bb      	ldrb	r3, [r7, #2]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d005      	beq.n	8011dae <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	79db      	ldrb	r3, [r3, #7]
 8011da6:	2b07      	cmp	r3, #7
 8011da8:	d101      	bne.n	8011dae <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	e070      	b.n	8011e90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8011dae:	2100      	movs	r1, #0
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 f8d7 	bl	8011f64 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011db6:	4603      	mov	r3, r0
 8011db8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 8011dba:	7bfb      	ldrb	r3, [r7, #15]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d101      	bne.n	8011dc4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e065      	b.n	8011e90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8011dc4:	7b3b      	ldrb	r3, [r7, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d124      	bne.n	8011e14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 8011dca:	78bb      	ldrb	r3, [r7, #2]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00f      	beq.n	8011df0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8011dd0:	7bfa      	ldrb	r2, [r7, #15]
 8011dd2:	6879      	ldr	r1, [r7, #4]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	1a9b      	subs	r3, r3, r2
 8011dda:	440b      	add	r3, r1
 8011ddc:	330c      	adds	r3, #12
 8011dde:	2241      	movs	r2, #65	; 0x41
 8011de0:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	79db      	ldrb	r3, [r3, #7]
 8011de6:	3301      	adds	r3, #1
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	71da      	strb	r2, [r3, #7]
 8011dee:	e008      	b.n	8011e02 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8011df0:	7bfa      	ldrb	r2, [r7, #15]
 8011df2:	6879      	ldr	r1, [r7, #4]
 8011df4:	4613      	mov	r3, r2
 8011df6:	00db      	lsls	r3, r3, #3
 8011df8:	1a9b      	subs	r3, r3, r2
 8011dfa:	440b      	add	r3, r1
 8011dfc:	330c      	adds	r3, #12
 8011dfe:	2201      	movs	r2, #1
 8011e00:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8011e02:	7bfa      	ldrb	r2, [r7, #15]
 8011e04:	6879      	ldr	r1, [r7, #4]
 8011e06:	4613      	mov	r3, r2
 8011e08:	00db      	lsls	r3, r3, #3
 8011e0a:	1a9b      	subs	r3, r3, r2
 8011e0c:	440b      	add	r3, r1
 8011e0e:	330c      	adds	r3, #12
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	e03d      	b.n	8011e90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8011e14:	2300      	movs	r3, #0
 8011e16:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8011e18:	7b3b      	ldrb	r3, [r7, #12]
 8011e1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011e1e:	b2da      	uxtb	r2, r3
 8011e20:	7a3b      	ldrb	r3, [r7, #8]
 8011e22:	f362 03c5 	bfi	r3, r2, #3, #3
 8011e26:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8011e28:	78bb      	ldrb	r3, [r7, #2]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d013      	beq.n	8011e56 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8011e2e:	7a3b      	ldrb	r3, [r7, #8]
 8011e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e34:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	79db      	ldrb	r3, [r3, #7]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	b2da      	uxtb	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	71da      	strb	r2, [r3, #7]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	79db      	ldrb	r3, [r3, #7]
 8011e46:	f003 0307 	and.w	r3, r3, #7
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	7a3b      	ldrb	r3, [r7, #8]
 8011e4e:	f362 0302 	bfi	r3, r2, #0, #3
 8011e52:	723b      	strb	r3, [r7, #8]
 8011e54:	e00b      	b.n	8011e6e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8011e56:	7a3b      	ldrb	r3, [r7, #8]
 8011e58:	f36f 1386 	bfc	r3, #6, #1
 8011e5c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 8011e5e:	787b      	ldrb	r3, [r7, #1]
 8011e60:	f003 0307 	and.w	r3, r3, #7
 8011e64:	b2da      	uxtb	r2, r3
 8011e66:	7a3b      	ldrb	r3, [r7, #8]
 8011e68:	f362 0302 	bfi	r3, r2, #0, #3
 8011e6c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 8011e6e:	7bfa      	ldrb	r2, [r7, #15]
 8011e70:	6879      	ldr	r1, [r7, #4]
 8011e72:	4613      	mov	r3, r2
 8011e74:	00db      	lsls	r3, r3, #3
 8011e76:	1a9b      	subs	r3, r3, r2
 8011e78:	440b      	add	r3, r1
 8011e7a:	330c      	adds	r3, #12
 8011e7c:	7a3a      	ldrb	r2, [r7, #8]
 8011e7e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8011e80:	7bfa      	ldrb	r2, [r7, #15]
 8011e82:	6879      	ldr	r1, [r7, #4]
 8011e84:	4613      	mov	r3, r2
 8011e86:	00db      	lsls	r3, r3, #3
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	440b      	add	r3, r1
 8011e8c:	330c      	adds	r3, #12
 8011e8e:	781b      	ldrb	r3, [r3, #0]
        };
 8011e90:	4618      	mov	r0, r3
 8011e92:	3710      	adds	r7, #16
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8011ea4:	78fb      	ldrb	r3, [r7, #3]
 8011ea6:	2b41      	cmp	r3, #65	; 0x41
 8011ea8:	d103      	bne.n	8011eb2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f000 f841 	bl	8011f32 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8011eb0:	e00b      	b.n	8011eca <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8011eb2:	78fb      	ldrb	r3, [r7, #3]
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 f854 	bl	8011f64 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f893 	bl	8011ff0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 8011eca:	3710      	adds	r7, #16
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	460b      	mov	r3, r1
 8011eda:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8011edc:	78fa      	ldrb	r2, [r7, #3]
 8011ede:	6879      	ldr	r1, [r7, #4]
 8011ee0:	4613      	mov	r3, r2
 8011ee2:	00db      	lsls	r3, r3, #3
 8011ee4:	1a9b      	subs	r3, r3, r2
 8011ee6:	440b      	add	r3, r1
 8011ee8:	330c      	adds	r3, #12
 8011eea:	2200      	movs	r2, #0
 8011eec:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8011eee:	78fa      	ldrb	r2, [r7, #3]
 8011ef0:	6879      	ldr	r1, [r7, #4]
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	00db      	lsls	r3, r3, #3
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	440b      	add	r3, r1
 8011efa:	330d      	adds	r3, #13
 8011efc:	2201      	movs	r2, #1
 8011efe:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8011f00:	78fa      	ldrb	r2, [r7, #3]
 8011f02:	6879      	ldr	r1, [r7, #4]
 8011f04:	4613      	mov	r3, r2
 8011f06:	00db      	lsls	r3, r3, #3
 8011f08:	1a9b      	subs	r3, r3, r2
 8011f0a:	440b      	add	r3, r1
 8011f0c:	330e      	adds	r3, #14
 8011f0e:	2200      	movs	r2, #0
 8011f10:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8011f12:	78fa      	ldrb	r2, [r7, #3]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	1d19      	adds	r1, r3, #4
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	00db      	lsls	r3, r3, #3
 8011f1e:	1a9b      	subs	r3, r3, r2
 8011f20:	4403      	add	r3, r0
 8011f22:	3308      	adds	r3, #8
 8011f24:	6019      	str	r1, [r3, #0]
        };
 8011f26:	bf00      	nop
 8011f28:	370c      	adds	r7, #12
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b084      	sub	sp, #16
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	73fb      	strb	r3, [r7, #15]
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
 8011f40:	2b0f      	cmp	r3, #15
 8011f42:	d808      	bhi.n	8011f56 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7ff ffc1 	bl	8011ed0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
 8011f50:	3301      	adds	r3, #1
 8011f52:	73fb      	strb	r3, [r7, #15]
 8011f54:	e7f3      	b.n	8011f3e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	71da      	strb	r2, [r3, #7]
        };
 8011f5c:	bf00      	nop
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8011f70:	2301      	movs	r3, #1
 8011f72:	73fb      	strb	r3, [r7, #15]
 8011f74:	7bfb      	ldrb	r3, [r7, #15]
 8011f76:	2b0f      	cmp	r3, #15
 8011f78:	d810      	bhi.n	8011f9c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 8011f7a:	7bfa      	ldrb	r2, [r7, #15]
 8011f7c:	6879      	ldr	r1, [r7, #4]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	00db      	lsls	r3, r3, #3
 8011f82:	1a9b      	subs	r3, r3, r2
 8011f84:	440b      	add	r3, r1
 8011f86:	330c      	adds	r3, #12
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	78fa      	ldrb	r2, [r7, #3]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d101      	bne.n	8011f94 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	e004      	b.n	8011f9e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8011f94:	7bfb      	ldrb	r3, [r7, #15]
 8011f96:	3301      	adds	r3, #1
 8011f98:	73fb      	strb	r3, [r7, #15]
 8011f9a:	e7eb      	b.n	8011f74 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 8011f9c:	2300      	movs	r3, #0
        };
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b084      	sub	sp, #16
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8011fb6:	21c8      	movs	r1, #200	; 0xc8
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ef fb61 	bl	8001680 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8011fc2:	7bbb      	ldrb	r3, [r7, #14]
 8011fc4:	f003 0320 	and.w	r3, r3, #32
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d006      	beq.n	8011fda <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ef fb79 	bl	80016c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8011fd2:	7bfb      	ldrb	r3, [r7, #15]
 8011fd4:	f043 0320 	orr.w	r3, r3, #32
 8011fd8:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	461a      	mov	r2, r3
 8011fde:	21c8      	movs	r1, #200	; 0xc8
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7ef fafb 	bl	80015dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8011fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8011ffc:	78fb      	ldrb	r3, [r7, #3]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d03a      	beq.n	8012078 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8012002:	78fa      	ldrb	r2, [r7, #3]
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	4613      	mov	r3, r2
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	1a9b      	subs	r3, r3, r2
 801200c:	440b      	add	r3, r1
 801200e:	330c      	adds	r3, #12
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8012014:	7b3b      	ldrb	r3, [r7, #12]
 8012016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801201a:	b2db      	uxtb	r3, r3
 801201c:	2b00      	cmp	r3, #0
 801201e:	d025      	beq.n	801206c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8012020:	2301      	movs	r3, #1
 8012022:	73fb      	strb	r3, [r7, #15]
 8012024:	7bfb      	ldrb	r3, [r7, #15]
 8012026:	461a      	mov	r2, r3
 8012028:	7b39      	ldrb	r1, [r7, #12]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 f828 	bl	8012080 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8012030:	4603      	mov	r3, r0
 8012032:	73fb      	strb	r3, [r7, #15]
 8012034:	7bfb      	ldrb	r3, [r7, #15]
 8012036:	2b00      	cmp	r3, #0
 8012038:	bf14      	ite	ne
 801203a:	2301      	movne	r3, #1
 801203c:	2300      	moveq	r3, #0
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	d005      	beq.n	8012050 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8012044:	7bfb      	ldrb	r3, [r7, #15]
 8012046:	4619      	mov	r1, r3
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff ffd1 	bl	8011ff0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801204e:	e7e9      	b.n	8012024 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	79db      	ldrb	r3, [r3, #7]
 8012054:	7b3a      	ldrb	r2, [r7, #12]
 8012056:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801205a:	b2d2      	uxtb	r2, r2
 801205c:	4293      	cmp	r3, r2
 801205e:	d105      	bne.n	801206c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	79db      	ldrb	r3, [r3, #7]
 8012064:	3b01      	subs	r3, #1
 8012066:	b2da      	uxtb	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801206c:	78fb      	ldrb	r3, [r7, #3]
 801206e:	4619      	mov	r1, r3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff ff2d 	bl	8011ed0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012076:	e000      	b.n	801207a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012078:	bf00      	nop
        }
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012080:	b480      	push	{r7}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	7039      	strb	r1, [r7, #0]
 801208a:	4613      	mov	r3, r2
 801208c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801208e:	78fb      	ldrb	r3, [r7, #3]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d004      	beq.n	801209e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012094:	78fb      	ldrb	r3, [r7, #3]
 8012096:	2b0f      	cmp	r3, #15
 8012098:	d801      	bhi.n	801209e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801209a:	78fb      	ldrb	r3, [r7, #3]
 801209c:	e000      	b.n	80120a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801209e:	2301      	movs	r3, #1
 80120a0:	73fb      	strb	r3, [r7, #15]
 80120a2:	7bfb      	ldrb	r3, [r7, #15]
 80120a4:	2b0f      	cmp	r3, #15
 80120a6:	d816      	bhi.n	80120d6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80120a8:	7bfa      	ldrb	r2, [r7, #15]
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	4613      	mov	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	440b      	add	r3, r1
 80120b4:	3308      	adds	r3, #8
 80120b6:	791b      	ldrb	r3, [r3, #4]
 80120b8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	783b      	ldrb	r3, [r7, #0]
 80120c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d101      	bne.n	80120ce <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	e004      	b.n	80120d8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	3301      	adds	r3, #1
 80120d2:	73fb      	strb	r3, [r7, #15]
 80120d4:	e7e5      	b.n	80120a2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 80120d6:	2300      	movs	r3, #0
        };
 80120d8:	4618      	mov	r0, r3
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80120e4:	b480      	push	{r7}
 80120e6:	b085      	sub	sp, #20
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d101      	bne.n	80120fc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 80120f8:	2300      	movs	r3, #0
 80120fa:	e031      	b.n	8012160 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	791b      	ldrb	r3, [r3, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d022      	beq.n	801214a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	881b      	ldrh	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d01e      	beq.n	801214a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68f9      	ldr	r1, [r7, #12]
 8012116:	7949      	ldrb	r1, [r1, #5]
 8012118:	4608      	mov	r0, r1
 801211a:	68f9      	ldr	r1, [r7, #12]
 801211c:	7909      	ldrb	r1, [r1, #4]
 801211e:	1a41      	subs	r1, r0, r1
 8012120:	440b      	add	r3, r1
 8012122:	7812      	ldrb	r2, [r2, #0]
 8012124:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	791b      	ldrb	r3, [r3, #4]
 801212a:	3b01      	subs	r3, #1
 801212c:	b2da      	uxtb	r2, r3
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	711a      	strb	r2, [r3, #4]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	3b01      	subs	r3, #1
 8012138:	b29a      	uxth	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	801a      	strh	r2, [r3, #0]
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	1c5a      	adds	r2, r3, #1
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	e7d8      	b.n	80120fc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	791b      	ldrb	r3, [r3, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8012152:	2300      	movs	r3, #0
 8012154:	e004      	b.n	8012160 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	795a      	ldrb	r2, [r3, #5]
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	711a      	strb	r2, [r3, #4]
        return true;
 801215e:	2301      	movs	r3, #1
}
 8012160:	4618      	mov	r0, r3
 8012162:	3714      	adds	r7, #20
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr

0801216c <__cxa_pure_virtual>:
 801216c:	b508      	push	{r3, lr}
 801216e:	f000 f80d 	bl	801218c <_ZSt9terminatev>

08012172 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012172:	b508      	push	{r3, lr}
 8012174:	4780      	blx	r0
 8012176:	f000 f80e 	bl	8012196 <abort>
	...

0801217c <_ZSt13get_terminatev>:
 801217c:	4b02      	ldr	r3, [pc, #8]	; (8012188 <_ZSt13get_terminatev+0xc>)
 801217e:	6818      	ldr	r0, [r3, #0]
 8012180:	f3bf 8f5b 	dmb	ish
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	20000178 	.word	0x20000178

0801218c <_ZSt9terminatev>:
 801218c:	b508      	push	{r3, lr}
 801218e:	f7ff fff5 	bl	801217c <_ZSt13get_terminatev>
 8012192:	f7ff ffee 	bl	8012172 <_ZN10__cxxabiv111__terminateEPFvvE>

08012196 <abort>:
 8012196:	b508      	push	{r3, lr}
 8012198:	2006      	movs	r0, #6
 801219a:	f000 f86b 	bl	8012274 <raise>
 801219e:	2001      	movs	r0, #1
 80121a0:	f7ef fcc0 	bl	8001b24 <_exit>

080121a4 <__errno>:
 80121a4:	4b01      	ldr	r3, [pc, #4]	; (80121ac <__errno+0x8>)
 80121a6:	6818      	ldr	r0, [r3, #0]
 80121a8:	4770      	bx	lr
 80121aa:	bf00      	nop
 80121ac:	2000017c 	.word	0x2000017c

080121b0 <__libc_init_array>:
 80121b0:	b570      	push	{r4, r5, r6, lr}
 80121b2:	4d0d      	ldr	r5, [pc, #52]	; (80121e8 <__libc_init_array+0x38>)
 80121b4:	4c0d      	ldr	r4, [pc, #52]	; (80121ec <__libc_init_array+0x3c>)
 80121b6:	1b64      	subs	r4, r4, r5
 80121b8:	10a4      	asrs	r4, r4, #2
 80121ba:	2600      	movs	r6, #0
 80121bc:	42a6      	cmp	r6, r4
 80121be:	d109      	bne.n	80121d4 <__libc_init_array+0x24>
 80121c0:	4d0b      	ldr	r5, [pc, #44]	; (80121f0 <__libc_init_array+0x40>)
 80121c2:	4c0c      	ldr	r4, [pc, #48]	; (80121f4 <__libc_init_array+0x44>)
 80121c4:	f000 f884 	bl	80122d0 <_init>
 80121c8:	1b64      	subs	r4, r4, r5
 80121ca:	10a4      	asrs	r4, r4, #2
 80121cc:	2600      	movs	r6, #0
 80121ce:	42a6      	cmp	r6, r4
 80121d0:	d105      	bne.n	80121de <__libc_init_array+0x2e>
 80121d2:	bd70      	pop	{r4, r5, r6, pc}
 80121d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80121d8:	4798      	blx	r3
 80121da:	3601      	adds	r6, #1
 80121dc:	e7ee      	b.n	80121bc <__libc_init_array+0xc>
 80121de:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e2:	4798      	blx	r3
 80121e4:	3601      	adds	r6, #1
 80121e6:	e7f2      	b.n	80121ce <__libc_init_array+0x1e>
 80121e8:	080126e4 	.word	0x080126e4
 80121ec:	080126e4 	.word	0x080126e4
 80121f0:	080126e4 	.word	0x080126e4
 80121f4:	080126ec 	.word	0x080126ec

080121f8 <memcpy>:
 80121f8:	440a      	add	r2, r1
 80121fa:	4291      	cmp	r1, r2
 80121fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012200:	d100      	bne.n	8012204 <memcpy+0xc>
 8012202:	4770      	bx	lr
 8012204:	b510      	push	{r4, lr}
 8012206:	f811 4b01 	ldrb.w	r4, [r1], #1
 801220a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801220e:	4291      	cmp	r1, r2
 8012210:	d1f9      	bne.n	8012206 <memcpy+0xe>
 8012212:	bd10      	pop	{r4, pc}

08012214 <memset>:
 8012214:	4402      	add	r2, r0
 8012216:	4603      	mov	r3, r0
 8012218:	4293      	cmp	r3, r2
 801221a:	d100      	bne.n	801221e <memset+0xa>
 801221c:	4770      	bx	lr
 801221e:	f803 1b01 	strb.w	r1, [r3], #1
 8012222:	e7f9      	b.n	8012218 <memset+0x4>

08012224 <_raise_r>:
 8012224:	291f      	cmp	r1, #31
 8012226:	b538      	push	{r3, r4, r5, lr}
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	d904      	bls.n	8012238 <_raise_r+0x14>
 801222e:	2316      	movs	r3, #22
 8012230:	6003      	str	r3, [r0, #0]
 8012232:	f04f 30ff 	mov.w	r0, #4294967295
 8012236:	bd38      	pop	{r3, r4, r5, pc}
 8012238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801223a:	b112      	cbz	r2, 8012242 <_raise_r+0x1e>
 801223c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012240:	b94b      	cbnz	r3, 8012256 <_raise_r+0x32>
 8012242:	4620      	mov	r0, r4
 8012244:	f000 f830 	bl	80122a8 <_getpid_r>
 8012248:	462a      	mov	r2, r5
 801224a:	4601      	mov	r1, r0
 801224c:	4620      	mov	r0, r4
 801224e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012252:	f000 b817 	b.w	8012284 <_kill_r>
 8012256:	2b01      	cmp	r3, #1
 8012258:	d00a      	beq.n	8012270 <_raise_r+0x4c>
 801225a:	1c59      	adds	r1, r3, #1
 801225c:	d103      	bne.n	8012266 <_raise_r+0x42>
 801225e:	2316      	movs	r3, #22
 8012260:	6003      	str	r3, [r0, #0]
 8012262:	2001      	movs	r0, #1
 8012264:	e7e7      	b.n	8012236 <_raise_r+0x12>
 8012266:	2400      	movs	r4, #0
 8012268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801226c:	4628      	mov	r0, r5
 801226e:	4798      	blx	r3
 8012270:	2000      	movs	r0, #0
 8012272:	e7e0      	b.n	8012236 <_raise_r+0x12>

08012274 <raise>:
 8012274:	4b02      	ldr	r3, [pc, #8]	; (8012280 <raise+0xc>)
 8012276:	4601      	mov	r1, r0
 8012278:	6818      	ldr	r0, [r3, #0]
 801227a:	f7ff bfd3 	b.w	8012224 <_raise_r>
 801227e:	bf00      	nop
 8012280:	2000017c 	.word	0x2000017c

08012284 <_kill_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d07      	ldr	r5, [pc, #28]	; (80122a4 <_kill_r+0x20>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	4611      	mov	r1, r2
 8012290:	602b      	str	r3, [r5, #0]
 8012292:	f7ef fc37 	bl	8001b04 <_kill>
 8012296:	1c43      	adds	r3, r0, #1
 8012298:	d102      	bne.n	80122a0 <_kill_r+0x1c>
 801229a:	682b      	ldr	r3, [r5, #0]
 801229c:	b103      	cbz	r3, 80122a0 <_kill_r+0x1c>
 801229e:	6023      	str	r3, [r4, #0]
 80122a0:	bd38      	pop	{r3, r4, r5, pc}
 80122a2:	bf00      	nop
 80122a4:	200058f4 	.word	0x200058f4

080122a8 <_getpid_r>:
 80122a8:	f7ef bc24 	b.w	8001af4 <_getpid>

080122ac <strncmp>:
 80122ac:	b510      	push	{r4, lr}
 80122ae:	b16a      	cbz	r2, 80122cc <strncmp+0x20>
 80122b0:	3901      	subs	r1, #1
 80122b2:	1884      	adds	r4, r0, r2
 80122b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80122b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80122bc:	4293      	cmp	r3, r2
 80122be:	d103      	bne.n	80122c8 <strncmp+0x1c>
 80122c0:	42a0      	cmp	r0, r4
 80122c2:	d001      	beq.n	80122c8 <strncmp+0x1c>
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d1f5      	bne.n	80122b4 <strncmp+0x8>
 80122c8:	1a98      	subs	r0, r3, r2
 80122ca:	bd10      	pop	{r4, pc}
 80122cc:	4610      	mov	r0, r2
 80122ce:	e7fc      	b.n	80122ca <strncmp+0x1e>

080122d0 <_init>:
 80122d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d2:	bf00      	nop
 80122d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122d6:	bc08      	pop	{r3}
 80122d8:	469e      	mov	lr, r3
 80122da:	4770      	bx	lr

080122dc <_fini>:
 80122dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122de:	bf00      	nop
 80122e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122e2:	bc08      	pop	{r3}
 80122e4:	469e      	mov	lr, r3
 80122e6:	4770      	bx	lr
