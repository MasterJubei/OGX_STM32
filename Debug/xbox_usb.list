
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012428  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080125f8  080125f8  000225f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a3c  08012a3c  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08012a3c  08012a3c  00022a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a44  08012a44  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012a44  08012a44  00022a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a4c  08012a4c  00022a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08012a50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057b0  200001a4  08012bf4  000301a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005954  08012bf4  00035954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d43f  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086ae  00000000  00000000  0008d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00095cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  000981e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2e4  00000000  00000000  0009a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1f1  00000000  00000000  000c680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f577f  00000000  00000000  000f29fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e817c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b0  00000000  00000000  001e81d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080125e0 	.word	0x080125e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	080125e0 	.word	0x080125e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f005 f96c 	bl	8005a42 <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f005 f9ec 	bl	8005b66 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <_ZN5PrintC1Ev+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	080127cc 	.word	0x080127cc

08000804 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe4 	bl	80007dc <_ZN5PrintC1Ev>
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <_ZN6StreamC1Ev+0x28>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0801288c 	.word	0x0801288c

08000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffe1 	bl	8000804 <_ZN6StreamC1Ev>
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	611a      	str	r2, [r3, #16]
	};
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080127dc 	.word	0x080127dc

0800085c <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	4903      	ldr	r1, [pc, #12]	; (8000880 <_ZN2P910SetDirReadEv+0x24>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN2P910SetDirReadEv+0x28>)
 8000876:	f001 fc09 	bl	800208c <HAL_GPIO_Init>
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001c0 	.word	0x200001c0
 8000884:	40020800 	.word	0x40020800

08000888 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <_ZN3P103SetEv+0x14>)
 8000892:	f001 fda7 	bl	80023e4 <HAL_GPIO_WritePin>
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <_ZN3P105ClearEv>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	2200      	movs	r2, #0
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <_ZN3P105ClearEv+0x14>)
 80008aa:	f001 fd9b 	bl	80023e4 <HAL_GPIO_WritePin>
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020400 	.word	0x40020400

080008b8 <_ZN3P1011SetDirWriteEv>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	4902      	ldr	r1, [pc, #8]	; (80008e0 <_ZN3P1011SetDirWriteEv+0x28>)
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008d8:	f001 fbd8 	bl	800208c <HAL_GPIO_Init>
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001d4 	.word	0x200001d4
 80008e4:	40020400 	.word	0x40020400

080008e8 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2206      	movs	r2, #6
 8000902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffde 	bl	80008e8 <_ZN3BTD11pairWithHIDEv>
        };
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
                OnInitBTHID();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	331c      	adds	r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
        };
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	460b      	mov	r3, r1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	72fb      	strb	r3, [r7, #11]
                return;
 800096c:	bf00      	nop
        }
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_ZN9PS4ParserC1Ev+0x20>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                Reset();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f010 f80c 	bl	80109a4 <_ZN9PS4Parser5ResetEv>
        };
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08012880 	.word	0x08012880

0800099c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	70fb      	strb	r3, [r7, #3]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70bb      	strb	r3, [r7, #2]
 80009b2:	4613      	mov	r3, r2
 80009b4:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	78ba      	ldrb	r2, [r7, #2]
 80009c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	787a      	ldrb	r2, [r7, #1]
 80009ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	141b      	asrs	r3, r3, #16
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	121b      	asrs	r3, r3, #8
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffcd 	bl	800099c <_ZN9PS4Parser6setLedEhhh>
        };
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	f00e fdd8 	bl	800f5d8 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3378      	adds	r3, #120	; 0x78
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffa3 	bl	8000978 <_ZN9PS4ParserC1Ev>
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3378      	adds	r3, #120	; 0x78
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00f ffae 	bl	80109a4 <_ZN9PS4Parser5ResetEv>
        };
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08012844 	.word	0x08012844
 8000a58:	08012874 	.word	0x08012874

08000a5c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3378      	adds	r3, #120	; 0x78
 8000a86:	7af9      	ldrb	r1, [r7, #11]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00f fec5 	bl	801081a <_ZN9PS4Parser5ParseEhPh>
        };
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3378      	adds	r3, #120	; 0x78
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00f ff7d 	bl	80109a4 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f855 	bl	8000b5a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3378      	adds	r3, #120	; 0x78
 8000abc:	21ff      	movs	r1, #255	; 0xff
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff8f 	bl	80009e2 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3378      	adds	r3, #120	; 0x78
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00f ff63 	bl	80109a4 <_ZN9PS4Parser5ResetEv>
        };
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b096      	sub	sp, #88	; 0x58
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	224f      	movs	r2, #79	; 0x4f
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f011 fd13 	bl	8012524 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000afe:	2352      	movs	r3, #82	; 0x52
 8000b00:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b02:	2311      	movs	r3, #17
 8000b04:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	799b      	ldrb	r3, [r3, #6]
 8000b36:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	224f      	movs	r2, #79	; 0x4f
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f81a 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b54:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000b58:	e7c5      	b.n	8000ae6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000b5a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000b62:	2343      	movs	r3, #67	; 0x43
 8000b64:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000b66:	2302      	movs	r3, #2
 8000b68:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4619      	mov	r1, r3
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f804 	bl	8000b80 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6898      	ldr	r0, [r3, #8]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	8999      	ldrh	r1, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	7d9b      	ldrb	r3, [r3, #22]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	7dd2      	ldrb	r2, [r2, #23]
 8000b9e:	79fc      	ldrb	r4, [r7, #7]
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f00d fdb2 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 f920 	bl	8001dfc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f8ac 	bl	8000d18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f9d6 	bl	8000f70 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000bc4:	f000 f9a6 	bl	8000f14 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000bc8:	f000 f968 	bl	8000e9c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000bcc:	f00a feee 	bl	800b9ac <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000bd0:	f000 f93a 	bl	8000e48 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000bd4:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <main+0x108>)
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <main+0x10c>)
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2358      	movs	r3, #88	; 0x58
 8000bde:	461a      	mov	r2, r3
 8000be0:	f011 fc92 	bl	8012508 <memcpy>
  UART_Handle = huart2;
 8000be4:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <main+0x110>)
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <main+0x114>)
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	2344      	movs	r3, #68	; 0x44
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f011 fc8a 	bl	8012508 <memcpy>



  HAL_TIM_Base_Start_IT(&htim14);
 8000bf4:	4835      	ldr	r0, [pc, #212]	; (8000ccc <main+0x118>)
 8000bf6:	f004 fc83 	bl	8005500 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000bfa:	4935      	ldr	r1, [pc, #212]	; (8000cd0 <main+0x11c>)
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <main+0x120>)
 8000bfe:	f7ff fccd 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c02:	f002 fea5 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <main+0x124>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <main+0x128>)
 8000c12:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <main+0x128>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <main+0x120>)
 8000c1e:	f7ff fceb 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <main+0x12c>)
 8000c24:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <main+0x120>)
 8000c26:	f7ff fcc7 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c2a:	492e      	ldr	r1, [pc, #184]	; (8000ce4 <main+0x130>)
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <main+0x120>)
 8000c2e:	f7ff fcc3 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <main+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <main+0x134>)
 8000c3c:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500); //500ms
 8000c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c42:	f001 f91d 	bl	8001e80 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <main+0x118>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <main+0x134>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <main+0x138>)
 8000c58:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000c5a:	4925      	ldr	r1, [pc, #148]	; (8000cf0 <main+0x13c>)
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <main+0x120>)
 8000c5e:	f7ff fcab 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <main+0x138>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <main+0x140>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	220a      	movs	r2, #10
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <main+0x120>)
 8000c76:	f7ff fcbf 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000c7a:	491f      	ldr	r1, [pc, #124]	; (8000cf8 <main+0x144>)
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <main+0x120>)
 8000c7e:	f7ff fc9b 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0x148>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	220a      	movs	r2, #10
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <main+0x120>)
 8000c8c:	f7ff fcb4 	bl	80005f8 <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000c90:	f008 f93c 	bl	8008f0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <main+0x14c>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <main+0x150>)
 8000c9a:	f008 f981 	bl	8008fa0 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <main+0x154>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <main+0x158>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <main+0x15c>)
 8000caa:	f008 f979 	bl	8008fa0 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <main+0x160>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f008 f94e 	bl	8008f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <main+0x104>
 8000cba:	bf00      	nop
 8000cbc:	200002d4 	.word	0x200002d4
 8000cc0:	200001e8 	.word	0x200001e8
 8000cc4:	2000032c 	.word	0x2000032c
 8000cc8:	20000240 	.word	0x20000240
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	08012608 	.word	0x08012608
 8000cd4:	20000370 	.word	0x20000370
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	20000628 	.word	0x20000628
 8000ce0:	08012620 	.word	0x08012620
 8000ce4:	08012624 	.word	0x08012624
 8000ce8:	2000062c 	.word	0x2000062c
 8000cec:	2000062e 	.word	0x2000062e
 8000cf0:	0801262c 	.word	0x0801262c
 8000cf4:	cccccccd 	.word	0xcccccccd
 8000cf8:	08012640 	.word	0x08012640
 8000cfc:	20000630 	.word	0x20000630
 8000d00:	080127f4 	.word	0x080127f4
 8000d04:	08001025 	.word	0x08001025
 8000d08:	200002cc 	.word	0x200002cc
 8000d0c:	08012818 	.word	0x08012818
 8000d10:	0800170d 	.word	0x0800170d
 8000d14:	200002d0 	.word	0x200002d0

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d22:	2234      	movs	r2, #52	; 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f011 fbfc 	bl	8012524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	225c      	movs	r2, #92	; 0x5c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f011 fbed 	bl	8012524 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <SystemClock_Config+0x128>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <SystemClock_Config+0x128>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <SystemClock_Config+0x128>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <SystemClock_Config+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000da2:	23a8      	movs	r3, #168	; 0xa8
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fb08 	bl	80043d4 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd4:	f000 fcc0 	bl	8001758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000df4:	2105      	movs	r1, #5
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fcc4 	bl	8003784 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e0c:	f000 fca4 	bl	8001758 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e16:	2300      	movs	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fdfc 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e34:	f000 fc90 	bl	8001758 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	37b0      	adds	r7, #176	; 0xb0
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_ZL13MX_TIM14_Initv+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e54:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e58:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e62:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <_ZL13MX_TIM14_Initv+0x4c>)
 8000e76:	f004 faf3 	bl	8005460 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000e8a:	f000 fc65 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000284 	.word	0x20000284
 8000e98:	40002000 	.word	0x40002000

08000e9c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <_ZL12MX_SPI1_Initv+0x74>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed0:	2218      	movs	r2, #24
 8000ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <_ZL12MX_SPI1_Initv+0x70>)
 8000eee:	f003 fd0f 	bl	8004910 <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f02:	f000 fc29 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001e8 	.word	0x200001e8
 8000f10:	40013000 	.word	0x40013000

08000f14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f4c:	f004 fd2c 	bl	80059a8 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000f60:	f000 fbfa 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000240 	.word	0x20000240
 8000f6c:	40004400 	.word	0x40004400

08000f70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_ZL12MX_GPIO_Initv+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <_ZL12MX_GPIO_Initv+0xac>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <_ZL12MX_GPIO_Initv+0xb0>)
 800100c:	f001 f83e 	bl	800208c <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	10210000 	.word	0x10210000
 8001020:	40020800 	.word	0x40020800

08001024 <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 800102c:	4894      	ldr	r0, [pc, #592]	; (8001280 <_Z10StartGetBTPv+0x25c>)
 800102e:	f000 fba1 	bl	8001774 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001032:	4603      	mov	r3, r0
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001044:	498f      	ldr	r1, [pc, #572]	; (8001284 <_Z10StartGetBTPv+0x260>)
 8001046:	4890      	ldr	r0, [pc, #576]	; (8001288 <_Z10StartGetBTPv+0x264>)
 8001048:	f7ff faa8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 800104c:	e7fe      	b.n	800104c <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800104e:	498f      	ldr	r1, [pc, #572]	; (800128c <_Z10StartGetBTPv+0x268>)
 8001050:	488d      	ldr	r0, [pc, #564]	; (8001288 <_Z10StartGetBTPv+0x264>)
 8001052:	f7ff faa3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 8001056:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001058:	2200      	movs	r2, #0
 800105a:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 800105c:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001062:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001068:	4b89      	ldr	r3, [pc, #548]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001074:	4b86      	ldr	r3, [pc, #536]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001076:	2200      	movs	r2, #0
 8001078:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800107a:	4a85      	ldr	r2, [pc, #532]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 800107c:	7993      	ldrb	r3, [r2, #6]
 800107e:	f36f 0300 	bfc	r3, #0, #1
 8001082:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001084:	4b83      	ldr	r3, [pc, #524]	; (8001294 <_Z10StartGetBTPv+0x270>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800108a:	4b82      	ldr	r3, [pc, #520]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800108c:	2214      	movs	r2, #20
 800108e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001090:	4b80      	ldr	r3, [pc, #512]	; (8001294 <_Z10StartGetBTPv+0x270>)
 8001092:	2200      	movs	r2, #0
 8001094:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <_Z10StartGetBTPv+0x270>)
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800109c:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800109e:	2200      	movs	r2, #0
 80010a0:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 80010a2:	4b7c      	ldr	r3, [pc, #496]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 80010a8:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 80010ae:	4b79      	ldr	r3, [pc, #484]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 80010b4:	4b77      	ldr	r3, [pc, #476]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010bc:	2200      	movs	r2, #0
 80010be:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 80010c0:	4b74      	ldr	r3, [pc, #464]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 80010cc:	4b71      	ldr	r3, [pc, #452]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 80010d8:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <_Z10StartGetBTPv+0x270>)
 80010da:	2200      	movs	r2, #0
 80010dc:	825a      	strh	r2, [r3, #18]
  {

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	    if(entered_xid_req) {
 80010de:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <_Z10StartGetBTPv+0x274>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <_Z10StartGetBTPv+0xca>
		    Serial.print("\r\nEntered xid req");
 80010e6:	496d      	ldr	r1, [pc, #436]	; (800129c <_Z10StartGetBTPv+0x278>)
 80010e8:	4867      	ldr	r0, [pc, #412]	; (8001288 <_Z10StartGetBTPv+0x264>)
 80010ea:	f7ff fa65 	bl	80005b8 <_ZN5Print5printEPKc>
	    }
		if(unknown_bmrequest) {
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <_Z10StartGetBTPv+0x27c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <_Z10StartGetBTPv+0xda>
			Serial.print("\r\nUnknown bmrequest");
 80010f6:	496b      	ldr	r1, [pc, #428]	; (80012a4 <_Z10StartGetBTPv+0x280>)
 80010f8:	4863      	ldr	r0, [pc, #396]	; (8001288 <_Z10StartGetBTPv+0x264>)
 80010fa:	f7ff fa5d 	bl	80005b8 <_ZN5Print5printEPKc>
		}
		if(hid_setup_ran > 0) {
 80010fe:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <_Z10StartGetBTPv+0x284>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <_Z10StartGetBTPv+0xfa>
			Serial.print("\r\nHey the xid code ran ");
 8001106:	4969      	ldr	r1, [pc, #420]	; (80012ac <_Z10StartGetBTPv+0x288>)
 8001108:	485f      	ldr	r0, [pc, #380]	; (8001288 <_Z10StartGetBTPv+0x264>)
 800110a:	f7ff fa55 	bl	80005b8 <_ZN5Print5printEPKc>
			Serial.print("\r\n");
 800110e:	4968      	ldr	r1, [pc, #416]	; (80012b0 <_Z10StartGetBTPv+0x28c>)
 8001110:	485d      	ldr	r0, [pc, #372]	; (8001288 <_Z10StartGetBTPv+0x264>)
 8001112:	f7ff fa51 	bl	80005b8 <_ZN5Print5printEPKc>
			Serial.print(caller_str);
 8001116:	4967      	ldr	r1, [pc, #412]	; (80012b4 <_Z10StartGetBTPv+0x290>)
 8001118:	485b      	ldr	r0, [pc, #364]	; (8001288 <_Z10StartGetBTPv+0x264>)
 800111a:	f7ff fa4d 	bl	80005b8 <_ZN5Print5printEPKc>
		}
		if(usb_failed || usb_failed2) {
 800111e:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <_Z10StartGetBTPv+0x294>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <_Z10StartGetBTPv+0x10a>
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <_Z10StartGetBTPv+0x298>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <_Z10StartGetBTPv+0x112>
			Serial.print("\r\nUSBd failed");
 800112e:	4964      	ldr	r1, [pc, #400]	; (80012c0 <_Z10StartGetBTPv+0x29c>)
 8001130:	4855      	ldr	r0, [pc, #340]	; (8001288 <_Z10StartGetBTPv+0x264>)
 8001132:	f7ff fa41 	bl	80005b8 <_ZN5Print5printEPKc>
		}
		Usb.Task();
 8001136:	4852      	ldr	r0, [pc, #328]	; (8001280 <_Z10StartGetBTPv+0x25c>)
 8001138:	f010 f972 	bl	8011420 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 800113c:	4861      	ldr	r0, [pc, #388]	; (80012c4 <_Z10StartGetBTPv+0x2a0>)
 800113e:	f7ff fc8d 	bl	8000a5c <_ZN5PS4BT9connectedEv>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 82aa 	beq.w	800169e <_Z10StartGetBTPv+0x67a>
			ps4_connected = 1;
 800114a:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <_Z10StartGetBTPv+0x2a4>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001150:	2100      	movs	r1, #0
 8001152:	485e      	ldr	r0, [pc, #376]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 8001154:	f00f fb51 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <_Z10StartGetBTPv+0x2ac>)
 800115e:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001160:	2101      	movs	r1, #1
 8001162:	485a      	ldr	r0, [pc, #360]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 8001164:	f00f fb49 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <_Z10StartGetBTPv+0x2b0>)
 800116e:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001170:	2102      	movs	r1, #2
 8001172:	4856      	ldr	r0, [pc, #344]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 8001174:	f00f fb41 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <_Z10StartGetBTPv+0x2b4>)
 800117e:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001180:	2103      	movs	r1, #3
 8001182:	4852      	ldr	r0, [pc, #328]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 8001184:	f00f fb39 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <_Z10StartGetBTPv+0x2b8>)
 800118e:	701a      	strb	r2, [r3, #0]

			/* Let's have a builtin deadzone */
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <_Z10StartGetBTPv+0x2ac>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b89      	cmp	r3, #137	; 0x89
 8001196:	d81c      	bhi.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <_Z10StartGetBTPv+0x2ac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b74      	cmp	r3, #116	; 0x74
 800119e:	d918      	bls.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <_Z10StartGetBTPv+0x2b0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b89      	cmp	r3, #137	; 0x89
 80011a6:	d814      	bhi.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <_Z10StartGetBTPv+0x2b0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b74      	cmp	r3, #116	; 0x74
 80011ae:	d910      	bls.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <_Z10StartGetBTPv+0x2b4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b89      	cmp	r3, #137	; 0x89
 80011b6:	d80c      	bhi.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <_Z10StartGetBTPv+0x2b4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b74      	cmp	r3, #116	; 0x74
 80011be:	d908      	bls.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <_Z10StartGetBTPv+0x2b8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b89      	cmp	r3, #137	; 0x89
 80011c6:	d804      	bhi.n	80011d2 <_Z10StartGetBTPv+0x1ae>
 80011c8:	4b44      	ldr	r3, [pc, #272]	; (80012dc <_Z10StartGetBTPv+0x2b8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b74      	cmp	r3, #116	; 0x74
 80011ce:	f200 8087 	bhi.w	80012e0 <_Z10StartGetBTPv+0x2bc>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80011d2:	2100      	movs	r1, #0
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 80011d6:	f00f fb10 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011da:	4603      	mov	r3, r0
 80011dc:	3b80      	subs	r3, #128	; 0x80
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 80011e4:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80011e6:	2101      	movs	r1, #1
 80011e8:	4838      	ldr	r0, [pc, #224]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 80011ea:	f00f fb06 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011ee:	4603      	mov	r3, r0
 80011f0:	3b80      	subs	r3, #128	; 0x80
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 80011f8:	70da      	strb	r2, [r3, #3]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80011fa:	2102      	movs	r1, #2
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 80011fe:	f00f fafc 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001202:	4603      	mov	r3, r0
 8001204:	3b80      	subs	r3, #128	; 0x80
 8001206:	b2db      	uxtb	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 800120c:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 800120e:	2103      	movs	r1, #3
 8001210:	482e      	ldr	r0, [pc, #184]	; (80012cc <_Z10StartGetBTPv+0x2a8>)
 8001212:	f00f faf2 	bl	80107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001216:	4603      	mov	r3, r0
 8001218:	3b80      	subs	r3, #128	; 0x80
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001220:	715a      	strb	r2, [r3, #5]

				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001224:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800122e:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001232:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800123c:	81da      	strh	r2, [r3, #14]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 8001240:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800124a:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = gameHID.Joy2Y << 8;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_Z10StartGetBTPv+0x26c>)
 800124e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_Z10StartGetBTPv+0x270>)
 8001258:	825a      	strh	r2, [r3, #18]

				/* The Y axis by default is inverted on the Xbox */
				xboxHID.leftStickY = -xboxHID.leftStickY;	//xbox uses 16 bit signed
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800125c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001260:	b29b      	uxth	r3, r3
 8001262:	425b      	negs	r3, r3
 8001264:	b29b      	uxth	r3, r3
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800126a:	81da      	strh	r2, [r3, #14]
				xboxHID.rightStickY = -xboxHID.rightStickY;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800126e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001272:	b29b      	uxth	r3, r3
 8001274:	425b      	negs	r3, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <_Z10StartGetBTPv+0x270>)
 800127c:	825a      	strh	r2, [r3, #18]
 800127e:	e047      	b.n	8001310 <_Z10StartGetBTPv+0x2ec>
 8001280:	20000384 	.word	0x20000384
 8001284:	08012644 	.word	0x08012644
 8001288:	20000370 	.word	0x20000370
 800128c:	08012658 	.word	0x08012658
 8001290:	20000634 	.word	0x20000634
 8001294:	2000063c 	.word	0x2000063c
 8001298:	20000654 	.word	0x20000654
 800129c:	08012678 	.word	0x08012678
 80012a0:	20000653 	.word	0x20000653
 80012a4:	0801268c 	.word	0x0801268c
 80012a8:	20000651 	.word	0x20000651
 80012ac:	080126a0 	.word	0x080126a0
 80012b0:	080126b8 	.word	0x080126b8
 80012b4:	20004fd4 	.word	0x20004fd4
 80012b8:	20000652 	.word	0x20000652
 80012bc:	20004f68 	.word	0x20004f68
 80012c0:	080126bc 	.word	0x080126bc
 80012c4:	20000558 	.word	0x20000558
 80012c8:	20000621 	.word	0x20000621
 80012cc:	200005d0 	.word	0x200005d0
 80012d0:	20000622 	.word	0x20000622
 80012d4:	20000623 	.word	0x20000623
 80012d8:	20000624 	.word	0x20000624
 80012dc:	20000625 	.word	0x20000625

			} else {
				gameHID.JoyX = 0;
 80012e0:	4bb7      	ldr	r3, [pc, #732]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = 0;
 80012e6:	4bb6      	ldr	r3, [pc, #728]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	70da      	strb	r2, [r3, #3]
				gameHID.Joy2X = 0;
 80012ec:	4bb4      	ldr	r3, [pc, #720]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = 0;
 80012f2:	4bb3      	ldr	r3, [pc, #716]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	715a      	strb	r2, [r3, #5]

				xboxHID.leftStickX = 0;
 80012f8:	4bb2      	ldr	r3, [pc, #712]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = 0;
 80012fe:	4bb1      	ldr	r3, [pc, #708]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001300:	2200      	movs	r2, #0
 8001302:	81da      	strh	r2, [r3, #14]
				xboxHID.rightStickX = 0;
 8001304:	4baf      	ldr	r3, [pc, #700]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001306:	2200      	movs	r2, #0
 8001308:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = 0;
 800130a:	4bae      	ldr	r3, [pc, #696]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800130c:	2200      	movs	r2, #0
 800130e:	825a      	strh	r2, [r3, #18]
			}


			xboxHID.L = PS4.getAnalogButton(L2);
 8001310:	2108      	movs	r1, #8
 8001312:	48ad      	ldr	r0, [pc, #692]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001314:	f00f fa58 	bl	80107c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4ba9      	ldr	r3, [pc, #676]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800131e:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001320:	2109      	movs	r1, #9
 8001322:	48a9      	ldr	r0, [pc, #676]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001324:	f00f fa50 	bl	80107c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4ba5      	ldr	r3, [pc, #660]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800132e:	72da      	strb	r2, [r3, #11]

			gameHID.Joy_LT = xboxHID.L - 128;
 8001330:	4ba4      	ldr	r3, [pc, #656]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001332:	7a9b      	ldrb	r3, [r3, #10]
 8001334:	3b80      	subs	r3, #128	; 0x80
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b25a      	sxtb	r2, r3
 800133a:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800133c:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 800133e:	4ba1      	ldr	r3, [pc, #644]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001340:	7adb      	ldrb	r3, [r3, #11]
 8001342:	3b80      	subs	r3, #128	; 0x80
 8001344:	b2db      	uxtb	r3, r3
 8001346:	b25a      	sxtb	r2, r3
 8001348:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800134a:	705a      	strb	r2, [r3, #1]

			//Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 800134c:	2110      	movs	r1, #16
 800134e:	489e      	ldr	r0, [pc, #632]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001350:	f00f f9fa 	bl	8010748 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <_Z10StartGetBTPv+0x342>
				gameHID.ps4ButtonsTag.button_ps = 1;
 800135a:	4a99      	ldr	r2, [pc, #612]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800135c:	7993      	ldrb	r3, [r2, #6]
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	7193      	strb	r3, [r2, #6]
 8001364:	e004      	b.n	8001370 <_Z10StartGetBTPv+0x34c>
			} else {
				gameHID.ps4ButtonsTag.button_ps = 0;
 8001366:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001368:	7993      	ldrb	r3, [r2, #6]
 800136a:	f36f 0341 	bfc	r3, #1, #1
 800136e:	7193      	strb	r3, [r2, #6]
			}

			if (PS4.getButtonPress(TRIANGLE)) {
 8001370:	210c      	movs	r1, #12
 8001372:	4895      	ldr	r0, [pc, #596]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001374:	f00f f9c0 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <_Z10StartGetBTPv+0x36c>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 800137e:	4a90      	ldr	r2, [pc, #576]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001380:	79d3      	ldrb	r3, [r2, #7]
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 8001388:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	71da      	strb	r2, [r3, #7]
 800138e:	e007      	b.n	80013a0 <_Z10StartGetBTPv+0x37c>
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 8001390:	4a8b      	ldr	r2, [pc, #556]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001392:	79d3      	ldrb	r3, [r2, #7]
 8001394:	f36f 0300 	bfc	r3, #0, #1
 8001398:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 800139a:	4b8a      	ldr	r3, [pc, #552]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800139c:	2200      	movs	r2, #0
 800139e:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 80013a0:	210d      	movs	r1, #13
 80013a2:	4889      	ldr	r0, [pc, #548]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 80013a4:	f00f f9a8 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <_Z10StartGetBTPv+0x39c>
				gameHID.ps4ButtonsTag.button_circle = 1;
 80013ae:	4a84      	ldr	r2, [pc, #528]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80013b0:	7993      	ldrb	r3, [r2, #6]
 80013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b6:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 80013b8:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	715a      	strb	r2, [r3, #5]
 80013be:	e007      	b.n	80013d0 <_Z10StartGetBTPv+0x3ac>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 80013c0:	4a7f      	ldr	r2, [pc, #508]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80013c2:	7993      	ldrb	r3, [r2, #6]
 80013c4:	f36f 13c7 	bfc	r3, #7, #1
 80013c8:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 80013ca:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 80013d0:	210e      	movs	r1, #14
 80013d2:	487d      	ldr	r0, [pc, #500]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 80013d4:	f00f f990 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <_Z10StartGetBTPv+0x3cc>
				gameHID.ps4ButtonsTag.button_cross = 1;
 80013de:	4a78      	ldr	r2, [pc, #480]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80013e0:	7993      	ldrb	r3, [r2, #6]
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	711a      	strb	r2, [r3, #4]
 80013ee:	e007      	b.n	8001400 <_Z10StartGetBTPv+0x3dc>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 80013f0:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80013f2:	7993      	ldrb	r3, [r2, #6]
 80013f4:	f36f 1386 	bfc	r3, #6, #1
 80013f8:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001400:	210f      	movs	r1, #15
 8001402:	4871      	ldr	r0, [pc, #452]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001404:	f00f f978 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <_Z10StartGetBTPv+0x3fc>
				gameHID.ps4ButtonsTag.button_square = 1;
 800140e:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001410:	79d3      	ldrb	r3, [r2, #7]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	719a      	strb	r2, [r3, #6]
 800141e:	e007      	b.n	8001430 <_Z10StartGetBTPv+0x40c>
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001422:	79d3      	ldrb	r3, [r2, #7]
 8001424:	f36f 0341 	bfc	r3, #1, #1
 8001428:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800142c:	2200      	movs	r2, #0
 800142e:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 8001430:	2100      	movs	r1, #0
 8001432:	4865      	ldr	r0, [pc, #404]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001434:	f00f f960 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00c      	beq.n	8001458 <_Z10StartGetBTPv+0x434>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001440:	79d3      	ldrb	r3, [r2, #7]
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001454:	709a      	strb	r2, [r3, #2]
 8001456:	e00b      	b.n	8001470 <_Z10StartGetBTPv+0x44c>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001458:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800145a:	79d3      	ldrb	r3, [r2, #7]
 800145c:	f36f 0382 	bfc	r3, #2, #1
 8001460:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001464:	789b      	ldrb	r3, [r3, #2]
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800146e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 8001470:	2101      	movs	r1, #1
 8001472:	4855      	ldr	r0, [pc, #340]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001474:	f00f f940 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <_Z10StartGetBTPv+0x474>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 800147e:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001480:	79d3      	ldrb	r3, [r2, #7]
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 8001488:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001494:	709a      	strb	r2, [r3, #2]
 8001496:	e00b      	b.n	80014b0 <_Z10StartGetBTPv+0x48c>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800149a:	79d3      	ldrb	r3, [r2, #7]
 800149c:	f36f 03c3 	bfc	r3, #3, #1
 80014a0:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 80014a2:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	f023 0308 	bic.w	r3, r3, #8
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014ae:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 80014b0:	2102      	movs	r1, #2
 80014b2:	4845      	ldr	r0, [pc, #276]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 80014b4:	f00f f920 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <_Z10StartGetBTPv+0x4b4>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80014c0:	79d3      	ldrb	r3, [r2, #7]
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014d4:	709a      	strb	r2, [r3, #2]
 80014d6:	e00b      	b.n	80014f0 <_Z10StartGetBTPv+0x4cc>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80014d8:	4a39      	ldr	r2, [pc, #228]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80014da:	79d3      	ldrb	r3, [r2, #7]
 80014dc:	f36f 1345 	bfc	r3, #5, #1
 80014e0:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80014ee:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 80014f0:	2103      	movs	r1, #3
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 80014f4:	f00f f900 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <_Z10StartGetBTPv+0x4f4>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80014fe:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001500:	79d3      	ldrb	r3, [r2, #7]
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001514:	709a      	strb	r2, [r3, #2]
 8001516:	e00b      	b.n	8001530 <_Z10StartGetBTPv+0x50c>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001518:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800151a:	79d3      	ldrb	r3, [r2, #7]
 800151c:	f36f 1304 	bfc	r3, #4, #1
 8001520:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800152e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 8001530:	210a      	movs	r1, #10
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001534:	f00f f8e0 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <_Z10StartGetBTPv+0x52c>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800153e:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001540:	7993      	ldrb	r3, [r2, #6]
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	721a      	strb	r2, [r3, #8]
 800154e:	e007      	b.n	8001560 <_Z10StartGetBTPv+0x53c>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001552:	7993      	ldrb	r3, [r2, #6]
 8001554:	f36f 1345 	bfc	r3, #5, #1
 8001558:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(L3)) {
 8001560:	2106      	movs	r1, #6
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 8001564:	f00f f8c8 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <_Z10StartGetBTPv+0x564>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 8001570:	79d3      	ldrb	r3, [r2, #7]
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001584:	709a      	strb	r2, [r3, #2]
 8001586:	e00b      	b.n	80015a0 <_Z10StartGetBTPv+0x57c>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 800158a:	79d3      	ldrb	r3, [r2, #7]
 800158c:	f36f 1386 	bfc	r3, #6, #1
 8001590:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 800159e:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 80015a0:	210b      	movs	r1, #11
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <_Z10StartGetBTPv+0x5a4>)
 80015a4:	f00f f8a8 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00e      	beq.n	80015cc <_Z10StartGetBTPv+0x5a8>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <_Z10StartGetBTPv+0x59c>)
 80015b0:	7993      	ldrb	r3, [r2, #6]
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <_Z10StartGetBTPv+0x5a0>)
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	725a      	strb	r2, [r3, #9]
 80015be:	e00d      	b.n	80015dc <_Z10StartGetBTPv+0x5b8>
 80015c0:	20000634 	.word	0x20000634
 80015c4:	2000063c 	.word	0x2000063c
 80015c8:	200005d0 	.word	0x200005d0
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80015cc:	4a47      	ldr	r2, [pc, #284]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 80015ce:	7993      	ldrb	r3, [r2, #6]
 80015d0:	f36f 1304 	bfc	r3, #4, #1
 80015d4:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(R3)) {
 80015dc:	2107      	movs	r1, #7
 80015de:	4845      	ldr	r0, [pc, #276]	; (80016f4 <_Z10StartGetBTPv+0x6d0>)
 80015e0:	f00f f88a 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <_Z10StartGetBTPv+0x5e0>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 80015ec:	79d3      	ldrb	r3, [r2, #7]
 80015ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f2:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001600:	709a      	strb	r2, [r3, #2]
 8001602:	e00b      	b.n	800161c <_Z10StartGetBTPv+0x5f8>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001604:	4a39      	ldr	r2, [pc, #228]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 8001606:	79d3      	ldrb	r3, [r2, #7]
 8001608:	f36f 13c7 	bfc	r3, #7, #1
 800160c:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001610:	789b      	ldrb	r3, [r3, #2]
 8001612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 800161a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 800161c:	2104      	movs	r1, #4
 800161e:	4835      	ldr	r0, [pc, #212]	; (80016f4 <_Z10StartGetBTPv+0x6d0>)
 8001620:	f00f f86a 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00c      	beq.n	8001644 <_Z10StartGetBTPv+0x620>
				gameHID.ps4ButtonsTag.button_share = 1;
 800162a:	4a30      	ldr	r2, [pc, #192]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 800162c:	7993      	ldrb	r3, [r2, #6]
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001640:	709a      	strb	r2, [r3, #2]
 8001642:	e00b      	b.n	800165c <_Z10StartGetBTPv+0x638>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 8001644:	4a29      	ldr	r2, [pc, #164]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 8001646:	7993      	ldrb	r3, [r2, #6]
 8001648:	f36f 03c3 	bfc	r3, #3, #1
 800164c:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001650:	789b      	ldrb	r3, [r3, #2]
 8001652:	f023 0320 	bic.w	r3, r3, #32
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 800165a:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 800165c:	2105      	movs	r1, #5
 800165e:	4825      	ldr	r0, [pc, #148]	; (80016f4 <_Z10StartGetBTPv+0x6d0>)
 8001660:	f00f f84a 	bl	80106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <_Z10StartGetBTPv+0x660>
				gameHID.ps4ButtonsTag.button_start = 1;
 800166a:	4a20      	ldr	r2, [pc, #128]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 800166c:	7993      	ldrb	r3, [r2, #6]
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001680:	709a      	strb	r2, [r3, #2]
 8001682:	e02e      	b.n	80016e2 <_Z10StartGetBTPv+0x6be>
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <_Z10StartGetBTPv+0x6c8>)
 8001686:	7993      	ldrb	r3, [r2, #6]
 8001688:	f36f 0382 	bfc	r3, #2, #1
 800168c:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 8001690:	789b      	ldrb	r3, [r3, #2]
 8001692:	f023 0310 	bic.w	r3, r3, #16
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <_Z10StartGetBTPv+0x6cc>)
 800169a:	709a      	strb	r2, [r3, #2]
 800169c:	e021      	b.n	80016e2 <_Z10StartGetBTPv+0x6be>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800169e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a2:	4815      	ldr	r0, [pc, #84]	; (80016f8 <_Z10StartGetBTPv+0x6d4>)
 80016a4:	f000 fe86 	bl	80023b4 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf0c      	ite	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	2300      	movne	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d011      	beq.n	80016dc <_Z10StartGetBTPv+0x6b8>
			if (!buttonPressed) {
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_Z10StartGetBTPv+0x6d8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d006      	beq.n	80016d4 <_Z10StartGetBTPv+0x6b0>
				Serial.print(F("\r\nButton Pressed"));
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <_Z10StartGetBTPv+0x6dc>)
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <_Z10StartGetBTPv+0x6e0>)
 80016ca:	f7fe ff67 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <_Z10StartGetBTPv+0x6e4>)
 80016d0:	f7ff f91f 	bl	8000912 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <_Z10StartGetBTPv+0x6d8>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e002      	b.n	80016e2 <_Z10StartGetBTPv+0x6be>
		} else
			buttonPressed = false;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_Z10StartGetBTPv+0x6d8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f007 fcee 	bl	80090c4 <osDelay>
	    if(entered_xid_req) {
 80016e8:	e4f9      	b.n	80010de <_Z10StartGetBTPv+0xba>
 80016ea:	bf00      	nop
 80016ec:	20000634 	.word	0x20000634
 80016f0:	2000063c 	.word	0x2000063c
 80016f4:	200005d0 	.word	0x200005d0
 80016f8:	40020800 	.word	0x40020800
 80016fc:	20000620 	.word	0x20000620
 8001700:	080126cc 	.word	0x080126cc
 8001704:	20000370 	.word	0x20000370
 8001708:	20000558 	.word	0x20000558

0800170c <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001714:	f00a f94a 	bl	800b9ac <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001718:	2214      	movs	r2, #20
 800171a:	4904      	ldr	r1, [pc, #16]	; (800172c <_Z12StartSendUSBPv+0x20>)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <_Z12StartSendUSBPv+0x24>)
 800171e:	f006 f997 	bl	8007a50 <USBD_HID_SendReport>
#endif
    osDelay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f007 fcce 	bl	80090c4 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001728:	e7f6      	b.n	8001718 <_Z12StartSendUSBPv+0xc>
 800172a:	bf00      	nop
 800172c:	2000063c 	.word	0x2000063c
 8001730:	20005078 	.word	0x20005078

08001734 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001746:	f000 fb7b 	bl	8001e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40001c00 	.word	0x40001c00

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 800175c:	4903      	ldr	r1, [pc, #12]	; (800176c <Error_Handler+0x14>)
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <Error_Handler+0x18>)
 8001760:	f7fe ff2a 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x10>
 800176a:	bf00      	nop
 800176c:	080126e0 	.word	0x080126e0
 8001770:	20000370 	.word	0x20000370

08001774 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800177c:	f7ff f89c 	bl	80008b8 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001780:	f7ff f882 	bl	8000888 <_ZN3P103SetEv>
        spi::init();
 8001784:	f000 f845 	bl	8001812 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001788:	f7ff f868 	bl	800085c <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800178c:	2218      	movs	r2, #24
 800178e:	2188      	movs	r1, #136	; 0x88
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f845 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f864 	bl	8001864 <_ZN8MAX3421eI3P102P9E5resetEv>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	e02b      	b.n	800180a <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80017b2:	22c1      	movs	r2, #193	; 0xc1
 80017b4:	21d8      	movs	r1, #216	; 0xd8
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f832 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80017bc:	2260      	movs	r2, #96	; 0x60
 80017be:	21d0      	movs	r1, #208	; 0xd0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f82d 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80017c6:	2204      	movs	r2, #4
 80017c8:	21e8      	movs	r1, #232	; 0xe8
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f828 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80017d0:	21e8      	movs	r1, #232	; 0xe8
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f876 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf0c      	ite	eq
 80017e2:	2301      	moveq	r3, #1
 80017e4:	2300      	movne	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d000      	beq.n	80017ee <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80017ec:	e7f0      	b.n	80017d0 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f88a 	bl	8001908 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80017f4:	2220      	movs	r2, #32
 80017f6:	21c8      	movs	r1, #200	; 0xc8
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f811 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80017fe:	2201      	movs	r2, #1
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f80c 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
        }
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
 800182c:	4613      	mov	r3, r2
 800182e:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001830:	f7ff f836 	bl	80008a0 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 800183e:	78bb      	ldrb	r3, [r7, #2]
 8001840:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001842:	f107 010c 	add.w	r1, r7, #12
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	2202      	movs	r2, #2
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800184e:	f003 f8e8 	bl	8004a22 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001852:	f7ff f819 	bl	8000888 <_ZN3P103SetEv>
        return;
 8001856:	bf00      	nop
};
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002d4 	.word	0x200002d4

08001864 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001870:	2220      	movs	r2, #32
 8001872:	2178      	movs	r1, #120	; 0x78
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffd3 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800187a:	2200      	movs	r2, #0
 800187c:	2178      	movs	r1, #120	; 0x78
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffce 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	3301      	adds	r3, #1
 8001888:	81fb      	strh	r3, [r7, #14]
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00f      	beq.n	80018ba <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800189a:	2168      	movs	r1, #104	; 0x68
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f811 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d100      	bne.n	80018b8 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80018b6:	e7e5      	b.n	8001884 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80018b8:	bf00      	nop
        return ( i);
 80018ba:	89fb      	ldrh	r3, [r7, #14]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80018d0:	f7fe ffe6 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80018d4:	1cf9      	adds	r1, r7, #3
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	2201      	movs	r2, #1
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018de:	f003 f8a0 	bl	8004a22 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80018e6:	f107 010f 	add.w	r1, r7, #15
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	2201      	movs	r2, #1
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80018f2:	f003 f9d2 	bl	8004c9a <HAL_SPI_Receive>
        SPI_SS::Set();
 80018f6:	f7fe ffc7 	bl	8000888 <_ZN3P103SetEv>
        return (rv);
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200002d4 	.word	0x200002d4

08001908 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001910:	21f8      	movs	r1, #248	; 0xf8
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffd6 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001922:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2bc0      	cmp	r3, #192	; 0xc0
 8001928:	d04a      	beq.n	80019c0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800192a:	2bc0      	cmp	r3, #192	; 0xc0
 800192c:	dc55      	bgt.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800192e:	2b80      	cmp	r3, #128	; 0x80
 8001930:	d006      	beq.n	8001940 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001932:	2b80      	cmp	r3, #128	; 0x80
 8001934:	dc51      	bgt.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d046      	beq.n	80019c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800193a:	2b40      	cmp	r3, #64	; 0x40
 800193c:	d020      	beq.n	8001980 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800193e:	e04c      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001940:	21d8      	movs	r1, #216	; 0xd8
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffbe 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800195c:	22c9      	movs	r2, #201	; 0xc9
 800195e:	21d8      	movs	r1, #216	; 0xd8
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff5d 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
                        break;
 800196c:	e035      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800196e:	22cb      	movs	r2, #203	; 0xcb
 8001970:	21d8      	movs	r1, #216	; 0xd8
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff54 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800197a:	2203      	movs	r2, #3
 800197c:	701a      	strb	r2, [r3, #0]
                        break;
 800197e:	e02c      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001980:	21d8      	movs	r1, #216	; 0xd8
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff9e 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800199c:	22cb      	movs	r2, #203	; 0xcb
 800199e:	21d8      	movs	r1, #216	; 0xd8
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff3d 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019a8:	2203      	movs	r2, #3
 80019aa:	701a      	strb	r2, [r3, #0]
                        break;
 80019ac:	e015      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80019ae:	22c9      	movs	r2, #201	; 0xc9
 80019b0:	21d8      	movs	r1, #216	; 0xd8
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff34 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
                        break;
 80019be:	e00c      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
                        break;
 80019c6:	e008      	b.n	80019da <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80019c8:	22d1      	movs	r2, #209	; 0xd1
 80019ca:	21d8      	movs	r1, #216	; 0xd8
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff27 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
                        break;
 80019d8:	bf00      	nop
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000650 	.word	0x20000650

080019e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d115      	bne.n	8001a24 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d110      	bne.n	8001a24 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001a06:	f7fe ff13 	bl	8000830 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a0c:	f00f f868 	bl	8010ae0 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001a10:	4908      	ldr	r1, [pc, #32]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a14:	f00a fe68 	bl	800c6e8 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4906      	ldr	r1, [pc, #24]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001a20:	f7fe fff4 	bl	8000a0c <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000240 	.word	0x20000240
 8001a30:	20000370 	.word	0x20000370
 8001a34:	20000384 	.word	0x20000384
 8001a38:	20000440 	.word	0x20000440
 8001a3c:	080126f8 	.word	0x080126f8
 8001a40:	20000558 	.word	0x20000558

08001a44 <_GLOBAL__sub_I_hspi1>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ffcb 	bl	80019e8 <_Z41__static_initialization_and_destruction_0ii>
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_MspInit+0x54>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	210f      	movs	r1, #15
 8001a96:	f06f 0001 	mvn.w	r0, #1
 8001a9a:	f000 facd 	bl	8002038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_SPI_MspInit+0x84>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d12b      	bne.n	8001b26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_SPI_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b06:	23e0      	movs	r3, #224	; 0xe0
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b16:	2305      	movs	r3, #5
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_SPI_MspInit+0x8c>)
 8001b22:	f000 fab3 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_Base_MspInit+0x48>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d115      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	202d      	movs	r0, #45	; 0x2d
 8001b70:	f000 fa62 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b74:	202d      	movs	r0, #45	; 0x2d
 8001b76:	f000 fa7b 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40002000 	.word	0x40002000
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_UART_MspInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001be6:	230c      	movs	r3, #12
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0x8c>)
 8001c02:	f000 fa43 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	f000 fa01 	bl	8002038 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c36:	202c      	movs	r0, #44	; 0x2c
 8001c38:	f000 fa1a 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_InitTick+0xa4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_InitTick+0xa4>)
 8001c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_InitTick+0xa4>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c58:	f107 0210 	add.w	r2, r7, #16
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fea8 	bl	80039b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c68:	f001 fe7e 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0c9b      	lsrs	r3, r3, #18
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_InitTick+0xb0>)
 8001c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c8c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <HAL_InitTick+0xac>)
 8001ca2:	f003 fbdd 	bl	8005460 <HAL_TIM_Base_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d104      	bne.n	8001cb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <HAL_InitTick+0xac>)
 8001cae:	f003 fc27 	bl	8005500 <HAL_TIM_Base_Start_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3730      	adds	r7, #48	; 0x30
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	20004f88 	.word	0x20004f88
 8001ccc:	40001c00 	.word	0x40001c00

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d02:	f003 fc6d 	bl	80055e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20004f88 	.word	0x20004f88

08001d10 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d16:	f003 fc63 	bl	80055e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000284 	.word	0x20000284

08001d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <OTG_FS_IRQHandler+0x10>)
 8001d2a:	f000 fccb 	bl	80026c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20005548 	.word	0x20005548

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_kill>:

int _kill(int pid, int sig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d52:	f010 fbaf 	bl	80124b4 <__errno>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2216      	movs	r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_exit>:

void _exit (int status)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ffe7 	bl	8001d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d7a:	e7fe      	b.n	8001d7a <_exit+0x12>

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <SystemInit+0x28>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <SystemInit+0x28>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SystemInit+0x28>)
 8001d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d96:	609a      	str	r2, [r3, #8]
#endif
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dae:	e003      	b.n	8001db8 <LoopCopyDataInit>

08001db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db6:	3104      	adds	r1, #4

08001db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dc0:	d3f6      	bcc.n	8001db0 <CopyDataInit>
  ldr  r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dc4:	e002      	b.n	8001dcc <LoopFillZerobss>

08001dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc8:	f842 3b04 	str.w	r3, [r2], #4

08001dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dd0:	d3f9      	bcc.n	8001dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff ffd3 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f010 fb73 	bl	80124c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7fe feeb 	bl	8000bb4 <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001de4:	08012a50 	.word	0x08012a50
  ldr  r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dec:	200001a4 	.word	0x200001a4
  ldr  r2, =_sbss
 8001df0:	200001a4 	.word	0x200001a4
  ldr  r3, = _ebss
 8001df4:	20005954 	.word	0x20005954

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f8fc 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fef6 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fe10 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20004fd0 	.word	0x20004fd0

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20004fd0 	.word	0x20004fd0

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff4c 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204a:	f7ff ff61 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff ffb1 	bl	8001fbc <NVIC_EncodePriority>
 800205a:	4602      	mov	r2, r0
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff80 	bl	8001f68 <__NVIC_SetPriority>
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff54 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e165      	b.n	8002374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8154 	bne.w	800236e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ae 	beq.w	800236e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_GPIO_Init+0x300>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_GPIO_Init+0x300>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b5a      	ldr	r3, [pc, #360]	; (800238c <HAL_GPIO_Init+0x300>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x308>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_GPIO_Init+0x30c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_GPIO_Init+0x310>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_GPIO_Init+0x314>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_GPIO_Init+0x318>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x20a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_GPIO_Init+0x31c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x206>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a49      	ldr	r2, [pc, #292]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x202>
 800228a:	2306      	movs	r3, #6
 800228c:	e00c      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800228e:	2307      	movs	r3, #7
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 8002292:	2305      	movs	r3, #5
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x304>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_GPIO_Init+0x324>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ea:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_GPIO_Init+0x324>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_GPIO_Init+0x324>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <HAL_GPIO_Init+0x324>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f ae96 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002400:	e003      	b.n	800240a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002418:	b08f      	sub	sp, #60	; 0x3c
 800241a:	af0a      	add	r7, sp, #40	; 0x28
 800241c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e116      	b.n	8002656 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f009 fbf2 	bl	800bc2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2203      	movs	r2, #3
 800244c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 ff47 	bl	80062fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	687e      	ldr	r6, [r7, #4]
 8002474:	466d      	mov	r5, sp
 8002476:	f106 0410 	add.w	r4, r6, #16
 800247a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002486:	e885 0003 	stmia.w	r5, {r0, r1}
 800248a:	1d33      	adds	r3, r6, #4
 800248c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	f003 fe1e 	bl	80060d0 <USB_CoreInit>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0d7      	b.n	8002656 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 ff35 	bl	800631c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e04a      	b.n	800254e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	333d      	adds	r3, #61	; 0x3d
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	333c      	adds	r3, #60	; 0x3c
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	b298      	uxth	r0, r3
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3342      	adds	r3, #66	; 0x42
 80024f4:	4602      	mov	r2, r0
 80024f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	333f      	adds	r3, #63	; 0x3f
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3344      	adds	r3, #68	; 0x44
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3348      	adds	r3, #72	; 0x48
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3af      	bcc.n	80024b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e044      	b.n	80025e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3301      	adds	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3b5      	bcc.n	800255e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	687e      	ldr	r6, [r7, #4]
 80025fa:	466d      	mov	r5, sp
 80025fc:	f106 0410 	add.w	r4, r6, #16
 8002600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800260c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002610:	1d33      	adds	r3, r6, #4
 8002612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002614:	6838      	ldr	r0, [r7, #0]
 8002616:	f003 feab 	bl	8006370 <USB_DevInit>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e014      	b.n	8002656 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2b01      	cmp	r3, #1
 8002642:	d102      	bne.n	800264a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f001 f879 	bl	800373c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fee6 	bl	8007420 <USB_DevDisconnect>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800265e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_PCD_Start+0x1c>
 8002676:	2302      	movs	r3, #2
 8002678:	e020      	b.n	80026bc <HAL_PCD_Start+0x5e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	2b01      	cmp	r3, #1
 8002688:	d109      	bne.n	800269e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fe18 	bl	80062d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 fe96 	bl	80073de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b08d      	sub	sp, #52	; 0x34
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 ff54 	bl	8007588 <USB_GetMode>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 83ca 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 feb8 	bl	8007462 <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 83c0 	beq.w	8002e7a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 feaf 	bl	8007462 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d107      	bne.n	800271e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 0202 	and.w	r2, r2, #2
 800271c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fe9d 	bl	8007462 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d161      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0210 	bic.w	r2, r2, #16
 8002740:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	0c5b      	lsrs	r3, r3, #17
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	2b02      	cmp	r3, #2
 800276c:	d124      	bne.n	80027b8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d035      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6a38      	ldr	r0, [r7, #32]
 800278e:	f004 fd03 	bl	8007198 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279e:	441a      	add	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b0:	441a      	add	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	619a      	str	r2, [r3, #24]
 80027b6:	e016      	b.n	80027e6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	0c5b      	lsrs	r3, r3, #17
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d110      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ca:	2208      	movs	r2, #8
 80027cc:	4619      	mov	r1, r3
 80027ce:	6a38      	ldr	r0, [r7, #32]
 80027d0:	f004 fce2 	bl	8007198 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e0:	441a      	add	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0210 	orr.w	r2, r2, #16
 80027f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 fe31 	bl	8007462 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800280a:	d16e      	bne.n	80028ea <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f004 fe37 	bl	8007488 <USB_ReadDevAllOutEpInterrupt>
 800281a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800281c:	e062      	b.n	80028e4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d057      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fe5c 	bl	80074f0 <USB_ReadDevOutEPInterrupt>
 8002838:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	2301      	movs	r3, #1
 8002854:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fdc5 	bl	80033e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2308      	movs	r3, #8
 8002878:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800287a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 febf 	bl	8003600 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2310      	movs	r3, #16
 800289c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b4:	461a      	mov	r2, r3
 80028b6:	2320      	movs	r3, #32
 80028b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	3301      	adds	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d199      	bne.n	800281e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fdb7 	bl	8007462 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fe:	f040 80c0 	bne.w	8002a82 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fdd8 	bl	80074bc <USB_ReadDevAllInEpInterrupt>
 800290c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002912:	e0b2      	b.n	8002a7a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a7 	beq.w	8002a6e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fdfe 	bl	800752c <USB_ReadDevInEPInterrupt>
 8002930:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d057      	beq.n	80029ec <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	2201      	movs	r2, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	69f9      	ldr	r1, [r7, #28]
 8002958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800295c:	4013      	ands	r3, r2
 800295e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296c:	461a      	mov	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d132      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3348      	adds	r3, #72	; 0x48
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4403      	add	r3, r0
 800299a:	3344      	adds	r3, #68	; 0x44
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4419      	add	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4403      	add	r3, r0
 80029ae:	3348      	adds	r3, #72	; 0x48
 80029b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x31c>
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3350      	adds	r3, #80	; 0x50
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	f004 fe06 	bl	80075ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f009 f9a1 	bl	800bd2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a02:	461a      	mov	r2, r3
 8002a04:	2308      	movs	r3, #8
 8002a06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2310      	movs	r3, #16
 8002a22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2340      	movs	r3, #64	; 0x40
 8002a3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a56:	461a      	mov	r2, r3
 8002a58:	2302      	movs	r3, #2
 8002a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fc30 	bl	80032ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	3301      	adds	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f af49 	bne.w	8002914 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fceb 	bl	8007462 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a96:	d122      	bne.n	8002ade <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f009 fb71 	bl	800c1a8 <HAL_PCDEx_LPM_Callback>
 8002ac6:	e002      	b.n	8002ace <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f009 f9a7 	bl	800be1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fcbd 	bl	8007462 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af2:	d112      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f009 f963 	bl	800bdd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b18:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fc9f 	bl	8007462 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2e:	d121      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b3e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b64:	2101      	movs	r1, #1
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f009 fb1e 	bl	800c1a8 <HAL_PCDEx_LPM_Callback>
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f009 f92e 	bl	800bdd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fc72 	bl	8007462 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	f040 80c7 	bne.w	8002d1a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fd40 	bl	800662c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	e056      	b.n	8002c60 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	461a      	mov	r2, r3
 8002c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3a3      	bcc.n	8002bb2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f043 030b 	orr.w	r3, r3, #11
 8002c9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cac:	f043 030b 	orr.w	r3, r3, #11
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	e015      	b.n	8002ce0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cc6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cda:	f043 030b 	orr.w	r3, r3, #11
 8002cde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d04:	461a      	mov	r2, r3
 8002d06:	f004 fc71 	bl	80075ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fb9f 	bl	8007462 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d124      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 fc35 	bl	80075a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fcd5 	bl	80066ee <USB_GetDevSpeed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681c      	ldr	r4, [r3, #0]
 8002d50:	f000 fdfe 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8002d54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f003 fa18 	bl	8006194 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f009 f80a 	bl	800bd7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fb6f 	bl	8007462 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10a      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f008 ffe7 	bl	800bd62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f002 0208 	and.w	r2, r2, #8
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fb5a 	bl	8007462 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d10f      	bne.n	8002dda <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f009 f849 	bl	800be5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fb3f 	bl	8007462 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dee:	d10f      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f009 f81c 	bl	800be38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fb24 	bl	8007462 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f009 f82a 	bl	800be80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 fb0e 	bl	8007462 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d115      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f009 f81a 	bl	800be9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	e000      	b.n	8002e7c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002e7a:	bf00      	nop
    }
  }
}
 8002e7c:	3734      	adds	r7, #52	; 0x34
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}

08002e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_PCD_SetAddress+0x1a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e013      	b.n	8002ec4 <HAL_PCD_SetAddress+0x42>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 fa6c 	bl	8007392 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	70fb      	strb	r3, [r7, #3]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	803b      	strh	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0f      	bge.n	8002f12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3338      	adds	r3, #56	; 0x38
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
 8002f10:	e00f      	b.n	8002f32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f3e:	883a      	ldrh	r2, [r7, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	78ba      	ldrb	r2, [r7, #2]
 8002f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f5c:	78bb      	ldrb	r3, [r7, #2]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d102      	bne.n	8002f68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_Open+0xaa>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e00e      	b.n	8002f94 <HAL_PCD_EP_Open+0xc8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fbd7 	bl	8006738 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0f      	bge.n	8002fd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 020f 	and.w	r2, r3, #15
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	3338      	adds	r3, #56	; 0x38
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	705a      	strb	r2, [r3, #1]
 8002fce:	e00f      	b.n	8002ff0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_EP_Close+0x6e>
 8003006:	2302      	movs	r3, #2
 8003008:	e00e      	b.n	8003028 <HAL_PCD_EP_Close+0x8c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fc15 	bl	8006848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	f003 fef0 	bl	8006e88 <USB_EP0StartXfer>
 80030a8:	e008      	b.n	80030bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	f003 fca2 	bl	8006a00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3338      	adds	r3, #56	; 0x38
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2201      	movs	r2, #1
 8003104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	f003 fea6 	bl	8006e88 <USB_EP0StartXfer>
 800313c:	e008      	b.n	8003150 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	6979      	ldr	r1, [r7, #20]
 800314c:	f003 fc58 	bl	8006a00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e050      	b.n	800321a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0f      	bge.n	80031a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3338      	adds	r3, #56	; 0x38
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	705a      	strb	r2, [r3, #1]
 800319e:	e00d      	b.n	80031bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_PCD_EP_SetStall+0x82>
 80031d8:	2302      	movs	r3, #2
 80031da:	e01e      	b.n	800321a <HAL_PCD_EP_SetStall+0xc0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fffd 	bl	80071ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	b2d9      	uxtb	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800320a:	461a      	mov	r2, r3
 800320c:	f004 f9ee 	bl	80075ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d901      	bls.n	8003240 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e042      	b.n	80032c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003244:	2b00      	cmp	r3, #0
 8003246:	da0f      	bge.n	8003268 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	3338      	adds	r3, #56	; 0x38
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	705a      	strb	r2, [r3, #1]
 8003266:	e00f      	b.n	8003288 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	3304      	adds	r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_ClrStall+0x86>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00e      	b.n	80032c6 <HAL_PCD_EP_ClrStall+0xa4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 f805 	bl	80072c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b08a      	sub	sp, #40	; 0x28
 80032d2:	af02      	add	r7, sp, #8
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3338      	adds	r3, #56	; 0x38
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d901      	bls.n	8003306 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06c      	b.n	80033e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	429a      	cmp	r2, r3
 800331a:	d902      	bls.n	8003322 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3303      	adds	r3, #3
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800332a:	e02b      	b.n	8003384 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d902      	bls.n	8003348 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3303      	adds	r3, #3
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003360:	b2db      	uxtb	r3, r3
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	f003 fee1 	bl	800712e <USB_WritePacket>

    ep->xfer_buff  += len;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	441a      	add	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	b29b      	uxth	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d809      	bhi.n	80033ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d203      	bcs.n	80033ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1be      	bne.n	800332c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d811      	bhi.n	80033de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033da:	4013      	ands	r3, r2
 80033dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	333c      	adds	r3, #60	; 0x3c
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	f040 80a0 	bne.w	8003560 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a72      	ldr	r2, [pc, #456]	; (80035f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f240 80dd 	bls.w	80035ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80d7 	beq.w	80035ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	e0cb      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	2320      	movs	r3, #32
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e0bc      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 80b7 	bne.w	80035ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d90f      	bls.n	80034a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	e0a2      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4403      	add	r3, r0
 80034de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4419      	add	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4403      	add	r3, r0
 800351c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003520:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d114      	bne.n	8003552 <PCD_EP_OutXfrComplete_int+0x16a>
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800354a:	461a      	mov	r2, r3
 800354c:	2101      	movs	r1, #1
 800354e:	f004 f84d 	bl	80075ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f008 fbcd 	bl	800bcf8 <HAL_PCD_DataOutStageCallback>
 800355e:	e046      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <PCD_EP_OutXfrComplete_int+0x214>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d124      	bne.n	80035b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003584:	6093      	str	r3, [r2, #8]
 8003586:	e032      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2320      	movs	r3, #32
 80035a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f008 fba4 	bl	800bcf8 <HAL_PCD_DataOutStageCallback>
 80035b0:	e01d      	b.n	80035ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d114      	bne.n	80035e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035da:	461a      	mov	r2, r3
 80035dc:	2100      	movs	r1, #0
 80035de:	f004 f805 	bl	80075ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f008 fb85 	bl	800bcf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	4f54300a 	.word	0x4f54300a
 80035fc:	4f54310a 	.word	0x4f54310a

08003600 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	333c      	adds	r3, #60	; 0x3c
 8003618:	3304      	adds	r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a15      	ldr	r2, [pc, #84]	; (8003688 <PCD_EP_OutSetupPacket_int+0x88>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90e      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 fb3d 	bl	800bcd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <PCD_EP_OutSetupPacket_int+0x88>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d90c      	bls.n	800367c <PCD_EP_OutSetupPacket_int+0x7c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003674:	461a      	mov	r2, r3
 8003676:	2101      	movs	r1, #1
 8003678:	f003 ffb8 	bl	80075ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	4f54300a 	.word	0x4f54300a

0800368c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
 8003698:	4613      	mov	r3, r2
 800369a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036aa:	883b      	ldrh	r3, [r7, #0]
 80036ac:	0419      	lsls	r1, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
 80036b8:	e028      	b.n	800370c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e00d      	b.n	80036ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	3340      	adds	r3, #64	; 0x40
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	3301      	adds	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3ec      	bcc.n	80036ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036f4:	883b      	ldrh	r3, [r7, #0]
 80036f6:	0418      	lsls	r0, r3, #16
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	3b01      	subs	r3, #1
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4302      	orrs	r2, r0
 8003704:	3340      	adds	r3, #64	; 0x40
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	f043 0303 	orr.w	r3, r3, #3
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cc      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d90c      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b65      	ldr	r3, [pc, #404]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d044      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d119      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d003      	beq.n	8003842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e067      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4934      	ldr	r1, [pc, #208]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003874:	f7fe faf8 	bl	8001e68 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fe faf4 	bl	8001e68 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20c      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390a:	f000 fbb1 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe f976 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	080128a4 	.word	0x080128a4
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000000 	.word	0x20000000

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	080128b4 	.word	0x080128b4

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003994:	f7ff ffdc 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0b5b      	lsrs	r3, r3, #13
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	080128b4 	.word	0x080128b4

080039b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	220f      	movs	r2, #15
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_RCC_GetClockConfig+0x60>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40023c00 	.word	0x40023c00

08003a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	496c      	ldr	r1, [pc, #432]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a72:	2301      	movs	r3, #1
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a82:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a88:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	4960      	ldr	r1, [pc, #384]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab0:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4955      	ldr	r1, [pc, #340]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d017      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aec:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	4946      	ldr	r1, [pc, #280]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808a 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b52:	f7fe f989 	bl	8001e68 <HAL_GetTick>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fe f985 	bl	8001e68 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e278      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02f      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d028      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb2:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d114      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f953 	bl	8001e68 <HAL_GetTick>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fe f94f 	bl	8001e68 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e240      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf4:	d114      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	4902      	ldr	r1, [pc, #8]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42470e40 	.word	0x42470e40
 8003c20:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a49      	ldr	r2, [pc, #292]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	4944      	ldr	r1, [pc, #272]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c52:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c60:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4937      	ldr	r1, [pc, #220]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	492e      	ldr	r1, [pc, #184]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d011      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	4926      	ldr	r1, [pc, #152]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	491a      	ldr	r1, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	4911      	ldr	r1, [pc, #68]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d14:	d101      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d16:	2301      	movs	r3, #1
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d28:	f040 80ff 	bne.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d32:	f7fe f899 	bl	8001e68 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d38:	e00e      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d3a:	f7fe f895 	bl	8001e68 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d907      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e188      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	424711e0 	.word	0x424711e0
 8003d54:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d58:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ea      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d028      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d124      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d8c:	4b71      	ldr	r3, [pc, #452]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	431a      	orrs	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	4961      	ldr	r1, [pc, #388]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d035      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d130      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e02:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e14:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1a:	0f1b      	lsrs	r3, r3, #28
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	071b      	lsls	r3, r3, #28
 8003e44:	4943      	ldr	r1, [pc, #268]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e52:	f023 021f 	bic.w	r2, r3, #31
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	493d      	ldr	r1, [pc, #244]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d029      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d124      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	071b      	lsls	r3, r3, #28
 8003ebc:	4925      	ldr	r1, [pc, #148]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d016      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	4917      	ldr	r1, [pc, #92]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003efe:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f04:	f7fd ffb0 	bl	8001e68 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f0c:	f7fd ffac 	bl	8001e68 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e09f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	f040 8095 	bne.w	800405c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fd ff96 	bl	8001e68 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f40:	f7fd ff92 	bl	8001e68 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e085      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	42470068 	.word	0x42470068
 8003f5c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d0e8      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d127      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	4928      	ldr	r1, [pc, #160]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	4922      	ldr	r1, [pc, #136]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffa:	d118      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	0e1b      	lsrs	r3, r3, #24
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	019b      	lsls	r3, r3, #6
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4910      	ldr	r1, [pc, #64]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004034:	f7fd ff18 	bl	8001e68 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800403c:	f7fd ff14 	bl	8001e68 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e007      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800405a:	d1ef      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3730      	adds	r7, #48	; 0x30
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	42470070 	.word	0x42470070

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004074:	b088      	sub	sp, #32
 8004076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4bce      	ldr	r3, [pc, #824]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b0c      	cmp	r3, #12
 8004096:	f200 818d 	bhi.w	80043b4 <HAL_RCC_GetSysClockFreq+0x344>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080043b5 	.word	0x080043b5
 80040a8:	080043b5 	.word	0x080043b5
 80040ac:	080043b5 	.word	0x080043b5
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080043b5 	.word	0x080043b5
 80040b8:	080043b5 	.word	0x080043b5
 80040bc:	080043b5 	.word	0x080043b5
 80040c0:	080040e1 	.word	0x080040e1
 80040c4:	080043b5 	.word	0x080043b5
 80040c8:	080043b5 	.word	0x080043b5
 80040cc:	080043b5 	.word	0x080043b5
 80040d0:	08004255 	.word	0x08004255
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4bbd      	ldr	r3, [pc, #756]	; (80043cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80040d6:	61bb      	str	r3, [r7, #24]
       break;
 80040d8:	e16f      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4bbd      	ldr	r3, [pc, #756]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x360>)
 80040dc:	61bb      	str	r3, [r7, #24]
      break;
 80040de:	e16c      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4bb9      	ldr	r3, [pc, #740]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4bb7      	ldr	r3, [pc, #732]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d053      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4bb4      	ldr	r3, [pc, #720]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	461a      	mov	r2, r3
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	ea02 0400 	and.w	r4, r2, r0
 800410e:	603c      	str	r4, [r7, #0]
 8004110:	400b      	ands	r3, r1
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004118:	4620      	mov	r0, r4
 800411a:	4629      	mov	r1, r5
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	014b      	lsls	r3, r1, #5
 8004126:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800412a:	0142      	lsls	r2, r0, #5
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	4623      	mov	r3, r4
 8004132:	1ac0      	subs	r0, r0, r3
 8004134:	462b      	mov	r3, r5
 8004136:	eb61 0103 	sbc.w	r1, r1, r3
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	018b      	lsls	r3, r1, #6
 8004144:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004148:	0182      	lsls	r2, r0, #6
 800414a:	1a12      	subs	r2, r2, r0
 800414c:	eb63 0301 	sbc.w	r3, r3, r1
 8004150:	f04f 0000 	mov.w	r0, #0
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	00d9      	lsls	r1, r3, #3
 800415a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800415e:	00d0      	lsls	r0, r2, #3
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4621      	mov	r1, r4
 8004166:	1852      	adds	r2, r2, r1
 8004168:	4629      	mov	r1, r5
 800416a:	eb43 0101 	adc.w	r1, r3, r1
 800416e:	460b      	mov	r3, r1
 8004170:	f04f 0000 	mov.w	r0, #0
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	0259      	lsls	r1, r3, #9
 800417a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800417e:	0250      	lsls	r0, r2, #9
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	461a      	mov	r2, r3
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f7fc f846 	bl	8000220 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e04c      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	461a      	mov	r2, r3
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	ea02 0a00 	and.w	sl, r2, r0
 80041b6:	ea03 0b01 	and.w	fp, r3, r1
 80041ba:	4650      	mov	r0, sl
 80041bc:	4659      	mov	r1, fp
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	014b      	lsls	r3, r1, #5
 80041c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041cc:	0142      	lsls	r2, r0, #5
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	ebb0 000a 	subs.w	r0, r0, sl
 80041d6:	eb61 010b 	sbc.w	r1, r1, fp
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041e8:	0182      	lsls	r2, r0, #6
 80041ea:	1a12      	subs	r2, r2, r0
 80041ec:	eb63 0301 	sbc.w	r3, r3, r1
 80041f0:	f04f 0000 	mov.w	r0, #0
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	00d9      	lsls	r1, r3, #3
 80041fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fe:	00d0      	lsls	r0, r2, #3
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	eb12 020a 	adds.w	r2, r2, sl
 8004208:	eb43 030b 	adc.w	r3, r3, fp
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0299      	lsls	r1, r3, #10
 8004216:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800421a:	0290      	lsls	r0, r2, #10
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f7fb fff8 	bl	8000220 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	61bb      	str	r3, [r7, #24]
      break;
 8004252:	e0b2      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004254:	4b5c      	ldr	r3, [pc, #368]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800425c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d04d      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	ea02 0800 	and.w	r8, r2, r0
 8004282:	ea03 0901 	and.w	r9, r3, r1
 8004286:	4640      	mov	r0, r8
 8004288:	4649      	mov	r1, r9
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	014b      	lsls	r3, r1, #5
 8004294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004298:	0142      	lsls	r2, r0, #5
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	ebb0 0008 	subs.w	r0, r0, r8
 80042a2:	eb61 0109 	sbc.w	r1, r1, r9
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	018b      	lsls	r3, r1, #6
 80042b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042b4:	0182      	lsls	r2, r0, #6
 80042b6:	1a12      	subs	r2, r2, r0
 80042b8:	eb63 0301 	sbc.w	r3, r3, r1
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	00d9      	lsls	r1, r3, #3
 80042c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ca:	00d0      	lsls	r0, r2, #3
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	eb12 0208 	adds.w	r2, r2, r8
 80042d4:	eb43 0309 	adc.w	r3, r3, r9
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	0259      	lsls	r1, r3, #9
 80042e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042e6:	0250      	lsls	r0, r2, #9
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	f7fb ff92 	bl	8000220 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e04a      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	ea02 0400 	and.w	r4, r2, r0
 800431e:	ea03 0501 	and.w	r5, r3, r1
 8004322:	4620      	mov	r0, r4
 8004324:	4629      	mov	r1, r5
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	014b      	lsls	r3, r1, #5
 8004330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004334:	0142      	lsls	r2, r0, #5
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	1b00      	subs	r0, r0, r4
 800433c:	eb61 0105 	sbc.w	r1, r1, r5
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	018b      	lsls	r3, r1, #6
 800434a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800434e:	0182      	lsls	r2, r0, #6
 8004350:	1a12      	subs	r2, r2, r0
 8004352:	eb63 0301 	sbc.w	r3, r3, r1
 8004356:	f04f 0000 	mov.w	r0, #0
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	00d9      	lsls	r1, r3, #3
 8004360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004364:	00d0      	lsls	r0, r2, #3
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	1912      	adds	r2, r2, r4
 800436c:	eb45 0303 	adc.w	r3, r5, r3
 8004370:	f04f 0000 	mov.w	r0, #0
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	0299      	lsls	r1, r3, #10
 800437a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800437e:	0290      	lsls	r0, r2, #10
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	f7fb ff46 	bl	8000220 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0f1b      	lsrs	r3, r3, #28
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	61bb      	str	r3, [r7, #24]
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80043b6:	61bb      	str	r3, [r7, #24]
      break;
 80043b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ba:	69bb      	ldr	r3, [r7, #24]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	007a1200 	.word	0x007a1200

080043d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e28d      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8083 	beq.w	80044fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f4:	4b94      	ldr	r3, [pc, #592]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d019      	beq.n	8004434 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004400:	4b91      	ldr	r3, [pc, #580]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004408:	2b08      	cmp	r3, #8
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800440c:	4b8e      	ldr	r3, [pc, #568]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d112      	bne.n	800444c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b84      	ldr	r3, [pc, #528]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x124>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d157      	bne.n	80044f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e25a      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x90>
 8004456:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7b      	ldr	r2, [pc, #492]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xcc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0xb4>
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b73      	ldr	r3, [pc, #460]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a72      	ldr	r2, [pc, #456]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xcc>
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6b      	ldr	r2, [pc, #428]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fcde 	bl	8001e68 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fd fcda 	bl	8001e68 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e21f      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xdc>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fcca 	bl	8001e68 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd fcc6 	bl	8001e68 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e20b      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b57      	ldr	r3, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x104>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d06f      	beq.n	80045e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004506:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d017      	beq.n	8004542 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451e:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d11c      	bne.n	8004570 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b44      	ldr	r3, [pc, #272]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d116      	bne.n	8004570 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x186>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1d3      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455a:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4937      	ldr	r1, [pc, #220]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	e03a      	b.n	80045e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004578:	4b34      	ldr	r3, [pc, #208]	; (800464c <HAL_RCC_OscConfig+0x278>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd fc73 	bl	8001e68 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004586:	f7fd fc6f 	bl	8001e68 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1b4      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4925      	ldr	r1, [pc, #148]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
 80045b8:	e015      	b.n	80045e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x278>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd fc52 	bl	8001e68 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fd fc4e 	bl	8001e68 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e193      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d036      	beq.n	8004660 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fd fc32 	bl	8001e68 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004608:	f7fd fc2e 	bl	8001e68 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e173      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_OscConfig+0x274>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x234>
 8004626:	e01b      	b.n	8004660 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004628:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_OscConfig+0x27c>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fd fc1b 	bl	8001e68 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	e00e      	b.n	8004654 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004636:	f7fd fc17 	bl	8001e68 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d907      	bls.n	8004654 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e15c      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
 8004648:	40023800 	.word	0x40023800
 800464c:	42470000 	.word	0x42470000
 8004650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004654:	4b8a      	ldr	r3, [pc, #552]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ea      	bne.n	8004636 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8097 	beq.w	800479c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004672:	4b83      	ldr	r3, [pc, #524]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a7e      	ldr	r2, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b79      	ldr	r3, [pc, #484]	; (8004884 <HAL_RCC_OscConfig+0x4b0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x4b0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x4b0>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fd fbd7 	bl	8001e68 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fd fbd3 	bl	8001e68 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e118      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x4b0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x31e>
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
 80046f0:	e01c      	b.n	800472c <HAL_RCC_OscConfig+0x358>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x340>
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a60      	ldr	r2, [pc, #384]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
 8004706:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a5d      	ldr	r2, [pc, #372]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
 8004712:	e00b      	b.n	800472c <HAL_RCC_OscConfig+0x358>
 8004714:	4b5a      	ldr	r3, [pc, #360]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a59      	ldr	r2, [pc, #356]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	4b57      	ldr	r3, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4a56      	ldr	r2, [pc, #344]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fd fb98 	bl	8001e68 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fd fb94 	bl	8001e68 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0d7      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004752:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0ee      	beq.n	800473c <HAL_RCC_OscConfig+0x368>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fd fb82 	bl	8001e68 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd fb7e 	bl	8001e68 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0c1      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477e:	4b40      	ldr	r3, [pc, #256]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ee      	bne.n	8004768 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	4a3a      	ldr	r2, [pc, #232]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80ad 	beq.w	8004900 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a6:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d060      	beq.n	8004874 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d145      	bne.n	8004846 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b33      	ldr	r3, [pc, #204]	; (8004888 <HAL_RCC_OscConfig+0x4b4>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fb52 	bl	8001e68 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd fb4e 	bl	8001e68 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e093      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	3b01      	subs	r3, #1
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x4b4>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fd fb23 	bl	8001e68 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004826:	f7fd fb1f 	bl	8001e68 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e064      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x452>
 8004844:	e05c      	b.n	8004900 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_OscConfig+0x4b4>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fb0c 	bl	8001e68 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fb08 	bl	8001e68 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04d      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_OscConfig+0x4ac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x480>
 8004872:	e045      	b.n	8004900 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e040      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCC_OscConfig+0x538>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d030      	beq.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d129      	bne.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d122      	bne.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d119      	bne.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d10f      	bne.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07b      	b.n	8004a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004932:	d009      	beq.n	8004948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	61da      	str	r2, [r3, #28]
 800493a:	e005      	b.n	8004948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd f8a2 	bl	8001aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	ea42 0103 	orr.w	r1, r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0104 	and.w	r1, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	f003 0210 	and.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b088      	sub	sp, #32
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_Transmit+0x22>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e126      	b.n	8004c92 <HAL_SPI_Transmit+0x270>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fd fa0c 	bl	8001e68 <HAL_GetTick>
 8004a50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a66:	e10b      	b.n	8004c80 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x52>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a78:	e102      	b.n	8004c80 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac0:	d10f      	bne.n	8004ae2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d007      	beq.n	8004b00 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d14b      	bne.n	8004ba2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Transmit+0xf6>
 8004b12:	8afb      	ldrh	r3, [r7, #22]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d13e      	bne.n	8004b96 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b3c:	e02b      	b.n	8004b96 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d112      	bne.n	8004b72 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b70:	e011      	b.n	8004b96 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b72:	f7fd f979 	bl	8001e68 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d803      	bhi.n	8004b8a <HAL_SPI_Transmit+0x168>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d102      	bne.n	8004b90 <HAL_SPI_Transmit+0x16e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b94:	e074      	b.n	8004c80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ce      	bne.n	8004b3e <HAL_SPI_Transmit+0x11c>
 8004ba0:	e04c      	b.n	8004c3c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Transmit+0x18e>
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d140      	bne.n	8004c32 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	7812      	ldrb	r2, [r2, #0]
 8004bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bd6:	e02c      	b.n	8004c32 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d113      	bne.n	8004c0e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c0c:	e011      	b.n	8004c32 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0e:	f7fd f92b 	bl	8001e68 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d803      	bhi.n	8004c26 <HAL_SPI_Transmit+0x204>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d102      	bne.n	8004c2c <HAL_SPI_Transmit+0x20a>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c30:	e026      	b.n	8004c80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1cd      	bne.n	8004bd8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fbcb 	bl	80053dc <SPI_EndRxTxTransaction>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e000      	b.n	8004c80 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af02      	add	r7, sp, #8
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb6:	d112      	bne.n	8004cde <HAL_SPI_Receive+0x44>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10e      	bne.n	8004cde <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f8f1 	bl	8004ebc <HAL_SPI_TransmitReceive>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	e0ea      	b.n	8004eb4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_SPI_Receive+0x52>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0e3      	b.n	8004eb4 <HAL_SPI_Receive+0x21a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf4:	f7fd f8b8 	bl	8001e68 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
 8004d08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d0a:	e0ca      	b.n	8004ea2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_Receive+0x7e>
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d1c:	e0c1      	b.n	8004ea2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2204      	movs	r2, #4
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d64:	d10f      	bne.n	8004d86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d162      	bne.n	8004e72 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004dac:	e02e      	b.n	8004e0c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d115      	bne.n	8004de8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f103 020c 	add.w	r2, r3, #12
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de6:	e011      	b.n	8004e0c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de8:	f7fd f83e 	bl	8001e68 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d803      	bhi.n	8004e00 <HAL_SPI_Receive+0x166>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_Receive+0x16c>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e0a:	e04a      	b.n	8004ea2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1cb      	bne.n	8004dae <HAL_SPI_Receive+0x114>
 8004e16:	e031      	b.n	8004e7c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d113      	bne.n	8004e4e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	b292      	uxth	r2, r2
 8004e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	1c9a      	adds	r2, r3, #2
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e4c:	e011      	b.n	8004e72 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e4e:	f7fd f80b 	bl	8001e68 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d803      	bhi.n	8004e66 <HAL_SPI_Receive+0x1cc>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d102      	bne.n	8004e6c <HAL_SPI_Receive+0x1d2>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e70:	e017      	b.n	8004ea2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1cd      	bne.n	8004e18 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fa45 	bl	8005310 <SPI_EndRxTransaction>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
 8004e9e:	e000      	b.n	8004ea2 <HAL_SPI_Receive+0x208>
  }

error :
 8004ea0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	; 0x30
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x26>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e18a      	b.n	80051f8 <HAL_SPI_TransmitReceive+0x33c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eea:	f7fc ffbd 	bl	8001e68 <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d00f      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x70>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f12:	d107      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x68>
 8004f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d003      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f2a:	e15b      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x82>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x82>
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f44:	e14e      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2205      	movs	r2, #5
 8004f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	887a      	ldrh	r2, [r7, #2]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d007      	beq.n	8004fae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	d178      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x10a>
 8004fc0:	8b7b      	ldrh	r3, [r7, #26]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d166      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fea:	e053      	b.n	8005094 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d11b      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x176>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d016      	beq.n	8005032 <HAL_SPI_TransmitReceive+0x176>
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d113      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	881a      	ldrh	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d119      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x1b8>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d014      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	b292      	uxth	r2, r2
 8005056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	1c9a      	adds	r2, r3, #2
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005070:	2301      	movs	r3, #1
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005074:	f7fc fef8 	bl	8001e68 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005080:	429a      	cmp	r2, r3
 8005082:	d807      	bhi.n	8005094 <HAL_SPI_TransmitReceive+0x1d8>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d003      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005092:	e0a7      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1a6      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x130>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1a1      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x130>
 80050a8:	e07c      	b.n	80051a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x1fc>
 80050b2:	8b7b      	ldrh	r3, [r7, #26]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d16b      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050de:	e057      	b.n	8005190 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d11c      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x26c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x26c>
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d114      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	7812      	ldrb	r2, [r2, #0]
 800510a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d119      	bne.n	800516a <HAL_SPI_TransmitReceive+0x2ae>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d014      	beq.n	800516a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005166:	2301      	movs	r3, #1
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800516a:	f7fc fe7d 	bl	8001e68 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005176:	429a      	cmp	r2, r3
 8005178:	d803      	bhi.n	8005182 <HAL_SPI_TransmitReceive+0x2c6>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d102      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x2cc>
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800518e:	e029      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1a2      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x224>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d19d      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f917 	bl	80053dc <SPI_EndRxTxTransaction>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051c0:	e010      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	e000      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	; 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005210:	f7fc fe2a 	bl	8001e68 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005220:	f7fc fe22 	bl	8001e68 <HAL_GetTick>
 8005224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	015b      	lsls	r3, r3, #5
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	e054      	b.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d050      	beq.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005240:	f7fc fe12 	bl	8001e68 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	429a      	cmp	r2, r3
 800524e:	d902      	bls.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d13d      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526e:	d111      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	d004      	beq.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d107      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529c:	d10f      	bne.n	80052be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e017      	b.n	8005302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3b01      	subs	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d19b      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000000 	.word	0x20000000

08005310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005324:	d111      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532e:	d004      	beq.n	800533a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005338:	d107      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d12a      	bne.n	80053aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d012      	beq.n	8005384 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff49 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02d      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e026      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	2101      	movs	r1, #1
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff ff36 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e013      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff23 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e000      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <SPI_EndRxTxTransaction+0x7c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <SPI_EndRxTxTransaction+0x80>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0d5b      	lsrs	r3, r3, #21
 80053f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d112      	bne.n	800542e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fef4 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	3b01      	subs	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	2b80      	cmp	r3, #128	; 0x80
 8005446:	d0f2      	beq.n	800542e <SPI_EndRxTxTransaction+0x52>
 8005448:	e000      	b.n	800544c <SPI_EndRxTxTransaction+0x70>
        break;
 800544a:	bf00      	nop
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000000 	.word	0x20000000
 800545c:	165e9f81 	.word	0x165e9f81

08005460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e041      	b.n	80054f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fb58 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 f9ce 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e04e      	b.n	80055b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d01d      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x80>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_TIM_Base_Start_IT+0xdc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d111      	bne.n	80055a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d010      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	e007      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40001800 	.word	0x40001800

080055e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0202 	mvn.w	r2, #2
 800560c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f8ee 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8e0 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8f1 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0204 	mvn.w	r2, #4
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8c4 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f8b6 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f8c7 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0208 	mvn.w	r2, #8
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f89a 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f88c 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f89d 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d122      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d11b      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0210 	mvn.w	r2, #16
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2208      	movs	r2, #8
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f870 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f862 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f873 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0201 	mvn.w	r2, #1
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb ffe8 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f902 	bl	8005994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f838 	bl	800582c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0220 	mvn.w	r2, #32
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8cc 	bl	8005980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a40      	ldr	r2, [pc, #256]	; (8005954 <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d00f      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3d      	ldr	r2, [pc, #244]	; (8005958 <TIM_Base_SetConfig+0x118>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3c      	ldr	r2, [pc, #240]	; (800595c <TIM_Base_SetConfig+0x11c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3b      	ldr	r2, [pc, #236]	; (8005960 <TIM_Base_SetConfig+0x120>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <TIM_Base_SetConfig+0x124>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <TIM_Base_SetConfig+0x114>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a0:	d027      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <TIM_Base_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d023      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	; (800595c <TIM_Base_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <TIM_Base_SetConfig+0x120>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a29      	ldr	r2, [pc, #164]	; (8005964 <TIM_Base_SetConfig+0x124>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a28      	ldr	r2, [pc, #160]	; (8005968 <TIM_Base_SetConfig+0x128>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <TIM_Base_SetConfig+0x12c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a26      	ldr	r2, [pc, #152]	; (8005970 <TIM_Base_SetConfig+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <TIM_Base_SetConfig+0x134>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a24      	ldr	r2, [pc, #144]	; (8005978 <TIM_Base_SetConfig+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a23      	ldr	r2, [pc, #140]	; (800597c <TIM_Base_SetConfig+0x13c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <TIM_Base_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d103      	bne.n	8005940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	615a      	str	r2, [r3, #20]
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40001800 	.word	0x40001800
 8005978:	40001c00 	.word	0x40001c00
 800597c:	40002000 	.word	0x40002000

08005980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e03f      	b.n	8005a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fc f8dc 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	; 0x24
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9a7 	bl	8005d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08a      	sub	sp, #40	; 0x28
 8005a46:	af02      	add	r7, sp, #8
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d17c      	bne.n	8005b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_UART_Transmit+0x2c>
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e075      	b.n	8005b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit+0x3e>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e06e      	b.n	8005b5e <HAL_UART_Transmit+0x11c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2221      	movs	r2, #33	; 0x21
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a96:	f7fc f9e7 	bl	8001e68 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_UART_Transmit+0x82>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e003      	b.n	8005acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ad4:	e02a      	b.n	8005b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f8e2 	bl	8005caa <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e036      	b.n	8005b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1cf      	bne.n	8005ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2140      	movs	r1, #64	; 0x40
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f8b2 	bl	8005caa <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b08a      	sub	sp, #40	; 0x28
 8005b6a:	af02      	add	r7, sp, #8
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	f040 808c 	bne.w	8005ca0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Receive+0x2e>
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e084      	b.n	8005ca2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Receive+0x40>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e07d      	b.n	8005ca2 <HAL_UART_Receive+0x13c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2222      	movs	r2, #34	; 0x22
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bc2:	f7fc f951 	bl	8001e68 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d108      	bne.n	8005bf0 <HAL_UART_Receive+0x8a>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	e003      	b.n	8005bf8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c00:	e043      	b.n	8005c8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f84c 	bl	8005caa <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e042      	b.n	8005ca2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	3302      	adds	r3, #2
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e01f      	b.n	8005c7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c44:	d007      	beq.n	8005c56 <HAL_UART_Receive+0xf0>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <HAL_UART_Receive+0xfe>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e008      	b.n	8005c76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1b6      	bne.n	8005c02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e000      	b.n	8005ca2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cba:	e02c      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d028      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0x30>
 8005cca:	f7fc f8cd 	bl	8001e68 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d21d      	bcs.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d0c3      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	b09f      	sub	sp, #124	; 0x7c
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	68d9      	ldr	r1, [r3, #12]
 8005d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	ea40 0301 	orr.w	r3, r0, r1
 8005d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d84:	f021 010c 	bic.w	r1, r1, #12
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	6999      	ldr	r1, [r3, #24]
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	ea40 0301 	orr.w	r3, r0, r1
 8005da8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4bc5      	ldr	r3, [pc, #788]	; (80060c4 <UART_SetConfig+0x384>)
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d004      	beq.n	8005dbe <UART_SetConfig+0x7e>
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4bc3      	ldr	r3, [pc, #780]	; (80060c8 <UART_SetConfig+0x388>)
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d103      	bne.n	8005dc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dbe:	f7fd fde7 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 8005dc2:	6778      	str	r0, [r7, #116]	; 0x74
 8005dc4:	e002      	b.n	8005dcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dc6:	f7fd fdcf 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8005dca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	f040 80b6 	bne.w	8005f44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dda:	461c      	mov	r4, r3
 8005ddc:	f04f 0500 	mov.w	r5, #0
 8005de0:	4622      	mov	r2, r4
 8005de2:	462b      	mov	r3, r5
 8005de4:	1891      	adds	r1, r2, r2
 8005de6:	6439      	str	r1, [r7, #64]	; 0x40
 8005de8:	415b      	adcs	r3, r3
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44
 8005dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005df0:	1912      	adds	r2, r2, r4
 8005df2:	eb45 0303 	adc.w	r3, r5, r3
 8005df6:	f04f 0000 	mov.w	r0, #0
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	00d9      	lsls	r1, r3, #3
 8005e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e04:	00d0      	lsls	r0, r2, #3
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	1911      	adds	r1, r2, r4
 8005e0c:	6639      	str	r1, [r7, #96]	; 0x60
 8005e0e:	416b      	adcs	r3, r5
 8005e10:	667b      	str	r3, [r7, #100]	; 0x64
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e20:	415b      	adcs	r3, r3
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e2c:	f7fa f9f8 	bl	8000220 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4ba5      	ldr	r3, [pc, #660]	; (80060cc <UART_SetConfig+0x38c>)
 8005e36:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	011e      	lsls	r6, r3, #4
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	461c      	mov	r4, r3
 8005e42:	f04f 0500 	mov.w	r5, #0
 8005e46:	4622      	mov	r2, r4
 8005e48:	462b      	mov	r3, r5
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
 8005e52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e56:	1912      	adds	r2, r2, r4
 8005e58:	eb45 0303 	adc.w	r3, r5, r3
 8005e5c:	f04f 0000 	mov.w	r0, #0
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	00d9      	lsls	r1, r3, #3
 8005e66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e6a:	00d0      	lsls	r0, r2, #3
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	1911      	adds	r1, r2, r4
 8005e72:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e74:	416b      	adcs	r3, r5
 8005e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	1891      	adds	r1, r2, r2
 8005e84:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e86:	415b      	adcs	r3, r3
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e92:	f7fa f9c5 	bl	8000220 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <UART_SetConfig+0x38c>)
 8005e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	2164      	movs	r1, #100	; 0x64
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	3332      	adds	r3, #50	; 0x32
 8005eae:	4a87      	ldr	r2, [pc, #540]	; (80060cc <UART_SetConfig+0x38c>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ebc:	441e      	add	r6, r3
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f04f 0100 	mov.w	r1, #0
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	1894      	adds	r4, r2, r2
 8005ecc:	623c      	str	r4, [r7, #32]
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ed6:	1812      	adds	r2, r2, r0
 8005ed8:	eb41 0303 	adc.w	r3, r1, r3
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	f04f 0500 	mov.w	r5, #0
 8005ee4:	00dd      	lsls	r5, r3, #3
 8005ee6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eea:	00d4      	lsls	r4, r2, #3
 8005eec:	4622      	mov	r2, r4
 8005eee:	462b      	mov	r3, r5
 8005ef0:	1814      	adds	r4, r2, r0
 8005ef2:	653c      	str	r4, [r7, #80]	; 0x50
 8005ef4:	414b      	adcs	r3, r1
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	61b9      	str	r1, [r7, #24]
 8005f06:	415b      	adcs	r3, r3
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f12:	f7fa f985 	bl	8000220 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4b6c      	ldr	r3, [pc, #432]	; (80060cc <UART_SetConfig+0x38c>)
 8005f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	2164      	movs	r1, #100	; 0x64
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	3332      	adds	r3, #50	; 0x32
 8005f2e:	4a67      	ldr	r2, [pc, #412]	; (80060cc <UART_SetConfig+0x38c>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f003 0207 	and.w	r2, r3, #7
 8005f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4432      	add	r2, r6
 8005f40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f42:	e0b9      	b.n	80060b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f46:	461c      	mov	r4, r3
 8005f48:	f04f 0500 	mov.w	r5, #0
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	462b      	mov	r3, r5
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	6139      	str	r1, [r7, #16]
 8005f54:	415b      	adcs	r3, r3
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f5c:	1912      	adds	r2, r2, r4
 8005f5e:	eb45 0303 	adc.w	r3, r5, r3
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	00d9      	lsls	r1, r3, #3
 8005f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f70:	00d0      	lsls	r0, r2, #3
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	eb12 0804 	adds.w	r8, r2, r4
 8005f7a:	eb43 0905 	adc.w	r9, r3, r5
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f96:	0082      	lsls	r2, r0, #2
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa f940 	bl	8000220 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4b49      	ldr	r3, [pc, #292]	; (80060cc <UART_SetConfig+0x38c>)
 8005fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	011e      	lsls	r6, r3, #4
 8005fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	1894      	adds	r4, r2, r2
 8005fbc:	60bc      	str	r4, [r7, #8]
 8005fbe:	415b      	adcs	r3, r3
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fc6:	1812      	adds	r2, r2, r0
 8005fc8:	eb41 0303 	adc.w	r3, r1, r3
 8005fcc:	f04f 0400 	mov.w	r4, #0
 8005fd0:	f04f 0500 	mov.w	r5, #0
 8005fd4:	00dd      	lsls	r5, r3, #3
 8005fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fda:	00d4      	lsls	r4, r2, #3
 8005fdc:	4622      	mov	r2, r4
 8005fde:	462b      	mov	r3, r5
 8005fe0:	1814      	adds	r4, r2, r0
 8005fe2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fe4:	414b      	adcs	r3, r1
 8005fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	008b      	lsls	r3, r1, #2
 8005ffc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006000:	0082      	lsls	r2, r0, #2
 8006002:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006006:	f7fa f90b 	bl	8000220 <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <UART_SetConfig+0x38c>)
 8006010:	fba3 1302 	umull	r1, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	2164      	movs	r1, #100	; 0x64
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	3332      	adds	r3, #50	; 0x32
 8006022:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <UART_SetConfig+0x38c>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800602e:	441e      	add	r6, r3
 8006030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006032:	4618      	mov	r0, r3
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	1894      	adds	r4, r2, r2
 800603e:	603c      	str	r4, [r7, #0]
 8006040:	415b      	adcs	r3, r3
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006048:	1812      	adds	r2, r2, r0
 800604a:	eb41 0303 	adc.w	r3, r1, r3
 800604e:	f04f 0400 	mov.w	r4, #0
 8006052:	f04f 0500 	mov.w	r5, #0
 8006056:	00dd      	lsls	r5, r3, #3
 8006058:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800605c:	00d4      	lsls	r4, r2, #3
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	eb12 0a00 	adds.w	sl, r2, r0
 8006066:	eb43 0b01 	adc.w	fp, r3, r1
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006082:	0082      	lsls	r2, r0, #2
 8006084:	4650      	mov	r0, sl
 8006086:	4659      	mov	r1, fp
 8006088:	f7fa f8ca 	bl	8000220 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <UART_SetConfig+0x38c>)
 8006092:	fba3 1302 	umull	r1, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2164      	movs	r1, #100	; 0x64
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	3332      	adds	r3, #50	; 0x32
 80060a4:	4a09      	ldr	r2, [pc, #36]	; (80060cc <UART_SetConfig+0x38c>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4432      	add	r2, r6
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	377c      	adds	r7, #124	; 0x7c
 80060bc:	46bd      	mov	sp, r7
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	bf00      	nop
 80060c4:	40011000 	.word	0x40011000
 80060c8:	40011400 	.word	0x40011400
 80060cc:	51eb851f 	.word	0x51eb851f

080060d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d0:	b084      	sub	sp, #16
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	f107 001c 	add.w	r0, r7, #28
 80060de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d122      	bne.n	800612e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d105      	bne.n	8006122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fac0 	bl	80076a8 <USB_CoreReset>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	e01a      	b.n	8006164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fab4 	bl	80076a8 <USB_CoreReset>
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
 8006156:	e005      	b.n	8006164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10b      	bne.n	8006182 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f043 0206 	orr.w	r2, r3, #6
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f043 0220 	orr.w	r2, r3, #32
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618e:	b004      	add	sp, #16
 8006190:	4770      	bx	lr
	...

08006194 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d165      	bne.n	8006274 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4a41      	ldr	r2, [pc, #260]	; (80062b0 <USB_SetTurnaroundTime+0x11c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d906      	bls.n	80061be <USB_SetTurnaroundTime+0x2a>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <USB_SetTurnaroundTime+0x120>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d202      	bcs.n	80061be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061b8:	230f      	movs	r3, #15
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e062      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4a3c      	ldr	r2, [pc, #240]	; (80062b4 <USB_SetTurnaroundTime+0x120>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d306      	bcc.n	80061d4 <USB_SetTurnaroundTime+0x40>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4a3b      	ldr	r2, [pc, #236]	; (80062b8 <USB_SetTurnaroundTime+0x124>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d202      	bcs.n	80061d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061ce:	230e      	movs	r3, #14
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e057      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <USB_SetTurnaroundTime+0x124>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d306      	bcc.n	80061ea <USB_SetTurnaroundTime+0x56>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a37      	ldr	r2, [pc, #220]	; (80062bc <USB_SetTurnaroundTime+0x128>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d202      	bcs.n	80061ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061e4:	230d      	movs	r3, #13
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e04c      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4a33      	ldr	r2, [pc, #204]	; (80062bc <USB_SetTurnaroundTime+0x128>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d306      	bcc.n	8006200 <USB_SetTurnaroundTime+0x6c>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <USB_SetTurnaroundTime+0x12c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d802      	bhi.n	8006200 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061fa:	230c      	movs	r3, #12
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e041      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4a2f      	ldr	r2, [pc, #188]	; (80062c0 <USB_SetTurnaroundTime+0x12c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d906      	bls.n	8006216 <USB_SetTurnaroundTime+0x82>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <USB_SetTurnaroundTime+0x130>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d802      	bhi.n	8006216 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006210:	230b      	movs	r3, #11
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e036      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <USB_SetTurnaroundTime+0x130>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d906      	bls.n	800622c <USB_SetTurnaroundTime+0x98>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a29      	ldr	r2, [pc, #164]	; (80062c8 <USB_SetTurnaroundTime+0x134>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d802      	bhi.n	800622c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006226:	230a      	movs	r3, #10
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e02b      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <USB_SetTurnaroundTime+0x134>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d906      	bls.n	8006242 <USB_SetTurnaroundTime+0xae>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a25      	ldr	r2, [pc, #148]	; (80062cc <USB_SetTurnaroundTime+0x138>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d202      	bcs.n	8006242 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800623c:	2309      	movs	r3, #9
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e020      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a21      	ldr	r2, [pc, #132]	; (80062cc <USB_SetTurnaroundTime+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d306      	bcc.n	8006258 <USB_SetTurnaroundTime+0xc4>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <USB_SetTurnaroundTime+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d802      	bhi.n	8006258 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006252:	2308      	movs	r3, #8
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e015      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <USB_SetTurnaroundTime+0x13c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d906      	bls.n	800626e <USB_SetTurnaroundTime+0xda>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <USB_SetTurnaroundTime+0x140>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d202      	bcs.n	800626e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006268:	2307      	movs	r3, #7
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e00a      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800626e:	2306      	movs	r3, #6
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e007      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800627a:	2309      	movs	r3, #9
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e001      	b.n	8006284 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006280:	2309      	movs	r3, #9
 8006282:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	029b      	lsls	r3, r3, #10
 8006298:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800629c:	431a      	orrs	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	00d8acbf 	.word	0x00d8acbf
 80062b4:	00e4e1c0 	.word	0x00e4e1c0
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	01067380 	.word	0x01067380
 80062c0:	011a499f 	.word	0x011a499f
 80062c4:	01312cff 	.word	0x01312cff
 80062c8:	014ca43f 	.word	0x014ca43f
 80062cc:	016e3600 	.word	0x016e3600
 80062d0:	01a6ab1f 	.word	0x01a6ab1f
 80062d4:	01e84800 	.word	0x01e84800

080062d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f043 0201 	orr.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d106      	bne.n	8006348 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e00b      	b.n	8006360 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e001      	b.n	8006360 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e003      	b.n	8006368 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006360:	2032      	movs	r0, #50	; 0x32
 8006362:	f7fb fd8d 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006370:	b084      	sub	sp, #16
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800637e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	e009      	b.n	80063a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3340      	adds	r3, #64	; 0x40
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	2200      	movs	r2, #0
 800639c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b0e      	cmp	r3, #14
 80063a8:	d9f2      	bls.n	8006390 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d11c      	bne.n	80063ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e005      	b.n	80063f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	4619      	mov	r1, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	461a      	mov	r2, r3
 8006412:	680b      	ldr	r3, [r1, #0]
 8006414:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	2b01      	cmp	r3, #1
 800641a:	d10c      	bne.n	8006436 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006422:	2100      	movs	r1, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f949 	bl	80066bc <USB_SetDevSpeed>
 800642a:	e008      	b.n	800643e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800642c:	2101      	movs	r1, #1
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f944 	bl	80066bc <USB_SetDevSpeed>
 8006434:	e003      	b.n	800643e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006436:	2103      	movs	r1, #3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f93f 	bl	80066bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800643e:	2110      	movs	r1, #16
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8f3 	bl	800662c <USB_FlushTxFifo>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f911 	bl	8006678 <USB_FlushRxFifo>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	461a      	mov	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	461a      	mov	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e043      	b.n	8006512 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a0:	d118      	bne.n	80064d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	461a      	mov	r2, r3
 80064b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e013      	b.n	80064e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e008      	b.n	80064e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	461a      	mov	r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	461a      	mov	r2, r3
 8006506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800650a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3301      	adds	r3, #1
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3b7      	bcc.n	800648a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e043      	b.n	80065a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006536:	d118      	bne.n	800656a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	461a      	mov	r2, r3
 800654c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e013      	b.n	800657c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e008      	b.n	800657c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3301      	adds	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d3b7      	bcc.n	8006520 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f043 0210 	orr.w	r2, r3, #16
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <USB_DevInit+0x2b8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006610:	f043 0304 	orr.w	r3, r3, #4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006624:	b004      	add	sp, #16
 8006626:	4770      	bx	lr
 8006628:	803c3800 	.word	0x803c3800

0800662c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	019b      	lsls	r3, r3, #6
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <USB_FlushTxFifo+0x48>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e006      	b.n	8006666 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b20      	cmp	r3, #32
 8006662:	d0f0      	beq.n	8006646 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	00030d40 	.word	0x00030d40

08006678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2210      	movs	r2, #16
 8006688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <USB_FlushRxFifo+0x40>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d0f0      	beq.n	800668a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b087      	sub	sp, #28
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0306 	and.w	r3, r3, #6
 8006706:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d102      	bne.n	8006714 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]
 8006712:	e00a      	b.n	800672a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d002      	beq.n	8006720 <USB_GetDevSpeed+0x32>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d102      	bne.n	8006726 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006720:	2302      	movs	r3, #2
 8006722:	75fb      	strb	r3, [r7, #23]
 8006724:	e001      	b.n	800672a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006726:	230f      	movs	r3, #15
 8006728:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d13a      	bne.n	80067ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	2101      	movs	r1, #1
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006772:	4313      	orrs	r3, r2
 8006774:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d155      	bne.n	8006838 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	78db      	ldrb	r3, [r3, #3]
 80067a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	059b      	lsls	r3, r3, #22
 80067ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067b0:	4313      	orrs	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e036      	b.n	8006838 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	2101      	movs	r1, #1
 80067dc:	fa01 f303 	lsl.w	r3, r1, r3
 80067e0:	041b      	lsls	r3, r3, #16
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d11a      	bne.n	8006838 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	78db      	ldrb	r3, [r3, #3]
 800681c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800681e:	430b      	orrs	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d161      	bne.n	8006928 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800687a:	d11f      	bne.n	80068bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800689a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	2101      	movs	r1, #1
 80068ce:	fa01 f303 	lsl.w	r3, r1, r3
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068dc:	4013      	ands	r3, r2
 80068de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006900:	4013      	ands	r3, r2
 8006902:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	0159      	lsls	r1, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	440b      	add	r3, r1
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	4619      	mov	r1, r3
 8006920:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <USB_DeactivateEndpoint+0x1b0>)
 8006922:	4013      	ands	r3, r2
 8006924:	600b      	str	r3, [r1, #0]
 8006926:	e060      	b.n	80069ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800693a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693e:	d11f      	bne.n	8006980 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800695e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	2101      	movs	r1, #1
 8006992:	fa01 f303 	lsl.w	r3, r1, r3
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	43db      	mvns	r3, r3
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a0:	4013      	ands	r3, r2
 80069a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	43db      	mvns	r3, r3
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c4:	4013      	ands	r3, r2
 80069c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	0159      	lsls	r1, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	440b      	add	r3, r1
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	4619      	mov	r1, r3
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <USB_DeactivateEndpoint+0x1b4>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	ec337800 	.word	0xec337800
 80069fc:	eff37800 	.word	0xeff37800

08006a00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 815c 	bne.w	8006cda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d132      	bne.n	8006a90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a88:	0cdb      	lsrs	r3, r3, #19
 8006a8a:	04db      	lsls	r3, r3, #19
 8006a8c:	6113      	str	r3, [r2, #16]
 8006a8e:	e074      	b.n	8006b7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	0cdb      	lsrs	r3, r3, #19
 8006aac:	04db      	lsls	r3, r3, #19
 8006aae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ace:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	6959      	ldr	r1, [r3, #20]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	440b      	add	r3, r1
 8006aec:	1e59      	subs	r1, r3, #1
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006af6:	04d9      	lsls	r1, r3, #19
 8006af8:	4b9d      	ldr	r3, [pc, #628]	; (8006d70 <USB_EPStartXfer+0x370>)
 8006afa:	400b      	ands	r3, r1
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	0148      	lsls	r0, r1, #5
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	4401      	add	r1, r0
 8006b04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b22:	69b9      	ldr	r1, [r7, #24]
 8006b24:	0148      	lsls	r0, r1, #5
 8006b26:	69f9      	ldr	r1, [r7, #28]
 8006b28:	4401      	add	r1, r0
 8006b2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	78db      	ldrb	r3, [r3, #3]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d11f      	bne.n	8006b7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d14b      	bne.n	8006c18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	78db      	ldrb	r3, [r3, #3]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d128      	bne.n	8006bf6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d110      	bne.n	8006bd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e00f      	b.n	8006bf6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e12f      	b.n	8006e78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d015      	beq.n	8006c6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8117 	beq.w	8006e78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c66:	4313      	orrs	r3, r2
 8006c68:	634b      	str	r3, [r1, #52]	; 0x34
 8006c6a:	e105      	b.n	8006e78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	0151      	lsls	r1, r2, #5
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	440a      	add	r2, r1
 8006c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e00f      	b.n	8006cbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68d9      	ldr	r1, [r3, #12]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	b298      	uxth	r0, r3
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fa2b 	bl	800712e <USB_WritePacket>
 8006cd8:	e0ce      	b.n	8006e78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	0cdb      	lsrs	r3, r3, #19
 8006cf6:	04db      	lsls	r3, r3, #19
 8006cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d126      	bne.n	8006d74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	0148      	lsls	r0, r1, #5
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	4401      	add	r1, r0
 8006d44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d6a:	6113      	str	r3, [r2, #16]
 8006d6c:	e036      	b.n	8006ddc <USB_EPStartXfer+0x3dc>
 8006d6e:	bf00      	nop
 8006d70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	1e5a      	subs	r2, r3, #1
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	8afb      	ldrh	r3, [r7, #22]
 8006d9a:	04d9      	lsls	r1, r3, #19
 8006d9c:	4b39      	ldr	r3, [pc, #228]	; (8006e84 <USB_EPStartXfer+0x484>)
 8006d9e:	400b      	ands	r3, r1
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	0148      	lsls	r0, r1, #5
 8006da4:	69f9      	ldr	r1, [r7, #28]
 8006da6:	4401      	add	r1, r0
 8006da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dac:	4313      	orrs	r3, r2
 8006dae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	8af9      	ldrh	r1, [r7, #22]
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	0148      	lsls	r0, r1, #5
 8006dd0:	69f9      	ldr	r1, [r7, #28]
 8006dd2:	4401      	add	r1, r0
 8006dd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d10d      	bne.n	8006dfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	460a      	mov	r2, r1
 8006dfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	78db      	ldrb	r3, [r3, #3]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d128      	bne.n	8006e58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d110      	bne.n	8006e38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e00f      	b.n	8006e58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	1ff80000 	.word	0x1ff80000

08006e88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	f040 80cd 	bne.w	8007044 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d132      	bne.n	8006f18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f10:	0cdb      	lsrs	r3, r3, #19
 8006f12:	04db      	lsls	r3, r3, #19
 8006f14:	6113      	str	r3, [r2, #16]
 8006f16:	e04e      	b.n	8006fb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f32:	0cdb      	lsrs	r3, r3, #19
 8006f34:	04db      	lsls	r3, r3, #19
 8006f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d903      	bls.n	8006f70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa6:	6939      	ldr	r1, [r7, #16]
 8006fa8:	0148      	lsls	r0, r1, #5
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	4401      	add	r1, r0
 8006fae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d11e      	bne.n	8006ffa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e092      	b.n	8007120 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007018:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d07e      	beq.n	8007120 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800703e:	4313      	orrs	r3, r2
 8007040:	634b      	str	r3, [r1, #52]	; 0x34
 8007042:	e06d      	b.n	8007120 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	0cdb      	lsrs	r3, r3, #19
 8007060:	04db      	lsls	r3, r3, #19
 8007062:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007086:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ce:	6939      	ldr	r1, [r7, #16]
 80070d0:	0148      	lsls	r0, r1, #5
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	4401      	add	r1, r0
 80070d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070da:	4313      	orrs	r3, r2
 80070dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10d      	bne.n	8007100 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68d9      	ldr	r1, [r3, #12]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	460a      	mov	r2, r1
 80070fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800711e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800712e:	b480      	push	{r7}
 8007130:	b089      	sub	sp, #36	; 0x24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	4611      	mov	r1, r2
 800713a:	461a      	mov	r2, r3
 800713c:	460b      	mov	r3, r1
 800713e:	71fb      	strb	r3, [r7, #7]
 8007140:	4613      	mov	r3, r2
 8007142:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800714c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11a      	bne.n	800718a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007154:	88bb      	ldrh	r3, [r7, #4]
 8007156:	3303      	adds	r3, #3
 8007158:	089b      	lsrs	r3, r3, #2
 800715a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800715c:	2300      	movs	r3, #0
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e00f      	b.n	8007182 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	031a      	lsls	r2, r3, #12
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716e:	461a      	mov	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3304      	adds	r3, #4
 800717a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	3301      	adds	r3, #1
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	d3eb      	bcc.n	8007162 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3724      	adds	r7, #36	; 0x24
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	; 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	3303      	adds	r3, #3
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e00b      	b.n	80071d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3304      	adds	r3, #4
 80071cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d3ef      	bcc.n	80071bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80071dc:	69fb      	ldr	r3, [r7, #28]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3724      	adds	r7, #36	; 0x24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d12c      	bne.n	8007260 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	db12      	blt.n	800723e <USB_EPSetStall+0x54>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800723c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e02b      	b.n	80072b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	db12      	blt.n	8007298 <USB_EPSetStall+0xae>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00f      	beq.n	8007298 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007296:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d128      	bne.n	8007334 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d003      	beq.n	8007312 <USB_EPClearStall+0x4c>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	78db      	ldrb	r3, [r3, #3]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d138      	bne.n	8007384 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e027      	b.n	8007384 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007352:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	78db      	ldrb	r3, [r3, #3]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d003      	beq.n	8007364 <USB_EPClearStall+0x9e>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d10f      	bne.n	8007384 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	440a      	add	r2, r1
 800737a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800737e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007382:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073cc:	4313      	orrs	r3, r2
 80073ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800740c:	f023 0302 	bic.w	r3, r3, #2
 8007410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744e:	f043 0302 	orr.w	r3, r3, #2
 8007452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4013      	ands	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	4013      	ands	r3, r2
 80074aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	0c1b      	lsrs	r3, r3, #16
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	b29b      	uxth	r3, r3
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800751e:	68bb      	ldr	r3, [r7, #8]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
 800755c:	01db      	lsls	r3, r3, #7
 800755e:	b2db      	uxtb	r3, r3
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4013      	ands	r3, r2
 8007578:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800757a:	68bb      	ldr	r3, [r7, #8]
}
 800757c:	4618      	mov	r0, r3
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0301 	and.w	r3, r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	460b      	mov	r3, r1
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	333c      	adds	r3, #60	; 0x3c
 8007602:	3304      	adds	r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4a26      	ldr	r2, [pc, #152]	; (80076a4 <USB_EP0_OutStart+0xb8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d90a      	bls.n	8007626 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800761c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007620:	d101      	bne.n	8007626 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e037      	b.n	8007696 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	461a      	mov	r2, r3
 800762e:	2300      	movs	r3, #0
 8007630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007654:	f043 0318 	orr.w	r3, r3, #24
 8007658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800766c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10f      	bne.n	8007694 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	4f54300a 	.word	0x4f54300a

080076a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a13      	ldr	r2, [pc, #76]	; (800770c <USB_CoreReset+0x64>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d901      	bls.n	80076c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e01b      	b.n	80076fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	daf2      	bge.n	80076b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f043 0201 	orr.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <USB_CoreReset+0x64>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d901      	bls.n	80076f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d0f0      	beq.n	80076de <USB_CoreReset+0x36>

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	00030d40 	.word	0x00030d40

08007710 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800771c:	2010      	movs	r0, #16
 800771e:	f004 fd91 	bl	800c244 <USBD_static_malloc>
 8007722:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d108      	bne.n	800773c <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <USBD_HID_Init+0x6c>)
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007738:	2302      	movs	r3, #2
 800773a:	e01b      	b.n	8007774 <USBD_HID_Init+0x64>
  }

  pdev->pClassData = (void *)hhid;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	7c1b      	ldrb	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2207      	movs	r2, #7
 8007750:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007752:	e002      	b.n	800775a <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2208      	movs	r2, #8
 8007758:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800775a:	2320      	movs	r3, #32
 800775c:	2203      	movs	r2, #3
 800775e:	2181      	movs	r1, #129	; 0x81
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f004 fc10 	bl	800bf86 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000652 	.word	0x20000652

08007780 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800778c:	2181      	movs	r1, #129	; 0x81
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f004 fc1f 	bl	800bfd2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077b0:	4618      	mov	r0, r3
 80077b2:	f004 fd55 	bl	800c260 <USBD_static_free>
    pdev->pClassData = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d8:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 80077e8:	4b94      	ldr	r3, [pc, #592]	; (8007a3c <USBD_HID_Setup+0x274>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e11f      	b.n	8007a32 <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	f000 80cd 	beq.w	800799a <USBD_HID_Setup+0x1d2>
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	f200 810d 	bhi.w	8007a20 <USBD_HID_Setup+0x258>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d045      	beq.n	8007896 <USBD_HID_Setup+0xce>
 800780a:	2b20      	cmp	r3, #32
 800780c:	f040 8108 	bne.w	8007a20 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	3b02      	subs	r3, #2
 8007816:	2b09      	cmp	r3, #9
 8007818:	d835      	bhi.n	8007886 <USBD_HID_Setup+0xbe>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBD_HID_Setup+0x58>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007877 	.word	0x08007877
 8007824:	08007857 	.word	0x08007857
 8007828:	08007887 	.word	0x08007887
 800782c:	08007887 	.word	0x08007887
 8007830:	08007887 	.word	0x08007887
 8007834:	08007887 	.word	0x08007887
 8007838:	08007887 	.word	0x08007887
 800783c:	08007887 	.word	0x08007887
 8007840:	08007865 	.word	0x08007865
 8007844:	08007849 	.word	0x08007849
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	601a      	str	r2, [r3, #0]
          break;
 8007854:	e01e      	b.n	8007894 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2201      	movs	r2, #1
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 faae 	bl	8008dbe <USBD_CtlSendData>
          break;
 8007862:	e017      	b.n	8007894 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	885b      	ldrh	r3, [r3, #2]
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	b29b      	uxth	r3, r3
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	605a      	str	r2, [r3, #4]
          break;
 8007874:	e00e      	b.n	8007894 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	3304      	adds	r3, #4
 800787a:	2201      	movs	r2, #1
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fa9d 	bl	8008dbe <USBD_CtlSendData>
          break;
 8007884:	e006      	b.n	8007894 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 fa27 	bl	8008cdc <USBD_CtlError>
          ret = USBD_FAIL;
 800788e:	2303      	movs	r3, #3
 8007890:	77fb      	strb	r3, [r7, #31]
          break;
 8007892:	bf00      	nop
      }
      break;
 8007894:	e0cc      	b.n	8007a30 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b0b      	cmp	r3, #11
 800789c:	d874      	bhi.n	8007988 <USBD_HID_Setup+0x1c0>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <USBD_HID_Setup+0xdc>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078d5 	.word	0x080078d5
 80078a8:	08007997 	.word	0x08007997
 80078ac:	08007989 	.word	0x08007989
 80078b0:	08007989 	.word	0x08007989
 80078b4:	08007989 	.word	0x08007989
 80078b8:	08007989 	.word	0x08007989
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	08007989 	.word	0x08007989
 80078c4:	08007989 	.word	0x08007989
 80078c8:	08007989 	.word	0x08007989
 80078cc:	08007937 	.word	0x08007937
 80078d0:	08007961 	.word	0x08007961
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d107      	bne.n	80078f0 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078e0:	f107 030e 	add.w	r3, r7, #14
 80078e4:	2202      	movs	r2, #2
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fa68 	bl	8008dbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ee:	e053      	b.n	8007998 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f9f2 	bl	8008cdc <USBD_CtlError>
            ret = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	77fb      	strb	r3, [r7, #31]
          break;
 80078fc:	e04c      	b.n	8007998 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b21      	cmp	r3, #33	; 0x21
 8007908:	d10e      	bne.n	8007928 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800790a:	4b4d      	ldr	r3, [pc, #308]	; (8007a40 <USBD_HID_Setup+0x278>)
 800790c:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b12      	cmp	r3, #18
 8007914:	bf28      	it	cs
 8007916:	2312      	movcs	r3, #18
 8007918:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800791a:	8afb      	ldrh	r3, [r7, #22]
 800791c:	461a      	mov	r2, r3
 800791e:	6939      	ldr	r1, [r7, #16]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 fa4c 	bl	8008dbe <USBD_CtlSendData>
          break;
 8007926:	e037      	b.n	8007998 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 f9d6 	bl	8008cdc <USBD_CtlError>
            ret = USBD_FAIL;
 8007930:	2303      	movs	r3, #3
 8007932:	77fb      	strb	r3, [r7, #31]
            break;
 8007934:	e030      	b.n	8007998 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d107      	bne.n	8007952 <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	3308      	adds	r3, #8
 8007946:	2201      	movs	r2, #1
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fa37 	bl	8008dbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007950:	e022      	b.n	8007998 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f9c1 	bl	8008cdc <USBD_CtlError>
            ret = USBD_FAIL;
 800795a:	2303      	movs	r3, #3
 800795c:	77fb      	strb	r3, [r7, #31]
          break;
 800795e:	e01b      	b.n	8007998 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b03      	cmp	r3, #3
 800796a:	d106      	bne.n	800797a <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	885b      	ldrh	r3, [r3, #2]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007978:	e00e      	b.n	8007998 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9ad 	bl	8008cdc <USBD_CtlError>
            ret = USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	77fb      	strb	r3, [r7, #31]
          break;
 8007986:	e007      	b.n	8007998 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f9a6 	bl	8008cdc <USBD_CtlError>
          ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	77fb      	strb	r3, [r7, #31]
          break;
 8007994:	e000      	b.n	8007998 <USBD_HID_Setup+0x1d0>
          break;
 8007996:	bf00      	nop
      }
      break;
 8007998:	e04a      	b.n	8007a30 <USBD_HID_Setup+0x268>

    case (0xC1 & USB_REQ_TYPE_MASK):			//this is for the og xbox, this is the custom vendor request
    	 hid_setup_ran++;
 800799a:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <USBD_HID_Setup+0x27c>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <USBD_HID_Setup+0x27c>)
 80079a4:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d10f      	bne.n	80079ce <USBD_HID_Setup+0x206>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80079b6:	d10a      	bne.n	80079ce <USBD_HID_Setup+0x206>
    		len = 16;
 80079b8:	2310      	movs	r3, #16
 80079ba:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 80079bc:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <USBD_HID_Setup+0x278>)
 80079be:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079c0:	8afb      	ldrh	r3, [r7, #22]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6939      	ldr	r1, [r7, #16]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f9f9 	bl	8008dbe <USBD_CtlSendData>
 80079cc:	e027      	b.n	8007a1e <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10f      	bne.n	80079f6 <USBD_HID_Setup+0x22e>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079de:	d10a      	bne.n	80079f6 <USBD_HID_Setup+0x22e>
    		len = 20;
 80079e0:	2314      	movs	r3, #20
 80079e2:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <USBD_HID_Setup+0x280>)
 80079e6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6939      	ldr	r1, [r7, #16]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 f9e5 	bl	8008dbe <USBD_CtlSendData>
 80079f4:	e013      	b.n	8007a1e <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d117      	bne.n	8007a2e <USBD_HID_Setup+0x266>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	885b      	ldrh	r3, [r3, #2]
 8007a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a06:	d112      	bne.n	8007a2e <USBD_HID_Setup+0x266>
    		len = 6;
 8007a08:	2306      	movs	r3, #6
 8007a0a:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <USBD_HID_Setup+0x284>)
 8007a0e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a10:	8afb      	ldrh	r3, [r7, #22]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6939      	ldr	r1, [r7, #16]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f9d1 	bl	8008dbe <USBD_CtlSendData>
    	}
    break;
 8007a1c:	e007      	b.n	8007a2e <USBD_HID_Setup+0x266>
 8007a1e:	e006      	b.n	8007a2e <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 f95a 	bl	8008cdc <USBD_CtlError>
      ret = USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	77fb      	strb	r3, [r7, #31]
      break;
 8007a2c:	e000      	b.n	8007a30 <USBD_HID_Setup+0x268>
    break;
 8007a2e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000652 	.word	0x20000652
 8007a40:	20000084 	.word	0x20000084
 8007a44:	20000651 	.word	0x20000651
 8007a48:	200000a0 	.word	0x200000a0
 8007a4c:	200000b4 	.word	0x200000b4

08007a50 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a64:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e013      	b.n	8007a98 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d10c      	bne.n	8007a96 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	7b1b      	ldrb	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d108      	bne.n	8007a96 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2201      	movs	r2, #1
 8007a88:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	2181      	movs	r1, #129	; 0x81
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f004 fb46 	bl	800c122 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007aae:	4b03      	ldr	r3, [pc, #12]	; (8007abc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	20000044 	.word	0x20000044

08007ac0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8007ac8:	bf00      	nop
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	20000064 	.word	0x20000064

08007af8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	220a      	movs	r2, #10
 8007b28:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b2a:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000094 	.word	0x20000094

08007b3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e01f      	b.n	8007b94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	79fa      	ldrb	r2, [r7, #7]
 8007b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f004 f995 	bl	800beb8 <USBD_LL_Init>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e016      	b.n	8007be2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	f107 020e 	add.w	r2, r7, #14
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	4602      	mov	r2, r0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f004 f9ac 	bl	800bf50 <USBD_LL_Start>
 8007bf8:	4603      	mov	r3, r0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d009      	beq.n	8007c46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	4611      	mov	r1, r2
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
  }

  return USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 ffe8 	bl	8008c68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cb4:	f003 031f 	and.w	r3, r3, #31
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d01a      	beq.n	8007cf2 <USBD_LL_SetupStage+0x72>
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d822      	bhi.n	8007d06 <USBD_LL_SetupStage+0x86>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <USBD_LL_SetupStage+0x4a>
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d00a      	beq.n	8007cde <USBD_LL_SetupStage+0x5e>
 8007cc8:	e01d      	b.n	8007d06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa62 	bl	800819c <USBD_StdDevReq>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
      break;
 8007cdc:	e020      	b.n	8007d20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb1e 	bl	8008328 <USBD_StdItfReq>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e016      	b.n	8007d20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fb5d 	bl	80083ba <USBD_StdEPReq>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]
      break;
 8007d04:	e00c      	b.n	8007d20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f004 f97b 	bl	800c010 <USBD_LL_StallEP>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	460b      	mov	r3, r1
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d138      	bne.n	8007db0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d14a      	bne.n	8007de6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d913      	bls.n	8007d84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	4293      	cmp	r3, r2
 8007d74:	bf28      	it	cs
 8007d76:	4613      	movcs	r3, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f001 f84a 	bl	8008e16 <USBD_CtlContinueRx>
 8007d82:	e030      	b.n	8007de6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d10b      	bne.n	8007da8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f001 f845 	bl	8008e38 <USBD_CtlSendStatus>
 8007dae:	e01a      	b.n	8007de6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d114      	bne.n	8007de6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	7afa      	ldrb	r2, [r7, #11]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4798      	blx	r3
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	e000      	b.n	8007de8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d16b      	bne.n	8007edc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3314      	adds	r3, #20
 8007e08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d156      	bne.n	8007ec2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d914      	bls.n	8007e4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	1ad2      	subs	r2, r2, r3
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 ffdc 	bl	8008df4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f004 f98e 	bl	800c164 <USBD_LL_PrepareReceive>
 8007e48:	e03b      	b.n	8007ec2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d11c      	bne.n	8007e90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d316      	bcc.n	8007e90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d20f      	bcs.n	8007e90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e70:	2200      	movs	r2, #0
 8007e72:	2100      	movs	r1, #0
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 ffbd 	bl	8008df4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e82:	2300      	movs	r3, #0
 8007e84:	2200      	movs	r2, #0
 8007e86:	2100      	movs	r1, #0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f004 f96b 	bl	800c164 <USBD_LL_PrepareReceive>
 8007e8e:	e018      	b.n	8007ec2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d10b      	bne.n	8007eb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f004 f8aa 	bl	800c010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 ffce 	bl	8008e5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d122      	bne.n	8007f12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff fe98 	bl	8007c02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eda:	e01a      	b.n	8007f12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d114      	bne.n	8007f12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	7afa      	ldrb	r2, [r7, #11]
 8007efe:	4611      	mov	r1, r2
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	4798      	blx	r3
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	e000      	b.n	8007f14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e02f      	b.n	8007fb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00f      	beq.n	8007f7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6852      	ldr	r2, [r2, #4]
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	4611      	mov	r1, r2
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f004 f800 	bl	800bf86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f003 fff2 	bl	800bf86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2240      	movs	r2, #64	; 0x40
 8007fac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b04      	cmp	r3, #4
 8008016:	d106      	bne.n	8008026 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800801e:	b2da      	uxtb	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	e012      	b.n	8008070 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b03      	cmp	r3, #3
 8008054:	d10b      	bne.n	800806e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	e014      	b.n	80080bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d10d      	bne.n	80080ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	4611      	mov	r1, r2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	e014      	b.n	8008108 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d10d      	bne.n	8008106 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d009      	beq.n	8008154 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6852      	ldr	r2, [r2, #4]
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	4611      	mov	r1, r2
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
  }

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800815e:	b480      	push	{r7}
 8008160:	b087      	sub	sp, #28
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	3301      	adds	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800817c:	8a3b      	ldrh	r3, [r7, #16]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b21a      	sxth	r2, r3
 8008182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008186:	4313      	orrs	r3, r2
 8008188:	b21b      	sxth	r3, r3
 800818a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800818c:	89fb      	ldrh	r3, [r7, #14]
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2bc1      	cmp	r3, #193	; 0xc1
 80081b0:	d148      	bne.n	8008244 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	2b06      	cmp	r3, #6
 80081c0:	d10f      	bne.n	80081e2 <USBD_StdDevReq+0x46>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80081ca:	d10a      	bne.n	80081e2 <USBD_StdDevReq+0x46>
  		len = 16;
 80081cc:	2310      	movs	r3, #16
 80081ce:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 80081d0:	4b51      	ldr	r3, [pc, #324]	; (8008318 <USBD_StdDevReq+0x17c>)
 80081d2:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80081d4:	89bb      	ldrh	r3, [r7, #12]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fdef 	bl	8008dbe <USBD_CtlSendData>
 80081e0:	e026      	b.n	8008230 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10f      	bne.n	800820a <USBD_StdDevReq+0x6e>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f2:	d10a      	bne.n	800820a <USBD_StdDevReq+0x6e>
  		len = 20;
 80081f4:	2314      	movs	r3, #20
 80081f6:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 80081f8:	4b48      	ldr	r3, [pc, #288]	; (800831c <USBD_StdDevReq+0x180>)
 80081fa:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 80081fc:	89bb      	ldrh	r3, [r7, #12]
 80081fe:	461a      	mov	r2, r3
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fddb 	bl	8008dbe <USBD_CtlSendData>
 8008208:	e012      	b.n	8008230 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d10e      	bne.n	8008230 <USBD_StdDevReq+0x94>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	885b      	ldrh	r3, [r3, #2]
 8008216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821a:	d109      	bne.n	8008230 <USBD_StdDevReq+0x94>
  		len = 6;
 800821c:	2306      	movs	r3, #6
 800821e:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008220:	4b3f      	ldr	r3, [pc, #252]	; (8008320 <USBD_StdDevReq+0x184>)
 8008222:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008224:	89bb      	ldrh	r3, [r7, #12]
 8008226:	461a      	mov	r2, r3
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fdc7 	bl	8008dbe <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	e064      	b.n	800830e <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d005      	beq.n	800825c <USBD_StdDevReq+0xc0>
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d854      	bhi.n	80082fe <USBD_StdDevReq+0x162>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_StdDevReq+0xd4>
 8008258:	2b20      	cmp	r3, #32
 800825a:	d150      	bne.n	80082fe <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
		  break;
 800826e:	e04e      	b.n	800830e <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	2b09      	cmp	r3, #9
 8008276:	d83c      	bhi.n	80082f2 <USBD_StdDevReq+0x156>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USBD_StdDevReq+0xe4>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	080082d5 	.word	0x080082d5
 8008284:	080082e9 	.word	0x080082e9
 8008288:	080082f3 	.word	0x080082f3
 800828c:	080082df 	.word	0x080082df
 8008290:	080082f3 	.word	0x080082f3
 8008294:	080082b3 	.word	0x080082b3
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082f3 	.word	0x080082f3
 80082a0:	080082cb 	.word	0x080082cb
 80082a4:	080082bd 	.word	0x080082bd
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9e8 	bl	8008680 <USBD_GetDescriptor>
			  break;
 80082b0:	e024      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fb4d 	bl	8008954 <USBD_SetAddress>
			  break;
 80082ba:	e01f      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fb8c 	bl	80089dc <USBD_SetConfig>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
			  break;
 80082c8:	e018      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fc2b 	bl	8008b28 <USBD_GetConfig>
			  break;
 80082d2:	e013      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fc5c 	bl	8008b94 <USBD_GetStatus>
			  break;
 80082dc:	e00e      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fc8b 	bl	8008bfc <USBD_SetFeature>
			  break;
 80082e6:	e009      	b.n	80082fc <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fc9a 	bl	8008c24 <USBD_ClrFeature>
			  break;
 80082f0:	e004      	b.n	80082fc <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcf1 	bl	8008cdc <USBD_CtlError>
			  break;
 80082fa:	bf00      	nop
		  }
		  break;
 80082fc:	e007      	b.n	800830e <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <USBD_StdDevReq+0x188>)
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fce8 	bl	8008cdc <USBD_CtlError>
		  break;
 800830c:	bf00      	nop
	  }
	}
  return ret;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	200000bc 	.word	0x200000bc
 800831c:	200000cc 	.word	0x200000cc
 8008320:	200000e0 	.word	0x200000e0
 8008324:	20000653 	.word	0x20000653

08008328 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d005      	beq.n	800834e <USBD_StdItfReq+0x26>
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d82f      	bhi.n	80083a6 <USBD_StdItfReq+0x7e>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <USBD_StdItfReq+0x26>
 800834a:	2b20      	cmp	r3, #32
 800834c:	d12b      	bne.n	80083a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	2b02      	cmp	r3, #2
 800835a:	d81d      	bhi.n	8008398 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	889b      	ldrh	r3, [r3, #4]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b01      	cmp	r3, #1
 8008364:	d813      	bhi.n	800838e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	88db      	ldrh	r3, [r3, #6]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d110      	bne.n	80083a2 <USBD_StdItfReq+0x7a>
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fd56 	bl	8008e38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800838c:	e009      	b.n	80083a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fca3 	bl	8008cdc <USBD_CtlError>
          break;
 8008396:	e004      	b.n	80083a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fc9e 	bl	8008cdc <USBD_CtlError>
          break;
 80083a0:	e000      	b.n	80083a4 <USBD_StdItfReq+0x7c>
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc97 	bl	8008cdc <USBD_CtlError>
      break;
 80083ae:	bf00      	nop
  }

  return ret;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	889b      	ldrh	r3, [r3, #4]
 80083cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d007      	beq.n	80083ea <USBD_StdEPReq+0x30>
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	f200 8145 	bhi.w	800866a <USBD_StdEPReq+0x2b0>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00c      	beq.n	80083fe <USBD_StdEPReq+0x44>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	f040 8140 	bne.w	800866a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
      break;
 80083fc:	e13a      	b.n	8008674 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d007      	beq.n	8008416 <USBD_StdEPReq+0x5c>
 8008406:	2b03      	cmp	r3, #3
 8008408:	f300 8129 	bgt.w	800865e <USBD_StdEPReq+0x2a4>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d07f      	beq.n	8008510 <USBD_StdEPReq+0x156>
 8008410:	2b01      	cmp	r3, #1
 8008412:	d03c      	beq.n	800848e <USBD_StdEPReq+0xd4>
 8008414:	e123      	b.n	800865e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d002      	beq.n	8008428 <USBD_StdEPReq+0x6e>
 8008422:	2b03      	cmp	r3, #3
 8008424:	d016      	beq.n	8008454 <USBD_StdEPReq+0x9a>
 8008426:	e02c      	b.n	8008482 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00d      	beq.n	800844a <USBD_StdEPReq+0x90>
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b80      	cmp	r3, #128	; 0x80
 8008432:	d00a      	beq.n	800844a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f003 fde9 	bl	800c010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800843e:	2180      	movs	r1, #128	; 0x80
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f003 fde5 	bl	800c010 <USBD_LL_StallEP>
 8008446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008448:	e020      	b.n	800848c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc45 	bl	8008cdc <USBD_CtlError>
              break;
 8008452:	e01b      	b.n	800848c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	885b      	ldrh	r3, [r3, #2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10e      	bne.n	800847a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <USBD_StdEPReq+0xc0>
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b80      	cmp	r3, #128	; 0x80
 8008466:	d008      	beq.n	800847a <USBD_StdEPReq+0xc0>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	88db      	ldrh	r3, [r3, #6]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f003 fdcb 	bl	800c010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fcdc 	bl	8008e38 <USBD_CtlSendStatus>

              break;
 8008480:	e004      	b.n	800848c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fc29 	bl	8008cdc <USBD_CtlError>
              break;
 800848a:	bf00      	nop
          }
          break;
 800848c:	e0ec      	b.n	8008668 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d002      	beq.n	80084a0 <USBD_StdEPReq+0xe6>
 800849a:	2b03      	cmp	r3, #3
 800849c:	d016      	beq.n	80084cc <USBD_StdEPReq+0x112>
 800849e:	e030      	b.n	8008502 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00d      	beq.n	80084c2 <USBD_StdEPReq+0x108>
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b80      	cmp	r3, #128	; 0x80
 80084aa:	d00a      	beq.n	80084c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 fdad 	bl	800c010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b6:	2180      	movs	r1, #128	; 0x80
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f003 fda9 	bl	800c010 <USBD_LL_StallEP>
 80084be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084c0:	e025      	b.n	800850e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc09 	bl	8008cdc <USBD_CtlError>
              break;
 80084ca:	e020      	b.n	800850e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	885b      	ldrh	r3, [r3, #2]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d11b      	bne.n	800850c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f003 fdb3 	bl	800c04e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fca5 	bl	8008e38 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fbe9 	bl	8008cdc <USBD_CtlError>
              break;
 800850a:	e000      	b.n	800850e <USBD_StdEPReq+0x154>
              break;
 800850c:	bf00      	nop
          }
          break;
 800850e:	e0ab      	b.n	8008668 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	d002      	beq.n	8008522 <USBD_StdEPReq+0x168>
 800851c:	2b03      	cmp	r3, #3
 800851e:	d032      	beq.n	8008586 <USBD_StdEPReq+0x1cc>
 8008520:	e097      	b.n	8008652 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <USBD_StdEPReq+0x17e>
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b80      	cmp	r3, #128	; 0x80
 800852c:	d004      	beq.n	8008538 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fbd3 	bl	8008cdc <USBD_CtlError>
                break;
 8008536:	e091      	b.n	800865c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0b      	bge.n	8008558 <USBD_StdEPReq+0x19e>
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	3310      	adds	r3, #16
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	3304      	adds	r3, #4
 8008556:	e00b      	b.n	8008570 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	3304      	adds	r3, #4
 8008570:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2202      	movs	r2, #2
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc1d 	bl	8008dbe <USBD_CtlSendData>
              break;
 8008584:	e06a      	b.n	800865c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	da11      	bge.n	80085b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3324      	adds	r3, #36	; 0x24
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d117      	bne.n	80085d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fb96 	bl	8008cdc <USBD_CtlError>
                  break;
 80085b0:	e054      	b.n	800865c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	f003 020f 	and.w	r2, r3, #15
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fb83 	bl	8008cdc <USBD_CtlError>
                  break;
 80085d6:	e041      	b.n	800865c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da0b      	bge.n	80085f8 <USBD_StdEPReq+0x23e>
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	3310      	adds	r3, #16
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	3304      	adds	r3, #4
 80085f6:	e00b      	b.n	8008610 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	3304      	adds	r3, #4
 8008610:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <USBD_StdEPReq+0x264>
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b80      	cmp	r3, #128	; 0x80
 800861c:	d103      	bne.n	8008626 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e00e      	b.n	8008644 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f003 fd2e 	bl	800c08c <USBD_LL_IsStallEP>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2201      	movs	r2, #1
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e002      	b.n	8008644 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2202      	movs	r2, #2
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fbb7 	bl	8008dbe <USBD_CtlSendData>
              break;
 8008650:	e004      	b.n	800865c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb41 	bl	8008cdc <USBD_CtlError>
              break;
 800865a:	bf00      	nop
          }
          break;
 800865c:	e004      	b.n	8008668 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb3b 	bl	8008cdc <USBD_CtlError>
          break;
 8008666:	bf00      	nop
      }
      break;
 8008668:	e004      	b.n	8008674 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fb35 	bl	8008cdc <USBD_CtlError>
      break;
 8008672:	bf00      	nop
  }

  return ret;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	0a1b      	lsrs	r3, r3, #8
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	f200 8128 	bhi.w	80088f6 <USBD_GetDescriptor+0x276>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <USBD_GetDescriptor+0x2c>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086e1 	.word	0x080086e1
 80086b4:	08008721 	.word	0x08008721
 80086b8:	080088f7 	.word	0x080088f7
 80086bc:	080088f7 	.word	0x080088f7
 80086c0:	08008897 	.word	0x08008897
 80086c4:	080088c3 	.word	0x080088c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	7c12      	ldrb	r2, [r2, #16]
 80086d4:	f107 0108 	add.w	r1, r7, #8
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
 80086dc:	60f8      	str	r0, [r7, #12]
      break;
 80086de:	e112      	b.n	8008906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	7c1b      	ldrb	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10d      	bne.n	8008704 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	f107 0208 	add.w	r2, r7, #8
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	2202      	movs	r2, #2
 8008700:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008702:	e100      	b.n	8008906 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f107 0208 	add.w	r2, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	2202      	movs	r2, #2
 800871c:	701a      	strb	r2, [r3, #0]
      break;
 800871e:	e0f2      	b.n	8008906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	885b      	ldrh	r3, [r3, #2]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b05      	cmp	r3, #5
 8008728:	f200 80ac 	bhi.w	8008884 <USBD_GetDescriptor+0x204>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <USBD_GetDescriptor+0xb4>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	0800874d 	.word	0x0800874d
 8008738:	08008781 	.word	0x08008781
 800873c:	080087b5 	.word	0x080087b5
 8008740:	080087e9 	.word	0x080087e9
 8008744:	0800881d 	.word	0x0800881d
 8008748:	08008851 	.word	0x08008851
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7c12      	ldrb	r2, [r2, #16]
 8008764:	f107 0108 	add.w	r1, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876e:	e091      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fab2 	bl	8008cdc <USBD_CtlError>
            err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
          break;
 800877e:	e089      	b.n	8008894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	7c12      	ldrb	r2, [r2, #16]
 8008798:	f107 0108 	add.w	r1, r7, #8
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a2:	e077      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa98 	bl	8008cdc <USBD_CtlError>
            err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
          break;
 80087b2:	e06f      	b.n	8008894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d6:	e05d      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa7e 	bl	8008cdc <USBD_CtlError>
            err++;
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	3301      	adds	r3, #1
 80087e4:	72fb      	strb	r3, [r7, #11]
          break;
 80087e6:	e055      	b.n	8008894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880a:	e043      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa64 	bl	8008cdc <USBD_CtlError>
            err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
          break;
 800881a:	e03b      	b.n	8008894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7c12      	ldrb	r2, [r2, #16]
 8008834:	f107 0108 	add.w	r1, r7, #8
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800883e:	e029      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa4a 	bl	8008cdc <USBD_CtlError>
            err++;
 8008848:	7afb      	ldrb	r3, [r7, #11]
 800884a:	3301      	adds	r3, #1
 800884c:	72fb      	strb	r3, [r7, #11]
          break;
 800884e:	e021      	b.n	8008894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008872:	e00f      	b.n	8008894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fa30 	bl	8008cdc <USBD_CtlError>
            err++;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	3301      	adds	r3, #1
 8008880:	72fb      	strb	r3, [r7, #11]
          break;
 8008882:	e007      	b.n	8008894 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa28 	bl	8008cdc <USBD_CtlError>
          err++;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	3301      	adds	r3, #1
 8008890:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008892:	bf00      	nop
      }
      break;
 8008894:	e037      	b.n	8008906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7c1b      	ldrb	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a6:	f107 0208 	add.w	r2, r7, #8
 80088aa:	4610      	mov	r0, r2
 80088ac:	4798      	blx	r3
 80088ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b0:	e029      	b.n	8008906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fa11 	bl	8008cdc <USBD_CtlError>
        err++;
 80088ba:	7afb      	ldrb	r3, [r7, #11]
 80088bc:	3301      	adds	r3, #1
 80088be:	72fb      	strb	r3, [r7, #11]
      break;
 80088c0:	e021      	b.n	8008906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7c1b      	ldrb	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	f107 0208 	add.w	r2, r7, #8
 80088d6:	4610      	mov	r0, r2
 80088d8:	4798      	blx	r3
 80088da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	2207      	movs	r2, #7
 80088e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e4:	e00f      	b.n	8008906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9f7 	bl	8008cdc <USBD_CtlError>
        err++;
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	3301      	adds	r3, #1
 80088f2:	72fb      	strb	r3, [r7, #11]
      break;
 80088f4:	e007      	b.n	8008906 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f9ef 	bl	8008cdc <USBD_CtlError>
      err++;
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	3301      	adds	r3, #1
 8008902:	72fb      	strb	r3, [r7, #11]
      break;
 8008904:	bf00      	nop
  }

  if (err != 0U)
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d11e      	bne.n	800894a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d016      	beq.n	8008942 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008914:	893b      	ldrh	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00e      	beq.n	8008938 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88da      	ldrh	r2, [r3, #6]
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	4293      	cmp	r3, r2
 8008922:	bf28      	it	cs
 8008924:	4613      	movcs	r3, r2
 8008926:	b29b      	uxth	r3, r3
 8008928:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800892a:	893b      	ldrh	r3, [r7, #8]
 800892c:	461a      	mov	r2, r3
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa44 	bl	8008dbe <USBD_CtlSendData>
 8008936:	e009      	b.n	800894c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9ce 	bl	8008cdc <USBD_CtlError>
 8008940:	e004      	b.n	800894c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa78 	bl	8008e38 <USBD_CtlSendStatus>
 8008948:	e000      	b.n	800894c <USBD_GetDescriptor+0x2cc>
    return;
 800894a:	bf00      	nop
  }
}
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop

08008954 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	889b      	ldrh	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d131      	bne.n	80089ca <USBD_SetAddress+0x76>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d12d      	bne.n	80089ca <USBD_SetAddress+0x76>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b7f      	cmp	r3, #127	; 0x7f
 8008974:	d829      	bhi.n	80089ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	885b      	ldrh	r3, [r3, #2]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008980:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b03      	cmp	r3, #3
 800898c:	d104      	bne.n	8008998 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f9a3 	bl	8008cdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	e01d      	b.n	80089d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7bfa      	ldrb	r2, [r7, #15]
 800899c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fb9d 	bl	800c0e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa44 	bl	8008e38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d004      	beq.n	80089c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	e009      	b.n	80089d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c8:	e004      	b.n	80089d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f985 	bl	8008cdc <USBD_CtlError>
  }
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	4b4c      	ldr	r3, [pc, #304]	; (8008b24 <USBD_SetConfig+0x148>)
 80089f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089f4:	4b4b      	ldr	r3, [pc, #300]	; (8008b24 <USBD_SetConfig+0x148>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d905      	bls.n	8008a08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f96c 	bl	8008cdc <USBD_CtlError>
    return USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e088      	b.n	8008b1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d002      	beq.n	8008a1a <USBD_SetConfig+0x3e>
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d025      	beq.n	8008a64 <USBD_SetConfig+0x88>
 8008a18:	e071      	b.n	8008afe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a1a:	4b42      	ldr	r3, [pc, #264]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01c      	beq.n	8008a5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a22:	4b40      	ldr	r3, [pc, #256]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a2c:	4b3d      	ldr	r3, [pc, #244]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff f8f0 	bl	8007c18 <USBD_SetClassConfig>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f949 	bl	8008cdc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a4a:	e065      	b.n	8008b18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9f3 	bl	8008e38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2203      	movs	r2, #3
 8008a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a5a:	e05d      	b.n	8008b18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9eb 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 8008a62:	e059      	b.n	8008b18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a64:	4b2f      	ldr	r3, [pc, #188]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d112      	bne.n	8008a92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a7e:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff f8e3 	bl	8007c50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9d4 	bl	8008e38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a90:	e042      	b.n	8008b18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a92:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <USBD_SetConfig+0x148>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d02a      	beq.n	8008af6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff f8d1 	bl	8007c50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008aae:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <USBD_SetConfig+0x148>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <USBD_SetConfig+0x148>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff f8aa 	bl	8007c18 <USBD_SetClassConfig>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f903 	bl	8008cdc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7ff f8b6 	bl	8007c50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008aec:	e014      	b.n	8008b18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9a2 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 8008af4:	e010      	b.n	8008b18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f99e 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 8008afc:	e00c      	b.n	8008b18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f8eb 	bl	8008cdc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b06:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <USBD_SetConfig+0x148>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff f89f 	bl	8007c50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	73fb      	strb	r3, [r7, #15]
      break;
 8008b16:	bf00      	nop
  }

  return ret;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000655 	.word	0x20000655

08008b28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d004      	beq.n	8008b44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f8cd 	bl	8008cdc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b42:	e023      	b.n	8008b8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	dc02      	bgt.n	8008b56 <USBD_GetConfig+0x2e>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc03      	bgt.n	8008b5c <USBD_GetConfig+0x34>
 8008b54:	e015      	b.n	8008b82 <USBD_GetConfig+0x5a>
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d00b      	beq.n	8008b72 <USBD_GetConfig+0x4a>
 8008b5a:	e012      	b.n	8008b82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3308      	adds	r3, #8
 8008b66:	2201      	movs	r2, #1
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f927 	bl	8008dbe <USBD_CtlSendData>
        break;
 8008b70:	e00c      	b.n	8008b8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3304      	adds	r3, #4
 8008b76:	2201      	movs	r2, #1
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f91f 	bl	8008dbe <USBD_CtlSendData>
        break;
 8008b80:	e004      	b.n	8008b8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f8a9 	bl	8008cdc <USBD_CtlError>
        break;
 8008b8a:	bf00      	nop
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d81e      	bhi.n	8008bea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	88db      	ldrh	r3, [r3, #6]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d004      	beq.n	8008bbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f890 	bl	8008cdc <USBD_CtlError>
        break;
 8008bbc:	e01a      	b.n	8008bf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f043 0202 	orr.w	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	2202      	movs	r2, #2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8eb 	bl	8008dbe <USBD_CtlSendData>
      break;
 8008be8:	e004      	b.n	8008bf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f875 	bl	8008cdc <USBD_CtlError>
      break;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d106      	bne.n	8008c1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f90e 	bl	8008e38 <USBD_CtlSendStatus>
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d80b      	bhi.n	8008c54 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	885b      	ldrh	r3, [r3, #2]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d10c      	bne.n	8008c5e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8f3 	bl	8008e38 <USBD_CtlSendStatus>
      }
      break;
 8008c52:	e004      	b.n	8008c5e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f840 	bl	8008cdc <USBD_CtlError>
      break;
 8008c5c:	e000      	b.n	8008c60 <USBD_ClrFeature+0x3c>
      break;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	781a      	ldrb	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff fa63 	bl	800815e <SWAPBYTE>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fa56 	bl	800815e <SWAPBYTE>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fa49 	bl	800815e <SWAPBYTE>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	80da      	strh	r2, [r3, #6]
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ce6:	2180      	movs	r1, #128	; 0x80
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f003 f991 	bl	800c010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cee:	2100      	movs	r1, #0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f003 f98d 	bl	800c010 <USBD_LL_StallEP>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d036      	beq.n	8008d82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d18:	6938      	ldr	r0, [r7, #16]
 8008d1a:	f000 f836 	bl	8008d8a <USBD_GetLen>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	3301      	adds	r3, #1
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4413      	add	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	4413      	add	r3, r2
 8008d44:	2203      	movs	r2, #3
 8008d46:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d4e:	e013      	b.n	8008d78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	4413      	add	r3, r2
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	613b      	str	r3, [r7, #16]
    idx++;
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	3301      	adds	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	3301      	adds	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e7      	bne.n	8008d50 <USBD_GetString+0x52>
 8008d80:	e000      	b.n	8008d84 <USBD_GetString+0x86>
    return;
 8008d82:	bf00      	nop
  }
}
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d9a:	e005      	b.n	8008da8 <USBD_GetLen+0x1e>
  {
    len++;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f5      	bne.n	8008d9c <USBD_GetLen+0x12>
  }

  return len;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	2100      	movs	r1, #0
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f003 f99c 	bl	800c122 <USBD_LL_Transmit>

  return USBD_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	2100      	movs	r1, #0
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f003 f98b 	bl	800c122 <USBD_LL_Transmit>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f003 f99b 	bl	800c164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f003 f967 	bl	800c122 <USBD_LL_Transmit>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2205      	movs	r2, #5
 8008e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2200      	movs	r2, #0
 8008e72:	2100      	movs	r1, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f003 f975 	bl	800c164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <__NVIC_SetPriority>:
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	db0a      	blt.n	8008eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	490c      	ldr	r1, [pc, #48]	; (8008ed0 <__NVIC_SetPriority+0x4c>)
 8008e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea2:	0112      	lsls	r2, r2, #4
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008eac:	e00a      	b.n	8008ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	4908      	ldr	r1, [pc, #32]	; (8008ed4 <__NVIC_SetPriority+0x50>)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	0112      	lsls	r2, r2, #4
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	761a      	strb	r2, [r3, #24]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	e000e100 	.word	0xe000e100
 8008ed4:	e000ed00 	.word	0xe000ed00

08008ed8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <SysTick_Handler+0x1c>)
 8008ede:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ee0:	f001 fcfe 	bl	800a8e0 <xTaskGetSchedulerState>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eea:	f002 fae5 	bl	800b4b8 <xPortSysTickHandler>
  }
}
 8008eee:	bf00      	nop
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	e000e010 	.word	0xe000e010

08008ef8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008efc:	2100      	movs	r1, #0
 8008efe:	f06f 0004 	mvn.w	r0, #4
 8008f02:	f7ff ffbf 	bl	8008e84 <__NVIC_SetPriority>
#endif
}
 8008f06:	bf00      	nop
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f12:	f3ef 8305 	mrs	r3, IPSR
 8008f16:	603b      	str	r3, [r7, #0]
  return(result);
 8008f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f1e:	f06f 0305 	mvn.w	r3, #5
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	e00c      	b.n	8008f40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f26:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <osKernelInitialize+0x44>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f2e:	4b08      	ldr	r3, [pc, #32]	; (8008f50 <osKernelInitialize+0x44>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	e002      	b.n	8008f40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f40:	687b      	ldr	r3, [r7, #4]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000658 	.word	0x20000658

08008f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f5a:	f3ef 8305 	mrs	r3, IPSR
 8008f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f66:	f06f 0305 	mvn.w	r3, #5
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	e010      	b.n	8008f90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	; (8008f9c <osKernelStart+0x48>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d109      	bne.n	8008f8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f76:	f7ff ffbf 	bl	8008ef8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f7a:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <osKernelStart+0x48>)
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f80:	f001 f866 	bl	800a050 <vTaskStartScheduler>
      stat = osOK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	607b      	str	r3, [r7, #4]
 8008f88:	e002      	b.n	8008f90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f90:	687b      	ldr	r3, [r7, #4]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000658 	.word	0x20000658

08008fa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08e      	sub	sp, #56	; 0x38
 8008fa4:	af04      	add	r7, sp, #16
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb0:	f3ef 8305 	mrs	r3, IPSR
 8008fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008fb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d17e      	bne.n	80090ba <osThreadNew+0x11a>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d07b      	beq.n	80090ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fc2:	2380      	movs	r3, #128	; 0x80
 8008fc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fc6:	2318      	movs	r3, #24
 8008fc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d045      	beq.n	8009066 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <osThreadNew+0x48>
        name = attr->name;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d008      	beq.n	800900e <osThreadNew+0x6e>
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	2b38      	cmp	r3, #56	; 0x38
 8009000:	d805      	bhi.n	800900e <osThreadNew+0x6e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <osThreadNew+0x72>
        return (NULL);
 800900e:	2300      	movs	r3, #0
 8009010:	e054      	b.n	80090bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	089b      	lsrs	r3, r3, #2
 8009020:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00e      	beq.n	8009048 <osThreadNew+0xa8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b5b      	cmp	r3, #91	; 0x5b
 8009030:	d90a      	bls.n	8009048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009036:	2b00      	cmp	r3, #0
 8009038:	d006      	beq.n	8009048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <osThreadNew+0xa8>
        mem = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e010      	b.n	800906a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10c      	bne.n	800906a <osThreadNew+0xca>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d108      	bne.n	800906a <osThreadNew+0xca>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <osThreadNew+0xca>
          mem = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	e001      	b.n	800906a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d110      	bne.n	8009092 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009078:	9202      	str	r2, [sp, #8]
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	6a3a      	ldr	r2, [r7, #32]
 8009084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fe0c 	bl	8009ca4 <xTaskCreateStatic>
 800908c:	4603      	mov	r3, r0
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e013      	b.n	80090ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d110      	bne.n	80090ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	b29a      	uxth	r2, r3
 800909c:	f107 0310 	add.w	r3, r7, #16
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fe57 	bl	8009d5e <xTaskCreate>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d001      	beq.n	80090ba <osThreadNew+0x11a>
            hTask = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090ba:	693b      	ldr	r3, [r7, #16]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3728      	adds	r7, #40	; 0x28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090cc:	f3ef 8305 	mrs	r3, IPSR
 80090d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80090d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <osDelay+0x1c>
    stat = osErrorISR;
 80090d8:	f06f 0305 	mvn.w	r3, #5
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	e007      	b.n	80090f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 ff7c 	bl	8009fe8 <vTaskDelay>
    }
  }

  return (stat);
 80090f0:	68fb      	ldr	r3, [r7, #12]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a07      	ldr	r2, [pc, #28]	; (8009128 <vApplicationGetIdleTaskMemory+0x2c>)
 800910c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a06      	ldr	r2, [pc, #24]	; (800912c <vApplicationGetIdleTaskMemory+0x30>)
 8009112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2280      	movs	r2, #128	; 0x80
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	2000065c 	.word	0x2000065c
 800912c:	200006b8 	.word	0x200006b8

08009130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a07      	ldr	r2, [pc, #28]	; (800915c <vApplicationGetTimerTaskMemory+0x2c>)
 8009140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	4a06      	ldr	r2, [pc, #24]	; (8009160 <vApplicationGetTimerTaskMemory+0x30>)
 8009146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	200008b8 	.word	0x200008b8
 8009160:	20000914 	.word	0x20000914

08009164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f103 0208 	add.w	r2, r3, #8
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f103 0208 	add.w	r2, r3, #8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f103 0208 	add.w	r2, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d103      	bne.n	8009226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e00c      	b.n	8009240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e002      	b.n	8009234 <vListInsert+0x2e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	429a      	cmp	r2, r3
 800923e:	d2f6      	bcs.n	800922e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	601a      	str	r2, [r3, #0]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d103      	bne.n	80092ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092f6:	f002 f84d 	bl	800b394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	3b01      	subs	r3, #1
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d114      	bne.n	8009376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01a      	beq.n	800938a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3310      	adds	r3, #16
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f903 	bl	800a564 <xTaskRemoveFromEventList>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d012      	beq.n	800938a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <xQueueGenericReset+0xcc>)
 8009366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	e009      	b.n	800938a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fef2 	bl	8009164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3324      	adds	r3, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff feed 	bl	8009164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800938a:	f002 f833 	bl	800b3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800938e:	2301      	movs	r3, #1
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	; 0x38
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <xQueueGenericCreateStatic+0x52>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <xQueueGenericCreateStatic+0x56>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericCreateStatic+0x58>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	623b      	str	r3, [r7, #32]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xQueueGenericCreateStatic+0x7e>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericCreateStatic+0x82>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericCreateStatic+0x84>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	61fb      	str	r3, [r7, #28]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800943a:	2350      	movs	r3, #80	; 0x50
 800943c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b50      	cmp	r3, #80	; 0x50
 8009442:	d00a      	beq.n	800945a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61bb      	str	r3, [r7, #24]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800945a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800946e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4613      	mov	r3, r2
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f805 	bl	800948c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009484:	4618      	mov	r0, r3
 8009486:	3730      	adds	r7, #48	; 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	e002      	b.n	80094ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094ba:	2101      	movs	r1, #1
 80094bc:	69b8      	ldr	r0, [r7, #24]
 80094be:	f7ff ff05 	bl	80092cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08e      	sub	sp, #56	; 0x38
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094e2:	2300      	movs	r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xQueueGenericSend+0x32>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d103      	bne.n	8009514 <xQueueGenericSend+0x40>
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xQueueGenericSend+0x44>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xQueueGenericSend+0x46>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <xQueueGenericSend+0x60>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d103      	bne.n	8009542 <xQueueGenericSend+0x6e>
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <xQueueGenericSend+0x72>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueGenericSend+0x74>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <xQueueGenericSend+0x8e>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	623b      	str	r3, [r7, #32]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009562:	f001 f9bd 	bl	800a8e0 <xTaskGetSchedulerState>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueGenericSend+0x9e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueGenericSend+0xa2>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueGenericSend+0xa4>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xQueueGenericSend+0xbe>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009592:	f001 feff 	bl	800b394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d302      	bcc.n	80095a8 <xQueueGenericSend+0xd4>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d129      	bne.n	80095fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f000 fa0b 	bl	80099c8 <prvCopyDataToQueue>
 80095b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	3324      	adds	r3, #36	; 0x24
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 ffcf 	bl	800a564 <xTaskRemoveFromEventList>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d013      	beq.n	80095f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095cc:	4b3f      	ldr	r3, [pc, #252]	; (80096cc <xQueueGenericSend+0x1f8>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	e00a      	b.n	80095f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095e4:	4b39      	ldr	r3, [pc, #228]	; (80096cc <xQueueGenericSend+0x1f8>)
 80095e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095f4:	f001 fefe 	bl	800b3f4 <vPortExitCritical>
				return pdPASS;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e063      	b.n	80096c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009602:	f001 fef7 	bl	800b3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009606:	2300      	movs	r3, #0
 8009608:	e05c      	b.n	80096c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009610:	f107 0314 	add.w	r3, r7, #20
 8009614:	4618      	mov	r0, r3
 8009616:	f001 f809 	bl	800a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800961e:	f001 fee9 	bl	800b3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009622:	f000 fd7b 	bl	800a11c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009626:	f001 feb5 	bl	800b394 <vPortEnterCritical>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009630:	b25b      	sxtb	r3, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d103      	bne.n	8009640 <xQueueGenericSend+0x16c>
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009646:	b25b      	sxtb	r3, r3
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d103      	bne.n	8009656 <xQueueGenericSend+0x182>
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009656:	f001 fecd 	bl	800b3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800965a:	1d3a      	adds	r2, r7, #4
 800965c:	f107 0314 	add.w	r3, r7, #20
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fff8 	bl	800a658 <xTaskCheckForTimeOut>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d124      	bne.n	80096b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800966e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009670:	f000 faa2 	bl	8009bb8 <prvIsQueueFull>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d018      	beq.n	80096ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	3310      	adds	r3, #16
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f000 ff1e 	bl	800a4c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968a:	f000 fa2d 	bl	8009ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800968e:	f000 fd53 	bl	800a138 <xTaskResumeAll>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	f47f af7c 	bne.w	8009592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <xQueueGenericSend+0x1f8>)
 800969c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	e772      	b.n	8009592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ae:	f000 fa1b 	bl	8009ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096b2:	f000 fd41 	bl	800a138 <xTaskResumeAll>
 80096b6:	e76c      	b.n	8009592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ba:	f000 fa15 	bl	8009ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096be:	f000 fd3b 	bl	800a138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3738      	adds	r7, #56	; 0x38
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed04 	.word	0xe000ed04

080096d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b090      	sub	sp, #64	; 0x40
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <xQueueGenericSendFromISR+0x3c>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <xQueueGenericSendFromISR+0x40>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <xQueueGenericSendFromISR+0x42>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d103      	bne.n	800973a <xQueueGenericSendFromISR+0x6a>
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <xQueueGenericSendFromISR+0x6e>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <xQueueGenericSendFromISR+0x70>
 800973e:	2300      	movs	r3, #0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	623b      	str	r3, [r7, #32]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800975a:	f001 fefd 	bl	800b558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800975e:	f3ef 8211 	mrs	r2, BASEPRI
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	61fa      	str	r2, [r7, #28]
 8009774:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009776:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <xQueueGenericSendFromISR+0xbc>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d12f      	bne.n	80097ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097a2:	f000 f911 	bl	80099c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	d112      	bne.n	80097d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d016      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	3324      	adds	r3, #36	; 0x24
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fed1 	bl	800a564 <xTaskRemoveFromEventList>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00e      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e007      	b.n	80097e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097da:	3301      	adds	r3, #1
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	b25a      	sxtb	r2, r3
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097e6:	2301      	movs	r3, #1
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097ea:	e001      	b.n	80097f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3740      	adds	r7, #64	; 0x40
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08c      	sub	sp, #48	; 0x30
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009814:	2300      	movs	r3, #0
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <xQueueReceive+0x30>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	623b      	str	r3, [r7, #32]
}
 8009834:	bf00      	nop
 8009836:	e7fe      	b.n	8009836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <xQueueReceive+0x3e>
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <xQueueReceive+0x42>
 8009846:	2301      	movs	r3, #1
 8009848:	e000      	b.n	800984c <xQueueReceive+0x44>
 800984a:	2300      	movs	r3, #0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <xQueueReceive+0x5e>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	61fb      	str	r3, [r7, #28]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009866:	f001 f83b 	bl	800a8e0 <xTaskGetSchedulerState>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d102      	bne.n	8009876 <xQueueReceive+0x6e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <xQueueReceive+0x72>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <xQueueReceive+0x74>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xQueueReceive+0x8e>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	61bb      	str	r3, [r7, #24]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009896:	f001 fd7d 	bl	800b394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d01f      	beq.n	80098e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098aa:	f000 f8f7 	bl	8009a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	1e5a      	subs	r2, r3, #1
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00f      	beq.n	80098de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	3310      	adds	r3, #16
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fe4e 	bl	800a564 <xTaskRemoveFromEventList>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098ce:	4b3d      	ldr	r3, [pc, #244]	; (80099c4 <xQueueReceive+0x1bc>)
 80098d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098de:	f001 fd89 	bl	800b3f4 <vPortExitCritical>
				return pdPASS;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e069      	b.n	80099ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d103      	bne.n	80098f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098ec:	f001 fd82 	bl	800b3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098f0:	2300      	movs	r3, #0
 80098f2:	e062      	b.n	80099ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fe94 	bl	800a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009908:	f001 fd74 	bl	800b3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800990c:	f000 fc06 	bl	800a11c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009910:	f001 fd40 	bl	800b394 <vPortEnterCritical>
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800991a:	b25b      	sxtb	r3, r3
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d103      	bne.n	800992a <xQueueReceive+0x122>
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d103      	bne.n	8009940 <xQueueReceive+0x138>
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009940:	f001 fd58 	bl	800b3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009944:	1d3a      	adds	r2, r7, #4
 8009946:	f107 0310 	add.w	r3, r7, #16
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fe83 	bl	800a658 <xTaskCheckForTimeOut>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d123      	bne.n	80099a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995a:	f000 f917 	bl	8009b8c <prvIsQueueEmpty>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d017      	beq.n	8009994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fda9 	bl	800a4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009974:	f000 f8b8 	bl	8009ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009978:	f000 fbde 	bl	800a138 <xTaskResumeAll>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d189      	bne.n	8009896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <xQueueReceive+0x1bc>)
 8009984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	e780      	b.n	8009896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009996:	f000 f8a7 	bl	8009ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800999a:	f000 fbcd 	bl	800a138 <xTaskResumeAll>
 800999e:	e77a      	b.n	8009896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a2:	f000 f8a1 	bl	8009ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099a6:	f000 fbc7 	bl	800a138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ac:	f000 f8ee 	bl	8009b8c <prvIsQueueEmpty>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f43f af6f 	beq.w	8009896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3730      	adds	r7, #48	; 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10d      	bne.n	8009a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d14d      	bne.n	8009a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 ff92 	bl	800a91c <xTaskPriorityDisinherit>
 80099f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	609a      	str	r2, [r3, #8]
 8009a00:	e043      	b.n	8009a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d119      	bne.n	8009a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6858      	ldr	r0, [r3, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a10:	461a      	mov	r2, r3
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	f008 fd78 	bl	8012508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	441a      	add	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d32b      	bcc.n	8009a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	e026      	b.n	8009a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68d8      	ldr	r0, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	461a      	mov	r2, r3
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	f008 fd5e 	bl	8012508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	425b      	negs	r3, r3
 8009a56:	441a      	add	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d207      	bcs.n	8009a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	425b      	negs	r3, r3
 8009a72:	441a      	add	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d105      	bne.n	8009a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a92:	697b      	ldr	r3, [r7, #20]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d018      	beq.n	8009ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	441a      	add	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d303      	bcc.n	8009ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68d9      	ldr	r1, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6838      	ldr	r0, [r7, #0]
 8009adc:	f008 fd14 	bl	8012508 <memcpy>
	}
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009af0:	f001 fc50 	bl	800b394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009afc:	e011      	b.n	8009b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d012      	beq.n	8009b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3324      	adds	r3, #36	; 0x24
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fd2a 	bl	800a564 <xTaskRemoveFromEventList>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b16:	f000 fe01 	bl	800a71c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dce9      	bgt.n	8009afe <prvUnlockQueue+0x16>
 8009b2a:	e000      	b.n	8009b2e <prvUnlockQueue+0x46>
					break;
 8009b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b36:	f001 fc5d 	bl	800b3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b3a:	f001 fc2b 	bl	800b394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b46:	e011      	b.n	8009b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d012      	beq.n	8009b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3310      	adds	r3, #16
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fd05 	bl	800a564 <xTaskRemoveFromEventList>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b60:	f000 fddc 	bl	800a71c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dce9      	bgt.n	8009b48 <prvUnlockQueue+0x60>
 8009b74:	e000      	b.n	8009b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	22ff      	movs	r2, #255	; 0xff
 8009b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b80:	f001 fc38 	bl	800b3f4 <vPortExitCritical>
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b94:	f001 fbfe 	bl	800b394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e001      	b.n	8009baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009baa:	f001 fc23 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 8009bae:	68fb      	ldr	r3, [r7, #12]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc0:	f001 fbe8 	bl	800b394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d102      	bne.n	8009bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e001      	b.n	8009bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bda:	f001 fc0b 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e014      	b.n	8009c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bf8:	4a0f      	ldr	r2, [pc, #60]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10b      	bne.n	8009c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c04:	490c      	ldr	r1, [pc, #48]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c0e:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	4413      	add	r3, r2
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c1a:	e006      	b.n	8009c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b07      	cmp	r3, #7
 8009c26:	d9e7      	bls.n	8009bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20005038 	.word	0x20005038

08009c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c4c:	f001 fba2 	bl	800b394 <vPortEnterCritical>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d103      	bne.n	8009c66 <vQueueWaitForMessageRestricted+0x2a>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c6c:	b25b      	sxtb	r3, r3
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d103      	bne.n	8009c7c <vQueueWaitForMessageRestricted+0x40>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c7c:	f001 fbba 	bl	800b3f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3324      	adds	r3, #36	; 0x24
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fc3b 	bl	800a50c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c96:	6978      	ldr	r0, [r7, #20]
 8009c98:	f7ff ff26 	bl	8009ae8 <prvUnlockQueue>
	}
 8009c9c:	bf00      	nop
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08e      	sub	sp, #56	; 0x38
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	623b      	str	r3, [r7, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xTaskCreateStatic+0x46>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61fb      	str	r3, [r7, #28]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cea:	235c      	movs	r3, #92	; 0x5c
 8009cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b5c      	cmp	r3, #92	; 0x5c
 8009cf2:	d00a      	beq.n	8009d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61bb      	str	r3, [r7, #24]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01e      	beq.n	8009d50 <xTaskCreateStatic+0xac>
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	2202      	movs	r2, #2
 8009d26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	9302      	str	r3, [sp, #8]
 8009d32:	f107 0314 	add.w	r3, r7, #20
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 f850 	bl	8009de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d4a:	f000 f8dd 	bl	8009f08 <prvAddNewTaskToReadyList>
 8009d4e:	e001      	b.n	8009d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d54:	697b      	ldr	r3, [r7, #20]
	}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3728      	adds	r7, #40	; 0x28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b08c      	sub	sp, #48	; 0x30
 8009d62:	af04      	add	r7, sp, #16
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 fc30 	bl	800b5d8 <pvPortMalloc>
 8009d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00e      	beq.n	8009d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d80:	205c      	movs	r0, #92	; 0x5c
 8009d82:	f001 fc29 	bl	800b5d8 <pvPortMalloc>
 8009d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	631a      	str	r2, [r3, #48]	; 0x30
 8009d94:	e005      	b.n	8009da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f001 fcea 	bl	800b770 <vPortFree>
 8009d9c:	e001      	b.n	8009da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d017      	beq.n	8009dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009db0:	88fa      	ldrh	r2, [r7, #6]
 8009db2:	2300      	movs	r3, #0
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f80e 	bl	8009de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dcc:	69f8      	ldr	r0, [r7, #28]
 8009dce:	f000 f89b 	bl	8009f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	61bb      	str	r3, [r7, #24]
 8009dd6:	e002      	b.n	8009dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dde:	69bb      	ldr	r3, [r7, #24]
	}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3720      	adds	r7, #32
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	461a      	mov	r2, r3
 8009e00:	21a5      	movs	r1, #165	; 0xa5
 8009e02:	f008 fb8f 	bl	8012524 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e10:	3b01      	subs	r3, #1
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f023 0307 	bic.w	r3, r3, #7
 8009e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	617b      	str	r3, [r7, #20]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d01f      	beq.n	8009e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	e012      	b.n	8009e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	7819      	ldrb	r1, [r3, #0]
 8009e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	3334      	adds	r3, #52	; 0x34
 8009e5c:	460a      	mov	r2, r1
 8009e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2b0f      	cmp	r3, #15
 8009e76:	d9e9      	bls.n	8009e4c <prvInitialiseNewTask+0x64>
 8009e78:	e000      	b.n	8009e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8009e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e84:	e003      	b.n	8009e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	2b37      	cmp	r3, #55	; 0x37
 8009e92:	d901      	bls.n	8009e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e94:	2337      	movs	r3, #55	; 0x37
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	3304      	adds	r3, #4
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff f978 	bl	80091a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	3318      	adds	r3, #24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff f973 	bl	80091a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	68f9      	ldr	r1, [r7, #12]
 8009ee6:	69b8      	ldr	r0, [r7, #24]
 8009ee8:	f001 f928 	bl	800b13c <pxPortInitialiseStack>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009efe:	bf00      	nop
 8009f00:	3720      	adds	r7, #32
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f10:	f001 fa40 	bl	800b394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f14:	4b2d      	ldr	r3, [pc, #180]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a2c      	ldr	r2, [pc, #176]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f1e:	4b2c      	ldr	r3, [pc, #176]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f26:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f2c:	4b27      	ldr	r3, [pc, #156]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d110      	bne.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f34:	f000 fc16 	bl	800a764 <prvInitialiseTaskLists>
 8009f38:	e00d      	b.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <prvAddNewTaskToReadyList+0xcc>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f42:	4b23      	ldr	r3, [pc, #140]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d802      	bhi.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f50:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f56:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <prvAddNewTaskToReadyList+0xd4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <prvAddNewTaskToReadyList+0x74>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	4a18      	ldr	r2, [pc, #96]	; (8009fdc <prvAddNewTaskToReadyList+0xd4>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <prvAddNewTaskToReadyList+0xd8>)
 8009f8a:	441a      	add	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7ff f913 	bl	80091be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f98:	f001 fa2c 	bl	800b3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <prvAddNewTaskToReadyList+0xcc>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00e      	beq.n	8009fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d207      	bcs.n	8009fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <prvAddNewTaskToReadyList+0xdc>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200011e8 	.word	0x200011e8
 8009fd0:	20000d14 	.word	0x20000d14
 8009fd4:	200011f4 	.word	0x200011f4
 8009fd8:	20001204 	.word	0x20001204
 8009fdc:	200011f0 	.word	0x200011f0
 8009fe0:	20000d18 	.word	0x20000d18
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d017      	beq.n	800a02a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <vTaskDelay+0x60>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <vTaskDelay+0x30>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60bb      	str	r3, [r7, #8]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a018:	f000 f880 	bl	800a11c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fcea 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a024:	f000 f888 	bl	800a138 <xTaskResumeAll>
 800a028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d107      	bne.n	800a040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <vTaskDelay+0x64>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20001210 	.word	0x20001210
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a05e:	463a      	mov	r2, r7
 800a060:	1d39      	adds	r1, r7, #4
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f848 	bl	80090fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	9202      	str	r2, [sp, #8]
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	2300      	movs	r3, #0
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	2300      	movs	r3, #0
 800a07c:	460a      	mov	r2, r1
 800a07e:	4921      	ldr	r1, [pc, #132]	; (800a104 <vTaskStartScheduler+0xb4>)
 800a080:	4821      	ldr	r0, [pc, #132]	; (800a108 <vTaskStartScheduler+0xb8>)
 800a082:	f7ff fe0f 	bl	8009ca4 <xTaskCreateStatic>
 800a086:	4603      	mov	r3, r0
 800a088:	4a20      	ldr	r2, [pc, #128]	; (800a10c <vTaskStartScheduler+0xbc>)
 800a08a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <vTaskStartScheduler+0xbc>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
 800a098:	e001      	b.n	800a09e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d102      	bne.n	800a0aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0a4:	f000 fcfc 	bl	800aaa0 <xTimerCreateTimerTask>
 800a0a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d116      	bne.n	800a0de <vTaskStartScheduler+0x8e>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	613b      	str	r3, [r7, #16]
}
 800a0c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0c4:	4b12      	ldr	r3, [pc, #72]	; (800a110 <vTaskStartScheduler+0xc0>)
 800a0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0cc:	4b11      	ldr	r3, [pc, #68]	; (800a114 <vTaskStartScheduler+0xc4>)
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <vTaskStartScheduler+0xc8>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0d8:	f001 f8ba 	bl	800b250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0dc:	e00e      	b.n	800a0fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d10a      	bne.n	800a0fc <vTaskStartScheduler+0xac>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60fb      	str	r3, [r7, #12]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <vTaskStartScheduler+0xaa>
}
 800a0fc:	bf00      	nop
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	08012700 	.word	0x08012700
 800a108:	0800a735 	.word	0x0800a735
 800a10c:	2000120c 	.word	0x2000120c
 800a110:	20001208 	.word	0x20001208
 800a114:	200011f4 	.word	0x200011f4
 800a118:	200011ec 	.word	0x200011ec

0800a11c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <vTaskSuspendAll+0x18>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	4a03      	ldr	r2, [pc, #12]	; (800a134 <vTaskSuspendAll+0x18>)
 800a128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a12a:	bf00      	nop
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20001210 	.word	0x20001210

0800a138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a142:	2300      	movs	r3, #0
 800a144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a146:	4b42      	ldr	r3, [pc, #264]	; (800a250 <xTaskResumeAll+0x118>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <xTaskResumeAll+0x2c>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a164:	f001 f916 	bl	800b394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a168:	4b39      	ldr	r3, [pc, #228]	; (800a250 <xTaskResumeAll+0x118>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4a38      	ldr	r2, [pc, #224]	; (800a250 <xTaskResumeAll+0x118>)
 800a170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a172:	4b37      	ldr	r3, [pc, #220]	; (800a250 <xTaskResumeAll+0x118>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d162      	bne.n	800a240 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a17a:	4b36      	ldr	r3, [pc, #216]	; (800a254 <xTaskResumeAll+0x11c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d05e      	beq.n	800a240 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a182:	e02f      	b.n	800a1e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a184:	4b34      	ldr	r3, [pc, #208]	; (800a258 <xTaskResumeAll+0x120>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3318      	adds	r3, #24
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff f871 	bl	8009278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3304      	adds	r3, #4
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff f86c 	bl	8009278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	4b2d      	ldr	r3, [pc, #180]	; (800a25c <xTaskResumeAll+0x124>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d903      	bls.n	800a1b4 <xTaskResumeAll+0x7c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4a2a      	ldr	r2, [pc, #168]	; (800a25c <xTaskResumeAll+0x124>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a27      	ldr	r2, [pc, #156]	; (800a260 <xTaskResumeAll+0x128>)
 800a1c2:	441a      	add	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fe fff7 	bl	80091be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b23      	ldr	r3, [pc, #140]	; (800a264 <xTaskResumeAll+0x12c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d302      	bcc.n	800a1e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a1de:	4b22      	ldr	r3, [pc, #136]	; (800a268 <xTaskResumeAll+0x130>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1e4:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <xTaskResumeAll+0x120>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1cb      	bne.n	800a184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1f2:	f000 fb55 	bl	800a8a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1f6:	4b1d      	ldr	r3, [pc, #116]	; (800a26c <xTaskResumeAll+0x134>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d010      	beq.n	800a224 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a202:	f000 f847 	bl	800a294 <xTaskIncrementTick>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a20c:	4b16      	ldr	r3, [pc, #88]	; (800a268 <xTaskResumeAll+0x130>)
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3b01      	subs	r3, #1
 800a216:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1f1      	bne.n	800a202 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a21e:	4b13      	ldr	r3, [pc, #76]	; (800a26c <xTaskResumeAll+0x134>)
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a224:	4b10      	ldr	r3, [pc, #64]	; (800a268 <xTaskResumeAll+0x130>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a230:	4b0f      	ldr	r3, [pc, #60]	; (800a270 <xTaskResumeAll+0x138>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a240:	f001 f8d8 	bl	800b3f4 <vPortExitCritical>

	return xAlreadyYielded;
 800a244:	68bb      	ldr	r3, [r7, #8]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20001210 	.word	0x20001210
 800a254:	200011e8 	.word	0x200011e8
 800a258:	200011a8 	.word	0x200011a8
 800a25c:	200011f0 	.word	0x200011f0
 800a260:	20000d18 	.word	0x20000d18
 800a264:	20000d14 	.word	0x20000d14
 800a268:	200011fc 	.word	0x200011fc
 800a26c:	200011f8 	.word	0x200011f8
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a27a:	4b05      	ldr	r3, [pc, #20]	; (800a290 <xTaskGetTickCount+0x1c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a280:	687b      	ldr	r3, [r7, #4]
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	200011ec 	.word	0x200011ec

0800a294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29e:	4b4f      	ldr	r3, [pc, #316]	; (800a3dc <xTaskIncrementTick+0x148>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f040 808f 	bne.w	800a3c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2a8:	4b4d      	ldr	r3, [pc, #308]	; (800a3e0 <xTaskIncrementTick+0x14c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2b0:	4a4b      	ldr	r2, [pc, #300]	; (800a3e0 <xTaskIncrementTick+0x14c>)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d120      	bne.n	800a2fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2bc:	4b49      	ldr	r3, [pc, #292]	; (800a3e4 <xTaskIncrementTick+0x150>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <xTaskIncrementTick+0x48>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	603b      	str	r3, [r7, #0]
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <xTaskIncrementTick+0x46>
 800a2dc:	4b41      	ldr	r3, [pc, #260]	; (800a3e4 <xTaskIncrementTick+0x150>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	4b41      	ldr	r3, [pc, #260]	; (800a3e8 <xTaskIncrementTick+0x154>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a3f      	ldr	r2, [pc, #252]	; (800a3e4 <xTaskIncrementTick+0x150>)
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	4a3f      	ldr	r2, [pc, #252]	; (800a3e8 <xTaskIncrementTick+0x154>)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ec <xTaskIncrementTick+0x158>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ec <xTaskIncrementTick+0x158>)
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	f000 fad1 	bl	800a8a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2fe:	4b3c      	ldr	r3, [pc, #240]	; (800a3f0 <xTaskIncrementTick+0x15c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	429a      	cmp	r2, r3
 800a306:	d349      	bcc.n	800a39c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a308:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <xTaskIncrementTick+0x150>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a312:	4b37      	ldr	r3, [pc, #220]	; (800a3f0 <xTaskIncrementTick+0x15c>)
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	601a      	str	r2, [r3, #0]
					break;
 800a31a:	e03f      	b.n	800a39c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b31      	ldr	r3, [pc, #196]	; (800a3e4 <xTaskIncrementTick+0x150>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d203      	bcs.n	800a33c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a334:	4a2e      	ldr	r2, [pc, #184]	; (800a3f0 <xTaskIncrementTick+0x15c>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a33a:	e02f      	b.n	800a39c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	3304      	adds	r3, #4
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe ff99 	bl	8009278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	3318      	adds	r3, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe ff90 	bl	8009278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4b25      	ldr	r3, [pc, #148]	; (800a3f4 <xTaskIncrementTick+0x160>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d903      	bls.n	800a36c <xTaskIncrementTick+0xd8>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	4a22      	ldr	r2, [pc, #136]	; (800a3f4 <xTaskIncrementTick+0x160>)
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <xTaskIncrementTick+0x164>)
 800a37a:	441a      	add	r2, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7fe ff1b 	bl	80091be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4b1b      	ldr	r3, [pc, #108]	; (800a3fc <xTaskIncrementTick+0x168>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	429a      	cmp	r2, r3
 800a394:	d3b8      	bcc.n	800a308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a396:	2301      	movs	r3, #1
 800a398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a39a:	e7b5      	b.n	800a308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a39c:	4b17      	ldr	r3, [pc, #92]	; (800a3fc <xTaskIncrementTick+0x168>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4915      	ldr	r1, [pc, #84]	; (800a3f8 <xTaskIncrementTick+0x164>)
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	440b      	add	r3, r1
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d901      	bls.n	800a3b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <xTaskIncrementTick+0x16c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d007      	beq.n	800a3d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	e004      	b.n	800a3d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <xTaskIncrementTick+0x170>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	4a0d      	ldr	r2, [pc, #52]	; (800a404 <xTaskIncrementTick+0x170>)
 800a3ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a3d0:	697b      	ldr	r3, [r7, #20]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20001210 	.word	0x20001210
 800a3e0:	200011ec 	.word	0x200011ec
 800a3e4:	200011a0 	.word	0x200011a0
 800a3e8:	200011a4 	.word	0x200011a4
 800a3ec:	20001200 	.word	0x20001200
 800a3f0:	20001208 	.word	0x20001208
 800a3f4:	200011f0 	.word	0x200011f0
 800a3f8:	20000d18 	.word	0x20000d18
 800a3fc:	20000d14 	.word	0x20000d14
 800a400:	200011fc 	.word	0x200011fc
 800a404:	200011f8 	.word	0x200011f8

0800a408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a40e:	4b28      	ldr	r3, [pc, #160]	; (800a4b0 <vTaskSwitchContext+0xa8>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a416:	4b27      	ldr	r3, [pc, #156]	; (800a4b4 <vTaskSwitchContext+0xac>)
 800a418:	2201      	movs	r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a41c:	e041      	b.n	800a4a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a41e:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <vTaskSwitchContext+0xac>)
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a424:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <vTaskSwitchContext+0xb0>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	e010      	b.n	800a44e <vTaskSwitchContext+0x46>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <vTaskSwitchContext+0x40>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	607b      	str	r3, [r7, #4]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <vTaskSwitchContext+0x3e>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	491b      	ldr	r1, [pc, #108]	; (800a4bc <vTaskSwitchContext+0xb4>)
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	440b      	add	r3, r1
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0e4      	beq.n	800a42c <vTaskSwitchContext+0x24>
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4a13      	ldr	r2, [pc, #76]	; (800a4bc <vTaskSwitchContext+0xb4>)
 800a46e:	4413      	add	r3, r2
 800a470:	60bb      	str	r3, [r7, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	605a      	str	r2, [r3, #4]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	3308      	adds	r3, #8
 800a484:	429a      	cmp	r2, r3
 800a486:	d104      	bne.n	800a492 <vTaskSwitchContext+0x8a>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	605a      	str	r2, [r3, #4]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	4a09      	ldr	r2, [pc, #36]	; (800a4c0 <vTaskSwitchContext+0xb8>)
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	4a06      	ldr	r2, [pc, #24]	; (800a4b8 <vTaskSwitchContext+0xb0>)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6013      	str	r3, [r2, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20001210 	.word	0x20001210
 800a4b4:	200011fc 	.word	0x200011fc
 800a4b8:	200011f0 	.word	0x200011f0
 800a4bc:	20000d18 	.word	0x20000d18
 800a4c0:	20000d14 	.word	0x20000d14

0800a4c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60fb      	str	r3, [r7, #12]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ea:	4b07      	ldr	r3, [pc, #28]	; (800a508 <vTaskPlaceOnEventList+0x44>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3318      	adds	r3, #24
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7fe fe87 	bl	8009206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	6838      	ldr	r0, [r7, #0]
 800a4fc:	f000 fa7c 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000d14 	.word	0x20000d14

0800a50c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	617b      	str	r3, [r7, #20]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <vTaskPlaceOnEventListRestricted+0x54>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3318      	adds	r3, #24
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7fe fe3e 	bl	80091be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	68b8      	ldr	r0, [r7, #8]
 800a552:	f000 fa51 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
	}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000d14 	.word	0x20000d14

0800a564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	60fb      	str	r3, [r7, #12]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	3318      	adds	r3, #24
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fe6f 	bl	8009278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a59a:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <xTaskRemoveFromEventList+0xb0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d11d      	bne.n	800a5de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fe66 	bl	8009278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b0:	4b19      	ldr	r3, [pc, #100]	; (800a618 <xTaskRemoveFromEventList+0xb4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d903      	bls.n	800a5c0 <xTaskRemoveFromEventList+0x5c>
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a16      	ldr	r2, [pc, #88]	; (800a618 <xTaskRemoveFromEventList+0xb4>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4a13      	ldr	r2, [pc, #76]	; (800a61c <xTaskRemoveFromEventList+0xb8>)
 800a5ce:	441a      	add	r2, r3
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fe fdf1 	bl	80091be <vListInsertEnd>
 800a5dc:	e005      	b.n	800a5ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	3318      	adds	r3, #24
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	480e      	ldr	r0, [pc, #56]	; (800a620 <xTaskRemoveFromEventList+0xbc>)
 800a5e6:	f7fe fdea 	bl	80091be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <xTaskRemoveFromEventList+0xc0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d905      	bls.n	800a604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <xTaskRemoveFromEventList+0xc4>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	e001      	b.n	800a608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a608:	697b      	ldr	r3, [r7, #20]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20001210 	.word	0x20001210
 800a618:	200011f0 	.word	0x200011f0
 800a61c:	20000d18 	.word	0x20000d18
 800a620:	200011a8 	.word	0x200011a8
 800a624:	20000d14 	.word	0x20000d14
 800a628:	200011fc 	.word	0x200011fc

0800a62c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a634:	4b06      	ldr	r3, [pc, #24]	; (800a650 <vTaskInternalSetTimeOutState+0x24>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <vTaskInternalSetTimeOutState+0x28>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	605a      	str	r2, [r3, #4]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20001200 	.word	0x20001200
 800a654:	200011ec 	.word	0x200011ec

0800a658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	613b      	str	r3, [r7, #16]
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	60fb      	str	r3, [r7, #12]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a69a:	f000 fe7b 	bl	800b394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a69e:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <xTaskCheckForTimeOut+0xbc>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d102      	bne.n	800a6be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	e023      	b.n	800a706 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	4b15      	ldr	r3, [pc, #84]	; (800a718 <xTaskCheckForTimeOut+0xc0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d007      	beq.n	800a6da <xTaskCheckForTimeOut+0x82>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d302      	bcc.n	800a6da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e015      	b.n	800a706 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d20b      	bcs.n	800a6fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff ff9b 	bl	800a62c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61fb      	str	r3, [r7, #28]
 800a6fa:	e004      	b.n	800a706 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a702:	2301      	movs	r3, #1
 800a704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a706:	f000 fe75 	bl	800b3f4 <vPortExitCritical>

	return xReturn;
 800a70a:	69fb      	ldr	r3, [r7, #28]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3720      	adds	r7, #32
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200011ec 	.word	0x200011ec
 800a718:	20001200 	.word	0x20001200

0800a71c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a720:	4b03      	ldr	r3, [pc, #12]	; (800a730 <vTaskMissedYield+0x14>)
 800a722:	2201      	movs	r2, #1
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	200011fc 	.word	0x200011fc

0800a734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a73c:	f000 f852 	bl	800a7e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <prvIdleTask+0x28>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d9f9      	bls.n	800a73c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <prvIdleTask+0x2c>)
 800a74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a758:	e7f0      	b.n	800a73c <prvIdleTask+0x8>
 800a75a:	bf00      	nop
 800a75c:	20000d18 	.word	0x20000d18
 800a760:	e000ed04 	.word	0xe000ed04

0800a764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a76a:	2300      	movs	r3, #0
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	e00c      	b.n	800a78a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4a12      	ldr	r2, [pc, #72]	; (800a7c4 <prvInitialiseTaskLists+0x60>)
 800a77c:	4413      	add	r3, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fcf0 	bl	8009164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3301      	adds	r3, #1
 800a788:	607b      	str	r3, [r7, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b37      	cmp	r3, #55	; 0x37
 800a78e:	d9ef      	bls.n	800a770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a790:	480d      	ldr	r0, [pc, #52]	; (800a7c8 <prvInitialiseTaskLists+0x64>)
 800a792:	f7fe fce7 	bl	8009164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a796:	480d      	ldr	r0, [pc, #52]	; (800a7cc <prvInitialiseTaskLists+0x68>)
 800a798:	f7fe fce4 	bl	8009164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a79c:	480c      	ldr	r0, [pc, #48]	; (800a7d0 <prvInitialiseTaskLists+0x6c>)
 800a79e:	f7fe fce1 	bl	8009164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7a2:	480c      	ldr	r0, [pc, #48]	; (800a7d4 <prvInitialiseTaskLists+0x70>)
 800a7a4:	f7fe fcde 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7a8:	480b      	ldr	r0, [pc, #44]	; (800a7d8 <prvInitialiseTaskLists+0x74>)
 800a7aa:	f7fe fcdb 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <prvInitialiseTaskLists+0x78>)
 800a7b0:	4a05      	ldr	r2, [pc, #20]	; (800a7c8 <prvInitialiseTaskLists+0x64>)
 800a7b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <prvInitialiseTaskLists+0x7c>)
 800a7b6:	4a05      	ldr	r2, [pc, #20]	; (800a7cc <prvInitialiseTaskLists+0x68>)
 800a7b8:	601a      	str	r2, [r3, #0]
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000d18 	.word	0x20000d18
 800a7c8:	20001178 	.word	0x20001178
 800a7cc:	2000118c 	.word	0x2000118c
 800a7d0:	200011a8 	.word	0x200011a8
 800a7d4:	200011bc 	.word	0x200011bc
 800a7d8:	200011d4 	.word	0x200011d4
 800a7dc:	200011a0 	.word	0x200011a0
 800a7e0:	200011a4 	.word	0x200011a4

0800a7e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ea:	e019      	b.n	800a820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7ec:	f000 fdd2 	bl	800b394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f0:	4b10      	ldr	r3, [pc, #64]	; (800a834 <prvCheckTasksWaitingTermination+0x50>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fd3b 	bl	8009278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <prvCheckTasksWaitingTermination+0x54>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3b01      	subs	r3, #1
 800a808:	4a0b      	ldr	r2, [pc, #44]	; (800a838 <prvCheckTasksWaitingTermination+0x54>)
 800a80a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3b01      	subs	r3, #1
 800a812:	4a0a      	ldr	r2, [pc, #40]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a816:	f000 fded 	bl	800b3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f810 	bl	800a840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a820:	4b06      	ldr	r3, [pc, #24]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e1      	bne.n	800a7ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200011bc 	.word	0x200011bc
 800a838:	200011e8 	.word	0x200011e8
 800a83c:	200011d0 	.word	0x200011d0

0800a840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d108      	bne.n	800a864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a856:	4618      	mov	r0, r3
 800a858:	f000 ff8a 	bl	800b770 <vPortFree>
				vPortFree( pxTCB );
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 ff87 	bl	800b770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a862:	e018      	b.n	800a896 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d103      	bne.n	800a876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 ff7e 	bl	800b770 <vPortFree>
	}
 800a874:	e00f      	b.n	800a896 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d00a      	beq.n	800a896 <prvDeleteTCB+0x56>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <prvDeleteTCB+0x54>
	}
 800a896:	bf00      	nop
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a6:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <prvResetNextTaskUnblockTime+0x38>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8b0:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <prvResetNextTaskUnblockTime+0x3c>)
 800a8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8b8:	e008      	b.n	800a8cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <prvResetNextTaskUnblockTime+0x38>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <prvResetNextTaskUnblockTime+0x3c>)
 800a8ca:	6013      	str	r3, [r2, #0]
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	200011a0 	.word	0x200011a0
 800a8dc:	20001208 	.word	0x20001208

0800a8e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <xTaskGetSchedulerState+0x34>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	607b      	str	r3, [r7, #4]
 800a8f2:	e008      	b.n	800a906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f4:	4b08      	ldr	r3, [pc, #32]	; (800a918 <xTaskGetSchedulerState+0x38>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	e001      	b.n	800a906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a902:	2300      	movs	r3, #0
 800a904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a906:	687b      	ldr	r3, [r7, #4]
	}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	200011f4 	.word	0x200011f4
 800a918:	20001210 	.word	0x20001210

0800a91c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a928:	2300      	movs	r3, #0
 800a92a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d056      	beq.n	800a9e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a932:	4b2e      	ldr	r3, [pc, #184]	; (800a9ec <xTaskPriorityDisinherit+0xd0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d00a      	beq.n	800a952 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	60fb      	str	r3, [r7, #12]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	60bb      	str	r3, [r7, #8]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a974:	1e5a      	subs	r2, r3, #1
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a982:	429a      	cmp	r2, r3
 800a984:	d02c      	beq.n	800a9e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d128      	bne.n	800a9e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	3304      	adds	r3, #4
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe fc70 	bl	8009278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <xTaskPriorityDisinherit+0xd4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d903      	bls.n	800a9c0 <xTaskPriorityDisinherit+0xa4>
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	4a0c      	ldr	r2, [pc, #48]	; (800a9f0 <xTaskPriorityDisinherit+0xd4>)
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4a09      	ldr	r2, [pc, #36]	; (800a9f4 <xTaskPriorityDisinherit+0xd8>)
 800a9ce:	441a      	add	r2, r3
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fe fbf1 	bl	80091be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9e0:	697b      	ldr	r3, [r7, #20]
	}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000d14 	.word	0x20000d14
 800a9f0:	200011f0 	.word	0x200011f0
 800a9f4:	20000d18 	.word	0x20000d18

0800a9f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b21      	ldr	r3, [pc, #132]	; (800aa88 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa08:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fc32 	bl	8009278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10a      	bne.n	800aa32 <prvAddCurrentTaskToDelayedList+0x3a>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d007      	beq.n	800aa32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa22:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4819      	ldr	r0, [pc, #100]	; (800aa90 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa2c:	f7fe fbc7 	bl	80091be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa30:	e026      	b.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4413      	add	r3, r2
 800aa38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d209      	bcs.n	800aa5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa4a:	4b12      	ldr	r3, [pc, #72]	; (800aa94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fe fbd5 	bl	8009206 <vListInsert>
}
 800aa5c:	e010      	b.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	f7fe fbcb 	bl	8009206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa70:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d202      	bcs.n	800aa80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa7a:	4a08      	ldr	r2, [pc, #32]	; (800aa9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200011ec 	.word	0x200011ec
 800aa8c:	20000d14 	.word	0x20000d14
 800aa90:	200011d4 	.word	0x200011d4
 800aa94:	200011a4 	.word	0x200011a4
 800aa98:	200011a0 	.word	0x200011a0
 800aa9c:	20001208 	.word	0x20001208

0800aaa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	; 0x28
 800aaa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaaa:	f000 fb07 	bl	800b0bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aaae:	4b1c      	ldr	r3, [pc, #112]	; (800ab20 <xTimerCreateTimerTask+0x80>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d021      	beq.n	800aafa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	f107 030c 	add.w	r3, r7, #12
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe fb31 	bl	8009130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	9202      	str	r2, [sp, #8]
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	2302      	movs	r3, #2
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	2300      	movs	r3, #0
 800aade:	460a      	mov	r2, r1
 800aae0:	4910      	ldr	r1, [pc, #64]	; (800ab24 <xTimerCreateTimerTask+0x84>)
 800aae2:	4811      	ldr	r0, [pc, #68]	; (800ab28 <xTimerCreateTimerTask+0x88>)
 800aae4:	f7ff f8de 	bl	8009ca4 <xTaskCreateStatic>
 800aae8:	4603      	mov	r3, r0
 800aaea:	4a10      	ldr	r2, [pc, #64]	; (800ab2c <xTimerCreateTimerTask+0x8c>)
 800aaec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaee:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <xTimerCreateTimerTask+0x8c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab16:	697b      	ldr	r3, [r7, #20]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20001244 	.word	0x20001244
 800ab24:	08012708 	.word	0x08012708
 800ab28:	0800ac65 	.word	0x0800ac65
 800ab2c:	20001248 	.word	0x20001248

0800ab30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	; 0x28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	623b      	str	r3, [r7, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab5e:	4b1a      	ldr	r3, [pc, #104]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d02a      	beq.n	800abbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	dc18      	bgt.n	800abaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab78:	f7ff feb2 	bl	800a8e0 <xTaskGetSchedulerState>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d109      	bne.n	800ab96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	f107 0110 	add.w	r1, r7, #16
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8e:	f7fe fca1 	bl	80094d4 <xQueueGenericSend>
 800ab92:	6278      	str	r0, [r7, #36]	; 0x24
 800ab94:	e012      	b.n	800abbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <xTimerGenericCommand+0x98>)
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f107 0110 	add.w	r1, r7, #16
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7fe fc97 	bl	80094d4 <xQueueGenericSend>
 800aba6:	6278      	str	r0, [r7, #36]	; 0x24
 800aba8:	e008      	b.n	800abbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <xTimerGenericCommand+0x98>)
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	f107 0110 	add.w	r1, r7, #16
 800abb2:	2300      	movs	r3, #0
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	f7fe fd8b 	bl	80096d0 <xQueueGenericSendFromISR>
 800abba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3728      	adds	r7, #40	; 0x28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20001244 	.word	0x20001244

0800abcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd6:	4b22      	ldr	r3, [pc, #136]	; (800ac60 <prvProcessExpiredTimer+0x94>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe fb47 	bl	8009278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d022      	beq.n	800ac3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	699a      	ldr	r2, [r3, #24]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	18d1      	adds	r1, r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	6978      	ldr	r0, [r7, #20]
 800ac06:	f000 f8d1 	bl	800adac <prvInsertTimerInActiveList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01f      	beq.n	800ac50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac10:	2300      	movs	r3, #0
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	2300      	movs	r3, #0
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff ff88 	bl	800ab30 <xTimerGenericCommand>
 800ac20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d113      	bne.n	800ac50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	60fb      	str	r3, [r7, #12]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	6978      	ldr	r0, [r7, #20]
 800ac56:	4798      	blx	r3
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	2000123c 	.word	0x2000123c

0800ac64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f857 	bl	800ad24 <prvGetNextExpireTime>
 800ac76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f803 	bl	800ac88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac82:	f000 f8d5 	bl	800ae30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac86:	e7f1      	b.n	800ac6c <prvTimerTask+0x8>

0800ac88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac92:	f7ff fa43 	bl	800a11c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 f866 	bl	800ad6c <prvSampleTimeNow>
 800aca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d130      	bne.n	800ad0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <prvProcessTimerOrBlockTask+0x3c>
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d806      	bhi.n	800acc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acb6:	f7ff fa3f 	bl	800a138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff85 	bl	800abcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acc2:	e024      	b.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <prvProcessTimerOrBlockTask+0x90>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <prvProcessTimerOrBlockTask+0x50>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <prvProcessTimerOrBlockTask+0x52>
 800acd8:	2300      	movs	r3, #0
 800acda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acdc:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <prvProcessTimerOrBlockTask+0x94>)
 800acde:	6818      	ldr	r0, [r3, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4619      	mov	r1, r3
 800acea:	f7fe ffa7 	bl	8009c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acee:	f7ff fa23 	bl	800a138 <xTaskResumeAll>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acf8:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <prvProcessTimerOrBlockTask+0x98>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
}
 800ad08:	e001      	b.n	800ad0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad0a:	f7ff fa15 	bl	800a138 <xTaskResumeAll>
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001240 	.word	0x20001240
 800ad1c:	20001244 	.word	0x20001244
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad2c:	4b0e      	ldr	r3, [pc, #56]	; (800ad68 <prvGetNextExpireTime+0x44>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <prvGetNextExpireTime+0x16>
 800ad36:	2201      	movs	r2, #1
 800ad38:	e000      	b.n	800ad3c <prvGetNextExpireTime+0x18>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <prvGetNextExpireTime+0x44>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e001      	b.n	800ad58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad58:	68fb      	ldr	r3, [r7, #12]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	2000123c 	.word	0x2000123c

0800ad6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad74:	f7ff fa7e 	bl	800a274 <xTaskGetTickCount>
 800ad78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <prvSampleTimeNow+0x3c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d205      	bcs.n	800ad90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad84:	f000 f936 	bl	800aff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	e002      	b.n	800ad96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad96:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <prvSampleTimeNow+0x3c>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	2000124c 	.word	0x2000124c

0800adac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	429a      	cmp	r2, r3
 800add0:	d812      	bhi.n	800adf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	429a      	cmp	r2, r3
 800adde:	d302      	bcc.n	800ade6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ade0:	2301      	movs	r3, #1
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	e01b      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ade6:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <prvInsertTimerInActiveList+0x7c>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe fa08 	bl	8009206 <vListInsert>
 800adf6:	e012      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d206      	bcs.n	800ae0e <prvInsertTimerInActiveList+0x62>
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d302      	bcc.n	800ae0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e007      	b.n	800ae1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae0e:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <prvInsertTimerInActiveList+0x80>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3304      	adds	r3, #4
 800ae16:	4619      	mov	r1, r3
 800ae18:	4610      	mov	r0, r2
 800ae1a:	f7fe f9f4 	bl	8009206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae1e:	697b      	ldr	r3, [r7, #20]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20001240 	.word	0x20001240
 800ae2c:	2000123c 	.word	0x2000123c

0800ae30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08e      	sub	sp, #56	; 0x38
 800ae34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae36:	e0ca      	b.n	800afce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da18      	bge.n	800ae70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae3e:	1d3b      	adds	r3, r7, #4
 800ae40:	3304      	adds	r3, #4
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	61fb      	str	r3, [r7, #28]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae66:	6850      	ldr	r0, [r2, #4]
 800ae68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae6a:	6892      	ldr	r2, [r2, #8]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f2c0 80aa 	blt.w	800afcc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d004      	beq.n	800ae8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe f9f5 	bl	8009278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae8e:	463b      	mov	r3, r7
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff ff6b 	bl	800ad6c <prvSampleTimeNow>
 800ae96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b09      	cmp	r3, #9
 800ae9c:	f200 8097 	bhi.w	800afce <prvProcessReceivedCommands+0x19e>
 800aea0:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <prvProcessReceivedCommands+0x78>)
 800aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea6:	bf00      	nop
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800af45 	.word	0x0800af45
 800aeb8:	0800af59 	.word	0x0800af59
 800aebc:	0800afa3 	.word	0x0800afa3
 800aec0:	0800aed1 	.word	0x0800aed1
 800aec4:	0800aed1 	.word	0x0800aed1
 800aec8:	0800af45 	.word	0x0800af45
 800aecc:	0800af59 	.word	0x0800af59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	18d1      	adds	r1, r2, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef0:	f7ff ff5c 	bl	800adac <prvInsertTimerInActiveList>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d069      	beq.n	800afce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d05e      	beq.n	800afce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	441a      	add	r2, r3
 800af18:	2300      	movs	r3, #0
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	2300      	movs	r3, #0
 800af1e:	2100      	movs	r1, #0
 800af20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af22:	f7ff fe05 	bl	800ab30 <xTimerGenericCommand>
 800af26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d14f      	bne.n	800afce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	61bb      	str	r3, [r7, #24]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af4a:	f023 0301 	bic.w	r3, r3, #1
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af56:	e03a      	b.n	800afce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5e:	f043 0301 	orr.w	r3, r3, #1
 800af62:	b2da      	uxtb	r2, r3
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	617b      	str	r3, [r7, #20]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	18d1      	adds	r1, r2, r3
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af9c:	f7ff ff06 	bl	800adac <prvInsertTimerInActiveList>
					break;
 800afa0:	e015      	b.n	800afce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800afb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afb2:	f000 fbdd 	bl	800b770 <vPortFree>
 800afb6:	e00a      	b.n	800afce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afca:	e000      	b.n	800afce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800afcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afce:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <prvProcessReceivedCommands+0x1c0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1d39      	adds	r1, r7, #4
 800afd4:	2200      	movs	r2, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fc16 	bl	8009808 <xQueueReceive>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f47f af2a 	bne.w	800ae38 <prvProcessReceivedCommands+0x8>
	}
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	3730      	adds	r7, #48	; 0x30
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20001244 	.word	0x20001244

0800aff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800affa:	e048      	b.n	800b08e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b006:	4b2b      	ldr	r3, [pc, #172]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3304      	adds	r3, #4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe f92f 	bl	8009278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d02e      	beq.n	800b08e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4413      	add	r3, r2
 800b038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d90e      	bls.n	800b060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b04e:	4b19      	ldr	r3, [pc, #100]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3304      	adds	r3, #4
 800b056:	4619      	mov	r1, r3
 800b058:	4610      	mov	r0, r2
 800b05a:	f7fe f8d4 	bl	8009206 <vListInsert>
 800b05e:	e016      	b.n	800b08e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b060:	2300      	movs	r3, #0
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2300      	movs	r3, #0
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	2100      	movs	r1, #0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fd60 	bl	800ab30 <xTimerGenericCommand>
 800b070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	603b      	str	r3, [r7, #0]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b08e:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1b1      	bne.n	800affc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b098:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b09e:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <prvSwitchTimerLists+0xc4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a04      	ldr	r2, [pc, #16]	; (800b0b4 <prvSwitchTimerLists+0xc0>)
 800b0a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0a6:	4a04      	ldr	r2, [pc, #16]	; (800b0b8 <prvSwitchTimerLists+0xc4>)
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	6013      	str	r3, [r2, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	2000123c 	.word	0x2000123c
 800b0b8:	20001240 	.word	0x20001240

0800b0bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0c2:	f000 f967 	bl	800b394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0c6:	4b15      	ldr	r3, [pc, #84]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d120      	bne.n	800b110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0ce:	4814      	ldr	r0, [pc, #80]	; (800b120 <prvCheckForValidListAndQueue+0x64>)
 800b0d0:	f7fe f848 	bl	8009164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0d4:	4813      	ldr	r0, [pc, #76]	; (800b124 <prvCheckForValidListAndQueue+0x68>)
 800b0d6:	f7fe f845 	bl	8009164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <prvCheckForValidListAndQueue+0x6c>)
 800b0dc:	4a10      	ldr	r2, [pc, #64]	; (800b120 <prvCheckForValidListAndQueue+0x64>)
 800b0de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0e0:	4b12      	ldr	r3, [pc, #72]	; (800b12c <prvCheckForValidListAndQueue+0x70>)
 800b0e2:	4a10      	ldr	r2, [pc, #64]	; (800b124 <prvCheckForValidListAndQueue+0x68>)
 800b0e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	4b11      	ldr	r3, [pc, #68]	; (800b130 <prvCheckForValidListAndQueue+0x74>)
 800b0ec:	4a11      	ldr	r2, [pc, #68]	; (800b134 <prvCheckForValidListAndQueue+0x78>)
 800b0ee:	2110      	movs	r1, #16
 800b0f0:	200a      	movs	r0, #10
 800b0f2:	f7fe f953 	bl	800939c <xQueueGenericCreateStatic>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4a08      	ldr	r2, [pc, #32]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0fc:	4b07      	ldr	r3, [pc, #28]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <prvCheckForValidListAndQueue+0x60>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	490b      	ldr	r1, [pc, #44]	; (800b138 <prvCheckForValidListAndQueue+0x7c>)
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe fd6c 	bl	8009be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b110:	f000 f970 	bl	800b3f4 <vPortExitCritical>
}
 800b114:	bf00      	nop
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20001244 	.word	0x20001244
 800b120:	20001214 	.word	0x20001214
 800b124:	20001228 	.word	0x20001228
 800b128:	2000123c 	.word	0x2000123c
 800b12c:	20001240 	.word	0x20001240
 800b130:	200012f0 	.word	0x200012f0
 800b134:	20001250 	.word	0x20001250
 800b138:	08012710 	.word	0x08012710

0800b13c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3b04      	subs	r3, #4
 800b14c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3b04      	subs	r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0201 	bic.w	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3b04      	subs	r3, #4
 800b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b16c:	4a0c      	ldr	r2, [pc, #48]	; (800b1a0 <pxPortInitialiseStack+0x64>)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3b14      	subs	r3, #20
 800b176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3b04      	subs	r3, #4
 800b182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f06f 0202 	mvn.w	r2, #2
 800b18a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3b20      	subs	r3, #32
 800b190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b192:	68fb      	ldr	r3, [r7, #12]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	0800b1a5 	.word	0x0800b1a5

0800b1a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ae:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <prvTaskExitError+0x54>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d00a      	beq.n	800b1ce <prvTaskExitError+0x2a>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	60fb      	str	r3, [r7, #12]
}
 800b1ca:	bf00      	nop
 800b1cc:	e7fe      	b.n	800b1cc <prvTaskExitError+0x28>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	60bb      	str	r3, [r7, #8]
}
 800b1e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1e2:	bf00      	nop
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0fc      	beq.n	800b1e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	200000e8 	.word	0x200000e8
 800b1fc:	00000000 	.word	0x00000000

0800b200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <pxCurrentTCBConst2>)
 800b202:	6819      	ldr	r1, [r3, #0]
 800b204:	6808      	ldr	r0, [r1, #0]
 800b206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	f380 8809 	msr	PSP, r0
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f04f 0000 	mov.w	r0, #0
 800b216:	f380 8811 	msr	BASEPRI, r0
 800b21a:	4770      	bx	lr
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst2>:
 800b220:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b228:	4808      	ldr	r0, [pc, #32]	; (800b24c <prvPortStartFirstTask+0x24>)
 800b22a:	6800      	ldr	r0, [r0, #0]
 800b22c:	6800      	ldr	r0, [r0, #0]
 800b22e:	f380 8808 	msr	MSP, r0
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8814 	msr	CONTROL, r0
 800b23a:	b662      	cpsie	i
 800b23c:	b661      	cpsie	f
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	df00      	svc	0
 800b248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b24a:	bf00      	nop
 800b24c:	e000ed08 	.word	0xe000ed08

0800b250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b256:	4b46      	ldr	r3, [pc, #280]	; (800b370 <xPortStartScheduler+0x120>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a46      	ldr	r2, [pc, #280]	; (800b374 <xPortStartScheduler+0x124>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d10a      	bne.n	800b276 <xPortStartScheduler+0x26>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	613b      	str	r3, [r7, #16]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b276:	4b3e      	ldr	r3, [pc, #248]	; (800b370 <xPortStartScheduler+0x120>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a3f      	ldr	r2, [pc, #252]	; (800b378 <xPortStartScheduler+0x128>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d10a      	bne.n	800b296 <xPortStartScheduler+0x46>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	60fb      	str	r3, [r7, #12]
}
 800b292:	bf00      	nop
 800b294:	e7fe      	b.n	800b294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b296:	4b39      	ldr	r3, [pc, #228]	; (800b37c <xPortStartScheduler+0x12c>)
 800b298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	22ff      	movs	r2, #255	; 0xff
 800b2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	4b31      	ldr	r3, [pc, #196]	; (800b380 <xPortStartScheduler+0x130>)
 800b2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2be:	4b31      	ldr	r3, [pc, #196]	; (800b384 <xPortStartScheduler+0x134>)
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2c4:	e009      	b.n	800b2da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b2c6:	4b2f      	ldr	r3, [pc, #188]	; (800b384 <xPortStartScheduler+0x134>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	4a2d      	ldr	r2, [pc, #180]	; (800b384 <xPortStartScheduler+0x134>)
 800b2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e2:	2b80      	cmp	r3, #128	; 0x80
 800b2e4:	d0ef      	beq.n	800b2c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2e6:	4b27      	ldr	r3, [pc, #156]	; (800b384 <xPortStartScheduler+0x134>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f1c3 0307 	rsb	r3, r3, #7
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d00a      	beq.n	800b308 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <xPortStartScheduler+0x134>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <xPortStartScheduler+0x134>)
 800b310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <xPortStartScheduler+0x134>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b31a:	4a1a      	ldr	r2, [pc, #104]	; (800b384 <xPortStartScheduler+0x134>)
 800b31c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	b2da      	uxtb	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b326:	4b18      	ldr	r3, [pc, #96]	; (800b388 <xPortStartScheduler+0x138>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <xPortStartScheduler+0x138>)
 800b32c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b332:	4b15      	ldr	r3, [pc, #84]	; (800b388 <xPortStartScheduler+0x138>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a14      	ldr	r2, [pc, #80]	; (800b388 <xPortStartScheduler+0x138>)
 800b338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b33c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b33e:	f000 f8dd 	bl	800b4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <xPortStartScheduler+0x13c>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b348:	f000 f8fc 	bl	800b544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b34c:	4b10      	ldr	r3, [pc, #64]	; (800b390 <xPortStartScheduler+0x140>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a0f      	ldr	r2, [pc, #60]	; (800b390 <xPortStartScheduler+0x140>)
 800b352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b358:	f7ff ff66 	bl	800b228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b35c:	f7ff f854 	bl	800a408 <vTaskSwitchContext>
	prvTaskExitError();
 800b360:	f7ff ff20 	bl	800b1a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	e000ed00 	.word	0xe000ed00
 800b374:	410fc271 	.word	0x410fc271
 800b378:	410fc270 	.word	0x410fc270
 800b37c:	e000e400 	.word	0xe000e400
 800b380:	20001340 	.word	0x20001340
 800b384:	20001344 	.word	0x20001344
 800b388:	e000ed20 	.word	0xe000ed20
 800b38c:	200000e8 	.word	0x200000e8
 800b390:	e000ef34 	.word	0xe000ef34

0800b394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	607b      	str	r3, [r7, #4]
}
 800b3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	4a0d      	ldr	r2, [pc, #52]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3b8:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <vPortEnterCritical+0x58>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d10f      	bne.n	800b3e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <vPortEnterCritical+0x5c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	603b      	str	r3, [r7, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <vPortEnterCritical+0x4a>
	}
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	200000e8 	.word	0x200000e8
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <vPortExitCritical+0x50>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <vPortExitCritical+0x24>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	607b      	str	r3, [r7, #4]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <vPortExitCritical+0x50>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	4a09      	ldr	r2, [pc, #36]	; (800b444 <vPortExitCritical+0x50>)
 800b420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b422:	4b08      	ldr	r3, [pc, #32]	; (800b444 <vPortExitCritical+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <vPortExitCritical+0x42>
 800b42a:	2300      	movs	r3, #0
 800b42c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f383 8811 	msr	BASEPRI, r3
}
 800b434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	200000e8 	.word	0x200000e8
	...

0800b450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b450:	f3ef 8009 	mrs	r0, PSP
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <pxCurrentTCBConst>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f01e 0f10 	tst.w	lr, #16
 800b460:	bf08      	it	eq
 800b462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	6010      	str	r0, [r2, #0]
 800b46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b474:	f380 8811 	msr	BASEPRI, r0
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f7fe ffc2 	bl	800a408 <vTaskSwitchContext>
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f380 8811 	msr	BASEPRI, r0
 800b48c:	bc09      	pop	{r0, r3}
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	6808      	ldr	r0, [r1, #0]
 800b492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b496:	f01e 0f10 	tst.w	lr, #16
 800b49a:	bf08      	it	eq
 800b49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4a0:	f380 8809 	msr	PSP, r0
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d2:	f7fe fedf 	bl	800a294 <xTaskIncrementTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <xPortSysTickHandler+0x40>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f383 8811 	msr	BASEPRI, r3
}
 800b4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b500:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b506:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <vPortSetupTimerInterrupt+0x38>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b50c:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <vPortSetupTimerInterrupt+0x3c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0a      	ldr	r2, [pc, #40]	; (800b53c <vPortSetupTimerInterrupt+0x40>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	099b      	lsrs	r3, r3, #6
 800b518:	4a09      	ldr	r2, [pc, #36]	; (800b540 <vPortSetupTimerInterrupt+0x44>)
 800b51a:	3b01      	subs	r3, #1
 800b51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51e:	4b04      	ldr	r3, [pc, #16]	; (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b520:	2207      	movs	r2, #7
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	e000e010 	.word	0xe000e010
 800b534:	e000e018 	.word	0xe000e018
 800b538:	20000000 	.word	0x20000000
 800b53c:	10624dd3 	.word	0x10624dd3
 800b540:	e000e014 	.word	0xe000e014

0800b544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b554 <vPortEnableVFP+0x10>
 800b548:	6801      	ldr	r1, [r0, #0]
 800b54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b54e:	6001      	str	r1, [r0, #0]
 800b550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b552:	bf00      	nop
 800b554:	e000ed88 	.word	0xe000ed88

0800b558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b55e:	f3ef 8305 	mrs	r3, IPSR
 800b562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d914      	bls.n	800b594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b56a:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <vPortValidateInterruptPriority+0x70>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b574:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <vPortValidateInterruptPriority+0x74>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	7afa      	ldrb	r2, [r7, #11]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d20a      	bcs.n	800b594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	607b      	str	r3, [r7, #4]
}
 800b590:	bf00      	nop
 800b592:	e7fe      	b.n	800b592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b594:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <vPortValidateInterruptPriority+0x78>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b59c:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <vPortValidateInterruptPriority+0x7c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d90a      	bls.n	800b5ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	603b      	str	r3, [r7, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <vPortValidateInterruptPriority+0x60>
	}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	e000e3f0 	.word	0xe000e3f0
 800b5cc:	20001340 	.word	0x20001340
 800b5d0:	e000ed0c 	.word	0xe000ed0c
 800b5d4:	20001344 	.word	0x20001344

0800b5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	; 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5e4:	f7fe fd9a 	bl	800a11c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5e8:	4b5b      	ldr	r3, [pc, #364]	; (800b758 <pvPortMalloc+0x180>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5f0:	f000 f920 	bl	800b834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5f4:	4b59      	ldr	r3, [pc, #356]	; (800b75c <pvPortMalloc+0x184>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f040 8093 	bne.w	800b728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01d      	beq.n	800b644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b608:	2208      	movs	r2, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4413      	add	r3, r2
 800b60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f003 0307 	and.w	r3, r3, #7
 800b616:	2b00      	cmp	r3, #0
 800b618:	d014      	beq.n	800b644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f023 0307 	bic.w	r3, r3, #7
 800b620:	3308      	adds	r3, #8
 800b622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <pvPortMalloc+0x6c>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	617b      	str	r3, [r7, #20]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d06e      	beq.n	800b728 <pvPortMalloc+0x150>
 800b64a:	4b45      	ldr	r3, [pc, #276]	; (800b760 <pvPortMalloc+0x188>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d869      	bhi.n	800b728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b654:	4b43      	ldr	r3, [pc, #268]	; (800b764 <pvPortMalloc+0x18c>)
 800b656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b658:	4b42      	ldr	r3, [pc, #264]	; (800b764 <pvPortMalloc+0x18c>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b65e:	e004      	b.n	800b66a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	429a      	cmp	r2, r3
 800b672:	d903      	bls.n	800b67c <pvPortMalloc+0xa4>
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f1      	bne.n	800b660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <pvPortMalloc+0x180>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	429a      	cmp	r2, r3
 800b684:	d050      	beq.n	800b728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2208      	movs	r2, #8
 800b68c:	4413      	add	r3, r2
 800b68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	2308      	movs	r3, #8
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d91f      	bls.n	800b6e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	613b      	str	r3, [r7, #16]
}
 800b6cc:	bf00      	nop
 800b6ce:	e7fe      	b.n	800b6ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6e2:	69b8      	ldr	r0, [r7, #24]
 800b6e4:	f000 f908 	bl	800b8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6e8:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <pvPortMalloc+0x188>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	4a1b      	ldr	r2, [pc, #108]	; (800b760 <pvPortMalloc+0x188>)
 800b6f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6f6:	4b1a      	ldr	r3, [pc, #104]	; (800b760 <pvPortMalloc+0x188>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4b1b      	ldr	r3, [pc, #108]	; (800b768 <pvPortMalloc+0x190>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d203      	bcs.n	800b70a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b702:	4b17      	ldr	r3, [pc, #92]	; (800b760 <pvPortMalloc+0x188>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a18      	ldr	r2, [pc, #96]	; (800b768 <pvPortMalloc+0x190>)
 800b708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <pvPortMalloc+0x184>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	431a      	orrs	r2, r3
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <pvPortMalloc+0x194>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	4a11      	ldr	r2, [pc, #68]	; (800b76c <pvPortMalloc+0x194>)
 800b726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b728:	f7fe fd06 	bl	800a138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <pvPortMalloc+0x174>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	60fb      	str	r3, [r7, #12]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <pvPortMalloc+0x172>
	return pvReturn;
 800b74c:	69fb      	ldr	r3, [r7, #28]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3728      	adds	r7, #40	; 0x28
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20004f50 	.word	0x20004f50
 800b75c:	20004f64 	.word	0x20004f64
 800b760:	20004f54 	.word	0x20004f54
 800b764:	20004f48 	.word	0x20004f48
 800b768:	20004f58 	.word	0x20004f58
 800b76c:	20004f5c 	.word	0x20004f5c

0800b770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d04d      	beq.n	800b81e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b782:	2308      	movs	r3, #8
 800b784:	425b      	negs	r3, r3
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4413      	add	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	4b24      	ldr	r3, [pc, #144]	; (800b828 <vPortFree+0xb8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4013      	ands	r3, r2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <vPortFree+0x44>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	60fb      	str	r3, [r7, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00a      	beq.n	800b7d2 <vPortFree+0x62>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	60bb      	str	r3, [r7, #8]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b14      	ldr	r3, [pc, #80]	; (800b828 <vPortFree+0xb8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01e      	beq.n	800b81e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11a      	bne.n	800b81e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <vPortFree+0xb8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	401a      	ands	r2, r3
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7f8:	f7fe fc90 	bl	800a11c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <vPortFree+0xbc>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4413      	add	r3, r2
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <vPortFree+0xbc>)
 800b808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b80a:	6938      	ldr	r0, [r7, #16]
 800b80c:	f000 f874 	bl	800b8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <vPortFree+0xc0>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3301      	adds	r3, #1
 800b816:	4a06      	ldr	r2, [pc, #24]	; (800b830 <vPortFree+0xc0>)
 800b818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b81a:	f7fe fc8d 	bl	800a138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b81e:	bf00      	nop
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20004f64 	.word	0x20004f64
 800b82c:	20004f54 	.word	0x20004f54
 800b830:	20004f60 	.word	0x20004f60

0800b834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b83a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b840:	4b27      	ldr	r3, [pc, #156]	; (800b8e0 <prvHeapInit+0xac>)
 800b842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	4a1f      	ldr	r2, [pc, #124]	; (800b8e0 <prvHeapInit+0xac>)
 800b864:	4413      	add	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b86c:	4a1d      	ldr	r2, [pc, #116]	; (800b8e4 <prvHeapInit+0xb0>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b872:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <prvHeapInit+0xb0>)
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	4413      	add	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b880:	2208      	movs	r2, #8
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0307 	bic.w	r3, r3, #7
 800b88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <prvHeapInit+0xb4>)
 800b894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b896:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <prvHeapInit+0xb4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <prvHeapInit+0xb4>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <prvHeapInit+0xb8>)
 800b8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <prvHeapInit+0xbc>)
 800b8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <prvHeapInit+0xc0>)
 800b8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	20001348 	.word	0x20001348
 800b8e4:	20004f48 	.word	0x20004f48
 800b8e8:	20004f50 	.word	0x20004f50
 800b8ec:	20004f58 	.word	0x20004f58
 800b8f0:	20004f54 	.word	0x20004f54
 800b8f4:	20004f64 	.word	0x20004f64

0800b8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b900:	4b28      	ldr	r3, [pc, #160]	; (800b9a4 <prvInsertBlockIntoFreeList+0xac>)
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	e002      	b.n	800b90c <prvInsertBlockIntoFreeList+0x14>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d8f7      	bhi.n	800b906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d108      	bne.n	800b93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	441a      	add	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d118      	bne.n	800b980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d00d      	beq.n	800b976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	441a      	add	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e008      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b976:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	e003      	b.n	800b988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d002      	beq.n	800b996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b996:	bf00      	nop
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20004f48 	.word	0x20004f48
 800b9a8:	20004f50 	.word	0x20004f50

0800b9ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4912      	ldr	r1, [pc, #72]	; (800b9fc <MX_USB_DEVICE_Init+0x50>)
 800b9b4:	4812      	ldr	r0, [pc, #72]	; (800ba00 <MX_USB_DEVICE_Init+0x54>)
 800b9b6:	f7fc f8c1 	bl	8007b3c <USBD_Init>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800b9c0:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <MX_USB_DEVICE_Init+0x58>)
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9c6:	f7f5 fec7 	bl	8001758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b9ca:	490f      	ldr	r1, [pc, #60]	; (800ba08 <MX_USB_DEVICE_Init+0x5c>)
 800b9cc:	480c      	ldr	r0, [pc, #48]	; (800ba00 <MX_USB_DEVICE_Init+0x54>)
 800b9ce:	f7fc f8e5 	bl	8007b9c <USBD_RegisterClass>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d004      	beq.n	800b9e2 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <MX_USB_DEVICE_Init+0x58>)
 800b9da:	2201      	movs	r2, #1
 800b9dc:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9de:	f7f5 febb 	bl	8001758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9e2:	4807      	ldr	r0, [pc, #28]	; (800ba00 <MX_USB_DEVICE_Init+0x54>)
 800b9e4:	f7fc f901 	bl	8007bea <USBD_Start>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d004      	beq.n	800b9f8 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <MX_USB_DEVICE_Init+0x58>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b9f4:	f7f5 feb0 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200000ec 	.word	0x200000ec
 800ba00:	20005078 	.word	0x20005078
 800ba04:	20004f68 	.word	0x20004f68
 800ba08:	2000000c 	.word	0x2000000c

0800ba0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2212      	movs	r2, #18
 800ba1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba1e:	4b03      	ldr	r3, [pc, #12]	; (800ba2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	20000108 	.word	0x20000108

0800ba30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2204      	movs	r2, #4
 800ba40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba42:	4b03      	ldr	r3, [pc, #12]	; (800ba50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	2000011c 	.word	0x2000011c

0800ba54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	6039      	str	r1, [r7, #0]
 800ba5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4907      	ldr	r1, [pc, #28]	; (800ba88 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba6a:	4808      	ldr	r0, [pc, #32]	; (800ba8c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba6c:	f7fd f947 	bl	8008cfe <USBD_GetString>
 800ba70:	e004      	b.n	800ba7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4904      	ldr	r1, [pc, #16]	; (800ba88 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba76:	4805      	ldr	r0, [pc, #20]	; (800ba8c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba78:	f7fd f941 	bl	8008cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20005348 	.word	0x20005348
 800ba8c:	08012718 	.word	0x08012718

0800ba90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	4904      	ldr	r1, [pc, #16]	; (800bab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800baa0:	4804      	ldr	r0, [pc, #16]	; (800bab4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800baa2:	f7fd f92c 	bl	8008cfe <USBD_GetString>
  return USBD_StrDesc;
 800baa6:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20005348 	.word	0x20005348
 800bab4:	08012730 	.word	0x08012730

0800bab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	221a      	movs	r2, #26
 800bac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baca:	f000 f843 	bl	800bb54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bace:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	20000120 	.word	0x20000120

0800badc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d105      	bne.n	800bafa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	4907      	ldr	r1, [pc, #28]	; (800bb10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800baf2:	4808      	ldr	r0, [pc, #32]	; (800bb14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baf4:	f7fd f903 	bl	8008cfe <USBD_GetString>
 800baf8:	e004      	b.n	800bb04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	4904      	ldr	r1, [pc, #16]	; (800bb10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bafe:	4805      	ldr	r0, [pc, #20]	; (800bb14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb00:	f7fd f8fd 	bl	8008cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb04:	4b02      	ldr	r3, [pc, #8]	; (800bb10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20005348 	.word	0x20005348
 800bb14:	08012744 	.word	0x08012744

0800bb18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6039      	str	r1, [r7, #0]
 800bb22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d105      	bne.n	800bb36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	4907      	ldr	r1, [pc, #28]	; (800bb4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb2e:	4808      	ldr	r0, [pc, #32]	; (800bb50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb30:	f7fd f8e5 	bl	8008cfe <USBD_GetString>
 800bb34:	e004      	b.n	800bb40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	4904      	ldr	r1, [pc, #16]	; (800bb4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb3a:	4805      	ldr	r0, [pc, #20]	; (800bb50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb3c:	f7fd f8df 	bl	8008cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb40:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20005348 	.word	0x20005348
 800bb50:	08012750 	.word	0x08012750

0800bb54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <Get_SerialNum+0x44>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb60:	4b0e      	ldr	r3, [pc, #56]	; (800bb9c <Get_SerialNum+0x48>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <Get_SerialNum+0x4c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4413      	add	r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d009      	beq.n	800bb8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	4909      	ldr	r1, [pc, #36]	; (800bba4 <Get_SerialNum+0x50>)
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 f814 	bl	800bbac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb84:	2204      	movs	r2, #4
 800bb86:	4908      	ldr	r1, [pc, #32]	; (800bba8 <Get_SerialNum+0x54>)
 800bb88:	68b8      	ldr	r0, [r7, #8]
 800bb8a:	f000 f80f 	bl	800bbac <IntToUnicode>
  }
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	1fff7a10 	.word	0x1fff7a10
 800bb9c:	1fff7a14 	.word	0x1fff7a14
 800bba0:	1fff7a18 	.word	0x1fff7a18
 800bba4:	20000122 	.word	0x20000122
 800bba8:	20000132 	.word	0x20000132

0800bbac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75fb      	strb	r3, [r7, #23]
 800bbc2:	e027      	b.n	800bc14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	0f1b      	lsrs	r3, r3, #28
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	d80b      	bhi.n	800bbe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	0f1b      	lsrs	r3, r3, #28
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	440b      	add	r3, r1
 800bbdc:	3230      	adds	r2, #48	; 0x30
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e00a      	b.n	800bbfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	0f1b      	lsrs	r3, r3, #28
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	4619      	mov	r1, r3
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	440b      	add	r3, r1
 800bbf4:	3237      	adds	r2, #55	; 0x37
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	3301      	adds	r3, #1
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	4413      	add	r3, r2
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	3301      	adds	r3, #1
 800bc12:	75fb      	strb	r3, [r7, #23]
 800bc14:	7dfa      	ldrb	r2, [r7, #23]
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d3d3      	bcc.n	800bbc4 <IntToUnicode+0x18>
  }
}
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
 800bc3e:	609a      	str	r2, [r3, #8]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc4c:	d13a      	bne.n	800bcc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	4b1e      	ldr	r3, [pc, #120]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	4a1d      	ldr	r2, [pc, #116]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc58:	f043 0301 	orr.w	r3, r3, #1
 800bc5c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc5e:	4b1b      	ldr	r3, [pc, #108]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	613b      	str	r3, [r7, #16]
 800bc68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc70:	2302      	movs	r3, #2
 800bc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc7c:	230a      	movs	r3, #10
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	4619      	mov	r1, r3
 800bc86:	4812      	ldr	r0, [pc, #72]	; (800bcd0 <HAL_PCD_MspInit+0xa4>)
 800bc88:	f7f6 fa00 	bl	800208c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc90:	4a0e      	ldr	r2, [pc, #56]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc96:	6353      	str	r3, [r2, #52]	; 0x34
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	4b0b      	ldr	r3, [pc, #44]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca0:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bca6:	6453      	str	r3, [r2, #68]	; 0x44
 800bca8:	4b08      	ldr	r3, [pc, #32]	; (800bccc <HAL_PCD_MspInit+0xa0>)
 800bcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2105      	movs	r1, #5
 800bcb8:	2043      	movs	r0, #67	; 0x43
 800bcba:	f7f6 f9bd 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bcbe:	2043      	movs	r0, #67	; 0x43
 800bcc0:	f7f6 f9d6 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bcc4:	bf00      	nop
 800bcc6:	3728      	adds	r7, #40	; 0x28
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40023800 	.word	0x40023800
 800bcd0:	40020000 	.word	0x40020000

0800bcd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4610      	mov	r0, r2
 800bcec:	f7fb ffc8 	bl	8007c80 <USBD_LL_SetupStage>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bd0a:	78fa      	ldrb	r2, [r7, #3]
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	1a9b      	subs	r3, r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	440b      	add	r3, r1
 800bd18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f7fc f802 	bl	8007d2a <USBD_LL_DataOutStage>
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	1a9b      	subs	r3, r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	3348      	adds	r3, #72	; 0x48
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	78fb      	ldrb	r3, [r7, #3]
 800bd54:	4619      	mov	r1, r3
 800bd56:	f7fc f84b 	bl	8007df0 <USBD_LL_DataInStage>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fc f95f 	bl	8008034 <USBD_LL_SOF>
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd86:	2301      	movs	r3, #1
 800bd88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
 800bd96:	e008      	b.n	800bdaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d102      	bne.n	800bda6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
 800bda4:	e001      	b.n	800bdaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bda6:	f7f5 fcd7 	bl	8001758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdb0:	7bfa      	ldrb	r2, [r7, #15]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fc f8ff 	bl	8007fb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fc f8ab 	bl	8007f1c <USBD_LL_Reset>
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fc f8fa 	bl	8007fd8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6812      	ldr	r2, [r2, #0]
 800bdf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdf6:	f043 0301 	orr.w	r3, r3, #1
 800bdfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be04:	4b04      	ldr	r3, [pc, #16]	; (800be18 <HAL_PCD_SuspendCallback+0x48>)
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	4a03      	ldr	r2, [pc, #12]	; (800be18 <HAL_PCD_SuspendCallback+0x48>)
 800be0a:	f043 0306 	orr.w	r3, r3, #6
 800be0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fc f8ea 	bl	8008004 <USBD_LL_Resume>
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be4a:	78fa      	ldrb	r2, [r7, #3]
 800be4c:	4611      	mov	r1, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fc f938 	bl	80080c4 <USBD_LL_IsoOUTIncomplete>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be6e:	78fa      	ldrb	r2, [r7, #3]
 800be70:	4611      	mov	r1, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7fc f900 	bl	8008078 <USBD_LL_IsoINIncomplete>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fc f93e 	bl	8008110 <USBD_LL_DevConnected>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fc f93b 	bl	8008126 <USBD_LL_DevDisconnected>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d13c      	bne.n	800bf42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bec8:	4a20      	ldr	r2, [pc, #128]	; (800bf4c <USBD_LL_Init+0x94>)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1e      	ldr	r2, [pc, #120]	; (800bf4c <USBD_LL_Init+0x94>)
 800bed4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bed8:	4b1c      	ldr	r3, [pc, #112]	; (800bf4c <USBD_LL_Init+0x94>)
 800beda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bee0:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <USBD_LL_Init+0x94>)
 800bee2:	2206      	movs	r2, #6
 800bee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bee6:	4b19      	ldr	r3, [pc, #100]	; (800bf4c <USBD_LL_Init+0x94>)
 800bee8:	2202      	movs	r2, #2
 800beea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800beec:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <USBD_LL_Init+0x94>)
 800beee:	2200      	movs	r2, #0
 800bef0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bef2:	4b16      	ldr	r3, [pc, #88]	; (800bf4c <USBD_LL_Init+0x94>)
 800bef4:	2202      	movs	r2, #2
 800bef6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bef8:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <USBD_LL_Init+0x94>)
 800befa:	2200      	movs	r2, #0
 800befc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bf04:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bf0a:	4b10      	ldr	r3, [pc, #64]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf10:	4b0e      	ldr	r3, [pc, #56]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf16:	480d      	ldr	r0, [pc, #52]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf18:	f7f6 fa7d 	bl	8002416 <HAL_PCD_Init>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf22:	f7f5 fc19 	bl	8001758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf26:	2180      	movs	r1, #128	; 0x80
 800bf28:	4808      	ldr	r0, [pc, #32]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf2a:	f7f7 fbf6 	bl	800371a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf2e:	2240      	movs	r2, #64	; 0x40
 800bf30:	2100      	movs	r1, #0
 800bf32:	4806      	ldr	r0, [pc, #24]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf34:	f7f7 fbaa 	bl	800368c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf38:	2280      	movs	r2, #128	; 0x80
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	4803      	ldr	r0, [pc, #12]	; (800bf4c <USBD_LL_Init+0x94>)
 800bf3e:	f7f7 fba5 	bl	800368c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20005548 	.word	0x20005548

0800bf50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f6 fb79 	bl	800265e <HAL_PCD_Start>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f97e 	bl	800c274 <USBD_Get_USB_Status>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	4608      	mov	r0, r1
 800bf90:	4611      	mov	r1, r2
 800bf92:	461a      	mov	r2, r3
 800bf94:	4603      	mov	r3, r0
 800bf96:	70fb      	strb	r3, [r7, #3]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70bb      	strb	r3, [r7, #2]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfae:	78bb      	ldrb	r3, [r7, #2]
 800bfb0:	883a      	ldrh	r2, [r7, #0]
 800bfb2:	78f9      	ldrb	r1, [r7, #3]
 800bfb4:	f7f6 ff8a 	bl	8002ecc <HAL_PCD_EP_Open>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f958 	bl	800c274 <USBD_Get_USB_Status>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfec:	78fa      	ldrb	r2, [r7, #3]
 800bfee:	4611      	mov	r1, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f6 ffd3 	bl	8002f9c <HAL_PCD_EP_Close>
 800bff6:	4603      	mov	r3, r0
 800bff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 f939 	bl	800c274 <USBD_Get_USB_Status>
 800c002:	4603      	mov	r3, r0
 800c004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c006:	7bbb      	ldrb	r3, [r7, #14]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c02a:	78fa      	ldrb	r2, [r7, #3]
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f7 f893 	bl	800315a <HAL_PCD_EP_SetStall>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f91a 	bl	800c274 <USBD_Get_USB_Status>
 800c040:	4603      	mov	r3, r0
 800c042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c044:	7bbb      	ldrb	r3, [r7, #14]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f7 f8d8 	bl	8003222 <HAL_PCD_EP_ClrStall>
 800c072:	4603      	mov	r3, r0
 800c074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 f8fb 	bl	800c274 <USBD_Get_USB_Status>
 800c07e:	4603      	mov	r3, r0
 800c080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c082:	7bbb      	ldrb	r3, [r7, #14]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c09e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da0b      	bge.n	800c0c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	440b      	add	r3, r1
 800c0ba:	333e      	adds	r3, #62	; 0x3e
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	e00b      	b.n	800c0d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0c0:	78fb      	ldrb	r3, [r7, #3]
 800c0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0c6:	68f9      	ldr	r1, [r7, #12]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f7f6 febd 	bl	8002e82 <HAL_PCD_SetAddress>
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 f8b0 	bl	800c274 <USBD_Get_USB_Status>
 800c114:	4603      	mov	r3, r0
 800c116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c118:	7bbb      	ldrb	r3, [r7, #14]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b086      	sub	sp, #24
 800c126:	af00      	add	r7, sp, #0
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
 800c12e:	460b      	mov	r3, r1
 800c130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c140:	7af9      	ldrb	r1, [r7, #11]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	f7f6 ffbe 	bl	80030c6 <HAL_PCD_EP_Transmit>
 800c14a:	4603      	mov	r3, r0
 800c14c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f88f 	bl	800c274 <USBD_Get_USB_Status>
 800c156:	4603      	mov	r3, r0
 800c158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c15a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	607a      	str	r2, [r7, #4]
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	460b      	mov	r3, r1
 800c172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c182:	7af9      	ldrb	r1, [r7, #11]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	f7f6 ff52 	bl	8003030 <HAL_PCD_EP_Receive>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f86e 	bl	800c274 <USBD_Get_USB_Status>
 800c198:	4603      	mov	r3, r0
 800c19a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c19c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c1b4:	78fb      	ldrb	r3, [r7, #3]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <HAL_PCDEx_LPM_Callback+0x18>
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d01f      	beq.n	800c1fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c1be:	e03b      	b.n	800c238 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d007      	beq.n	800c1d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c1c8:	f7f4 fda6 	bl	8000d18 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1cc:	4b1c      	ldr	r3, [pc, #112]	; (800c240 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	4a1b      	ldr	r2, [pc, #108]	; (800c240 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1d2:	f023 0306 	bic.w	r3, r3, #6
 800c1d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1ea:	f023 0301 	bic.w	r3, r3, #1
 800c1ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fb ff04 	bl	8008004 <USBD_LL_Resume>
    break;
 800c1fc:	e01c      	b.n	800c238 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	6812      	ldr	r2, [r2, #0]
 800c20c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c210:	f043 0301 	orr.w	r3, r3, #1
 800c214:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fb fedb 	bl	8007fd8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d005      	beq.n	800c236 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c22a:	4b05      	ldr	r3, [pc, #20]	; (800c240 <HAL_PCDEx_LPM_Callback+0x98>)
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	4a04      	ldr	r2, [pc, #16]	; (800c240 <HAL_PCDEx_LPM_Callback+0x98>)
 800c230:	f043 0306 	orr.w	r3, r3, #6
 800c234:	6113      	str	r3, [r2, #16]
    break;
 800c236:	bf00      	nop
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	e000ed00 	.word	0xe000ed00

0800c244 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c24c:	4b03      	ldr	r3, [pc, #12]	; (800c25c <USBD_static_malloc+0x18>)
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20004f6c 	.word	0x20004f6c

0800c260 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	2b03      	cmp	r3, #3
 800c286:	d817      	bhi.n	800c2b8 <USBD_Get_USB_Status+0x44>
 800c288:	a201      	add	r2, pc, #4	; (adr r2, 800c290 <USBD_Get_USB_Status+0x1c>)
 800c28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28e:	bf00      	nop
 800c290:	0800c2a1 	.word	0x0800c2a1
 800c294:	0800c2a7 	.word	0x0800c2a7
 800c298:	0800c2ad 	.word	0x0800c2ad
 800c29c:	0800c2b3 	.word	0x0800c2b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a4:	e00b      	b.n	800c2be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2aa:	e008      	b.n	800c2be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b0:	e005      	b.n	800c2be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b6:	e002      	b.n	800c2be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c2bc:	bf00      	nop
  }
  return usb_status;
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4603      	mov	r3, r0
 800c2dc:	70fb      	strb	r3, [r7, #3]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	70bb      	strb	r3, [r7, #2]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	707b      	strb	r3, [r7, #1]
                return 0;
 800c2e6:	2300      	movs	r3, #0
        }
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	4611      	mov	r1, r2
 800c300:	461a      	mov	r2, r3
 800c302:	4603      	mov	r3, r0
 800c304:	70fb      	strb	r3, [r7, #3]
 800c306:	460b      	mov	r3, r1
 800c308:	70bb      	strb	r3, [r7, #2]
 800c30a:	4613      	mov	r3, r2
 800c30c:	707b      	strb	r3, [r7, #1]
                return 0;
 800c30e:	2300      	movs	r3, #0
        }
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
                return 0;
 800c324:	2300      	movs	r3, #0
        }
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
                return 0;
 800c33a:	2300      	movs	r3, #0
        }
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
                return 0;
 800c350:	2300      	movs	r3, #0
        }
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
                return;
 800c36a:	bf00      	nop
        } // Note used for hubs only!
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	807b      	strh	r3, [r7, #2]
 800c382:	4613      	mov	r3, r2
 800c384:	803b      	strh	r3, [r7, #0]
                return false;
 800c386:	2300      	movs	r3, #0
        }
 800c388:	4618      	mov	r0, r3
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c3a0:	2300      	movs	r3, #0
        }
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
                return true;
 800c3ba:	2301      	movs	r3, #1
        }
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c3d0:	687b      	ldr	r3, [r7, #4]
        };
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c3de:	b480      	push	{r7}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	2b0f      	cmp	r3, #15
 800c3f0:	d812      	bhi.n	800c418 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c3f2:	7bfa      	ldrb	r2, [r7, #15]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	321e      	adds	r2, #30
 800c3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d107      	bne.n	800c410 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c400:	7bfa      	ldrb	r2, [r7, #15]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	321e      	adds	r2, #30
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	e004      	b.n	800c41a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	3301      	adds	r3, #1
 800c414:	73fb      	strb	r3, [r7, #15]
 800c416:	e7e9      	b.n	800c3ec <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c418:	23d3      	movs	r3, #211	; 0xd3
        };
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c426:	b480      	push	{r7}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	705a      	strb	r2, [r3, #1]
 800c43a:	2200      	movs	r2, #0
 800c43c:	709a      	strb	r2, [r3, #2]
 800c43e:	2200      	movs	r2, #0
 800c440:	70da      	strb	r2, [r3, #3]
 800c442:	2200      	movs	r2, #0
 800c444:	711a      	strb	r2, [r3, #4]
        };
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	711a      	strb	r2, [r3, #4]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	715a      	strb	r2, [r3, #5]
        };
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	781a      	ldrb	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	715a      	strb	r2, [r3, #5]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	795a      	ldrb	r2, [r3, #5]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	711a      	strb	r2, [r3, #4]
        };
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	711a      	strb	r2, [r3, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	80da      	strh	r2, [r3, #6]
        };
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	80da      	strh	r2, [r3, #6]
        };
 800c4ee:	bf00      	nop
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c4fa:	b480      	push	{r7}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	791b      	ldrb	r3, [r3, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c510:	2b01      	cmp	r3, #1
 800c512:	d009      	beq.n	800c528 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c514:	e029      	b.n	800c56a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	887a      	ldrh	r2, [r7, #2]
 800c51a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	791b      	ldrb	r3, [r3, #4]
 800c520:	3301      	adds	r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	88db      	ldrh	r3, [r3, #6]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d015      	beq.n	800c55c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d011      	beq.n	800c55c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	88db      	ldrh	r3, [r3, #6]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	80da      	strh	r2, [r3, #6]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	3b01      	subs	r3, #1
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	801a      	strh	r2, [r3, #0]
 800c55a:	e7e5      	b.n	800c528 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	88db      	ldrh	r3, [r3, #6]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	88db      	ldrh	r3, [r3, #6]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bf0c      	ite	eq
 800c572:	2301      	moveq	r3, #1
 800c574:	2300      	movne	r3, #0
 800c576:	b2db      	uxtb	r3, r3
        };
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	4608      	mov	r0, r1
 800c58e:	4611      	mov	r1, r2
 800c590:	461a      	mov	r2, r3
 800c592:	4603      	mov	r3, r0
 800c594:	70fb      	strb	r3, [r7, #3]
 800c596:	460b      	mov	r3, r1
 800c598:	70bb      	strb	r3, [r7, #2]
 800c59a:	4613      	mov	r3, r2
 800c59c:	707b      	strb	r3, [r7, #1]
        };
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
	...

0800c5ac <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	08012934 	.word	0x08012934

0800c5cc <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	4a04      	ldr	r2, [pc, #16]	; (800c5e8 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	0801291c 	.word	0x0801291c

0800c5ec <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c62c:	78fb      	ldrb	r3, [r7, #3]
 800c62e:	2be0      	cmp	r3, #224	; 0xe0
 800c630:	bf0c      	ite	eq
 800c632:	2301      	moveq	r3, #1
 800c634:	2300      	movne	r3, #0
 800c636:	b2db      	uxtb	r3, r3
        };
 800c638:	4618      	mov	r0, r3
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	807b      	strh	r3, [r7, #2]
 800c650:	4613      	mov	r3, r2
 800c652:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c654:	887b      	ldrh	r3, [r7, #2]
 800c656:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d104      	bne.n	800c668 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c65e:	883b      	ldrh	r3, [r7, #0]
 800c660:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c664:	4293      	cmp	r3, r2
 800c666:	d009      	beq.n	800c67c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c668:	887b      	ldrh	r3, [r7, #2]
 800c66a:	f240 520d 	movw	r2, #1293	; 0x50d
 800c66e:	4293      	cmp	r3, r2
 800c670:	d106      	bne.n	800c680 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c672:	883b      	ldrh	r3, [r7, #0]
 800c674:	f240 625a 	movw	r2, #1626	; 0x65a
 800c678:	4293      	cmp	r3, r2
 800c67a:	d101      	bne.n	800c680 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e02d      	b.n	800c6dc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7d1b      	ldrb	r3, [r3, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d113      	bne.n	800c6b0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7d5b      	ldrb	r3, [r3, #21]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10f      	bne.n	800c6b0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d9b      	ldrb	r3, [r3, #22]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10b      	bne.n	800c6b0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7ddb      	ldrb	r3, [r3, #23]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d107      	bne.n	800c6b0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7e1b      	ldrb	r3, [r3, #24]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d103      	bne.n	800c6b0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7e5b      	ldrb	r3, [r3, #25]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d014      	beq.n	800c6da <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c6b0:	887b      	ldrh	r3, [r7, #2]
 800c6b2:	f240 524c 	movw	r2, #1356	; 0x54c
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d10f      	bne.n	800c6da <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c6ba:	883b      	ldrh	r3, [r7, #0]
 800c6bc:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c6c0:	d009      	beq.n	800c6d6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c6c2:	883b      	ldrh	r3, [r7, #0]
 800c6c4:	f240 422f 	movw	r2, #1071	; 0x42f
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d004      	beq.n	800c6d6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c6cc:	883b      	ldrh	r3, [r7, #0]
 800c6ce:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d101      	bne.n	800c6da <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e000      	b.n	800c6dc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c6da:	2300      	movs	r3, #0
        };
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff ff59 	bl	800c5ac <_ZN15USBDeviceConfigC1Ev>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff ff64 	bl	800c5cc <_ZN17UsbConfigXtracterC1Ev>
 800c704:	4a2b      	ldr	r2, [pc, #172]	; (800c7b4 <_ZN3BTDC1EP3USB+0xcc>)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	4a2b      	ldr	r2, [pc, #172]	; (800c7b8 <_ZN3BTDC1EP3USB+0xd0>)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	605a      	str	r2, [r3, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	64da      	str	r2, [r3, #76]	; 0x4c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	661a      	str	r2, [r3, #96]	; 0x60
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	2b03      	cmp	r3, #3
 800c774:	d80a      	bhi.n	800c78c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	3318      	adds	r3, #24
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	2200      	movs	r2, #0
 800c782:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	3301      	adds	r3, #1
 800c788:	73fb      	strb	r3, [r7, #15]
 800c78a:	e7f1      	b.n	800c770 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fa7d 	bl	800cc8c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d006      	beq.n	800c7a8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7ff fe1b 	bl	800c3de <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	080128dc 	.word	0x080128dc
 800c7b8:	08012910 	.word	0x08012910

0800c7bc <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b08f      	sub	sp, #60	; 0x3c
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	70fb      	strb	r3, [r7, #3]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70bb      	strb	r3, [r7, #2]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c7d6:	2312      	movs	r3, #18
 800c7d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c7dc:	f107 0308 	add.w	r3, r7, #8
 800c7e0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa4e 	bl	800cc8c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff fde7 	bl	800c3c8 <_ZN3USB14GetAddressPoolEv>
 800c7fa:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c806:	23d9      	movs	r3, #217	; 0xd9
 800c808:	e087      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2100      	movs	r1, #0
 800c812:	69f8      	ldr	r0, [r7, #28]
 800c814:	4798      	blx	r3
 800c816:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c81e:	23d6      	movs	r3, #214	; 0xd6
 800c820:	e07b      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c82a:	23d7      	movs	r3, #215	; 0xd7
 800c82c:	e075      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	787a      	ldrb	r2, [r7, #1]
 800c842:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c848:	f107 0308 	add.w	r3, r7, #8
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	2312      	movs	r3, #18
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	f005 fa13 	bl	8011c7e <_ZN3USB11getDevDescrEhhtPh>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	6a3a      	ldr	r2, [r7, #32]
 800c862:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d146      	bne.n	800c8fa <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3304      	adds	r3, #4
 800c872:	681c      	ldr	r4, [r3, #0]
 800c874:	78bb      	ldrb	r3, [r7, #2]
 800c876:	78f9      	ldrb	r1, [r7, #3]
 800c878:	2200      	movs	r2, #0
 800c87a:	69f8      	ldr	r0, [r7, #28]
 800c87c:	47a0      	blx	r4
 800c87e:	4603      	mov	r3, r0
 800c880:	461a      	mov	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c892:	23d4      	movs	r3, #212	; 0xd4
 800c894:	e041      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	791b      	ldrb	r3, [r3, #4]
 800c89a:	2b09      	cmp	r3, #9
 800c89c:	d017      	beq.n	800c8ce <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	79da      	ldrb	r2, [r3, #7]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	7c5a      	ldrb	r2, [r3, #17]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	891b      	ldrh	r3, [r3, #8]
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c8ca:	23e0      	movs	r3, #224	; 0xe0
 800c8cc:	e025      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c8ce:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c8da:	2300      	movs	r3, #0
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f005 fa6b 	bl	8011db8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c8e2:	23d1      	movs	r3, #209	; 0xd1
 800c8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	4798      	blx	r3
        return rcode;
 800c8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8f8:	e00f      	b.n	800c91a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c8fa:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c900:	2b0d      	cmp	r3, #13
 800c902:	d002      	beq.n	800c90a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c904:	23e1      	movs	r3, #225	; 0xe1
 800c906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3308      	adds	r3, #8
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	4798      	blx	r3
        return rcode;
 800c916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c91a:	4618      	mov	r0, r3
 800c91c:	3734      	adds	r7, #52	; 0x34
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd90      	pop	{r4, r7, pc}

0800c922 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c922:	b580      	push	{r7, lr}
 800c924:	b096      	sub	sp, #88	; 0x58
 800c926:	af02      	add	r7, sp, #8
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	4608      	mov	r0, r1
 800c92c:	4611      	mov	r1, r2
 800c92e:	461a      	mov	r2, r3
 800c930:	4603      	mov	r3, r0
 800c932:	70fb      	strb	r3, [r7, #3]
 800c934:	460b      	mov	r3, r1
 800c936:	70bb      	strb	r3, [r7, #2]
 800c938:	4613      	mov	r3, r2
 800c93a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c942:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff fd38 	bl	800c3c8 <_ZN3USB14GetAddressPoolEv>
 800c958:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c966:	4611      	mov	r1, r2
 800c968:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c96a:	4798      	blx	r3
 800c96c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c974:	23d6      	movs	r3, #214	; 0xd6
 800c976:	e185      	b.n	800cc84 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c978:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c97c:	f7f5 fa80 	bl	8001e80 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	f005 fa13 	bl	8011db8 <_ZN3USB7setAddrEhhh>
 800c992:	4603      	mov	r3, r0
 800c994:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c998:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c9a6:	e165      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c9be:	4798      	blx	r3
 800c9c0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c9c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c9c8:	23d6      	movs	r3, #214	; 0xd6
 800c9ca:	e15b      	b.n	800cc84 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ce:	787a      	ldrb	r2, [r7, #1]
 800c9d0:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3351      	adds	r3, #81	; 0x51
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f004 f8dc 	bl	8010b9e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c9ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f040 8128 	bne.w	800cc46 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c9fc:	f240 524c 	movw	r2, #1356	; 0x54c
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d177      	bne.n	800caf4 <_ZN3BTD4InitEhhb+0x1d2>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca0a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca0e:	d00d      	beq.n	800ca2c <_ZN3BTD4InitEhhb+0x10a>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca16:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d006      	beq.n	800ca2c <_ZN3BTD4InitEhhb+0x10a>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca24:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d163      	bne.n	800caf4 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800ca2c:	2064      	movs	r0, #100	; 0x64
 800ca2e:	f7f5 fa27 	bl	8001e80 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ca42:	2301      	movs	r3, #1
 800ca44:	f005 f9e6 	bl	8011e14 <_ZN3USB7setConfEhhh>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ca4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f040 80f9 	bne.w	800cc4a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	7d1b      	ldrb	r3, [r3, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d113      	bne.n	800ca88 <_ZN3BTD4InitEhhb+0x166>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7d5b      	ldrb	r3, [r3, #21]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10f      	bne.n	800ca88 <_ZN3BTD4InitEhhb+0x166>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	7d9b      	ldrb	r3, [r3, #22]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10b      	bne.n	800ca88 <_ZN3BTD4InitEhhb+0x166>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7ddb      	ldrb	r3, [r3, #23]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d107      	bne.n	800ca88 <_ZN3BTD4InitEhhb+0x166>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	7e1b      	ldrb	r3, [r3, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d103      	bne.n	800ca88 <_ZN3BTD4InitEhhb+0x166>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7e5b      	ldrb	r3, [r3, #25]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d019      	beq.n	800cabc <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca8e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca92:	d006      	beq.n	800caa2 <_ZN3BTD4InitEhhb+0x180>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca9a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d106      	bne.n	800cab0 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3314      	adds	r3, #20
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f002 f8b0 	bl	800ec0e <_ZN3BTD9setBdaddrEPh>
 800caae:	e005      	b.n	800cabc <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3314      	adds	r3, #20
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f002 f8e9 	bl	800ec8e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cacc:	2300      	movs	r3, #0
 800cace:	f005 f9a1 	bl	8011e14 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cadc:	2300      	movs	r3, #0
 800cade:	2200      	movs	r2, #0
 800cae0:	f005 f96a 	bl	8011db8 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3308      	adds	r3, #8
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800caf0:	23d1      	movs	r3, #209	; 0xd1
 800caf2:	e0c7      	b.n	800cc84 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800caf4:	2300      	movs	r3, #0
 800caf6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cafa:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cafe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d25e      	bcs.n	800cbc4 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cb0c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d106      	bne.n	800cb22 <_ZN3BTD4InitEhhb+0x200>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cb1a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d00d      	beq.n	800cb3e <_ZN3BTD4InitEhhb+0x21c>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cb28:	f240 520d 	movw	r2, #1293	; 0x50d
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d120      	bne.n	800cb72 <_ZN3BTD4InitEhhb+0x250>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cb36:	f240 625a 	movw	r2, #1626	; 0x65a
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d119      	bne.n	800cb72 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	1d1a      	adds	r2, r3, #4
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4611      	mov	r1, r2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f002 f8f3 	bl	800ed34 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb58:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb5c:	f107 0308 	add.w	r3, r7, #8
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	4613      	mov	r3, r2
 800cb64:	2200      	movs	r2, #0
 800cb66:	f005 f8da 	bl	8011d1e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb70:	e018      	b.n	800cba4 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	1d1a      	adds	r2, r3, #4
 800cb76:	f107 0308 	add.w	r3, r7, #8
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f002 f927 	bl	800edd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb8c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb90:	f107 0308 	add.w	r3, r7, #8
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	4613      	mov	r3, r2
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f005 f8c0 	bl	8011d1e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d150      	bne.n	800cc4e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d805      	bhi.n	800cbc2 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cbb6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cbba:	3301      	adds	r3, #1
 800cbbc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cbc0:	e79b      	b.n	800cafa <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cbc2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d945      	bls.n	800cc5a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3351      	adds	r3, #81	; 0x51
 800cbe2:	f003 ffdc 	bl	8010b9e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cbec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d12e      	bne.n	800cc52 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc0a:	f005 f903 	bl	8011e14 <_ZN3USB7setConfEhhh>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cc14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d11c      	bne.n	800cc56 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2264      	movs	r2, #100	; 0x64
 800cc20:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800cc42:	2300      	movs	r3, #0
 800cc44:	e01e      	b.n	800cc84 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800cc46:	bf00      	nop
 800cc48:	e014      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cc4a:	bf00      	nop
 800cc4c:	e012      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800cc4e:	bf00      	nop
 800cc50:	e010      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cc52:	bf00      	nop
 800cc54:	e00e      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cc56:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cc58:	e00c      	b.n	800cc74 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cc5a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc66:	2300      	movs	r3, #0
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f005 f8a5 	bl	8011db8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cc6e:	23d1      	movs	r3, #209	; 0xd1
 800cc70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
        return rcode;
 800cc80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3750      	adds	r7, #80	; 0x50
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cc94:	2300      	movs	r3, #0
 800cc96:	73fb      	strb	r3, [r7, #15]
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d845      	bhi.n	800cd2a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cc9e:	7bfa      	ldrb	r2, [r7, #15]
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	4613      	mov	r3, r2
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	4413      	add	r3, r2
 800cca8:	440b      	add	r3, r1
 800ccaa:	3351      	adds	r3, #81	; 0x51
 800ccac:	2200      	movs	r2, #0
 800ccae:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <_ZN3BTD10InitializeEv+0x2e>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e000      	b.n	800ccbc <_ZN3BTD10InitializeEv+0x30>
 800ccba:	2008      	movs	r0, #8
 800ccbc:	7bfa      	ldrb	r2, [r7, #15]
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	4413      	add	r3, r2
 800ccc6:	440b      	add	r3, r1
 800ccc8:	3352      	adds	r3, #82	; 0x52
 800ccca:	4602      	mov	r2, r0
 800cccc:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800ccce:	7bfa      	ldrb	r2, [r7, #15]
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	440b      	add	r3, r1
 800ccda:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccde:	78d3      	ldrb	r3, [r2, #3]
 800cce0:	f36f 0300 	bfc	r3, #0, #1
 800cce4:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800cce6:	7bfa      	ldrb	r2, [r7, #15]
 800cce8:	6879      	ldr	r1, [r7, #4]
 800ccea:	4613      	mov	r3, r2
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4413      	add	r3, r2
 800ccf0:	440b      	add	r3, r1
 800ccf2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccf6:	78d3      	ldrb	r3, [r2, #3]
 800ccf8:	f36f 0341 	bfc	r3, #1, #1
 800ccfc:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <_ZN3BTD10InitializeEv+0x7c>
 800cd04:	2101      	movs	r1, #1
 800cd06:	e000      	b.n	800cd0a <_ZN3BTD10InitializeEv+0x7e>
 800cd08:	210f      	movs	r1, #15
 800cd0a:	7bfa      	ldrb	r2, [r7, #15]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	4403      	add	r3, r0
 800cd16:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cd1a:	78d3      	ldrb	r3, [r2, #3]
 800cd1c:	f361 0387 	bfi	r3, r1, #2, #6
 800cd20:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	3301      	adds	r3, #1
 800cd26:	73fb      	strb	r3, [r7, #15]
 800cd28:	e7b6      	b.n	800cc98 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d81c      	bhi.n	800cd6e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	3318      	adds	r3, #24
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d010      	beq.n	800cd66 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	3318      	adds	r3, #24
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	6859      	ldr	r1, [r3, #4]
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	3318      	adds	r3, #24
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3308      	adds	r3, #8
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4608      	mov	r0, r1
 800cd64:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	73fb      	strb	r3, [r7, #15]
 800cd6c:	e7df      	b.n	800cd2e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cdc4:	bf00      	nop
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4603      	mov	r3, r0
 800cddc:	70fb      	strb	r3, [r7, #3]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70bb      	strb	r3, [r7, #2]
 800cde2:	4613      	mov	r3, r2
 800cde4:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cde6:	787b      	ldrb	r3, [r7, #1]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d15d      	bne.n	800cea8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	78fa      	ldrb	r2, [r7, #3]
 800cdf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	78db      	ldrb	r3, [r3, #3]
 800cdf8:	f003 0303 	and.w	r3, r3, #3
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d114      	bne.n	800ce2a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	789b      	ldrb	r3, [r3, #2]
 800ce04:	b25b      	sxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da0f      	bge.n	800ce2a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800ce0e:	7bfa      	ldrb	r2, [r7, #15]
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	4413      	add	r3, r2
 800ce18:	440b      	add	r3, r1
 800ce1a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ce1e:	78d3      	ldrb	r3, [r2, #3]
 800ce20:	2101      	movs	r1, #1
 800ce22:	f361 0387 	bfi	r3, r1, #2, #6
 800ce26:	70d3      	strb	r3, [r2, #3]
 800ce28:	e00e      	b.n	800ce48 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	78db      	ldrb	r3, [r3, #3]
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d13a      	bne.n	800ceac <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	789b      	ldrb	r3, [r3, #2]
 800ce3a:	b25b      	sxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	da01      	bge.n	800ce44 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800ce40:	2302      	movs	r3, #2
 800ce42:	e000      	b.n	800ce46 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800ce44:	2303      	movs	r3, #3
 800ce46:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	789b      	ldrb	r3, [r3, #2]
 800ce4c:	7bfa      	ldrb	r2, [r7, #15]
 800ce4e:	f003 030f 	and.w	r3, r3, #15
 800ce52:	b2d8      	uxtb	r0, r3
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	440b      	add	r3, r1
 800ce5e:	3351      	adds	r3, #81	; 0x51
 800ce60:	4602      	mov	r2, r0
 800ce62:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	889b      	ldrh	r3, [r3, #4]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	7bfa      	ldrb	r2, [r7, #15]
 800ce6c:	b2d8      	uxtb	r0, r3
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	440b      	add	r3, r1
 800ce78:	3352      	adds	r3, #82	; 0x52
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	799b      	ldrb	r3, [r3, #6]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d204      	bcs.n	800ce96 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	799a      	ldrb	r2, [r3, #6]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800cea6:	e002      	b.n	800ceae <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800cea8:	bf00      	nop
 800ceaa:	e000      	b.n	800ceae <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ceac:	bf00      	nop
}
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ceb8:	f1a0 0004 	sub.w	r0, r0, #4
 800cebc:	f7ff bf86 	b.w	800cdcc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800cec0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff fedf 	bl	800cc8c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff fa78 	bl	800c3c8 <_ZN3USB14GetAddressPoolEv>
 800ced8:	4603      	mov	r3, r0
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	3208      	adds	r2, #8
 800cede:	6812      	ldr	r2, [r2, #0]
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800cee6:	4618      	mov	r0, r3
 800cee8:	4790      	blx	r2
        return 0;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cf02:	f083 0301 	eor.w	r3, r3, #1
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	e01d      	b.n	800cf4c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800cf10:	f7f4 ffaa 	bl	8001e68 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	43db      	mvns	r3, r3
 800cf1e:	0fdb      	lsrs	r3, r3, #31
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d011      	beq.n	800cf4a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cf26:	f7f4 ff9f 	bl	8001e68 <HAL_GetTick>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cf32:	441a      	add	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f80b 	bl	800cf54 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fb22 	bl	800d588 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fe4b 	bl	800dbe0 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800cf54:	b5b0      	push	{r4, r5, r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800cf5c:	2340      	movs	r3, #64	; 0x40
 800cf5e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3389      	adds	r3, #137	; 0x89
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cf7a:	f107 050c 	add.w	r5, r7, #12
 800cf7e:	9201      	str	r2, [sp, #4]
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	462b      	mov	r3, r5
 800cf84:	4622      	mov	r2, r4
 800cf86:	f003 ff72 	bl	8010e6e <_ZN3USB10inTransferEhhPtPhh>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	f040 82f1 	bne.w	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	2b35      	cmp	r3, #53	; 0x35
 800cfa6:	f200 82ea 	bhi.w	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800d191 	.word	0x0800d191
 800cfb4:	0800d1f1 	.word	0x0800d1f1
 800cfb8:	0800d349 	.word	0x0800d349
 800cfbc:	0800d433 	.word	0x0800d433
 800cfc0:	0800d3a5 	.word	0x0800d3a5
 800cfc4:	0800d4f1 	.word	0x0800d4f1
 800cfc8:	0800d3d7 	.word	0x0800d3d7
 800cfcc:	0800d569 	.word	0x0800d569
 800cfd0:	0800d569 	.word	0x0800d569
 800cfd4:	0800d57f 	.word	0x0800d57f
 800cfd8:	0800d57f 	.word	0x0800d57f
 800cfdc:	0800d569 	.word	0x0800d569
 800cfe0:	0800d569 	.word	0x0800d569
 800cfe4:	0800d089 	.word	0x0800d089
 800cfe8:	0800d569 	.word	0x0800d569
 800cfec:	0800d57f 	.word	0x0800d57f
 800cff0:	0800d57f 	.word	0x0800d57f
 800cff4:	0800d569 	.word	0x0800d569
 800cff8:	0800d569 	.word	0x0800d569
 800cffc:	0800d57f 	.word	0x0800d57f
 800d000:	0800d57f 	.word	0x0800d57f
 800d004:	0800d4bf 	.word	0x0800d4bf
 800d008:	0800d4e9 	.word	0x0800d4e9
 800d00c:	0800d569 	.word	0x0800d569
 800d010:	0800d569 	.word	0x0800d569
 800d014:	0800d569 	.word	0x0800d569
 800d018:	0800d569 	.word	0x0800d569
 800d01c:	0800d57f 	.word	0x0800d57f
 800d020:	0800d57f 	.word	0x0800d57f
 800d024:	0800d57f 	.word	0x0800d57f
 800d028:	0800d57f 	.word	0x0800d57f
 800d02c:	0800d569 	.word	0x0800d569
 800d030:	0800d57f 	.word	0x0800d57f
 800d034:	0800d57f 	.word	0x0800d57f
 800d038:	0800d57f 	.word	0x0800d57f
 800d03c:	0800d57f 	.word	0x0800d57f
 800d040:	0800d57f 	.word	0x0800d57f
 800d044:	0800d57f 	.word	0x0800d57f
 800d048:	0800d57f 	.word	0x0800d57f
 800d04c:	0800d57f 	.word	0x0800d57f
 800d050:	0800d57f 	.word	0x0800d57f
 800d054:	0800d57f 	.word	0x0800d57f
 800d058:	0800d57f 	.word	0x0800d57f
 800d05c:	0800d57f 	.word	0x0800d57f
 800d060:	0800d57f 	.word	0x0800d57f
 800d064:	0800d57f 	.word	0x0800d57f
 800d068:	0800d57f 	.word	0x0800d57f
 800d06c:	0800d57f 	.word	0x0800d57f
 800d070:	0800d559 	.word	0x0800d559
 800d074:	0800d569 	.word	0x0800d569
 800d078:	0800d561 	.word	0x0800d561
 800d07c:	0800d57f 	.word	0x0800d57f
 800d080:	0800d57f 	.word	0x0800d57f
 800d084:	0800d569 	.word	0x0800d569
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f040 826c 	bne.w	800d56c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d09a:	f043 0301 	orr.w	r3, r3, #1
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d114      	bne.n	800d0da <_ZN3BTD14HCI_event_taskEv+0x186>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0b6:	2b10      	cmp	r3, #16
 800d0b8:	d10f      	bne.n	800d0da <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d0d8:	e059      	b.n	800d18e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0e0:	2b04      	cmp	r3, #4
 800d0e2:	d12a      	bne.n	800d13a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0ea:	2b10      	cmp	r3, #16
 800d0ec:	d125      	bne.n	800d13a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d114      	bne.n	800d126 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10f      	bne.n	800d126 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b00      	cmp	r3, #0
 800d112:	d004      	beq.n	800d11e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d11c:	e003      	b.n	800d126 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d12c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d130:	b29a      	uxth	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d138:	e029      	b.n	800d18e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d140:	2b09      	cmp	r3, #9
 800d142:	f040 8213 	bne.w	800d56c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d14c:	2b10      	cmp	r3, #16
 800d14e:	f040 820d 	bne.w	800d56c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	2b05      	cmp	r3, #5
 800d15a:	d80e      	bhi.n	800d17a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
 800d15e:	1d9a      	adds	r2, r3, #6
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	6879      	ldr	r1, [r7, #4]
 800d164:	440a      	add	r2, r1
 800d166:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	460a      	mov	r2, r1
 800d170:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d172:	7dfb      	ldrb	r3, [r7, #23]
 800d174:	3301      	adds	r3, #1
 800d176:	75fb      	strb	r3, [r7, #23]
 800d178:	e7ed      	b.n	800d156 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d180:	f043 0320 	orr.w	r3, r3, #32
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d18c:	e1ee      	b.n	800d56c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d18e:	e1ed      	b.n	800d56c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d196:	2b04      	cmp	r3, #4
 800d198:	d921      	bls.n	800d1de <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d104      	bne.n	800d1ae <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d017      	beq.n	800d1de <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	220a      	movs	r2, #10
 800d1da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d1ee:	e1c6      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 81ba 	beq.w	800d570 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	75bb      	strb	r3, [r7, #22]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d206:	7dba      	ldrb	r2, [r7, #22]
 800d208:	429a      	cmp	r2, r3
 800d20a:	f080 81b1 	bcs.w	800d570 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d214:	00db      	lsls	r3, r3, #3
 800d216:	b2da      	uxtb	r2, r3
 800d218:	7dbb      	ldrb	r3, [r7, #22]
 800d21a:	4619      	mov	r1, r3
 800d21c:	0049      	lsls	r1, r1, #1
 800d21e:	440b      	add	r3, r1
 800d220:	b2db      	uxtb	r3, r3
 800d222:	4413      	add	r3, r2
 800d224:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d226:	2300      	movs	r3, #0
 800d228:	757b      	strb	r3, [r7, #21]
 800d22a:	7d7b      	ldrb	r3, [r7, #21]
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d811      	bhi.n	800d254 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d230:	7d7b      	ldrb	r3, [r7, #21]
 800d232:	1d1a      	adds	r2, r3, #4
 800d234:	7bbb      	ldrb	r3, [r7, #14]
 800d236:	441a      	add	r2, r3
 800d238:	7d7b      	ldrb	r3, [r7, #21]
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	440a      	add	r2, r1
 800d23e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	4413      	add	r3, r2
 800d246:	460a      	mov	r2, r1
 800d248:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d24c:	7d7b      	ldrb	r3, [r7, #21]
 800d24e:	3301      	adds	r3, #1
 800d250:	757b      	strb	r3, [r7, #21]
 800d252:	e7ea      	b.n	800d22a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d038      	beq.n	800d2d0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d264:	2b00      	cmp	r3, #0
 800d266:	d133      	bne.n	800d2d0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d26e:	2b05      	cmp	r3, #5
 800d270:	d12e      	bne.n	800d2d0 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d278:	f003 030c 	and.w	r3, r3, #12
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d027      	beq.n	800d2d0 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d288:	2300      	movs	r3, #0
 800d28a:	753b      	strb	r3, [r7, #20]
 800d28c:	7d3b      	ldrb	r3, [r7, #20]
 800d28e:	2b05      	cmp	r3, #5
 800d290:	d814      	bhi.n	800d2bc <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d292:	7d3b      	ldrb	r3, [r7, #20]
 800d294:	1cd9      	adds	r1, r3, #3
 800d296:	7dba      	ldrb	r2, [r7, #22]
 800d298:	4613      	mov	r3, r2
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	4413      	add	r3, r2
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	18ca      	adds	r2, r1, r3
 800d2a2:	7d3b      	ldrb	r3, [r7, #20]
 800d2a4:	6879      	ldr	r1, [r7, #4]
 800d2a6:	440a      	add	r2, r1
 800d2a8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	460a      	mov	r2, r1
 800d2b2:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2b4:	7d3b      	ldrb	r3, [r7, #20]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	753b      	strb	r3, [r7, #20]
 800d2ba:	e7e7      	b.n	800d28c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d2ce:	e03a      	b.n	800d346 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d031      	beq.n	800d33e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	2b05      	cmp	r3, #5
 800d2e6:	d12a      	bne.n	800d33e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d2ee:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d023      	beq.n	800d33e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	74fb      	strb	r3, [r7, #19]
 800d2fa:	7cfb      	ldrb	r3, [r7, #19]
 800d2fc:	2b05      	cmp	r3, #5
 800d2fe:	d814      	bhi.n	800d32a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d300:	7cfb      	ldrb	r3, [r7, #19]
 800d302:	1cd9      	adds	r1, r3, #3
 800d304:	7dba      	ldrb	r2, [r7, #22]
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	18ca      	adds	r2, r1, r3
 800d310:	7cfb      	ldrb	r3, [r7, #19]
 800d312:	6879      	ldr	r1, [r7, #4]
 800d314:	440a      	add	r2, r1
 800d316:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	460a      	mov	r2, r1
 800d320:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d322:	7cfb      	ldrb	r3, [r7, #19]
 800d324:	3301      	adds	r3, #1
 800d326:	74fb      	strb	r3, [r7, #19]
 800d328:	e7e7      	b.n	800d2fa <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d334:	b29a      	uxth	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d33c:	e003      	b.n	800d346 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d33e:	7dbb      	ldrb	r3, [r7, #22]
 800d340:	3301      	adds	r3, #1
 800d342:	75bb      	strb	r3, [r7, #22]
 800d344:	e75c      	b.n	800d200 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d346:	e113      	b.n	800d570 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d34e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d352:	b29a      	uxth	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11a      	bne.n	800d39a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d36a:	b21a      	sxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	b21b      	sxth	r3, r3
 800d376:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	b21b      	sxth	r3, r3
 800d380:	b29a      	uxth	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d38c:	f043 0302 	orr.w	r3, r3, #2
 800d390:	b29a      	uxth	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d398:	e0f1      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2206      	movs	r2, #6
 800d39e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d3a2:	e0ec      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 80e2 	bne.w	800d574 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3b6:	f043 0304 	orr.w	r3, r3, #4
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3c8:	f023 0302 	bic.w	r3, r3, #2
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d3d4:	e0ce      	b.n	800d574 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f040 80cb 	bne.w	800d578 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	74bb      	strb	r3, [r7, #18]
 800d3e6:	7cbb      	ldrb	r3, [r7, #18]
 800d3e8:	2b1d      	cmp	r3, #29
 800d3ea:	d818      	bhi.n	800d41e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d3ec:	7cbb      	ldrb	r3, [r7, #18]
 800d3ee:	f103 0209 	add.w	r2, r3, #9
 800d3f2:	7cbb      	ldrb	r3, [r7, #18]
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	440a      	add	r2, r1
 800d3f8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	4413      	add	r3, r2
 800d400:	460a      	mov	r2, r1
 800d402:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d406:	7cbb      	ldrb	r3, [r7, #18]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4413      	add	r3, r2
 800d40c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d414:	7cbb      	ldrb	r3, [r7, #18]
 800d416:	3301      	adds	r3, #1
 800d418:	74bb      	strb	r3, [r7, #18]
 800d41a:	e7e4      	b.n	800d3e6 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d41c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d424:	f043 0308 	orr.w	r3, r3, #8
 800d428:	b29a      	uxth	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d430:	e0a2      	b.n	800d578 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d432:	2300      	movs	r3, #0
 800d434:	747b      	strb	r3, [r7, #17]
 800d436:	7c7b      	ldrb	r3, [r7, #17]
 800d438:	2b05      	cmp	r3, #5
 800d43a:	d80e      	bhi.n	800d45a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d43c:	7c7b      	ldrb	r3, [r7, #17]
 800d43e:	1c9a      	adds	r2, r3, #2
 800d440:	7c7b      	ldrb	r3, [r7, #17]
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	440a      	add	r2, r1
 800d446:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	460a      	mov	r2, r1
 800d450:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d452:	7c7b      	ldrb	r3, [r7, #17]
 800d454:	3301      	adds	r3, #1
 800d456:	747b      	strb	r3, [r7, #17]
 800d458:	e7ed      	b.n	800d436 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d45a:	2300      	movs	r3, #0
 800d45c:	743b      	strb	r3, [r7, #16]
 800d45e:	7c3b      	ldrb	r3, [r7, #16]
 800d460:	2b02      	cmp	r3, #2
 800d462:	d810      	bhi.n	800d486 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d464:	7c3b      	ldrb	r3, [r7, #16]
 800d466:	f103 0208 	add.w	r2, r3, #8
 800d46a:	7c3b      	ldrb	r3, [r7, #16]
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	440a      	add	r2, r1
 800d470:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	4413      	add	r3, r2
 800d478:	460a      	mov	r2, r1
 800d47a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d47e:	7c3b      	ldrb	r3, [r7, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	743b      	strb	r3, [r7, #16]
 800d484:	e7eb      	b.n	800d45e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d48c:	f003 030f 	and.w	r3, r3, #15
 800d490:	2b05      	cmp	r3, #5
 800d492:	d10a      	bne.n	800d4aa <_ZN3BTD14HCI_event_taskEv+0x556>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d49a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d4b0:	f043 0310 	orr.w	r3, r3, #16
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d4bc:	e05f      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 feec 	bl	800e2a6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d4ce:	e056      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fee4 	bl	800e2a6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d4de:	e04e      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 ff93 	bl	800e40c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d4e6:	e04a      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 ffca 	bl	800e482 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d4ee:	e046      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d123      	bne.n	800d542 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00c      	beq.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d50a:	f083 0301 	eor.w	r3, r3, #1
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d004      	beq.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d51c:	e02e      	b.n	800d57c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d524:	2b00      	cmp	r3, #0
 800d526:	d029      	beq.n	800d57c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d52e:	f083 0301 	eor.w	r3, r3, #1
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	d021      	beq.n	800d57c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d540:	e01c      	b.n	800d57c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	8b5b      	ldrh	r3, [r3, #26]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f001 f882 	bl	800e652 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2210      	movs	r2, #16
 800d552:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d556:	e011      	b.n	800d57c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 ffcd 	bl	800e4f8 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d55e:	e00e      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f001 f810 	bl	800e586 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d566:	e00a      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d568:	bf00      	nop
 800d56a:	e008      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d56c:	bf00      	nop
 800d56e:	e006      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d570:	bf00      	nop
 800d572:	e004      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d574:	bf00      	nop
 800d576:	e002      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d578:	bf00      	nop
 800d57a:	e000      	b.n	800d57e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d57c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d57e:	bf00      	nop
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bdb0      	pop	{r4, r5, r7, pc}
 800d586:	bf00      	nop

0800d588 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d596:	2b13      	cmp	r3, #19
 800d598:	f200 82ef 	bhi.w	800db7a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d59c:	a201      	add	r2, pc, #4	; (adr r2, 800d5a4 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a2:	bf00      	nop
 800d5a4:	0800d5f5 	.word	0x0800d5f5
 800d5a8:	0800d62f 	.word	0x0800d62f
 800d5ac:	0800d6b5 	.word	0x0800d6b5
 800d5b0:	0800d6d5 	.word	0x0800d6d5
 800d5b4:	0800d6f5 	.word	0x0800d6f5
 800d5b8:	0800d749 	.word	0x0800d749
 800d5bc:	0800d7ef 	.word	0x0800d7ef
 800d5c0:	0800d81d 	.word	0x0800d81d
 800d5c4:	0800d857 	.word	0x0800d857
 800d5c8:	0800d87f 	.word	0x0800d87f
 800d5cc:	0800d8b5 	.word	0x0800d8b5
 800d5d0:	0800d913 	.word	0x0800d913
 800d5d4:	0800d951 	.word	0x0800d951
 800d5d8:	0800da77 	.word	0x0800da77
 800d5dc:	0800db7b 	.word	0x0800db7b
 800d5e0:	0800dabd 	.word	0x0800dabd
 800d5e4:	0800daeb 	.word	0x0800daeb
 800d5e8:	0800d77f 	.word	0x0800d77f
 800d5ec:	0800d7b5 	.word	0x0800d7b5
 800d5f0:	0800d7d5 	.word	0x0800d7d5
                case HCI_INIT_STATE:
                        hci_counter++;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d610:	429a      	cmp	r2, r3
 800d612:	f240 82b4 	bls.w	800db7e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fb7d 	bl	800dd16 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d62c:	e2a7      	b.n	800db7e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d634:	3301      	adds	r3, #1
 800d636:	b29a      	uxth	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f001 f830 	bl	800e6c2 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d662:	e28e      	b.n	800db82 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d670:	429a      	cmp	r2, r3
 800d672:	f240 8286 	bls.w	800db82 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d67c:	461a      	mov	r2, r3
 800d67e:	0092      	lsls	r2, r2, #2
 800d680:	4413      	add	r3, r2
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	b29a      	uxth	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d692:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d696:	d904      	bls.n	800d6a2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d69e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d6b2:	e266      	b.n	800db82 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 8261 	beq.w	800db86 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2203      	movs	r2, #3
 800d6c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fb72 	bl	800ddb6 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d6d2:	e258      	b.n	800db86 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6da:	f003 0320 	and.w	r3, r3, #32
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 8253 	beq.w	800db8a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fb8a 	bl	800ddfe <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d6f2:	e24a      	b.n	800db8a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 8245 	beq.w	800db8e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00a      	beq.n	800d722 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fc5d 	bl	800dfd2 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2205      	movs	r2, #5
 800d71c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d720:	e235      	b.n	800db8e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d008      	beq.n	800d73e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d72c:	2100      	movs	r1, #0
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fb89 	bl	800de46 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2211      	movs	r2, #17
 800d738:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d73c:	e227      	b.n	800db8e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2206      	movs	r2, #6
 800d742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d746:	e222      	b.n	800db8e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 821d 	beq.w	800db92 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d008      	beq.n	800d774 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d762:	2100      	movs	r1, #0
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 fb6e 	bl	800de46 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2211      	movs	r2, #17
 800d76e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d772:	e20e      	b.n	800db92 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2206      	movs	r2, #6
 800d778:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d77c:	e209      	b.n	800db92 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 8204 	beq.w	800db96 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d794:	2b00      	cmp	r3, #0
 800d796:	d008      	beq.n	800d7aa <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d798:	2101      	movs	r1, #1
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fc9d 	bl	800e0da <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2212      	movs	r2, #18
 800d7a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d7a8:	e1f5      	b.n	800db96 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2206      	movs	r2, #6
 800d7ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7b2:	e1f0      	b.n	800db96 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 81eb 	beq.w	800db9a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fc4d 	bl	800e064 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2213      	movs	r2, #19
 800d7ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7d2:	e1e2      	b.n	800db9a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 81dd 	beq.w	800db9e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d7ec:	e1d7      	b.n	800db9e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d104      	bne.n	800d802 <_ZN3BTD8HCI_taskEv+0x27a>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d007      	beq.n	800d812 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fc8f 	bl	800e126 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2207      	movs	r2, #7
 800d80c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d810:	e1d8      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	220a      	movs	r2, #10
 800d816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d81a:	e1d3      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 81bb 	beq.w	800dba2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fcb2 	bl	800e196 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fb74 	bl	800df2a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	220c      	movs	r2, #12
 800d846:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d84a:	e1aa      	b.n	800dba2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2208      	movs	r2, #8
 800d850:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d854:	e1a5      	b.n	800dba2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 81a0 	beq.w	800dba6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fcac 	bl	800e1cc <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2209      	movs	r2, #9
 800d878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d87c:	e193      	b.n	800dba6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 818e 	beq.w	800dbaa <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d894:	f003 0302 	and.w	r3, r3, #2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d007      	beq.n	800d8ac <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fead 	bl	800e5fc <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d8aa:	e17e      	b.n	800dbaa <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fc8d 	bl	800e1cc <_ZN3BTD11hci_connectEv>
                        break;
 800d8b2:	e17a      	b.n	800dbaa <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8ba:	f083 0301 	eor.w	r3, r3, #1
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8174 	beq.w	800dbae <_ZN3BTD8HCI_taskEv+0x626>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8cc:	f083 0301 	eor.w	r3, r3, #1
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 816b 	beq.w	800dbae <_ZN3BTD8HCI_taskEv+0x626>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d8de:	f083 0301 	eor.w	r3, r3, #1
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 8162 	beq.w	800dbae <_ZN3BTD8HCI_taskEv+0x626>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d8f0:	f083 0301 	eor.w	r3, r3, #1
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f000 8159 	beq.w	800dbae <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fa29 	bl	800dd54 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	220b      	movs	r2, #11
 800d90c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d910:	e14d      	b.n	800dbae <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d918:	f003 0310 	and.w	r3, r3, #16
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00a      	beq.n	800d936 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 faff 	bl	800df2a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	220c      	movs	r2, #12
 800d930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d934:	e13d      	b.n	800dbb2 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d93c:	f003 0304 	and.w	r3, r3, #4
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8136 	beq.w	800dbb2 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2210      	movs	r2, #16
 800d94a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d94e:	e130      	b.n	800dbb2 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f000 812b 	beq.w	800dbb6 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3322      	adds	r3, #34	; 0x22
 800d964:	2208      	movs	r2, #8
 800d966:	4999      	ldr	r1, [pc, #612]	; (800dbcc <_ZN3BTD8HCI_taskEv+0x644>)
 800d968:	4618      	mov	r0, r3
 800d96a:	f004 fe27 	bl	80125bc <strncmp>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d147      	bne.n	800da04 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	3322      	adds	r3, #34	; 0x22
 800d998:	2216      	movs	r2, #22
 800d99a:	498d      	ldr	r1, [pc, #564]	; (800dbd0 <_ZN3BTD8HCI_taskEv+0x648>)
 800d99c:	4618      	mov	r0, r3
 800d99e:	f004 fe0d 	bl	80125bc <strncmp>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d104      	bne.n	800d9b2 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9b0:	e028      	b.n	800da04 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3322      	adds	r3, #34	; 0x22
 800d9b6:	2216      	movs	r2, #22
 800d9b8:	4986      	ldr	r1, [pc, #536]	; (800dbd4 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f004 fdfe 	bl	80125bc <strncmp>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d110      	bne.n	800d9e8 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9e6:	e00d      	b.n	800da04 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3322      	adds	r3, #34	; 0x22
 800d9ec:	2213      	movs	r2, #19
 800d9ee:	497a      	ldr	r1, [pc, #488]	; (800dbd8 <_ZN3BTD8HCI_taskEv+0x650>)
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f004 fde3 	bl	80125bc <strncmp>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d103      	bne.n	800da04 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d117      	bne.n	800da3e <_ZN3BTD8HCI_taskEv+0x4b6>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800da14:	2b25      	cmp	r3, #37	; 0x25
 800da16:	d112      	bne.n	800da3e <_ZN3BTD8HCI_taskEv+0x4b6>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800da1e:	2b08      	cmp	r3, #8
 800da20:	d10d      	bne.n	800da3e <_ZN3BTD8HCI_taskEv+0x4b6>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3322      	adds	r3, #34	; 0x22
 800da26:	2213      	movs	r2, #19
 800da28:	496c      	ldr	r1, [pc, #432]	; (800dbdc <_ZN3BTD8HCI_taskEv+0x654>)
 800da2a:	4618      	mov	r0, r3
 800da2c:	f004 fdc6 	bl	80125bc <strncmp>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d103      	bne.n	800da3e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da44:	2b00      	cmp	r3, #0
 800da46:	d104      	bne.n	800da52 <_ZN3BTD8HCI_taskEv+0x4ca>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d009      	beq.n	800da66 <_ZN3BTD8HCI_taskEv+0x4de>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d004      	beq.n	800da66 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2208      	movs	r2, #8
 800da60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800da64:	e0a7      	b.n	800dbb6 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa17 	bl	800de9a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	220d      	movs	r2, #13
 800da70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800da74:	e09f      	b.n	800dbb6 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 809a 	beq.w	800dbba <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d003      	beq.n	800da98 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	220f      	movs	r2, #15
 800dab6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800daba:	e07e      	b.n	800dbba <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800dac2:	3301      	adds	r3, #1
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800dad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dad6:	d972      	bls.n	800dbbe <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	220a      	movs	r2, #10
 800dae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800dae8:	e069      	b.n	800dbbe <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800daf0:	f003 0304 	and.w	r3, r3, #4
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d064      	beq.n	800dbc2 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3389      	adds	r3, #137	; 0x89
 800db04:	2240      	movs	r2, #64	; 0x40
 800db06:	2100      	movs	r1, #0
 800db08:	4618      	mov	r0, r3
 800db0a:	f004 fd0b 	bl	8012524 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	33c9      	adds	r3, #201	; 0xc9
 800db12:	2240      	movs	r2, #64	; 0x40
 800db14:	2100      	movs	r1, #0
 800db16:	4618      	mov	r0, r3
 800db18:	f004 fd04 	bl	8012524 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	220a      	movs	r2, #10
 800db74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db78:	e023      	b.n	800dbc2 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800db7a:	bf00      	nop
 800db7c:	e022      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db7e:	bf00      	nop
 800db80:	e020      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db82:	bf00      	nop
 800db84:	e01e      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db86:	bf00      	nop
 800db88:	e01c      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db8a:	bf00      	nop
 800db8c:	e01a      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db8e:	bf00      	nop
 800db90:	e018      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db92:	bf00      	nop
 800db94:	e016      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db96:	bf00      	nop
 800db98:	e014      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db9a:	bf00      	nop
 800db9c:	e012      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db9e:	bf00      	nop
 800dba0:	e010      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dba2:	bf00      	nop
 800dba4:	e00e      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dba6:	bf00      	nop
 800dba8:	e00c      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbaa:	bf00      	nop
 800dbac:	e00a      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbae:	bf00      	nop
 800dbb0:	e008      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbb2:	bf00      	nop
 800dbb4:	e006      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbb6:	bf00      	nop
 800dbb8:	e004      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbba:	bf00      	nop
 800dbbc:	e002      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbbe:	bf00      	nop
 800dbc0:	e000      	b.n	800dbc4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800dbc2:	bf00      	nop
        }
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	08012760 	.word	0x08012760
 800dbd0:	0801276c 	.word	0x0801276c
 800dbd4:	08012784 	.word	0x08012784
 800dbd8:	0801279c 	.word	0x0801279c
 800dbdc:	080127b0 	.word	0x080127b0

0800dbe0 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800dbe0:	b5b0      	push	{r4, r5, r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af02      	add	r7, sp, #8
 800dbe6:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	33c9      	adds	r3, #201	; 0xc9
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800dc06:	f107 050a 	add.w	r5, r7, #10
 800dc0a:	9201      	str	r2, [sp, #4]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462b      	mov	r3, r5
 800dc10:	4622      	mov	r2, r4
 800dc12:	f003 f92c 	bl	8010e6e <_ZN3USB10inTransferEhhPtPhh>
 800dc16:	4603      	mov	r3, r0
 800dc18:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800dc1a:	7b7b      	ldrb	r3, [r7, #13]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d125      	bne.n	800dc6c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dc20:	897b      	ldrh	r3, [r7, #10]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d022      	beq.n	800dc6c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dc26:	2300      	movs	r3, #0
 800dc28:	73fb      	strb	r3, [r7, #15]
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	d81d      	bhi.n	800dc6c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	3318      	adds	r3, #24
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d011      	beq.n	800dc64 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	3318      	adds	r3, #24
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	6858      	ldr	r0, [r3, #4]
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	3318      	adds	r3, #24
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	32c9      	adds	r2, #201	; 0xc9
 800dc60:	4611      	mov	r1, r2
 800dc62:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	3301      	adds	r3, #1
 800dc68:	73fb      	strb	r3, [r7, #15]
 800dc6a:	e7de      	b.n	800dc2a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73bb      	strb	r3, [r7, #14]
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d81c      	bhi.n	800dcb0 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	3318      	adds	r3, #24
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d010      	beq.n	800dca8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dc86:	7bbb      	ldrb	r3, [r7, #14]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	3318      	adds	r3, #24
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4413      	add	r3, r2
 800dc90:	6859      	ldr	r1, [r3, #4]
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	3318      	adds	r3, #24
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4413      	add	r3, r2
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3304      	adds	r3, #4
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4608      	mov	r0, r1
 800dca6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	73bb      	strb	r3, [r7, #14]
 800dcae:	e7df      	b.n	800dc70 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcb8 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b08c      	sub	sp, #48	; 0x30
 800dcbc:	af08      	add	r7, sp, #32
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dccc:	f023 0301 	bic.w	r3, r3, #1
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dce8:	2300      	movs	r3, #0
 800dcea:	9307      	str	r3, [sp, #28]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	9306      	str	r3, [sp, #24]
 800dcf0:	88fb      	ldrh	r3, [r7, #6]
 800dcf2:	9305      	str	r3, [sp, #20]
 800dcf4:	88fb      	ldrh	r3, [r7, #6]
 800dcf6:	9304      	str	r3, [sp, #16]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9303      	str	r3, [sp, #12]
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	2300      	movs	r3, #0
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	2300      	movs	r3, #0
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	2320      	movs	r3, #32
 800dd0a:	f002 ffd8 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b082      	sub	sp, #8
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	220c      	movs	r2, #12
 800dd32:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	3389      	adds	r3, #137	; 0x89
 800dd42:	2203      	movs	r2, #3
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7ff ffb6 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd62:	f023 0310 	bic.w	r3, r3, #16
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	221a      	movs	r2, #26
 800dd72:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	220c      	movs	r2, #12
 800dd7a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2203      	movs	r2, #3
 800dd92:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dd96:	e003      	b.n	800dda0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3389      	adds	r3, #137	; 0x89
 800dda4:	2204      	movs	r2, #4
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7ff ff85 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ddc4:	f023 0320 	bic.w	r3, r3, #32
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2209      	movs	r2, #9
 800ddd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2210      	movs	r2, #16
 800dddc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3389      	adds	r3, #137	; 0x89
 800ddec:	2203      	movs	r2, #3
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff ff61 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800ddf6:	bf00      	nop
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b082      	sub	sp, #8
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2210      	movs	r2, #16
 800de24:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3389      	adds	r3, #137	; 0x89
 800de34:	2203      	movs	r2, #3
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff ff3d 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800de3e:	bf00      	nop
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800de46:	b580      	push	{r7, lr}
 800de48:	b082      	sub	sp, #8
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	460b      	mov	r3, r1
 800de50:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2204      	movs	r2, #4
 800de68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2210      	movs	r2, #16
 800de70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	3389      	adds	r3, #137	; 0x89
 800de88:	2204      	movs	r2, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ff13 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b082      	sub	sp, #8
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dea8:	f023 0302 	bic.w	r3, r3, #2
 800deac:	b29a      	uxth	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2209      	movs	r2, #9
 800deb8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2204      	movs	r2, #4
 800dec0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2207      	movs	r2, #7
 800dec8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	7f1a      	ldrb	r2, [r3, #28]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7f5a      	ldrb	r2, [r3, #29]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	7f9a      	ldrb	r2, [r3, #30]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7fda      	ldrb	r2, [r3, #31]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3389      	adds	r3, #137	; 0x89
 800df18:	220a      	movs	r2, #10
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7ff fecb 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800df22:	bf00      	nop
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800df38:	f023 0308 	bic.w	r3, r3, #8
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2219      	movs	r2, #25
 800df48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2204      	movs	r2, #4
 800df50:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	220a      	movs	r2, #10
 800df58:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	7f1a      	ldrb	r2, [r3, #28]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	7f5a      	ldrb	r2, [r3, #29]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7f9a      	ldrb	r2, [r3, #30]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7fda      	ldrb	r2, [r3, #31]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3389      	adds	r3, #137	; 0x89
 800dfc0:	220d      	movs	r2, #13
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff fe77 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800dfca:	bf00      	nop
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800dfd2:	b590      	push	{r4, r7, lr}
 800dfd4:	b085      	sub	sp, #20
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2213      	movs	r2, #19
 800dfe0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	220c      	movs	r2, #12
 800dfe8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800dfec:	6838      	ldr	r0, [r7, #0]
 800dfee:	f7f2 f90f 	bl	8000210 <strlen>
 800dff2:	4603      	mov	r3, r0
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	3301      	adds	r3, #1
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]
 800e004:	7bfc      	ldrb	r4, [r7, #15]
 800e006:	6838      	ldr	r0, [r7, #0]
 800e008:	f7f2 f902 	bl	8000210 <strlen>
 800e00c:	4603      	mov	r3, r0
 800e00e:	429c      	cmp	r4, r3
 800e010:	d20e      	bcs.n	800e030 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800e012:	7bfb      	ldrb	r3, [r7, #15]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	441a      	add	r2, r3
 800e018:	7bfb      	ldrb	r3, [r7, #15]
 800e01a:	3303      	adds	r3, #3
 800e01c:	7811      	ldrb	r1, [r2, #0]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	4413      	add	r3, r2
 800e022:	460a      	mov	r2, r1
 800e024:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800e028:	7bfb      	ldrb	r3, [r7, #15]
 800e02a:	3301      	adds	r3, #1
 800e02c:	73fb      	strb	r3, [r7, #15]
 800e02e:	e7e9      	b.n	800e004 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	3303      	adds	r3, #3
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	4413      	add	r3, r2
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800e044:	6838      	ldr	r0, [r7, #0]
 800e046:	f7f2 f8e3 	bl	8000210 <strlen>
 800e04a:	4603      	mov	r3, r0
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	3304      	adds	r3, #4
 800e050:	b29b      	uxth	r3, r3
 800e052:	461a      	mov	r2, r3
 800e054:	4621      	mov	r1, r4
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff fe2e 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e05c:	bf00      	nop
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	bd90      	pop	{r4, r7, pc}

0800e064 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	220c      	movs	r2, #12
 800e078:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2208      	movs	r2, #8
 800e080:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	22ff      	movs	r2, #255	; 0xff
 800e088:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	22ff      	movs	r2, #255	; 0xff
 800e090:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	22ff      	movs	r2, #255	; 0xff
 800e098:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	22ff      	movs	r2, #255	; 0xff
 800e0a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	22ff      	movs	r2, #255	; 0xff
 800e0a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	221f      	movs	r2, #31
 800e0b0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	22ff      	movs	r2, #255	; 0xff
 800e0b8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3389      	adds	r3, #137	; 0x89
 800e0c8:	220b      	movs	r2, #11
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7ff fdf3 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b082      	sub	sp, #8
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2256      	movs	r2, #86	; 0x56
 800e0ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	220c      	movs	r2, #12
 800e0f2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e104:	2201      	movs	r2, #1
 800e106:	e000      	b.n	800e10a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e108:	2200      	movs	r2, #0
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3389      	adds	r3, #137	; 0x89
 800e114:	2204      	movs	r2, #4
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff fdcd 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e138:	b29a      	uxth	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2204      	movs	r2, #4
 800e14c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2205      	movs	r2, #5
 800e154:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2233      	movs	r2, #51	; 0x33
 800e15c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	228b      	movs	r2, #139	; 0x8b
 800e164:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	229e      	movs	r2, #158	; 0x9e
 800e16c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2230      	movs	r2, #48	; 0x30
 800e174:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	220a      	movs	r2, #10
 800e17c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3389      	adds	r3, #137	; 0x89
 800e184:	2208      	movs	r2, #8
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7ff fd95 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e196:	b580      	push	{r7, lr}
 800e198:	b082      	sub	sp, #8
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2204      	movs	r2, #4
 800e1aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3389      	adds	r3, #137	; 0x89
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fd7a 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e1c4:	bf00      	nop
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	331c      	adds	r3, #28
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f804 	bl	800e1e8 <_ZN3BTD11hci_connectEPh>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e1f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2205      	movs	r2, #5
 800e208:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2204      	movs	r2, #4
 800e210:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	220d      	movs	r2, #13
 800e218:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	781a      	ldrb	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	785a      	ldrb	r2, [r3, #1]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	789a      	ldrb	r2, [r3, #2]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	78da      	ldrb	r2, [r3, #3]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	791a      	ldrb	r2, [r3, #4]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	795a      	ldrb	r2, [r3, #5]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2218      	movs	r2, #24
 800e25c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	22cc      	movs	r2, #204	; 0xcc
 800e264:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3389      	adds	r3, #137	; 0x89
 800e294:	2210      	movs	r2, #16
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff fd0d 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e29e:	bf00      	nop
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e2a6:	b590      	push	{r4, r7, lr}
 800e2a8:	b085      	sub	sp, #20
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	220d      	movs	r2, #13
 800e2b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2204      	movs	r2, #4
 800e2ba:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2217      	movs	r2, #23
 800e2c2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7f1a      	ldrb	r2, [r3, #28]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7f5a      	ldrb	r2, [r3, #29]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	7f9a      	ldrb	r2, [r3, #30]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	7fda      	ldrb	r2, [r3, #31]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d03f      	beq.n	800e390 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2206      	movs	r2, #6
 800e314:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d013      	beq.n	800e34a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e322:	2300      	movs	r3, #0
 800e324:	73fb      	strb	r3, [r7, #15]
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	2b05      	cmp	r3, #5
 800e32a:	d822      	bhi.n	800e372 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e32c:	7bfa      	ldrb	r2, [r7, #15]
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	330a      	adds	r3, #10
 800e332:	6879      	ldr	r1, [r7, #4]
 800e334:	440a      	add	r2, r1
 800e336:	7d11      	ldrb	r1, [r2, #20]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	4413      	add	r3, r2
 800e33c:	460a      	mov	r2, r1
 800e33e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e342:	7bfb      	ldrb	r3, [r7, #15]
 800e344:	3301      	adds	r3, #1
 800e346:	73fb      	strb	r3, [r7, #15]
 800e348:	e7ed      	b.n	800e326 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e34a:	2300      	movs	r3, #0
 800e34c:	73bb      	strb	r3, [r7, #14]
 800e34e:	7bbb      	ldrb	r3, [r7, #14]
 800e350:	2b05      	cmp	r3, #5
 800e352:	d80e      	bhi.n	800e372 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e354:	7bba      	ldrb	r2, [r7, #14]
 800e356:	7bbb      	ldrb	r3, [r7, #14]
 800e358:	330a      	adds	r3, #10
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	440a      	add	r2, r1
 800e35e:	7f11      	ldrb	r1, [r2, #28]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	4413      	add	r3, r2
 800e364:	460a      	mov	r2, r1
 800e366:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
 800e36c:	3301      	adds	r3, #1
 800e36e:	73bb      	strb	r3, [r7, #14]
 800e370:	e7ed      	b.n	800e34e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e372:	2310      	movs	r3, #16
 800e374:	737b      	strb	r3, [r7, #13]
 800e376:	7b7b      	ldrb	r3, [r7, #13]
 800e378:	2b19      	cmp	r3, #25
 800e37a:	d83c      	bhi.n	800e3f6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e37c:	7b7b      	ldrb	r3, [r7, #13]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	4413      	add	r3, r2
 800e382:	2200      	movs	r2, #0
 800e384:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e388:	7b7b      	ldrb	r3, [r7, #13]
 800e38a:	3301      	adds	r3, #1
 800e38c:	737b      	strb	r3, [r7, #13]
 800e38e:	e7f2      	b.n	800e376 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	4618      	mov	r0, r3
 800e396:	f7f1 ff3b 	bl	8000210 <strlen>
 800e39a:	4603      	mov	r3, r0
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	733b      	strb	r3, [r7, #12]
 800e3a8:	7b3c      	ldrb	r4, [r7, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f1 ff2e 	bl	8000210 <strlen>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	d20f      	bcs.n	800e3da <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	691a      	ldr	r2, [r3, #16]
 800e3be:	7b3b      	ldrb	r3, [r7, #12]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	7b3b      	ldrb	r3, [r7, #12]
 800e3c4:	330a      	adds	r3, #10
 800e3c6:	7811      	ldrb	r1, [r2, #0]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	460a      	mov	r2, r1
 800e3ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e3d2:	7b3b      	ldrb	r3, [r7, #12]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	733b      	strb	r3, [r7, #12]
 800e3d8:	e7e6      	b.n	800e3a8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e3da:	7b3b      	ldrb	r3, [r7, #12]
 800e3dc:	2b0f      	cmp	r3, #15
 800e3de:	d80a      	bhi.n	800e3f6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e3e0:	7b3b      	ldrb	r3, [r7, #12]
 800e3e2:	330a      	adds	r3, #10
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e3ee:	7b3b      	ldrb	r3, [r7, #12]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	733b      	strb	r3, [r7, #12]
 800e3f4:	e7f1      	b.n	800e3da <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	3389      	adds	r3, #137	; 0x89
 800e3fa:	221a      	movs	r2, #26
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff fc5a 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e404:	bf00      	nop
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd90      	pop	{r4, r7, pc}

0800e40c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	220e      	movs	r2, #14
 800e418:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2204      	movs	r2, #4
 800e420:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2206      	movs	r2, #6
 800e428:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	7f1a      	ldrb	r2, [r3, #28]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	7f5a      	ldrb	r2, [r3, #29]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7f9a      	ldrb	r2, [r3, #30]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	7fda      	ldrb	r2, [r3, #31]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	3389      	adds	r3, #137	; 0x89
 800e470:	2209      	movs	r2, #9
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff fc1f 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e482:	b580      	push	{r7, lr}
 800e484:	b082      	sub	sp, #8
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	220c      	movs	r2, #12
 800e48e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2204      	movs	r2, #4
 800e496:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2206      	movs	r2, #6
 800e49e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7f1a      	ldrb	r2, [r3, #28]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	7f5a      	ldrb	r2, [r3, #29]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	7f9a      	ldrb	r2, [r3, #30]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7fda      	ldrb	r2, [r3, #31]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	3389      	adds	r3, #137	; 0x89
 800e4e6:	2209      	movs	r2, #9
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7ff fbe4 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	222b      	movs	r2, #43	; 0x2b
 800e504:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2204      	movs	r2, #4
 800e50c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2209      	movs	r2, #9
 800e514:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	7f1a      	ldrb	r2, [r3, #28]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7f5a      	ldrb	r2, [r3, #29]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	7f9a      	ldrb	r2, [r3, #30]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7fda      	ldrb	r2, [r3, #31]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2203      	movs	r2, #3
 800e55c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3389      	adds	r3, #137	; 0x89
 800e574:	220c      	movs	r2, #12
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff fb9d 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	222c      	movs	r2, #44	; 0x2c
 800e592:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2204      	movs	r2, #4
 800e59a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2206      	movs	r2, #6
 800e5a2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7f1a      	ldrb	r2, [r3, #28]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	7f5a      	ldrb	r2, [r3, #29]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	7f9a      	ldrb	r2, [r3, #30]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	7fda      	ldrb	r2, [r3, #31]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	3389      	adds	r3, #137	; 0x89
 800e5ea:	2209      	movs	r2, #9
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fb62 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2211      	movs	r2, #17
 800e608:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2204      	movs	r2, #4
 800e610:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2202      	movs	r2, #2
 800e618:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8b5b      	ldrh	r3, [r3, #26]
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	8b5b      	ldrh	r3, [r3, #26]
 800e62c:	121b      	asrs	r3, r3, #8
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3389      	adds	r3, #137	; 0x89
 800e640:	2205      	movs	r2, #5
 800e642:	4619      	mov	r1, r3
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff fb37 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	460b      	mov	r3, r1
 800e65c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e664:	f023 0304 	bic.w	r3, r3, #4
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2206      	movs	r2, #6
 800e674:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2204      	movs	r2, #4
 800e67c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2203      	movs	r2, #3
 800e684:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e688:	887b      	ldrh	r3, [r7, #2]
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e692:	887b      	ldrh	r3, [r7, #2]
 800e694:	121b      	asrs	r3, r3, #8
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 030f 	and.w	r3, r3, #15
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2213      	movs	r2, #19
 800e6a8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	3389      	adds	r3, #137	; 0x89
 800e6b0:	2206      	movs	r2, #6
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff faff 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2224      	movs	r2, #36	; 0x24
 800e6ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	220c      	movs	r2, #12
 800e6d6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2203      	movs	r2, #3
 800e6de:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3389      	adds	r3, #137	; 0x89
 800e6fe:	2206      	movs	r2, #6
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff fad8 	bl	800dcb8 <_ZN3BTD11HCI_CommandEPht>
}
 800e708:	bf00      	nop
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e710:	b5b0      	push	{r4, r5, r7, lr}
 800e712:	b08a      	sub	sp, #40	; 0x28
 800e714:	af02      	add	r7, sp, #8
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	461a      	mov	r2, r3
 800e71c:	460b      	mov	r3, r1
 800e71e:	817b      	strh	r3, [r7, #10]
 800e720:	4613      	mov	r3, r2
 800e722:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e724:	466b      	mov	r3, sp
 800e726:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e728:	7a7b      	ldrb	r3, [r7, #9]
 800e72a:	1ddc      	adds	r4, r3, #7
 800e72c:	61bc      	str	r4, [r7, #24]
 800e72e:	4623      	mov	r3, r4
 800e730:	3301      	adds	r3, #1
 800e732:	4618      	mov	r0, r3
 800e734:	f04f 0100 	mov.w	r1, #0
 800e738:	f04f 0200 	mov.w	r2, #0
 800e73c:	f04f 0300 	mov.w	r3, #0
 800e740:	00cb      	lsls	r3, r1, #3
 800e742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e746:	00c2      	lsls	r2, r0, #3
 800e748:	4623      	mov	r3, r4
 800e74a:	3301      	adds	r3, #1
 800e74c:	4618      	mov	r0, r3
 800e74e:	f04f 0100 	mov.w	r1, #0
 800e752:	f04f 0200 	mov.w	r2, #0
 800e756:	f04f 0300 	mov.w	r3, #0
 800e75a:	00cb      	lsls	r3, r1, #3
 800e75c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e760:	00c2      	lsls	r2, r0, #3
 800e762:	4623      	mov	r3, r4
 800e764:	3301      	adds	r3, #1
 800e766:	3307      	adds	r3, #7
 800e768:	08db      	lsrs	r3, r3, #3
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	ebad 0d03 	sub.w	sp, sp, r3
 800e770:	ab02      	add	r3, sp, #8
 800e772:	3300      	adds	r3, #0
 800e774:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e776:	897b      	ldrh	r3, [r7, #10]
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e77e:	897b      	ldrh	r3, [r7, #10]
 800e780:	121b      	asrs	r3, r3, #8
 800e782:	b25b      	sxtb	r3, r3
 800e784:	f003 030f 	and.w	r3, r3, #15
 800e788:	b25b      	sxtb	r3, r3
 800e78a:	f043 0320 	orr.w	r3, r3, #32
 800e78e:	b25b      	sxtb	r3, r3
 800e790:	b2da      	uxtb	r2, r3
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e796:	7a7b      	ldrb	r3, [r7, #9]
 800e798:	3304      	adds	r3, #4
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e7a0:	7a7b      	ldrb	r3, [r7, #9]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	121b      	asrs	r3, r3, #8
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	7a7a      	ldrb	r2, [r7, #9]
 800e7b0:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e7b2:	7a7b      	ldrb	r3, [r7, #9]
 800e7b4:	121b      	asrs	r3, r3, #8
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e7c2:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e7ca:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	83fb      	strh	r3, [r7, #30]
 800e7d0:	7a7b      	ldrb	r3, [r7, #9]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	8bfa      	ldrh	r2, [r7, #30]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d20b      	bcs.n	800e7f2 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e7da:	8bfb      	ldrh	r3, [r7, #30]
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	441a      	add	r2, r3
 800e7e0:	8bfb      	ldrh	r3, [r7, #30]
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	7811      	ldrb	r1, [r2, #0]
 800e7e6:	697a      	ldr	r2, [r7, #20]
 800e7e8:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e7ea:	8bfb      	ldrh	r3, [r7, #30]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	83fb      	strh	r3, [r7, #30]
 800e7f0:	e7ee      	b.n	800e7d0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e802:	7a7b      	ldrb	r3, [r7, #9]
 800e804:	b29b      	uxth	r3, r3
 800e806:	3308      	adds	r3, #8
 800e808:	b29c      	uxth	r4, r3
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	4623      	mov	r3, r4
 800e810:	f002 fc34 	bl	801107c <_ZN3USB11outTransferEhhtPh>
 800e814:	4603      	mov	r3, r0
 800e816:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e818:	7cfb      	ldrb	r3, [r7, #19]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e81e:	2064      	movs	r0, #100	; 0x64
 800e820:	f7f3 fb2e 	bl	8001e80 <HAL_Delay>
 800e824:	46ad      	mov	sp, r5
}
 800e826:	bf00      	nop
 800e828:	3720      	adds	r7, #32
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bdb0      	pop	{r4, r5, r7, pc}

0800e82e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e82e:	b580      	push	{r7, lr}
 800e830:	b086      	sub	sp, #24
 800e832:	af02      	add	r7, sp, #8
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	607b      	str	r3, [r7, #4]
 800e838:	460b      	mov	r3, r1
 800e83a:	817b      	strh	r3, [r7, #10]
 800e83c:	4613      	mov	r3, r2
 800e83e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2202      	movs	r2, #2
 800e844:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	7a7a      	ldrb	r2, [r7, #9]
 800e84c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2204      	movs	r2, #4
 800e854:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e860:	8b3b      	ldrh	r3, [r7, #24]
 800e862:	b2da      	uxtb	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e86a:	8b3b      	ldrh	r3, [r7, #24]
 800e86c:	121b      	asrs	r3, r3, #8
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	781a      	ldrb	r2, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	785a      	ldrb	r2, [r3, #1]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e890:	8979      	ldrh	r1, [r7, #10]
 800e892:	2300      	movs	r3, #0
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	2301      	movs	r3, #1
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2308      	movs	r3, #8
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f7ff ff37 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e8a2:	bf00      	nop
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b086      	sub	sp, #24
 800e8ae:	af02      	add	r7, sp, #8
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	607b      	str	r3, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	817b      	strh	r3, [r7, #10]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2203      	movs	r2, #3
 800e8c0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	7a7a      	ldrb	r2, [r7, #9]
 800e8c8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2208      	movs	r2, #8
 800e8d0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	781a      	ldrb	r2, [r3, #0]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	785a      	ldrb	r2, [r3, #1]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	785a      	ldrb	r2, [r3, #1]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	7f3a      	ldrb	r2, [r7, #28]
 800e908:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e92a:	8979      	ldrh	r1, [r7, #10]
 800e92c:	2300      	movs	r3, #0
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	2301      	movs	r3, #1
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	230c      	movs	r3, #12
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7ff feea 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e93c:	bf00      	nop
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af02      	add	r7, sp, #8
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	607b      	str	r3, [r7, #4]
 800e94e:	460b      	mov	r3, r1
 800e950:	817b      	strh	r3, [r7, #10]
 800e952:	4613      	mov	r3, r2
 800e954:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2204      	movs	r2, #4
 800e95a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	7a7a      	ldrb	r2, [r7, #9]
 800e962:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2208      	movs	r2, #8
 800e96a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	781a      	ldrb	r2, [r3, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	785a      	ldrb	r2, [r3, #1]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	22ff      	movs	r2, #255	; 0xff
 800e9ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	22ff      	movs	r2, #255	; 0xff
 800e9b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e9c0:	8979      	ldrh	r1, [r7, #10]
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	230c      	movs	r3, #12
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff fe9f 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b086      	sub	sp, #24
 800e9de:	af02      	add	r7, sp, #8
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	607b      	str	r3, [r7, #4]
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	817b      	strh	r3, [r7, #10]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2205      	movs	r2, #5
 800e9f0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	7a7a      	ldrb	r2, [r7, #9]
 800e9f8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	220a      	movs	r2, #10
 800ea00:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	781a      	ldrb	r2, [r3, #0]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	785a      	ldrb	r2, [r3, #1]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	22a0      	movs	r2, #160	; 0xa0
 800ea54:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea66:	8979      	ldrh	r1, [r7, #10]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9301      	str	r3, [sp, #4]
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	230e      	movs	r3, #14
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff fe4c 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea78:	bf00      	nop
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	607b      	str	r3, [r7, #4]
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	817b      	strh	r3, [r7, #10]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2206      	movs	r2, #6
 800ea96:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	7a7a      	ldrb	r2, [r7, #9]
 800ea9e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	781a      	ldrb	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	785a      	ldrb	r2, [r3, #1]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	781a      	ldrb	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	785a      	ldrb	r2, [r3, #1]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eae0:	8979      	ldrh	r1, [r7, #10]
 800eae2:	2300      	movs	r3, #0
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	2301      	movs	r3, #1
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	2308      	movs	r3, #8
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f7ff fe0f 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eaf2:	bf00      	nop
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b086      	sub	sp, #24
 800eafe:	af02      	add	r7, sp, #8
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	607b      	str	r3, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	817b      	strh	r3, [r7, #10]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2207      	movs	r2, #7
 800eb10:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	7a7a      	ldrb	r2, [r7, #9]
 800eb18:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2204      	movs	r2, #4
 800eb20:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	781a      	ldrb	r2, [r3, #0]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	785a      	ldrb	r2, [r3, #1]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	781a      	ldrb	r2, [r3, #0]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	785a      	ldrb	r2, [r3, #1]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb5a:	8979      	ldrh	r1, [r7, #10]
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	2301      	movs	r3, #1
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	2308      	movs	r3, #8
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7ff fdd2 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af02      	add	r7, sp, #8
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	4608      	mov	r0, r1
 800eb7e:	4611      	mov	r1, r2
 800eb80:	461a      	mov	r2, r3
 800eb82:	4603      	mov	r3, r0
 800eb84:	807b      	strh	r3, [r7, #2]
 800eb86:	460b      	mov	r3, r1
 800eb88:	707b      	strb	r3, [r7, #1]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	220b      	movs	r2, #11
 800eb92:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	787a      	ldrb	r2, [r7, #1]
 800eb9a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2208      	movs	r2, #8
 800eba2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	783a      	ldrb	r2, [r7, #0]
 800ebb2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7c3a      	ldrb	r2, [r7, #16]
 800ebba:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ebf4:	8879      	ldrh	r1, [r7, #2]
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	230c      	movs	r3, #12
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7ff fd85 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ec06:	bf00      	nop
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08e      	sub	sp, #56	; 0x38
 800ec12:	af08      	add	r7, sp, #32
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ec20:	2300      	movs	r3, #0
 800ec22:	75fb      	strb	r3, [r7, #23]
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	2b05      	cmp	r3, #5
 800ec28:	d811      	bhi.n	800ec4e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	f1c3 0305 	rsb	r3, r3, #5
 800ec30:	461a      	mov	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	441a      	add	r2, r3
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	3302      	adds	r3, #2
 800ec3a:	7812      	ldrb	r2, [r2, #0]
 800ec3c:	f107 0118 	add.w	r1, r7, #24
 800ec40:	440b      	add	r3, r1
 800ec42:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	75fb      	strb	r3, [r7, #23]
 800ec4c:	e7ea      	b.n	800ec24 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9307      	str	r3, [sp, #28]
 800ec62:	f107 030c 	add.w	r3, r7, #12
 800ec66:	9306      	str	r3, [sp, #24]
 800ec68:	2308      	movs	r3, #8
 800ec6a:	9305      	str	r3, [sp, #20]
 800ec6c:	2308      	movs	r3, #8
 800ec6e:	9304      	str	r3, [sp, #16]
 800ec70:	2300      	movs	r3, #0
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	2303      	movs	r3, #3
 800ec76:	9302      	str	r3, [sp, #8]
 800ec78:	23f5      	movs	r3, #245	; 0xf5
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	2309      	movs	r3, #9
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	2321      	movs	r3, #33	; 0x21
 800ec82:	f002 f81c 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec86:	bf00      	nop
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b08e      	sub	sp, #56	; 0x38
 800ec92:	af08      	add	r7, sp, #32
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ec98:	2305      	movs	r3, #5
 800ec9a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800eca0:	2301      	movs	r3, #1
 800eca2:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800eca4:	2302      	movs	r3, #2
 800eca6:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800eca8:	2312      	movs	r3, #18
 800ecaa:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ecac:	2300      	movs	r3, #0
 800ecae:	75fb      	strb	r3, [r7, #23]
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	2b05      	cmp	r3, #5
 800ecb4:	d80e      	bhi.n	800ecd4 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	683a      	ldr	r2, [r7, #0]
 800ecba:	441a      	add	r2, r3
 800ecbc:	7dfb      	ldrb	r3, [r7, #23]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	7812      	ldrb	r2, [r2, #0]
 800ecc2:	f107 0118 	add.w	r1, r7, #24
 800ecc6:	440b      	add	r3, r1
 800ecc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	75fb      	strb	r3, [r7, #23]
 800ecd2:	e7ed      	b.n	800ecb0 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ece4:	2300      	movs	r3, #0
 800ece6:	9307      	str	r3, [sp, #28]
 800ece8:	f107 030c 	add.w	r3, r7, #12
 800ecec:	9306      	str	r3, [sp, #24]
 800ecee:	230b      	movs	r3, #11
 800ecf0:	9305      	str	r3, [sp, #20]
 800ecf2:	230b      	movs	r3, #11
 800ecf4:	9304      	str	r3, [sp, #16]
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	9303      	str	r3, [sp, #12]
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	9302      	str	r3, [sp, #8]
 800ecfe:	2305      	movs	r3, #5
 800ed00:	9301      	str	r3, [sp, #4]
 800ed02:	2309      	movs	r3, #9
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	2321      	movs	r3, #33	; 0x21
 800ed08:	f001 ffd9 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ed0c:	bf00      	nop
 800ed0e:	3718      	adds	r7, #24
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	4a04      	ldr	r2, [pc, #16]	; (800ed30 <_ZN13USBReadParserC1Ev+0x1c>)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4618      	mov	r0, r3
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	08012928 	.word	0x08012928

0800ed34 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff ffe7 	bl	800ed14 <_ZN13USBReadParserC1Ev>
 800ed46:	4a21      	ldr	r2, [pc, #132]	; (800edcc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	605a      	str	r2, [r3, #4]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3308      	adds	r3, #8
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fd fb65 	bl	800c426 <_ZN16MultiValueBufferC1Ev>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3310      	adds	r3, #16
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fd fb77 	bl	800c454 <_ZN20MultiByteValueParserC1Ev>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3318      	adds	r3, #24
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fd fb9e 	bl	800c4ac <_ZN11ByteSkipperC1Ev>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f103 0220 	add.w	r2, r3, #32
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f103 0210 	add.w	r2, r3, #16
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3308      	adds	r3, #8
 800eda6:	4619      	mov	r1, r3
 800eda8:	4610      	mov	r0, r2
 800edaa:	f7fd fb67 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f103 0218 	add.w	r2, r3, #24
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3308      	adds	r3, #8
 800edb8:	4619      	mov	r1, r3
 800edba:	4610      	mov	r0, r2
 800edbc:	f7fd fb8a 	bl	800c4d4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	080128d0 	.word	0x080128d0

0800edd0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff ff99 	bl	800ed14 <_ZN13USBReadParserC1Ev>
 800ede2:	4a21      	ldr	r2, [pc, #132]	; (800ee68 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	605a      	str	r2, [r3, #4]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	3308      	adds	r3, #8
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fd fb17 	bl	800c426 <_ZN16MultiValueBufferC1Ev>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3310      	adds	r3, #16
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fd fb29 	bl	800c454 <_ZN20MultiByteValueParserC1Ev>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3318      	adds	r3, #24
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fd fb50 	bl	800c4ac <_ZN11ByteSkipperC1Ev>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f103 0220 	add.w	r2, r3, #32
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f103 0210 	add.w	r2, r3, #16
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3308      	adds	r3, #8
 800ee42:	4619      	mov	r1, r3
 800ee44:	4610      	mov	r0, r2
 800ee46:	f7fd fb19 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f103 0218 	add.w	r2, r3, #24
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	3308      	adds	r3, #8
 800ee54:	4619      	mov	r1, r3
 800ee56:	4610      	mov	r0, r2
 800ee58:	f7fd fb3c 	bl	800c4d4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	080128c4 	.word	0x080128c4

0800ee6c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	607a      	str	r2, [r7, #4]
 800ee76:	603b      	str	r3, [r7, #0]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee7c:	897b      	ldrh	r3, [r7, #10]
 800ee7e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ee84:	8afb      	ldrh	r3, [r7, #22]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00f      	beq.n	800eeaa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee8a:	f107 0216 	add.w	r2, r7, #22
 800ee8e:	f107 0310 	add.w	r3, r7, #16
 800ee92:	4619      	mov	r1, r3
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 f82d 	bl	800eef4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f083 0301 	eor.w	r3, r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d100      	bne.n	800eea8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800eea6:	e7ed      	b.n	800ee84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800eea8:	bf00      	nop
}
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	460b      	mov	r3, r1
 800eebe:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800eec0:	897b      	ldrh	r3, [r7, #10]
 800eec2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800eec8:	8afb      	ldrh	r3, [r7, #22]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00f      	beq.n	800eeee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800eece:	f107 0216 	add.w	r2, r7, #22
 800eed2:	f107 0310 	add.w	r3, r7, #16
 800eed6:	4619      	mov	r1, r3
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f000 f981 	bl	800f1e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800eede:	4603      	mov	r3, r0
 800eee0:	f083 0301 	eor.w	r3, r3, #1
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d100      	bne.n	800eeec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800eeea:	e7ed      	b.n	800eec8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800eeec:	bf00      	nop
}
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800eef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef6:	b089      	sub	sp, #36	; 0x24
 800eef8:	af02      	add	r7, sp, #8
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3320      	adds	r3, #32
 800ef04:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	3320      	adds	r3, #32
 800ef0a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef12:	2b04      	cmp	r3, #4
 800ef14:	f200 815e 	bhi.w	800f1d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800ef18:	a201      	add	r2, pc, #4	; (adr r2, 800ef20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800ef1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1e:	bf00      	nop
 800ef20:	0800ef35 	.word	0x0800ef35
 800ef24:	0800ef55 	.word	0x0800ef55
 800ef28:	0800ef97 	.word	0x0800ef97
 800ef2c:	0800efab 	.word	0x0800efab
 800ef30:	0800f06f 	.word	0x0800f06f
                case 0:
                        theBuffer.valueSize = 2;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2202      	movs	r2, #2
 800ef38:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f103 0210 	add.w	r2, r3, #16
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3308      	adds	r3, #8
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f7fd fa98 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3310      	adds	r3, #16
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f003 fa49 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ef62:	4603      	mov	r3, r0
 800ef64:	f083 0301 	eor.w	r3, r3, #1
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e131      	b.n	800f1d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef86:	785a      	ldrb	r2, [r3, #1]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2202      	movs	r2, #2
 800ef92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3320      	adds	r3, #32
 800ef9a:	1c9a      	adds	r2, r3, #2
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2203      	movs	r2, #3
 800efa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800efb0:	3b02      	subs	r3, #2
 800efb2:	2b1f      	cmp	r3, #31
 800efb4:	d847      	bhi.n	800f046 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800efb6:	a201      	add	r2, pc, #4	; (adr r2, 800efbc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800f047 	.word	0x0800f047
 800efc0:	0800f047 	.word	0x0800f047
 800efc4:	0800f03d 	.word	0x0800f03d
 800efc8:	0800f047 	.word	0x0800f047
 800efcc:	0800f047 	.word	0x0800f047
 800efd0:	0800f047 	.word	0x0800f047
 800efd4:	0800f047 	.word	0x0800f047
 800efd8:	0800f047 	.word	0x0800f047
 800efdc:	0800f047 	.word	0x0800f047
 800efe0:	0800f047 	.word	0x0800f047
 800efe4:	0800f047 	.word	0x0800f047
 800efe8:	0800f047 	.word	0x0800f047
 800efec:	0800f047 	.word	0x0800f047
 800eff0:	0800f047 	.word	0x0800f047
 800eff4:	0800f047 	.word	0x0800f047
 800eff8:	0800f047 	.word	0x0800f047
 800effc:	0800f047 	.word	0x0800f047
 800f000:	0800f047 	.word	0x0800f047
 800f004:	0800f047 	.word	0x0800f047
 800f008:	0800f047 	.word	0x0800f047
 800f00c:	0800f047 	.word	0x0800f047
 800f010:	0800f047 	.word	0x0800f047
 800f014:	0800f047 	.word	0x0800f047
 800f018:	0800f047 	.word	0x0800f047
 800f01c:	0800f047 	.word	0x0800f047
 800f020:	0800f047 	.word	0x0800f047
 800f024:	0800f047 	.word	0x0800f047
 800f028:	0800f047 	.word	0x0800f047
 800f02c:	0800f047 	.word	0x0800f047
 800f030:	0800f047 	.word	0x0800f047
 800f034:	0800f047 	.word	0x0800f047
 800f038:	0800f047 	.word	0x0800f047
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f044:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f04c:	3b02      	subs	r3, #2
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f103 0210 	add.w	r2, r3, #16
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3308      	adds	r3, #8
 800f05e:	4619      	mov	r1, r3
 800f060:	4610      	mov	r0, r2
 800f062:	f7fd fa0b 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2204      	movs	r2, #4
 800f06a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f074:	2b05      	cmp	r3, #5
 800f076:	d055      	beq.n	800f124 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f078:	2b05      	cmp	r3, #5
 800f07a:	f300 8085 	bgt.w	800f188 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d002      	beq.n	800f088 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f082:	2b04      	cmp	r3, #4
 800f084:	d015      	beq.n	800f0b2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f086:	e07f      	b.n	800f188 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3310      	adds	r3, #16
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	4618      	mov	r0, r3
 800f092:	f003 f9af 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f096:	4603      	mov	r3, r0
 800f098:	f083 0301 	eor.w	r3, r3, #1
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	e097      	b.n	800f1d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	795a      	ldrb	r2, [r3, #5]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f0b0:	e086      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	68b9      	ldr	r1, [r7, #8]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f003 f99a 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	f083 0301 	eor.w	r3, r3, #1
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e082      	b.n	800f1d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	795b      	ldrb	r3, [r3, #5]
 800f0d4:	2be0      	cmp	r3, #224	; 0xe0
 800f0d6:	d16c      	bne.n	800f1b2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	799b      	ldrb	r3, [r3, #6]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d16a      	bne.n	800f1b6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d004      	beq.n	800f0f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	79db      	ldrb	r3, [r3, #7]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d104      	bne.n	800f0fc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f0f2:	e065      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	79db      	ldrb	r3, [r3, #7]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d15e      	bne.n	800f1ba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	789a      	ldrb	r2, [r3, #2]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	78da      	ldrb	r2, [r3, #3]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	79da      	ldrb	r2, [r3, #7]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f122:	e04d      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	3310      	adds	r3, #16
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f003 f961 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f132:	4603      	mov	r3, r0
 800f134:	f083 0301 	eor.w	r3, r3, #1
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f13e:	2300      	movs	r3, #0
 800f140:	e049      	b.n	800f1d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d038      	beq.n	800f1be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d034      	beq.n	800f1be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6858      	ldr	r0, [r3, #4]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681c      	ldr	r4, [r3, #0]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	3220      	adds	r2, #32
 800f17c:	9201      	str	r2, [sp, #4]
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	4633      	mov	r3, r6
 800f182:	462a      	mov	r2, r5
 800f184:	47a0      	blx	r4
                                        break;
 800f186:	e01a      	b.n	800f1be <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f103 0018 	add.w	r0, r3, #24
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f194:	b29b      	uxth	r3, r3
 800f196:	3b02      	subs	r3, #2
 800f198:	b29b      	uxth	r3, r3
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	68b9      	ldr	r1, [r7, #8]
 800f19e:	f7fd f9ac 	bl	800c4fa <_ZN11ByteSkipper4SkipEPPhPtt>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	f083 0301 	eor.w	r3, r3, #1
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d008      	beq.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e011      	b.n	800f1d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f1b2:	bf00      	nop
 800f1b4:	e004      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f1b6:	bf00      	nop
 800f1b8:	e002      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f1ba:	bf00      	nop
 800f1bc:	e000      	b.n	800f1c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f1be:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f103 0220 	add.w	r2, r3, #32
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f1d4:	2301      	movs	r3, #1
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	371c      	adds	r7, #28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1de:	bf00      	nop

0800f1e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1e2:	b089      	sub	sp, #36	; 0x24
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	3320      	adds	r3, #32
 800f1f0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3320      	adds	r3, #32
 800f1f6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	f200 815e 	bhi.w	800f4c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f204:	a201      	add	r2, pc, #4	; (adr r2, 800f20c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f20a:	bf00      	nop
 800f20c:	0800f221 	.word	0x0800f221
 800f210:	0800f241 	.word	0x0800f241
 800f214:	0800f283 	.word	0x0800f283
 800f218:	0800f297 	.word	0x0800f297
 800f21c:	0800f35b 	.word	0x0800f35b
                        theBuffer.valueSize = 2;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2202      	movs	r2, #2
 800f224:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f103 0210 	add.w	r2, r3, #16
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3308      	adds	r3, #8
 800f230:	4619      	mov	r1, r3
 800f232:	4610      	mov	r0, r2
 800f234:	f7fd f922 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	3310      	adds	r3, #16
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	68b9      	ldr	r1, [r7, #8]
 800f248:	4618      	mov	r0, r3
 800f24a:	f003 f8d3 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f24e:	4603      	mov	r3, r0
 800f250:	f083 0301 	eor.w	r3, r3, #1
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f25a:	2300      	movs	r3, #0
 800f25c:	e131      	b.n	800f4c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f264:	781a      	ldrb	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f272:	785a      	ldrb	r2, [r3, #1]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2202      	movs	r2, #2
 800f27e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	3320      	adds	r3, #32
 800f286:	1c9a      	adds	r2, r3, #2
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2203      	movs	r2, #3
 800f292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f29c:	3b02      	subs	r3, #2
 800f29e:	2b1f      	cmp	r3, #31
 800f2a0:	d847      	bhi.n	800f332 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f2a2:	a201      	add	r2, pc, #4	; (adr r2, 800f2a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a8:	0800f333 	.word	0x0800f333
 800f2ac:	0800f333 	.word	0x0800f333
 800f2b0:	0800f329 	.word	0x0800f329
 800f2b4:	0800f333 	.word	0x0800f333
 800f2b8:	0800f333 	.word	0x0800f333
 800f2bc:	0800f333 	.word	0x0800f333
 800f2c0:	0800f333 	.word	0x0800f333
 800f2c4:	0800f333 	.word	0x0800f333
 800f2c8:	0800f333 	.word	0x0800f333
 800f2cc:	0800f333 	.word	0x0800f333
 800f2d0:	0800f333 	.word	0x0800f333
 800f2d4:	0800f333 	.word	0x0800f333
 800f2d8:	0800f333 	.word	0x0800f333
 800f2dc:	0800f333 	.word	0x0800f333
 800f2e0:	0800f333 	.word	0x0800f333
 800f2e4:	0800f333 	.word	0x0800f333
 800f2e8:	0800f333 	.word	0x0800f333
 800f2ec:	0800f333 	.word	0x0800f333
 800f2f0:	0800f333 	.word	0x0800f333
 800f2f4:	0800f333 	.word	0x0800f333
 800f2f8:	0800f333 	.word	0x0800f333
 800f2fc:	0800f333 	.word	0x0800f333
 800f300:	0800f333 	.word	0x0800f333
 800f304:	0800f333 	.word	0x0800f333
 800f308:	0800f333 	.word	0x0800f333
 800f30c:	0800f333 	.word	0x0800f333
 800f310:	0800f333 	.word	0x0800f333
 800f314:	0800f333 	.word	0x0800f333
 800f318:	0800f333 	.word	0x0800f333
 800f31c:	0800f333 	.word	0x0800f333
 800f320:	0800f333 	.word	0x0800f333
 800f324:	0800f333 	.word	0x0800f333
                                        isGoodInterface = false;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f330:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f338:	3b02      	subs	r3, #2
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f103 0210 	add.w	r2, r3, #16
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3308      	adds	r3, #8
 800f34a:	4619      	mov	r1, r3
 800f34c:	4610      	mov	r0, r2
 800f34e:	f7fd f895 	bl	800c47c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2204      	movs	r2, #4
 800f356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f360:	2b05      	cmp	r3, #5
 800f362:	d055      	beq.n	800f410 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f364:	2b05      	cmp	r3, #5
 800f366:	f300 8085 	bgt.w	800f474 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d002      	beq.n	800f374 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f36e:	2b04      	cmp	r3, #4
 800f370:	d015      	beq.n	800f39e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f372:	e07f      	b.n	800f474 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	3310      	adds	r3, #16
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f003 f839 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f382:	4603      	mov	r3, r0
 800f384:	f083 0301 	eor.w	r3, r3, #1
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f38e:	2300      	movs	r3, #0
 800f390:	e097      	b.n	800f4c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	795a      	ldrb	r2, [r3, #5]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f39c:	e086      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f003 f824 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f083 0301 	eor.w	r3, r3, #1
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	e082      	b.n	800f4c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	795b      	ldrb	r3, [r3, #5]
 800f3c0:	2bff      	cmp	r3, #255	; 0xff
 800f3c2:	d16c      	bne.n	800f49e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	799b      	ldrb	r3, [r3, #6]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d16a      	bne.n	800f4a2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	79db      	ldrb	r3, [r3, #7]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d104      	bne.n	800f3e8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f3de:	e065      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	79db      	ldrb	r3, [r3, #7]
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d15e      	bne.n	800f4a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	789a      	ldrb	r2, [r3, #2]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	78da      	ldrb	r2, [r3, #3]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	79da      	ldrb	r2, [r3, #7]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f40e:	e04d      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3310      	adds	r3, #16
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	4618      	mov	r0, r3
 800f41a:	f002 ffeb 	bl	80123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f41e:	4603      	mov	r3, r0
 800f420:	f083 0301 	eor.w	r3, r3, #1
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f42a:	2300      	movs	r3, #0
 800f42c:	e049      	b.n	800f4c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f434:	2b00      	cmp	r3, #0
 800f436:	d038      	beq.n	800f4aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d034      	beq.n	800f4aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6858      	ldr	r0, [r3, #4]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681c      	ldr	r4, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	3220      	adds	r2, #32
 800f468:	9201      	str	r2, [sp, #4]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4633      	mov	r3, r6
 800f46e:	462a      	mov	r2, r5
 800f470:	47a0      	blx	r4
                                        break;
 800f472:	e01a      	b.n	800f4aa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f103 0018 	add.w	r0, r3, #24
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f480:	b29b      	uxth	r3, r3
 800f482:	3b02      	subs	r3, #2
 800f484:	b29b      	uxth	r3, r3
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	f7fd f836 	bl	800c4fa <_ZN11ByteSkipper4SkipEPPhPtt>
 800f48e:	4603      	mov	r3, r0
 800f490:	f083 0301 	eor.w	r3, r3, #1
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d008      	beq.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e011      	b.n	800f4c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f49e:	bf00      	nop
 800f4a0:	e004      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f4a2:	bf00      	nop
 800f4a4:	e002      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f4a6:	bf00      	nop
 800f4a8:	e000      	b.n	800f4ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f4aa:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f103 0220 	add.w	r2, r3, #32
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f4c0:	2301      	movs	r3, #1
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ca:	bf00      	nop

0800f4cc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	73fb      	strb	r3, [r7, #15]
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	2b03      	cmp	r3, #3
 800f4de:	d815      	bhi.n	800f50c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	3318      	adds	r3, #24
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	4413      	add	r3, r2
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d109      	bne.n	800f504 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	3318      	adds	r3, #24
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f502:	e005      	b.n	800f510 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	3301      	adds	r3, #1
 800f508:	73fb      	strb	r3, [r7, #15]
 800f50a:	e7e6      	b.n	800f4da <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	4a0a      	ldr	r2, [pc, #40]	; (800f550 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff ffc3 	bl	800f4cc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	0801298c 	.word	0x0801298c

0800f554 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	4613      	mov	r3, r2
 800f560:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	88fb      	ldrh	r3, [r7, #6]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d10b      	bne.n	800f588 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	3301      	adds	r3, #1
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	88fb      	ldrh	r3, [r7, #6]
 800f57a:	121b      	asrs	r3, r3, #8
 800f57c:	f043 0320 	orr.w	r3, r3, #32
 800f580:	429a      	cmp	r2, r3
 800f582:	d101      	bne.n	800f588 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f584:	2301      	movs	r3, #1
 800f586:	e000      	b.n	800f58a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f588:	2300      	movs	r3, #0
        }
 800f58a:	4618      	mov	r0, r3
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f596:	b480      	push	{r7}
 800f598:	b085      	sub	sp, #20
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	60f8      	str	r0, [r7, #12]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	607a      	str	r2, [r7, #4]
 800f5a2:	72fb      	strb	r3, [r7, #11]
                return;
 800f5a4:	bf00      	nop
        };
 800f5a6:	3714      	adds	r7, #20
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
                return;
 800f5b8:	bf00      	nop
        };
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
                return;
 800f5cc:	bf00      	nop
        }
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b086      	sub	sp, #24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	603b      	str	r3, [r7, #0]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68b9      	ldr	r1, [r7, #8]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff ff95 	bl	800f51c <_ZN16BluetoothServiceC1EP3BTD>
 800f5f2:	4a1f      	ldr	r2, [pc, #124]	; (800f670 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	601a      	str	r2, [r3, #0]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f600:	2300      	movs	r3, #0
 800f602:	75fb      	strb	r3, [r7, #23]
 800f604:	7dfb      	ldrb	r3, [r7, #23]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d809      	bhi.n	800f61e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f60a:	7dfa      	ldrb	r2, [r7, #23]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3208      	adds	r2, #8
 800f610:	2100      	movs	r1, #0
 800f612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	3301      	adds	r3, #1
 800f61a:	75fb      	strb	r3, [r7, #23]
 800f61c:	e7f2      	b.n	800f604 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	79fa      	ldrb	r2, [r7, #7]
 800f624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	683a      	ldr	r2, [r7, #0]
 800f62e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2250      	movs	r2, #80	; 0x50
 800f634:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2270      	movs	r2, #112	; 0x70
 800f644:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2271      	movs	r2, #113	; 0x71
 800f654:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f807 	bl	800f674 <_ZN5BTHID5ResetEv>
}
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4618      	mov	r0, r3
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	08012960 	.word	0x08012960

0800f674 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	220a      	movs	r2, #10
 800f69c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3320      	adds	r3, #32
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	4798      	blx	r3
}
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f6ba:	b590      	push	{r4, r7, lr}
 800f6bc:	b085      	sub	sp, #20
 800f6be:	af02      	add	r7, sp, #8
 800f6c0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d014      	beq.n	800f6f6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6898      	ldr	r0, [r3, #8]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	8999      	ldrh	r1, [r3, #12]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	7d1b      	ldrb	r3, [r3, #20]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	751a      	strb	r2, [r3, #20]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	7d1a      	ldrb	r2, [r3, #20]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f103 041b 	add.w	r4, r3, #27
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	336f      	adds	r3, #111	; 0x6f
 800f6ee:	9300      	str	r3, [sp, #0]
 800f6f0:	4623      	mov	r3, r4
 800f6f2:	f7ff f9c5 	bl	800ea80 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6898      	ldr	r0, [r3, #8]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	8999      	ldrh	r1, [r3, #12]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	7d1b      	ldrb	r3, [r3, #20]
 800f702:	3301      	adds	r3, #1
 800f704:	b2da      	uxtb	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	751a      	strb	r2, [r3, #20]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7d1a      	ldrb	r2, [r3, #20]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f103 0418 	add.w	r4, r3, #24
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	336d      	adds	r3, #109	; 0x6d
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	4623      	mov	r3, r4
 800f71c:	f7ff f9b0 	bl	800ea80 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3308      	adds	r3, #8
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	220e      	movs	r2, #14
 800f730:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2209      	movs	r2, #9
 800f736:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f73a:	bf00      	nop
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd90      	pop	{r4, r7, pc}

0800f742 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f742:	b590      	push	{r4, r7, lr}
 800f744:	b087      	sub	sp, #28
 800f746:	af02      	add	r7, sp, #8
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	7d5b      	ldrb	r3, [r3, #21]
 800f750:	f083 0301 	eor.w	r3, r3, #1
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d023      	beq.n	800f7a2 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	3308      	adds	r3, #8
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b02      	cmp	r3, #2
 800f762:	d11e      	bne.n	800f7a2 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	330c      	adds	r3, #12
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	330d      	adds	r3, #13
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	021b      	lsls	r3, r3, #8
 800f774:	4313      	orrs	r3, r2
 800f776:	2b01      	cmp	r3, #1
 800f778:	d113      	bne.n	800f7a2 <_ZN5BTHID7ACLDataEPh+0x60>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	7a9b      	ldrb	r3, [r3, #10]
 800f780:	f083 0301 	eor.w	r3, r3, #1
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00b      	beq.n	800f7a2 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	2201      	movs	r2, #1
 800f790:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	8b5a      	ldrh	r2, [r3, #26]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	220a      	movs	r2, #10
 800f7a0:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	7a5b      	ldrb	r3, [r3, #9]
 800f7a8:	f083 0301 	eor.w	r3, r3, #1
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d03a      	beq.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d034      	beq.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7d5b      	ldrb	r3, [r3, #21]
 800f7c2:	f083 0301 	eor.w	r3, r3, #1
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d02d      	beq.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f7d2:	f083 0301 	eor.w	r3, r3, #1
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d025      	beq.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	3308      	adds	r3, #8
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d120      	bne.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	330c      	adds	r3, #12
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	330d      	adds	r3, #13
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	021b      	lsls	r3, r3, #8
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	2b11      	cmp	r3, #17
 800f7fa:	d115      	bne.n	800f828 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	2201      	movs	r2, #1
 800f80c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2201      	movs	r2, #1
 800f812:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	8b5a      	ldrh	r2, [r3, #26]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	461a      	mov	r2, r3
 800f830:	6839      	ldr	r1, [r7, #0]
 800f832:	f7ff fe8f 	bl	800f554 <_ZN16BluetoothService14checkHciHandleEPht>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f000 83d9 	beq.w	800fff0 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	3306      	adds	r3, #6
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	461a      	mov	r2, r3
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	3307      	adds	r3, #7
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	021b      	lsls	r3, r3, #8
 800f84e:	4313      	orrs	r3, r2
 800f850:	2b01      	cmp	r3, #1
 800f852:	f040 829b 	bne.w	800fd8c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	3308      	adds	r3, #8
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	f000 83c1 	beq.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	3308      	adds	r3, #8
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	2b03      	cmp	r3, #3
 800f86a:	f040 808d 	bne.w	800f988 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	3310      	adds	r3, #16
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	461a      	mov	r2, r3
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	3311      	adds	r3, #17
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	021b      	lsls	r3, r3, #8
 800f87e:	4313      	orrs	r3, r2
 800f880:	2b00      	cmp	r3, #0
 800f882:	f040 83af 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	3312      	adds	r3, #18
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	461a      	mov	r2, r3
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	3313      	adds	r3, #19
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	021b      	lsls	r3, r3, #8
 800f896:	4313      	orrs	r3, r2
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f040 83a3 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	330e      	adds	r3, #14
 800f8a2:	781a      	ldrb	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d124      	bne.n	800f8f8 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	330f      	adds	r3, #15
 800f8b2:	781a      	ldrb	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d11c      	bne.n	800f8f8 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	7a5a      	ldrb	r2, [r3, #9]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	7b1a      	ldrb	r2, [r3, #12]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	7b5a      	ldrb	r2, [r3, #13]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7d1b      	ldrb	r3, [r3, #20]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6898      	ldr	r0, [r3, #8]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	8999      	ldrh	r1, [r3, #12]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	7d1a      	ldrb	r2, [r3, #20]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	331b      	adds	r3, #27
 800f8f2:	f7ff f827 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>
 800f8f6:	e375      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	330e      	adds	r3, #14
 800f8fc:	781a      	ldrb	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f904:	429a      	cmp	r2, r3
 800f906:	d11a      	bne.n	800f93e <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	330f      	adds	r3, #15
 800f90c:	781a      	ldrb	r2, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f914:	429a      	cmp	r2, r3
 800f916:	d112      	bne.n	800f93e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	7a5a      	ldrb	r2, [r3, #9]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	7b1a      	ldrb	r2, [r3, #12]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	7b5a      	ldrb	r2, [r3, #13]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	f043 0204 	orr.w	r2, r3, #4
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	611a      	str	r2, [r3, #16]
 800f93c:	e352      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	330e      	adds	r3, #14
 800f942:	781a      	ldrb	r2, [r3, #0]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f94a:	429a      	cmp	r2, r3
 800f94c:	f040 834a 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	330f      	adds	r3, #15
 800f954:	781a      	ldrb	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f95c:	429a      	cmp	r2, r3
 800f95e:	f040 8341 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	7a5a      	ldrb	r2, [r3, #9]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	7b1a      	ldrb	r2, [r3, #12]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	7b5a      	ldrb	r2, [r3, #13]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	611a      	str	r2, [r3, #16]
 800f986:	e32d      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	3308      	adds	r3, #8
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d15a      	bne.n	800fa48 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	330c      	adds	r3, #12
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	461a      	mov	r2, r3
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	330d      	adds	r3, #13
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	021b      	lsls	r3, r3, #8
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d112      	bne.n	800f9ce <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	7a5a      	ldrb	r2, [r3, #9]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	7b9a      	ldrb	r2, [r3, #14]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	7bda      	ldrb	r2, [r3, #15]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	611a      	str	r2, [r3, #16]
 800f9cc:	e30a      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	330c      	adds	r3, #12
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	330d      	adds	r3, #13
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	2b11      	cmp	r3, #17
 800f9e2:	d112      	bne.n	800fa0a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	7a5a      	ldrb	r2, [r3, #9]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	7b9a      	ldrb	r2, [r3, #14]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	7bda      	ldrb	r2, [r3, #15]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	f043 0201 	orr.w	r2, r3, #1
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	611a      	str	r2, [r3, #16]
 800fa08:	e2ec      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	330c      	adds	r3, #12
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	461a      	mov	r2, r3
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	330d      	adds	r3, #13
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	021b      	lsls	r3, r3, #8
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	2b13      	cmp	r3, #19
 800fa1e:	f040 82e1 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	7a5a      	ldrb	r2, [r3, #9]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	7b9a      	ldrb	r2, [r3, #14]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	7bda      	ldrb	r2, [r3, #15]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	f043 0210 	orr.w	r2, r3, #16
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	611a      	str	r2, [r3, #16]
 800fa46:	e2cd      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	3308      	adds	r3, #8
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2b05      	cmp	r3, #5
 800fa50:	d15e      	bne.n	800fb10 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	3310      	adds	r3, #16
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	3311      	adds	r3, #17
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	021b      	lsls	r3, r3, #8
 800fa62:	4313      	orrs	r3, r2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f040 82bd 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	330c      	adds	r3, #12
 800fa6e:	781a      	ldrb	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d112      	bne.n	800faa0 <_ZN5BTHID7ACLDataEPh+0x35e>
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	330d      	adds	r3, #13
 800fa7e:	781a      	ldrb	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d10a      	bne.n	800faa0 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	7a5a      	ldrb	r2, [r3, #9]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	691b      	ldr	r3, [r3, #16]
 800fa96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	611a      	str	r2, [r3, #16]
 800fa9e:	e2a1      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	330c      	adds	r3, #12
 800faa4:	781a      	ldrb	r2, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800faac:	429a      	cmp	r2, r3
 800faae:	d112      	bne.n	800fad6 <_ZN5BTHID7ACLDataEPh+0x394>
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	330d      	adds	r3, #13
 800fab4:	781a      	ldrb	r2, [r3, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d10a      	bne.n	800fad6 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	7a5a      	ldrb	r2, [r3, #9]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	f043 0202 	orr.w	r2, r3, #2
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	611a      	str	r2, [r3, #16]
 800fad4:	e286      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	330c      	adds	r3, #12
 800fada:	781a      	ldrb	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fae2:	429a      	cmp	r2, r3
 800fae4:	f040 827e 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	330d      	adds	r3, #13
 800faec:	781a      	ldrb	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800faf4:	429a      	cmp	r2, r3
 800faf6:	f040 8275 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	7a5a      	ldrb	r2, [r3, #9]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	f043 0220 	orr.w	r2, r3, #32
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	611a      	str	r2, [r3, #16]
 800fb0e:	e269      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b04      	cmp	r3, #4
 800fb18:	d155      	bne.n	800fbc6 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	330c      	adds	r3, #12
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d113      	bne.n	800fb52 <_ZN5BTHID7ACLDataEPh+0x410>
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	330d      	adds	r3, #13
 800fb2e:	781a      	ldrb	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d10b      	bne.n	800fb52 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6898      	ldr	r0, [r3, #8]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	8999      	ldrh	r1, [r3, #12]
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	3309      	adds	r3, #9
 800fb46:	781a      	ldrb	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	331b      	adds	r3, #27
 800fb4c:	f7fe ff45 	bl	800e9da <_ZN3BTD21l2cap_config_responseEthPh>
 800fb50:	e248      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	330c      	adds	r3, #12
 800fb56:	781a      	ldrb	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d113      	bne.n	800fb8a <_ZN5BTHID7ACLDataEPh+0x448>
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	330d      	adds	r3, #13
 800fb66:	781a      	ldrb	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d10b      	bne.n	800fb8a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6898      	ldr	r0, [r3, #8]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8999      	ldrh	r1, [r3, #12]
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	3309      	adds	r3, #9
 800fb7e:	781a      	ldrb	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3316      	adds	r3, #22
 800fb84:	f7fe ff29 	bl	800e9da <_ZN3BTD21l2cap_config_responseEthPh>
 800fb88:	e22c      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	330c      	adds	r3, #12
 800fb8e:	781a      	ldrb	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb96:	429a      	cmp	r2, r3
 800fb98:	f040 8224 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	330d      	adds	r3, #13
 800fba0:	781a      	ldrb	r2, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	f040 821b 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6898      	ldr	r0, [r3, #8]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8999      	ldrh	r1, [r3, #12]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	3309      	adds	r3, #9
 800fbba:	781a      	ldrb	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	3318      	adds	r3, #24
 800fbc0:	f7fe ff0b 	bl	800e9da <_ZN3BTD21l2cap_config_responseEthPh>
 800fbc4:	e20e      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2b06      	cmp	r3, #6
 800fbce:	d170      	bne.n	800fcb2 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	330c      	adds	r3, #12
 800fbd4:	781a      	ldrb	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d112      	bne.n	800fc06 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	330d      	adds	r3, #13
 800fbe4:	781a      	ldrb	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d10a      	bne.n	800fc06 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	7a5a      	ldrb	r2, [r3, #9]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	611a      	str	r2, [r3, #16]
 800fc04:	e1ee      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	330c      	adds	r3, #12
 800fc0a:	781a      	ldrb	r2, [r3, #0]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d121      	bne.n	800fc5a <_ZN5BTHID7ACLDataEPh+0x518>
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	330d      	adds	r3, #13
 800fc1a:	781a      	ldrb	r2, [r3, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d119      	bne.n	800fc5a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	7a5a      	ldrb	r2, [r3, #9]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6898      	ldr	r0, [r3, #8]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8999      	ldrh	r1, [r3, #12]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	7d1a      	ldrb	r2, [r3, #20]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	3316      	adds	r3, #22
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4623      	mov	r3, r4
 800fc48:	f7fe ff57 	bl	800eafa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3308      	adds	r3, #8
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	4798      	blx	r3
 800fc58:	e1c4      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	330c      	adds	r3, #12
 800fc5e:	781a      	ldrb	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fc66:	429a      	cmp	r2, r3
 800fc68:	f040 81bc 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	330d      	adds	r3, #13
 800fc70:	781a      	ldrb	r2, [r3, #0]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	f040 81b3 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	7a5a      	ldrb	r2, [r3, #9]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6898      	ldr	r0, [r3, #8]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8999      	ldrh	r1, [r3, #12]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	7d1a      	ldrb	r2, [r3, #20]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	3318      	adds	r3, #24
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	4623      	mov	r3, r4
 800fca0:	f7fe ff2b 	bl	800eafa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	3308      	adds	r3, #8
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	4798      	blx	r3
 800fcb0:	e198      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	3308      	adds	r3, #8
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b07      	cmp	r3, #7
 800fcba:	d14c      	bne.n	800fd56 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	330c      	adds	r3, #12
 800fcc0:	781a      	ldrb	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7edb      	ldrb	r3, [r3, #27]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d111      	bne.n	800fcee <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	330d      	adds	r3, #13
 800fcce:	781a      	ldrb	r2, [r3, #0]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	7f1b      	ldrb	r3, [r3, #28]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d10a      	bne.n	800fcee <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	7a5a      	ldrb	r2, [r3, #9]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	611a      	str	r2, [r3, #16]
 800fcec:	e17a      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	330c      	adds	r3, #12
 800fcf2:	781a      	ldrb	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	7d9b      	ldrb	r3, [r3, #22]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d111      	bne.n	800fd20 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	330d      	adds	r3, #13
 800fd00:	781a      	ldrb	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7ddb      	ldrb	r3, [r3, #23]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d10a      	bne.n	800fd20 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	7a5a      	ldrb	r2, [r3, #9]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	f043 0208 	orr.w	r2, r3, #8
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	611a      	str	r2, [r3, #16]
 800fd1e:	e161      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	330c      	adds	r3, #12
 800fd24:	781a      	ldrb	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	7e1b      	ldrb	r3, [r3, #24]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	f040 815a 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	330d      	adds	r3, #13
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	7e5b      	ldrb	r3, [r3, #25]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	f040 8152 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	7a5a      	ldrb	r2, [r3, #9]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	691b      	ldr	r3, [r3, #16]
 800fd4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	611a      	str	r2, [r3, #16]
 800fd54:	e146      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	3308      	adds	r3, #8
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b0a      	cmp	r3, #10
 800fd5e:	f040 8141 	bne.w	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	7a5a      	ldrb	r2, [r3, #9]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6898      	ldr	r0, [r3, #8]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	8999      	ldrh	r1, [r3, #12]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	7d1a      	ldrb	r2, [r3, #20]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	330c      	adds	r3, #12
 800fd7a:	781c      	ldrb	r4, [r3, #0]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	330d      	adds	r3, #13
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	4623      	mov	r3, r4
 800fd86:	f7fe fef5 	bl	800eb74 <_ZN3BTD26l2cap_information_responseEthhh>
 800fd8a:	e12b      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	3306      	adds	r3, #6
 800fd90:	781a      	ldrb	r2, [r3, #0]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	f040 8087 	bne.w	800feac <_ZN5BTHID7ACLDataEPh+0x76a>
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	3307      	adds	r3, #7
 800fda2:	781a      	ldrb	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d17e      	bne.n	800feac <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	3308      	adds	r3, #8
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d131      	bne.n	800fe1c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2203      	movs	r2, #3
 800fdbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	7a5a      	ldrb	r2, [r3, #9]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	7a9a      	ldrb	r2, [r3, #10]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2205      	movs	r2, #5
 800fde0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3328      	adds	r3, #40	; 0x28
 800fe10:	220a      	movs	r2, #10
 800fe12:	4619      	mov	r1, r3
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fb6d 	bl	80104f4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe1a:	e0e0      	b.n	800ffde <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	3308      	adds	r3, #8
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	2b04      	cmp	r3, #4
 800fe24:	d131      	bne.n	800fe8a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2205      	movs	r2, #5
 800fe2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	7a5a      	ldrb	r2, [r3, #9]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	7a9a      	ldrb	r2, [r3, #10]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2205      	movs	r2, #5
 800fe4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2235      	movs	r2, #53	; 0x35
 800fe66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	3328      	adds	r3, #40	; 0x28
 800fe7e:	220a      	movs	r2, #10
 800fe80:	4619      	mov	r1, r3
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fb36 	bl	80104f4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe88:	e0a9      	b.n	800ffde <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2b06      	cmp	r3, #6
 800fe92:	f040 80a4 	bne.w	800ffde <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	3309      	adds	r3, #9
 800fe9a:	7819      	ldrb	r1, [r3, #0]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	330a      	adds	r3, #10
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	461a      	mov	r2, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fb3f 	bl	8010528 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800feaa:	e098      	b.n	800ffde <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	3306      	adds	r3, #6
 800feb0:	781a      	ldrb	r2, [r3, #0]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800feb8:	429a      	cmp	r2, r3
 800feba:	d162      	bne.n	800ff82 <_ZN5BTHID7ACLDataEPh+0x840>
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	3307      	adds	r3, #7
 800fec0:	781a      	ldrb	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fec8:	429a      	cmp	r2, r3
 800feca:	d15a      	bne.n	800ff82 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	3308      	adds	r3, #8
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2ba1      	cmp	r3, #161	; 0xa1
 800fed4:	f040 8085 	bne.w	800ffe2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800fed8:	f7f1 ffc6 	bl	8001e68 <HAL_GetTick>
 800fedc:	4602      	mov	r2, r0
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	3305      	adds	r3, #5
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	021b      	lsls	r3, r3, #8
 800feea:	b21a      	sxth	r2, r3
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	3304      	adds	r3, #4
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	b21b      	sxth	r3, r3
 800fef4:	4313      	orrs	r3, r2
 800fef6:	b21b      	sxth	r3, r3
 800fef8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3314      	adds	r3, #20
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	89fa      	ldrh	r2, [r7, #14]
 800ff04:	b2d2      	uxtb	r2, r2
 800ff06:	3a01      	subs	r2, #1
 800ff08:	b2d1      	uxtb	r1, r2
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	3209      	adds	r2, #9
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	3309      	adds	r3, #9
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d002      	beq.n	800ff22 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d016      	beq.n	800ff4e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800ff20:	e05f      	b.n	800ffe2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6a1b      	ldr	r3, [r3, #32]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d027      	beq.n	800ff7a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a18      	ldr	r0, [r3, #32]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	681c      	ldr	r4, [r3, #0]
 800ff36:	89fb      	ldrh	r3, [r7, #14]
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	3b02      	subs	r3, #2
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	330a      	adds	r3, #10
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	4613      	mov	r3, r2
 800ff46:	2200      	movs	r2, #0
 800ff48:	6879      	ldr	r1, [r7, #4]
 800ff4a:	47a0      	blx	r4
                                                break;
 800ff4c:	e015      	b.n	800ff7a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d013      	beq.n	800ff7e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	681c      	ldr	r4, [r3, #0]
 800ff62:	89fb      	ldrh	r3, [r7, #14]
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	3b02      	subs	r3, #2
 800ff68:	b2da      	uxtb	r2, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	330a      	adds	r3, #10
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	4613      	mov	r3, r2
 800ff72:	2200      	movs	r2, #0
 800ff74:	6879      	ldr	r1, [r7, #4]
 800ff76:	47a0      	blx	r4
                                                break;
 800ff78:	e001      	b.n	800ff7e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800ff7a:	bf00      	nop
 800ff7c:	e031      	b.n	800ffe2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800ff7e:	bf00      	nop
                        }
 800ff80:	e02f      	b.n	800ffe2 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	3306      	adds	r3, #6
 800ff86:	781a      	ldrb	r2, [r3, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d128      	bne.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	3307      	adds	r3, #7
 800ff96:	781a      	ldrb	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d120      	bne.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	3308      	adds	r3, #8
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	2ba3      	cmp	r3, #163	; 0xa3
 800ffaa:	d11b      	bne.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	3305      	adds	r3, #5
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	021b      	lsls	r3, r3, #8
 800ffb4:	b21a      	sxth	r2, r3
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	3304      	adds	r3, #4
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	b21b      	sxth	r3, r3
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	b21b      	sxth	r3, r3
 800ffc2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	3318      	adds	r3, #24
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	89ba      	ldrh	r2, [r7, #12]
 800ffce:	b2d2      	uxtb	r2, r2
 800ffd0:	3a01      	subs	r2, #1
 800ffd2:	b2d1      	uxtb	r1, r2
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	3209      	adds	r2, #9
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	4798      	blx	r3
 800ffdc:	e002      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ffde:	bf00      	nop
 800ffe0:	e000      	b.n	800ffe4 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800ffe2:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 f807 	bl	800fff8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f8b4 	bl	8010158 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd90      	pop	{r4, r7, pc}

0800fff8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800fff8:	b5b0      	push	{r4, r5, r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af02      	add	r7, sp, #8
 800fffe:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	7e9b      	ldrb	r3, [r3, #26]
 8010004:	2b0e      	cmp	r3, #14
 8010006:	f000 8084 	beq.w	8010112 <_ZN5BTHID8SDP_taskEv+0x11a>
 801000a:	2b0e      	cmp	r3, #14
 801000c:	f300 809f 	bgt.w	801014e <_ZN5BTHID8SDP_taskEv+0x156>
 8010010:	2b0a      	cmp	r3, #10
 8010012:	d002      	beq.n	801001a <_ZN5BTHID8SDP_taskEv+0x22>
 8010014:	2b0b      	cmp	r3, #11
 8010016:	d068      	beq.n	80100ea <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8010018:	e099      	b.n	801014e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010022:	2b00      	cmp	r3, #0
 8010024:	d041      	beq.n	80100aa <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6898      	ldr	r0, [r3, #8]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8999      	ldrh	r1, [r3, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	7d1a      	ldrb	r2, [r3, #20]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	331b      	adds	r3, #27
 8010048:	2501      	movs	r5, #1
 801004a:	9501      	str	r5, [sp, #4]
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	4623      	mov	r3, r4
 8010050:	f7fe fc2b 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010054:	2001      	movs	r0, #1
 8010056:	f7f1 ff13 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6898      	ldr	r0, [r3, #8]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	8999      	ldrh	r1, [r3, #12]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	7d1a      	ldrb	r2, [r3, #20]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	331b      	adds	r3, #27
 8010070:	2500      	movs	r5, #0
 8010072:	9501      	str	r5, [sp, #4]
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	4623      	mov	r3, r4
 8010078:	f7fe fc17 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	7d1b      	ldrb	r3, [r3, #20]
 8010080:	3301      	adds	r3, #1
 8010082:	b2da      	uxtb	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010088:	2001      	movs	r0, #1
 801008a:	f7f1 fef9 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6898      	ldr	r0, [r3, #8]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	8999      	ldrh	r1, [r3, #12]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	7d1a      	ldrb	r2, [r3, #20]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	331b      	adds	r3, #27
 801009e:	f7fe fc51 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	220b      	movs	r2, #11
 80100a6:	769a      	strb	r2, [r3, #26]
                        break;
 80100a8:	e04c      	b.n	8010144 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	691b      	ldr	r3, [r3, #16]
 80100ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d046      	beq.n	8010144 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6898      	ldr	r0, [r3, #8]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	8999      	ldrh	r1, [r3, #12]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7d1a      	ldrb	r2, [r3, #20]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	331b      	adds	r3, #27
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	4623      	mov	r3, r4
 80100e4:	f7fe fd09 	bl	800eafa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 80100e8:	e02c      	b.n	8010144 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d028      	beq.n	8010148 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2201      	movs	r2, #1
 8010106:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	220a      	movs	r2, #10
 801010e:	769a      	strb	r2, [r3, #26]
                        break;
 8010110:	e01a      	b.n	8010148 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801011a:	2b00      	cmp	r3, #0
 801011c:	d016      	beq.n	801014c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	689a      	ldr	r2, [r3, #8]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	899b      	ldrh	r3, [r3, #12]
 8010126:	4619      	mov	r1, r3
 8010128:	4610      	mov	r0, r2
 801012a:	f7fe fa92 	bl	800e652 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010134:	819a      	strh	r2, [r3, #12]
                                Reset();
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3308      	adds	r3, #8
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	4798      	blx	r3
                        break;
 8010142:	e003      	b.n	801014c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 8010144:	bf00      	nop
 8010146:	e002      	b.n	801014e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 8010148:	bf00      	nop
 801014a:	e000      	b.n	801014e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 801014c:	bf00      	nop
}
 801014e:	bf00      	nop
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010158 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8010158:	b5b0      	push	{r4, r5, r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af02      	add	r7, sp, #8
 801015e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8010166:	3b01      	subs	r3, #1
 8010168:	2b08      	cmp	r3, #8
 801016a:	f200 812c 	bhi.w	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801016e:	a201      	add	r2, pc, #4	; (adr r2, 8010174 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8010170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010174:	080103a5 	.word	0x080103a5
 8010178:	0801023f 	.word	0x0801023f
 801017c:	08010277 	.word	0x08010277
 8010180:	08010199 	.word	0x08010199
 8010184:	08010371 	.word	0x08010371
 8010188:	080101b7 	.word	0x080101b7
 801018c:	080102bf 	.word	0x080102bf
 8010190:	080102f5 	.word	0x080102f5
 8010194:	08010331 	.word	0x08010331
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	f003 0302 	and.w	r3, r3, #2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 8101 	beq.w	80103a8 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f9f9 	bl	801059e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2206      	movs	r2, #6
 80101b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80101b4:	e0f8      	b.n	80103a8 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	f003 0310 	and.w	r3, r3, #16
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f000 80f4 	beq.w	80103ac <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6898      	ldr	r0, [r3, #8]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8999      	ldrh	r1, [r3, #12]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7d1a      	ldrb	r2, [r3, #20]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	3318      	adds	r3, #24
 80101da:	2501      	movs	r5, #1
 80101dc:	9501      	str	r5, [sp, #4]
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	4623      	mov	r3, r4
 80101e2:	f7fe fb62 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80101e6:	2001      	movs	r0, #1
 80101e8:	f7f1 fe4a 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6898      	ldr	r0, [r3, #8]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	8999      	ldrh	r1, [r3, #12]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7d1a      	ldrb	r2, [r3, #20]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	3318      	adds	r3, #24
 8010202:	2500      	movs	r5, #0
 8010204:	9501      	str	r5, [sp, #4]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4623      	mov	r3, r4
 801020a:	f7fe fb4e 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	7d1b      	ldrb	r3, [r3, #20]
 8010212:	3301      	adds	r3, #1
 8010214:	b2da      	uxtb	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801021a:	2001      	movs	r0, #1
 801021c:	f7f1 fe30 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6898      	ldr	r0, [r3, #8]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8999      	ldrh	r1, [r3, #12]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7d1a      	ldrb	r2, [r3, #20]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	3318      	adds	r3, #24
 8010230:	f7fe fb88 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2208      	movs	r2, #8
 8010238:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801023c:	e0b6      	b.n	80103ac <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	f003 0304 	and.w	r3, r3, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80b2 	beq.w	80103b0 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	7d1b      	ldrb	r3, [r3, #20]
 8010250:	3301      	adds	r3, #1
 8010252:	b2da      	uxtb	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6898      	ldr	r0, [r3, #8]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	8999      	ldrh	r1, [r3, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	7d1a      	ldrb	r2, [r3, #20]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3316      	adds	r3, #22
 8010268:	f7fe fb6c 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2203      	movs	r2, #3
 8010270:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010274:	e09c      	b.n	80103b0 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	f003 0302 	and.w	r3, r3, #2
 801027e:	2b00      	cmp	r3, #0
 8010280:	f000 8098 	beq.w	80103b4 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f98a 	bl	801059e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801028a:	2001      	movs	r0, #1
 801028c:	f7f1 fdf8 	bl	8001e80 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7d1b      	ldrb	r3, [r3, #20]
 8010294:	3301      	adds	r3, #1
 8010296:	b2da      	uxtb	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6898      	ldr	r0, [r3, #8]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	8999      	ldrh	r1, [r3, #12]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	7d1a      	ldrb	r2, [r3, #20]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	336d      	adds	r3, #109	; 0x6d
 80102ac:	2413      	movs	r4, #19
 80102ae:	9400      	str	r4, [sp, #0]
 80102b0:	f7fe fabd 	bl	800e82e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2207      	movs	r2, #7
 80102b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102bc:	e07a      	b.n	80103b4 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	691b      	ldr	r3, [r3, #16]
 80102c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d076      	beq.n	80103b8 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	7d1b      	ldrb	r3, [r3, #20]
 80102ce:	3301      	adds	r3, #1
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6898      	ldr	r0, [r3, #8]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8999      	ldrh	r1, [r3, #12]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7d1a      	ldrb	r2, [r3, #20]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	3318      	adds	r3, #24
 80102e6:	f7fe fb2d 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2208      	movs	r2, #8
 80102ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102f2:	e061      	b.n	80103b8 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	f003 0320 	and.w	r3, r3, #32
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d05d      	beq.n	80103bc <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	2200      	movs	r2, #0
 8010306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	2200      	movs	r2, #0
 8010310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	755a      	strb	r2, [r3, #21]
                                onInit();
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	3310      	adds	r3, #16
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2201      	movs	r2, #1
 801032a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801032e:	e045      	b.n	80103bc <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010338:	2b00      	cmp	r3, #0
 801033a:	d041      	beq.n	80103c0 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	7d1b      	ldrb	r3, [r3, #20]
 8010340:	3301      	adds	r3, #1
 8010342:	b2da      	uxtb	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6898      	ldr	r0, [r3, #8]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	8999      	ldrh	r1, [r3, #12]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7d1a      	ldrb	r2, [r3, #20]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f103 0416 	add.w	r4, r3, #22
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	336b      	adds	r3, #107	; 0x6b
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	4623      	mov	r3, r4
 8010362:	f7fe fb8d 	bl	800ea80 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2205      	movs	r2, #5
 801036a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801036e:	e027      	b.n	80103c0 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	f003 0308 	and.w	r3, r3, #8
 8010378:	2b00      	cmp	r3, #0
 801037a:	d023      	beq.n	80103c4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	689a      	ldr	r2, [r3, #8]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	899b      	ldrh	r3, [r3, #12]
 8010384:	4619      	mov	r1, r3
 8010386:	4610      	mov	r0, r2
 8010388:	f7fe f963 	bl	800e652 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010392:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80103a2:	e00f      	b.n	80103c4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 80103a4:	bf00      	nop
 80103a6:	e00e      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103a8:	bf00      	nop
 80103aa:	e00c      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103ac:	bf00      	nop
 80103ae:	e00a      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103b0:	bf00      	nop
 80103b2:	e008      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103b4:	bf00      	nop
 80103b6:	e006      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103b8:	bf00      	nop
 80103ba:	e004      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103bc:	bf00      	nop
 80103be:	e002      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103c0:	bf00      	nop
 80103c2:	e000      	b.n	80103c6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80103c4:	bf00      	nop
        }
}
 80103c6:	bf00      	nop
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bdb0      	pop	{r4, r5, r7, pc}
 80103ce:	bf00      	nop

080103d0 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 80103d0:	b5b0      	push	{r4, r5, r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af02      	add	r7, sp, #8
 80103d6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f040 8084 	bne.w	80104ec <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d03a      	beq.n	8010466 <_ZN5BTHID3RunEv+0x96>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	7a5b      	ldrb	r3, [r3, #9]
 80103f6:	f083 0301 	eor.w	r3, r3, #1
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d032      	beq.n	8010466 <_ZN5BTHID3RunEv+0x96>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	7d5b      	ldrb	r3, [r3, #21]
 8010404:	f083 0301 	eor.w	r3, r3, #1
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d02b      	beq.n	8010466 <_ZN5BTHID3RunEv+0x96>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010414:	f083 0301 	eor.w	r3, r3, #1
 8010418:	b2db      	uxtb	r3, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d023      	beq.n	8010466 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	2201      	movs	r2, #1
 8010424:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2201      	movs	r2, #1
 801042a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	8b5a      	ldrh	r2, [r3, #26]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6898      	ldr	r0, [r3, #8]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	8999      	ldrh	r1, [r3, #12]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7d1a      	ldrb	r2, [r3, #20]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	336b      	adds	r3, #107	; 0x6b
 8010454:	2411      	movs	r4, #17
 8010456:	9400      	str	r4, [sp, #0]
 8010458:	f7fe f9e9 	bl	800e82e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2202      	movs	r2, #2
 8010460:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8010464:	e041      	b.n	80104ea <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	f003 0301 	and.w	r3, r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	d03b      	beq.n	80104ea <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6898      	ldr	r0, [r3, #8]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8999      	ldrh	r1, [r3, #12]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	7d1a      	ldrb	r2, [r3, #20]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3316      	adds	r3, #22
 8010488:	2501      	movs	r5, #1
 801048a:	9501      	str	r5, [sp, #4]
 801048c:	9300      	str	r3, [sp, #0]
 801048e:	4623      	mov	r3, r4
 8010490:	f7fe fa0b 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010494:	2001      	movs	r0, #1
 8010496:	f7f1 fcf3 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6898      	ldr	r0, [r3, #8]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8999      	ldrh	r1, [r3, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	7d1a      	ldrb	r2, [r3, #20]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	3316      	adds	r3, #22
 80104b0:	2500      	movs	r5, #0
 80104b2:	9501      	str	r5, [sp, #4]
 80104b4:	9300      	str	r3, [sp, #0]
 80104b6:	4623      	mov	r3, r4
 80104b8:	f7fe f9f7 	bl	800e8aa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	7d1b      	ldrb	r3, [r3, #20]
 80104c0:	3301      	adds	r3, #1
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80104c8:	2001      	movs	r0, #1
 80104ca:	f7f1 fcd9 	bl	8001e80 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6898      	ldr	r0, [r3, #8]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	8999      	ldrh	r1, [r3, #12]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	7d1a      	ldrb	r2, [r3, #20]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3316      	adds	r3, #22
 80104de:	f7fe fa31 	bl	800e944 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2204      	movs	r2, #4
 80104e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 80104ea:	bf00      	nop
        }
}
 80104ec:	bf00      	nop
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bdb0      	pop	{r4, r5, r7, pc}

080104f4 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af02      	add	r7, sp, #8
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	4613      	mov	r3, r2
 8010500:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6898      	ldr	r0, [r3, #8]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	8999      	ldrh	r1, [r3, #12]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	7edb      	ldrb	r3, [r3, #27]
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	7f12      	ldrb	r2, [r2, #28]
 8010512:	79fc      	ldrb	r4, [r7, #7]
 8010514:	9201      	str	r2, [sp, #4]
 8010516:	9300      	str	r3, [sp, #0]
 8010518:	4623      	mov	r3, r4
 801051a:	68ba      	ldr	r2, [r7, #8]
 801051c:	f7fe f8f8 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010520:	bf00      	nop
 8010522:	3714      	adds	r7, #20
 8010524:	46bd      	mov	sp, r7
 8010526:	bd90      	pop	{r4, r7, pc}

08010528 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	460b      	mov	r3, r1
 8010532:	70fb      	strb	r3, [r7, #3]
 8010534:	4613      	mov	r3, r2
 8010536:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2207      	movs	r2, #7
 801053c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	78fa      	ldrb	r2, [r7, #3]
 8010544:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	78ba      	ldrb	r2, [r7, #2]
 801054c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2205      	movs	r2, #5
 801055c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2202      	movs	r2, #2
 801056c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2235      	movs	r2, #53	; 0x35
 8010574:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	3328      	adds	r3, #40	; 0x28
 801058c:	220a      	movs	r2, #10
 801058e:	4619      	mov	r1, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f7ff ffaf 	bl	80104f4 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010596:	bf00      	nop
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801059e:	b590      	push	{r4, r7, lr}
 80105a0:	b087      	sub	sp, #28
 80105a2:	af02      	add	r7, sp, #8
 80105a4:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d008      	beq.n	80105c2 <_ZN5BTHID11setProtocolEv+0x24>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105b6:	2b01      	cmp	r3, #1
 80105b8:	d003      	beq.n	80105c2 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105c8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6898      	ldr	r0, [r3, #8]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	8999      	ldrh	r1, [r3, #12]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	7d9b      	ldrb	r3, [r3, #22]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	7dd2      	ldrb	r2, [r2, #23]
 80105e0:	f107 040f 	add.w	r4, r7, #15
 80105e4:	9201      	str	r2, [sp, #4]
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	2301      	movs	r3, #1
 80105ea:	4622      	mov	r2, r4
 80105ec:	f7fe f890 	bl	800e710 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80105f0:	bf00      	nop
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd90      	pop	{r4, r7, pc}

080105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	460b      	mov	r3, r1
 8010602:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8010604:	78fb      	ldrb	r3, [r7, #3]
 8010606:	2b03      	cmp	r3, #3
 8010608:	d86e      	bhi.n	80106e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801060a:	a201      	add	r2, pc, #4	; (adr r2, 8010610 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010610:	08010621 	.word	0x08010621
 8010614:	08010653 	.word	0x08010653
 8010618:	08010685 	.word	0x08010685
 801061c:	080106b7 	.word	0x080106b7
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7a1b      	ldrb	r3, [r3, #8]
 8010624:	f003 030f 	and.w	r3, r3, #15
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b07      	cmp	r3, #7
 801062c:	d00d      	beq.n	801064a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	7a1b      	ldrb	r3, [r3, #8]
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d006      	beq.n	801064a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7a1b      	ldrb	r3, [r3, #8]
 8010640:	f003 030f 	and.w	r3, r3, #15
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b01      	cmp	r3, #1
 8010648:	d101      	bne.n	801064e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801064a:	2301      	movs	r3, #1
 801064c:	e04d      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801064e:	2300      	movs	r3, #0
 8010650:	e04b      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7a1b      	ldrb	r3, [r3, #8]
 8010656:	f003 030f 	and.w	r3, r3, #15
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b01      	cmp	r3, #1
 801065e:	d00d      	beq.n	801067c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	7a1b      	ldrb	r3, [r3, #8]
 8010664:	f003 030f 	and.w	r3, r3, #15
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b02      	cmp	r3, #2
 801066c:	d006      	beq.n	801067c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	7a1b      	ldrb	r3, [r3, #8]
 8010672:	f003 030f 	and.w	r3, r3, #15
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b03      	cmp	r3, #3
 801067a:	d101      	bne.n	8010680 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801067c:	2301      	movs	r3, #1
 801067e:	e034      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010680:	2300      	movs	r3, #0
 8010682:	e032      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	7a1b      	ldrb	r3, [r3, #8]
 8010688:	f003 030f 	and.w	r3, r3, #15
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b03      	cmp	r3, #3
 8010690:	d00d      	beq.n	80106ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7a1b      	ldrb	r3, [r3, #8]
 8010696:	f003 030f 	and.w	r3, r3, #15
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b04      	cmp	r3, #4
 801069e:	d006      	beq.n	80106ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	7a1b      	ldrb	r3, [r3, #8]
 80106a4:	f003 030f 	and.w	r3, r3, #15
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	2b05      	cmp	r3, #5
 80106ac:	d101      	bne.n	80106b2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 80106ae:	2301      	movs	r3, #1
 80106b0:	e01b      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80106b2:	2300      	movs	r3, #0
 80106b4:	e019      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	7a1b      	ldrb	r3, [r3, #8]
 80106ba:	f003 030f 	and.w	r3, r3, #15
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b05      	cmp	r3, #5
 80106c2:	d00d      	beq.n	80106e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7a1b      	ldrb	r3, [r3, #8]
 80106c8:	f003 030f 	and.w	r3, r3, #15
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b06      	cmp	r3, #6
 80106d0:	d006      	beq.n	80106e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	7a1b      	ldrb	r3, [r3, #8]
 80106d6:	f003 030f 	and.w	r3, r3, #15
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b07      	cmp	r3, #7
 80106de:	d101      	bne.n	80106e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80106e0:	2301      	movs	r3, #1
 80106e2:	e002      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80106e4:	2300      	movs	r3, #0
 80106e6:	e000      	b.n	80106ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80106e8:	2300      	movs	r3, #0
        }
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop

080106f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	460b      	mov	r3, r1
 8010702:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8010704:	78fb      	ldrb	r3, [r7, #3]
 8010706:	2b03      	cmp	r3, #3
 8010708:	d806      	bhi.n	8010718 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801070a:	78fb      	ldrb	r3, [r7, #3]
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7ff ff72 	bl	80105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010714:	4603      	mov	r3, r0
 8010716:	e011      	b.n	801073c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010720:	4619      	mov	r1, r3
 8010722:	78fb      	ldrb	r3, [r7, #3]
 8010724:	4a07      	ldr	r2, [pc, #28]	; (8010744 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8010726:	4413      	add	r3, r2
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	fa21 f303 	lsr.w	r3, r1, r3
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	2b00      	cmp	r3, #0
 8010734:	bf14      	ite	ne
 8010736:	2301      	movne	r3, #1
 8010738:	2300      	moveq	r3, #0
 801073a:	b2db      	uxtb	r3, r3
}
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	080129a0 	.word	0x080129a0

08010748 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	460b      	mov	r3, r1
 8010752:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	4a1b      	ldr	r2, [pc, #108]	; (80107c4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8010758:	4413      	add	r3, r2
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	2301      	movs	r3, #1
 8010760:	4093      	lsls	r3, r2
 8010762:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801076a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801076e:	021b      	lsls	r3, r3, #8
 8010770:	4313      	orrs	r3, r2
 8010772:	461a      	mov	r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	4013      	ands	r3, r2
 8010778:	2b00      	cmp	r3, #0
 801077a:	bf14      	ite	ne
 801077c:	2301      	movne	r3, #1
 801077e:	2300      	moveq	r3, #0
 8010780:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801078c:	021b      	lsls	r3, r3, #8
 801078e:	4313      	orrs	r3, r2
 8010790:	461a      	mov	r2, r3
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	43db      	mvns	r3, r3
 8010796:	4013      	ands	r3, r2
 8010798:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	b2d1      	uxtb	r1, r2
 80107a0:	2000      	movs	r0, #0
 80107a2:	4301      	orrs	r1, r0
 80107a4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80107a8:	0a12      	lsrs	r2, r2, #8
 80107aa:	b292      	uxth	r2, r2
 80107ac:	2100      	movs	r1, #0
 80107ae:	430a      	orrs	r2, r1
 80107b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 80107b4:	7afb      	ldrb	r3, [r7, #11]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3714      	adds	r7, #20
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	080129a0 	.word	0x080129a0

080107c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	460b      	mov	r3, r1
 80107d2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80107d4:	78fb      	ldrb	r3, [r7, #3]
 80107d6:	2b08      	cmp	r3, #8
 80107d8:	d102      	bne.n	80107e0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	7adb      	ldrb	r3, [r3, #11]
 80107de:	e006      	b.n	80107ee <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80107e0:	78fb      	ldrb	r3, [r7, #3]
 80107e2:	2b09      	cmp	r3, #9
 80107e4:	d102      	bne.n	80107ec <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7b1b      	ldrb	r3, [r3, #12]
 80107ea:	e000      	b.n	80107ee <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	460b      	mov	r3, r1
 8010804:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	4413      	add	r3, r2
 801080c:	791b      	ldrb	r3, [r3, #4]
}
 801080e:	4618      	mov	r0, r3
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 801081a:	b580      	push	{r7, lr}
 801081c:	b086      	sub	sp, #24
 801081e:	af00      	add	r7, sp, #0
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	460b      	mov	r3, r1
 8010824:	607a      	str	r2, [r7, #4]
 8010826:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8010828:	7afb      	ldrb	r3, [r7, #11]
 801082a:	2b01      	cmp	r3, #1
 801082c:	f240 80a6 	bls.w	801097c <_ZN9PS4Parser5ParseEhPh+0x162>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 80a2 	beq.w	801097c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d10e      	bne.n	801085e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	1d18      	adds	r0, r3, #4
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	1c59      	adds	r1, r3, #1
 8010848:	7afb      	ldrb	r3, [r7, #11]
 801084a:	3b01      	subs	r3, #1
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b3c      	cmp	r3, #60	; 0x3c
 8010850:	bf28      	it	cs
 8010852:	233c      	movcs	r3, #60	; 0x3c
 8010854:	b2db      	uxtb	r3, r3
 8010856:	461a      	mov	r2, r3
 8010858:	f001 fe56 	bl	8012508 <memcpy>
 801085c:	e016      	b.n	801088c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	2b11      	cmp	r3, #17
 8010864:	f040 8098 	bne.w	8010998 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	2b03      	cmp	r3, #3
 801086c:	f240 8096 	bls.w	801099c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	1d18      	adds	r0, r3, #4
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	1cd9      	adds	r1, r3, #3
 8010878:	7afb      	ldrb	r3, [r7, #11]
 801087a:	3b03      	subs	r3, #3
 801087c:	b2db      	uxtb	r3, r3
 801087e:	2b3c      	cmp	r3, #60	; 0x3c
 8010880:	bf28      	it	cs
 8010882:	233c      	movcs	r3, #60	; 0x3c
 8010884:	b2db      	uxtb	r3, r3
 8010886:	461a      	mov	r2, r3
 8010888:	f001 fe3e 	bl	8012508 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010898:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801089c:	429a      	cmp	r2, r3
 801089e:	d06d      	beq.n	801097c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80108a8:	461a      	mov	r2, r3
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ae:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80108b2:	43db      	mvns	r3, r3
 80108b4:	4013      	ands	r3, r2
 80108b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	b2d1      	uxtb	r1, r2
 80108be:	2000      	movs	r0, #0
 80108c0:	4301      	orrs	r1, r0
 80108c2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80108c6:	0a12      	lsrs	r2, r2, #8
 80108c8:	b292      	uxth	r2, r2
 80108ca:	2100      	movs	r1, #0
 80108cc:	430a      	orrs	r2, r1
 80108ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80108de:	f361 0317 	bfi	r3, r1, #0, #24
 80108e2:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80108e4:	2300      	movs	r3, #0
 80108e6:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80108e8:	2100      	movs	r1, #0
 80108ea:	68f8      	ldr	r0, [r7, #12]
 80108ec:	f7ff fe84 	bl	80105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	f043 0301 	orr.w	r3, r3, #1
 80108fc:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80108fe:	2101      	movs	r1, #1
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f7ff fe79 	bl	80105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d003      	beq.n	8010914 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 801090c:	7dfb      	ldrb	r3, [r7, #23]
 801090e:	f043 0302 	orr.w	r3, r3, #2
 8010912:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8010914:	2102      	movs	r1, #2
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f7ff fe6e 	bl	80105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d003      	beq.n	801092a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8010922:	7dfb      	ldrb	r3, [r7, #23]
 8010924:	f043 0304 	orr.w	r3, r3, #4
 8010928:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 801092a:	2103      	movs	r1, #3
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f7ff fe63 	bl	80105f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d003      	beq.n	8010940 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8010938:	7dfb      	ldrb	r3, [r7, #23]
 801093a:	f043 0308 	orr.w	r3, r3, #8
 801093e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010946:	7dfa      	ldrb	r2, [r7, #23]
 8010948:	429a      	cmp	r2, r3
 801094a:	d017      	beq.n	801097c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010952:	b25b      	sxtb	r3, r3
 8010954:	43db      	mvns	r3, r3
 8010956:	b25a      	sxtb	r2, r3
 8010958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801095c:	4013      	ands	r3, r2
 801095e:	b25b      	sxtb	r3, r3
 8010960:	f003 030f 	and.w	r3, r3, #15
 8010964:	b2d9      	uxtb	r1, r3
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 801096c:	f361 0303 	bfi	r3, r1, #0, #4
 8010970:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	7dfa      	ldrb	r2, [r7, #23]
 8010978:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00b      	beq.n	801099e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	3246      	adds	r2, #70	; 0x46
 8010990:	4611      	mov	r1, r2
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	4798      	blx	r3
 8010996:	e002      	b.n	801099e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010998:	bf00      	nop
 801099a:	e000      	b.n	801099e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801099c:	bf00      	nop
}
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80109ac:	2300      	movs	r3, #0
 80109ae:	73fb      	strb	r3, [r7, #15]
 80109b0:	7bfb      	ldrb	r3, [r7, #15]
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d808      	bhi.n	80109c8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 80109b6:	7bfb      	ldrb	r3, [r7, #15]
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	4413      	add	r3, r2
 80109bc:	227f      	movs	r2, #127	; 0x7f
 80109be:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
 80109c2:	3301      	adds	r3, #1
 80109c4:	73fb      	strb	r3, [r7, #15]
 80109c6:	e7f3      	b.n	80109b0 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	6893      	ldr	r3, [r2, #8]
 80109cc:	f36f 0317 	bfc	r3, #0, #24
 80109d0:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80109d6:	f36f 0317 	bfc	r3, #0, #24
 80109da:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80109dc:	2300      	movs	r3, #0
 80109de:	73fb      	strb	r3, [r7, #15]
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d808      	bhi.n	80109f8 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	4413      	add	r3, r2
 80109ec:	2200      	movs	r2, #0
 80109ee:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	3301      	adds	r3, #1
 80109f4:	73fb      	strb	r3, [r7, #15]
 80109f6:	e7f3      	b.n	80109e0 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80109f8:	2300      	movs	r3, #0
 80109fa:	73fb      	strb	r3, [r7, #15]
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d81b      	bhi.n	8010a3a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010a02:	2300      	movs	r3, #0
 8010a04:	73bb      	strb	r3, [r7, #14]
 8010a06:	7bbb      	ldrb	r3, [r7, #14]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d812      	bhi.n	8010a32 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8010a0c:	7bfa      	ldrb	r2, [r7, #15]
 8010a0e:	7bbb      	ldrb	r3, [r7, #14]
 8010a10:	6879      	ldr	r1, [r7, #4]
 8010a12:	0098      	lsls	r0, r3, #2
 8010a14:	4613      	mov	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	4413      	add	r3, r2
 8010a1a:	4403      	add	r3, r0
 8010a1c:	440b      	add	r3, r1
 8010a1e:	f103 0220 	add.w	r2, r3, #32
 8010a22:	7993      	ldrb	r3, [r2, #6]
 8010a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a28:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	73bb      	strb	r3, [r7, #14]
 8010a30:	e7e9      	b.n	8010a06 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	3301      	adds	r3, #1
 8010a36:	73fb      	strb	r3, [r7, #15]
 8010a38:	e7e0      	b.n	80109fc <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	7a13      	ldrb	r3, [r2, #8]
 8010a3e:	2108      	movs	r1, #8
 8010a40:	f361 0303 	bfi	r3, r1, #0, #4
 8010a44:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8010a4c:	2108      	movs	r1, #8
 8010a4e:	f361 0303 	bfi	r3, r1, #0, #4
 8010a52:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8010a5c:	f36f 0303 	bfc	r3, #0, #4
 8010a60:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010abc:	bf00      	nop
 8010abe:	3714      	adds	r7, #20
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	2180      	movs	r1, #128	; 0x80
 8010ace:	4803      	ldr	r0, [pc, #12]	; (8010adc <_ZN2P95IsSetEv+0x14>)
 8010ad0:	f7f1 fc70 	bl	80023b4 <HAL_GPIO_ReadPin>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	40020800 	.word	0x40020800

08010ae0 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f001 f9bb 	bl	8011e64 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f001 f9d3 	bl	8011e9c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010afe:	4b05      	ldr	r3, [pc, #20]	; (8010b14 <_ZN3USBC1Ev+0x34>)
 8010b00:	2211      	movs	r2, #17
 8010b02:	701a      	strb	r2, [r3, #0]
        init();
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 f807 	bl	8010b18 <_ZN3USB4initEv>
}
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	20004f81 	.word	0x20004f81

08010b18 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	70fb      	strb	r3, [r7, #3]
 8010b40:	4613      	mov	r3, r2
 8010b42:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	78fa      	ldrb	r2, [r7, #3]
 8010b48:	4611      	mov	r1, r2
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f001 f9e0 	bl	8011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b50:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d003      	beq.n	8010b60 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d101      	bne.n	8010b64 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e018      	b.n	8010b96 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	74fb      	strb	r3, [r7, #19]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	795b      	ldrb	r3, [r3, #5]
 8010b72:	7cfa      	ldrb	r2, [r7, #19]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d20d      	bcs.n	8010b94 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	78ba      	ldrb	r2, [r7, #2]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d101      	bne.n	8010b86 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	e007      	b.n	8010b96 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	3303      	adds	r3, #3
 8010b8a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b8c:	7cfb      	ldrb	r3, [r7, #19]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	74fb      	strb	r3, [r7, #19]
 8010b92:	e7ec      	b.n	8010b6e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b086      	sub	sp, #24
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	60f8      	str	r0, [r7, #12]
 8010ba6:	607b      	str	r3, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	72fb      	strb	r3, [r7, #11]
 8010bac:	4613      	mov	r3, r2
 8010bae:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010bb6:	23d8      	movs	r3, #216	; 0xd8
 8010bb8:	e015      	b.n	8010be6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	7afa      	ldrb	r2, [r7, #11]
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f001 f9a5 	bl	8011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010bc6:	6178      	str	r0, [r7, #20]

        if(!p)
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010bce:	23d6      	movs	r3, #214	; 0xd6
 8010bd0:	e009      	b.n	8010be6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	7afa      	ldrb	r2, [r7, #11]
 8010bd6:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	7aba      	ldrb	r2, [r7, #10]
 8010be2:	715a      	strb	r2, [r3, #5]

        return 0;
 8010be4:	2300      	movs	r3, #0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3718      	adds	r7, #24
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b086      	sub	sp, #24
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	60f8      	str	r0, [r7, #12]
 8010bf6:	607b      	str	r3, [r7, #4]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	72fb      	strb	r3, [r7, #11]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	7afa      	ldrb	r2, [r7, #11]
 8010c04:	4611      	mov	r1, r2
 8010c06:	4618      	mov	r0, r3
 8010c08:	f001 f982 	bl	8011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010c0c:	6178      	str	r0, [r7, #20]

        if(!p)
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d101      	bne.n	8010c18 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010c14:	23d6      	movs	r3, #214	; 0xd6
 8010c16:	e04e      	b.n	8010cb6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d101      	bne.n	8010c24 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010c20:	23d7      	movs	r3, #215	; 0xd7
 8010c22:	e048      	b.n	8010cb6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010c24:	7aba      	ldrb	r2, [r7, #10]
 8010c26:	7afb      	ldrb	r3, [r7, #11]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f7ff ff82 	bl	8010b34 <_ZN3USB14getEpInfoEntryEhh>
 8010c30:	4602      	mov	r2, r0
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d101      	bne.n	8010c42 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010c3e:	23db      	movs	r3, #219	; 0xdb
 8010c40:	e039      	b.n	8010cb6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	789b      	ldrb	r3, [r3, #2]
 8010c48:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	2b0f      	cmp	r3, #15
 8010c50:	bf28      	it	cs
 8010c52:	230f      	movcs	r3, #15
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	461a      	mov	r2, r3
 8010c58:	2301      	movs	r3, #1
 8010c5a:	4093      	lsls	r3, r2
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	6a3b      	ldr	r3, [r7, #32]
 8010c60:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010c62:	6a3b      	ldr	r3, [r7, #32]
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	6a3b      	ldr	r3, [r7, #32]
 8010c6c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010c6e:	7afb      	ldrb	r3, [r7, #11]
 8010c70:	461a      	mov	r2, r3
 8010c72:	21e0      	movs	r1, #224	; 0xe0
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f7f0 fdd3 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010c7a:	21d8      	movs	r1, #216	; 0xd8
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f7f0 fe21 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c82:	4603      	mov	r3, r0
 8010c84:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	799b      	ldrb	r3, [r3, #6]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d009      	beq.n	8010ca2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010c94:	7cfb      	ldrb	r3, [r7, #19]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	f043 0302 	orr.w	r3, r3, #2
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	e003      	b.n	8010caa <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010ca2:	7cfb      	ldrb	r3, [r7, #19]
 8010ca4:	f023 0306 	bic.w	r3, r3, #6
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	461a      	mov	r2, r3
 8010cac:	21d8      	movs	r1, #216	; 0xd8
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f7f0 fdb6 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010cbe:	b590      	push	{r4, r7, lr}
 8010cc0:	b08b      	sub	sp, #44	; 0x2c
 8010cc2:	af02      	add	r7, sp, #8
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	4608      	mov	r0, r1
 8010cc8:	4611      	mov	r1, r2
 8010cca:	461a      	mov	r2, r3
 8010ccc:	4603      	mov	r3, r0
 8010cce:	70fb      	strb	r3, [r7, #3]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70bb      	strb	r3, [r7, #2]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010cd8:	2300      	movs	r3, #0
 8010cda:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010ce4:	f107 000c 	add.w	r0, r7, #12
 8010ce8:	78ba      	ldrb	r2, [r7, #2]
 8010cea:	78f9      	ldrb	r1, [r7, #3]
 8010cec:	f107 030a 	add.w	r3, r7, #10
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ff ff7a 	bl	8010bee <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010cfe:	7ffb      	ldrb	r3, [r7, #31]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010d04:	7ffb      	ldrb	r3, [r7, #31]
 8010d06:	e0ae      	b.n	8010e66 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010d08:	787b      	ldrb	r3, [r7, #1]
 8010d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	bfcc      	ite	gt
 8010d12:	2301      	movgt	r3, #1
 8010d14:	2300      	movle	r3, #0
 8010d16:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010d18:	787b      	ldrb	r3, [r7, #1]
 8010d1a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010d1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010d20:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010d22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010d26:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010d28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d2c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010d2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d30:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010d32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d36:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010d38:	f107 0310 	add.w	r3, r7, #16
 8010d3c:	2208      	movs	r2, #8
 8010d3e:	2120      	movs	r1, #32
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f001 f90b 	bl	8011f5c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010d46:	897b      	ldrh	r3, [r7, #10]
 8010d48:	78ba      	ldrb	r2, [r7, #2]
 8010d4a:	2110      	movs	r1, #16
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 faf2 	bl	8011336 <_ZN3USB11dispatchPktEhht>
 8010d52:	4603      	mov	r3, r0
 8010d54:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010d56:	7ffb      	ldrb	r3, [r7, #31]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010d5c:	7ffb      	ldrb	r3, [r7, #31]
 8010d5e:	e082      	b.n	8010e66 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d072      	beq.n	8010e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010d66:	7efb      	ldrb	r3, [r7, #27]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d057      	beq.n	8010e1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d70:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	7893      	ldrb	r3, [r2, #2]
 8010d76:	f043 0302 	orr.w	r3, r3, #2
 8010d7a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010d7c:	8bbb      	ldrh	r3, [r7, #28]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d05f      	beq.n	8010e42 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010d82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d86:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010d88:	68f9      	ldr	r1, [r7, #12]
 8010d8a:	897a      	ldrh	r2, [r7, #10]
 8010d8c:	f107 0008 	add.w	r0, r7, #8
 8010d90:	2300      	movs	r3, #0
 8010d92:	9301      	str	r3, [sp, #4]
 8010d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d96:	9300      	str	r3, [sp, #0]
 8010d98:	4603      	mov	r3, r0
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 f8a6 	bl	8010eec <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010da0:	4603      	mov	r3, r0
 8010da2:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010da4:	7ffb      	ldrb	r3, [r7, #31]
 8010da6:	2b06      	cmp	r3, #6
 8010da8:	d114      	bne.n	8010dd4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010daa:	21f8      	movs	r1, #248	; 0xf8
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7f0 fd89 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010db2:	4603      	mov	r3, r0
 8010db4:	f003 0320 	and.w	r3, r3, #32
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	bf0c      	ite	eq
 8010dbc:	2301      	moveq	r3, #1
 8010dbe:	2300      	movne	r3, #0
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	68fa      	ldr	r2, [r7, #12]
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	b2d9      	uxtb	r1, r3
 8010dca:	7893      	ldrb	r3, [r2, #2]
 8010dcc:	f361 0341 	bfi	r3, r1, #1, #1
 8010dd0:	7093      	strb	r3, [r2, #2]
 8010dd2:	e7d3      	b.n	8010d7c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010dd4:	7ffb      	ldrb	r3, [r7, #31]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d001      	beq.n	8010dde <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010dda:	7ffb      	ldrb	r3, [r7, #31]
 8010ddc:	e043      	b.n	8010e66 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010dde:	7ffb      	ldrb	r3, [r7, #31]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d111      	bne.n	8010e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00e      	beq.n	8010e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681c      	ldr	r4, [r3, #0]
 8010df0:	8939      	ldrh	r1, [r7, #8]
 8010df2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010df6:	8bbb      	ldrh	r3, [r7, #28]
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	833b      	strh	r3, [r7, #24]
 8010dfe:	f107 0318 	add.w	r3, r7, #24
 8010e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010e06:	47a0      	blx	r4

                                left -= read;
 8010e08:	893b      	ldrh	r3, [r7, #8]
 8010e0a:	8bba      	ldrh	r2, [r7, #28]
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010e10:	893b      	ldrh	r3, [r7, #8]
 8010e12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d812      	bhi.n	8010e40 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010e1a:	e7af      	b.n	8010d7c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	7893      	ldrb	r3, [r2, #2]
 8010e20:	f043 0301 	orr.w	r3, r3, #1
 8010e24:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010e26:	68f9      	ldr	r1, [r7, #12]
 8010e28:	897a      	ldrh	r2, [r7, #10]
 8010e2a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4603      	mov	r3, r0
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f000 f953 	bl	80110e0 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	77fb      	strb	r3, [r7, #31]
 8010e3e:	e000      	b.n	8010e42 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010e40:	bf00      	nop
                }
                if(rcode) //return error
 8010e42:	7ffb      	ldrb	r3, [r7, #31]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010e48:	7ffb      	ldrb	r3, [r7, #31]
 8010e4a:	e00c      	b.n	8010e66 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010e4c:	7efb      	ldrb	r3, [r7, #27]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d001      	beq.n	8010e56 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010e52:	21a0      	movs	r1, #160	; 0xa0
 8010e54:	e000      	b.n	8010e58 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010e56:	2180      	movs	r1, #128	; 0x80
 8010e58:	897b      	ldrh	r3, [r7, #10]
 8010e5a:	78ba      	ldrb	r2, [r7, #2]
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 fa6a 	bl	8011336 <_ZN3USB11dispatchPktEhht>
 8010e62:	4603      	mov	r3, r0
 8010e64:	bf00      	nop
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3724      	adds	r7, #36	; 0x24
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd90      	pop	{r4, r7, pc}

08010e6e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b08a      	sub	sp, #40	; 0x28
 8010e72:	af02      	add	r7, sp, #8
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	607b      	str	r3, [r7, #4]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	72fb      	strb	r3, [r7, #11]
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010e80:	2300      	movs	r3, #0
 8010e82:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010e88:	f107 0018 	add.w	r0, r7, #24
 8010e8c:	7aba      	ldrb	r2, [r7, #10]
 8010e8e:	7af9      	ldrb	r1, [r7, #11]
 8010e90:	f107 0316 	add.w	r3, r7, #22
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	4603      	mov	r3, r0
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f7ff fea8 	bl	8010bee <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010ea2:	7ffb      	ldrb	r3, [r7, #31]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d010      	beq.n	8010eca <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010ea8:	7ffb      	ldrb	r3, [r7, #31]
 8010eaa:	2181      	movs	r1, #129	; 0x81
 8010eac:	4618      	mov	r0, r3
 8010eae:	f001 f883 	bl	8011fb8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010eb2:	7afb      	ldrb	r3, [r7, #11]
 8010eb4:	2181      	movs	r1, #129	; 0x81
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f001 f87e 	bl	8011fb8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010ebc:	7abb      	ldrb	r3, [r7, #10]
 8010ebe:	2181      	movs	r1, #129	; 0x81
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f001 f879 	bl	8011fb8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010ec6:	7ffb      	ldrb	r3, [r7, #31]
 8010ec8:	e00c      	b.n	8010ee4 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010eca:	69b9      	ldr	r1, [r7, #24]
 8010ecc:	8afa      	ldrh	r2, [r7, #22]
 8010ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ed2:	9301      	str	r3, [sp, #4]
 8010ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f000 f806 	bl	8010eec <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	bf00      	nop
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3720      	adds	r7, #32
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	785b      	ldrb	r3, [r3, #1]
 8010f0a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	789b      	ldrb	r3, [r3, #2]
 8010f16:	f003 0302 	and.w	r3, r3, #2
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010f20:	2320      	movs	r3, #32
 8010f22:	e000      	b.n	8010f26 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010f24:	2310      	movs	r3, #16
 8010f26:	461a      	mov	r2, r3
 8010f28:	21e8      	movs	r1, #232	; 0xe8
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f7f0 fc78 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	781a      	ldrb	r2, [r3, #0]
 8010f34:	88fb      	ldrh	r3, [r7, #6]
 8010f36:	2100      	movs	r1, #0
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f000 f9fc 	bl	8011336 <_ZN3USB11dispatchPktEhht>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010f42:	7dfb      	ldrb	r3, [r7, #23]
 8010f44:	2b06      	cmp	r3, #6
 8010f46:	d123      	bne.n	8010f90 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010f48:	21f8      	movs	r1, #248	; 0xf8
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7f0 fcba 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f50:	4603      	mov	r3, r0
 8010f52:	f003 0310 	and.w	r3, r3, #16
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	bf0c      	ite	eq
 8010f5a:	2301      	moveq	r3, #1
 8010f5c:	2300      	movne	r3, #0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	b2d9      	uxtb	r1, r3
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	7893      	ldrb	r3, [r2, #2]
 8010f6a:	f361 0341 	bfi	r3, r1, #1, #1
 8010f6e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	789b      	ldrb	r3, [r3, #2]
 8010f74:	f003 0302 	and.w	r3, r3, #2
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d001      	beq.n	8010f82 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010f7e:	2320      	movs	r3, #32
 8010f80:	e000      	b.n	8010f84 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010f82:	2310      	movs	r3, #16
 8010f84:	461a      	mov	r2, r3
 8010f86:	21e8      	movs	r1, #232	; 0xe8
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7f0 fc49 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010f8e:	e06e      	b.n	801106e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d16c      	bne.n	8011070 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010f96:	21c8      	movs	r1, #200	; 0xc8
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7f0 fc93 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f003 0304 	and.w	r3, r3, #4
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2301      	moveq	r3, #1
 8010faa:	2300      	movne	r3, #0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d002      	beq.n	8010fb8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010fb2:	23f0      	movs	r3, #240	; 0xf0
 8010fb4:	75fb      	strb	r3, [r7, #23]
                        break;
 8010fb6:	e05c      	b.n	8011072 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010fb8:	2130      	movs	r1, #48	; 0x30
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f7f0 fc82 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010fc4:	7dba      	ldrb	r2, [r7, #22]
 8010fc6:	8a7b      	ldrh	r3, [r7, #18]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	dd01      	ble.n	8010fd0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010fcc:	8a7b      	ldrh	r3, [r7, #18]
 8010fce:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	8a7a      	ldrh	r2, [r7, #18]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010fe0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	da01      	bge.n	8010fec <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010fec:	7dba      	ldrb	r2, [r7, #22]
 8010fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	bfa8      	it	ge
 8010ff6:	4613      	movge	r3, r2
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	2108      	movs	r1, #8
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f000 ffe6 	bl	8011fd0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8011004:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8011006:	2204      	movs	r2, #4
 8011008:	21c8      	movs	r1, #200	; 0xc8
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f7f0 fc08 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	881a      	ldrh	r2, [r3, #0]
 8011014:	7dbb      	ldrb	r3, [r7, #22]
 8011016:	b29b      	uxth	r3, r3
 8011018:	4413      	add	r3, r2
 801101a:	b29a      	uxth	r2, r3
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8011020:	7dba      	ldrb	r2, [r7, #22]
 8011022:	7c7b      	ldrb	r3, [r7, #17]
 8011024:	429a      	cmp	r2, r3
 8011026:	d304      	bcc.n	8011032 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	8a7a      	ldrh	r2, [r7, #18]
 801102e:	429a      	cmp	r2, r3
 8011030:	d813      	bhi.n	801105a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8011032:	21f8      	movs	r1, #248	; 0xf8
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f7f0 fc45 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801103a:	4603      	mov	r3, r0
 801103c:	f003 0310 	and.w	r3, r3, #16
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8011044:	2101      	movs	r1, #1
 8011046:	e000      	b.n	801104a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8011048:	2100      	movs	r1, #0
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	7893      	ldrb	r3, [r2, #2]
 801104e:	f361 0341 	bfi	r3, r1, #1, #1
 8011052:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8011054:	2300      	movs	r3, #0
 8011056:	75fb      	strb	r3, [r7, #23]
                        break;
 8011058:	e00b      	b.n	8011072 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801105a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801105e:	2b00      	cmp	r3, #0
 8011060:	f43f af66 	beq.w	8010f30 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8011064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011068:	4618      	mov	r0, r3
 801106a:	f7f0 ff09 	bl	8001e80 <HAL_Delay>
        } //while( 1 )
 801106e:	e75f      	b.n	8010f30 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8011070:	bf00      	nop
        return ( rcode);
 8011072:	7dfb      	ldrb	r3, [r7, #23]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801107c:	b580      	push	{r7, lr}
 801107e:	b088      	sub	sp, #32
 8011080:	af02      	add	r7, sp, #8
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	4608      	mov	r0, r1
 8011086:	4611      	mov	r1, r2
 8011088:	461a      	mov	r2, r3
 801108a:	4603      	mov	r3, r0
 801108c:	70fb      	strb	r3, [r7, #3]
 801108e:	460b      	mov	r3, r1
 8011090:	70bb      	strb	r3, [r7, #2]
 8011092:	4613      	mov	r3, r2
 8011094:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011096:	2300      	movs	r3, #0
 8011098:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801109e:	f107 0010 	add.w	r0, r7, #16
 80110a2:	78ba      	ldrb	r2, [r7, #2]
 80110a4:	78f9      	ldrb	r1, [r7, #3]
 80110a6:	f107 030e 	add.w	r3, r7, #14
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	4603      	mov	r3, r0
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7ff fd9d 	bl	8010bee <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80110b4:	4603      	mov	r3, r0
 80110b6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 80110b8:	7dfb      	ldrb	r3, [r7, #23]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d001      	beq.n	80110c2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 80110be:	7dfb      	ldrb	r3, [r7, #23]
 80110c0:	e00a      	b.n	80110d8 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 80110c2:	6939      	ldr	r1, [r7, #16]
 80110c4:	89fa      	ldrh	r2, [r7, #14]
 80110c6:	8838      	ldrh	r0, [r7, #0]
 80110c8:	6a3b      	ldr	r3, [r7, #32]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	4603      	mov	r3, r0
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f000 f806 	bl	80110e0 <_ZN3USB11OutTransferEP6EpInfottPh>
 80110d4:	4603      	mov	r3, r0
 80110d6:	bf00      	nop
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3718      	adds	r7, #24
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b08a      	sub	sp, #40	; 0x28
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	4611      	mov	r1, r2
 80110ec:	461a      	mov	r2, r3
 80110ee:	460b      	mov	r3, r1
 80110f0:	80fb      	strh	r3, [r7, #6]
 80110f2:	4613      	mov	r3, r2
 80110f4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 80110f6:	2300      	movs	r3, #0
 80110f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 80110fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fe:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8011100:	88bb      	ldrh	r3, [r7, #4]
 8011102:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	785b      	ldrb	r3, [r3, #1]
 8011108:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801110a:	7efb      	ldrb	r3, [r7, #27]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d002      	beq.n	8011116 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8011110:	7efb      	ldrb	r3, [r7, #27]
 8011112:	2b40      	cmp	r3, #64	; 0x40
 8011114:	d901      	bls.n	801111a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8011116:	23da      	movs	r3, #218	; 0xda
 8011118:	e109      	b.n	801132e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801111a:	f7f0 fea5 	bl	8001e68 <HAL_GetTick>
 801111e:	4603      	mov	r3, r0
 8011120:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8011124:	3308      	adds	r3, #8
 8011126:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	789b      	ldrb	r3, [r3, #2]
 801112c:	f003 0301 	and.w	r3, r3, #1
 8011130:	b2db      	uxtb	r3, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8011136:	2380      	movs	r3, #128	; 0x80
 8011138:	e000      	b.n	801113c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801113a:	2340      	movs	r3, #64	; 0x40
 801113c:	461a      	mov	r2, r3
 801113e:	21e8      	movs	r1, #232	; 0xe8
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7f0 fb6d 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8011146:	8bbb      	ldrh	r3, [r7, #28]
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 80da 	beq.w	8011302 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8011158:	7efb      	ldrb	r3, [r7, #27]
 801115a:	b29b      	uxth	r3, r3
 801115c:	8bba      	ldrh	r2, [r7, #28]
 801115e:	4293      	cmp	r3, r2
 8011160:	bf28      	it	cs
 8011162:	4613      	movcs	r3, r2
 8011164:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8011166:	8a7b      	ldrh	r3, [r7, #18]
 8011168:	b2da      	uxtb	r2, r3
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	2110      	movs	r1, #16
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f000 fef4 	bl	8011f5c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8011174:	8a7b      	ldrh	r3, [r7, #18]
 8011176:	b2db      	uxtb	r3, r3
 8011178:	461a      	mov	r2, r3
 801117a:	2138      	movs	r1, #56	; 0x38
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f7f0 fb4f 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	f043 0320 	orr.w	r3, r3, #32
 801118a:	b2db      	uxtb	r3, r3
 801118c:	461a      	mov	r2, r3
 801118e:	21f0      	movs	r1, #240	; 0xf0
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f7f0 fb45 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011196:	21c8      	movs	r1, #200	; 0xc8
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7f0 fb93 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801119e:	4603      	mov	r3, r0
 80111a0:	b25b      	sxtb	r3, r3
 80111a2:	43db      	mvns	r3, r3
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	09db      	lsrs	r3, r3, #7
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d000      	beq.n	80111b0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 80111ae:	e7f2      	b.n	8011196 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80111b0:	2280      	movs	r2, #128	; 0x80
 80111b2:	21c8      	movs	r1, #200	; 0xc8
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7f0 fb33 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 80111ba:	21f8      	movs	r1, #248	; 0xf8
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7f0 fb81 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80111c2:	4603      	mov	r3, r0
 80111c4:	f003 030f 	and.w	r3, r3, #15
 80111c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80111cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d008      	beq.n	80111e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 80111d4:	f7f0 fe48 	bl	8001e68 <HAL_GetTick>
 80111d8:	4602      	mov	r2, r0
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	da01      	bge.n	80111e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e000      	b.n	80111e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 80111e6:	2300      	movs	r3, #0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	f000 8081 	beq.w	80112f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 80111ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f2:	2b0e      	cmp	r3, #14
 80111f4:	d012      	beq.n	801121c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 80111f6:	2b0e      	cmp	r3, #14
 80111f8:	f300 8085 	bgt.w	8011306 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 80111fc:	2b04      	cmp	r3, #4
 80111fe:	d002      	beq.n	8011206 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8011200:	2b06      	cmp	r3, #6
 8011202:	d015      	beq.n	8011230 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8011204:	e07f      	b.n	8011306 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8011206:	8bfb      	ldrh	r3, [r7, #30]
 8011208:	3301      	adds	r3, #1
 801120a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801120c:	88fb      	ldrh	r3, [r7, #6]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d032      	beq.n	8011278 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8011212:	8bfa      	ldrh	r2, [r7, #30]
 8011214:	88fb      	ldrh	r3, [r7, #6]
 8011216:	429a      	cmp	r2, r3
 8011218:	d12e      	bne.n	8011278 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801121a:	e075      	b.n	8011308 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801121c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011220:	3301      	adds	r3, #1
 8011222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8011226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801122a:	2b03      	cmp	r3, #3
 801122c:	d126      	bne.n	801127c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801122e:	e06b      	b.n	8011308 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8011230:	21f8      	movs	r1, #248	; 0xf8
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7f0 fb46 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011238:	4603      	mov	r3, r0
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	bf0c      	ite	eq
 8011242:	2301      	moveq	r3, #1
 8011244:	2300      	movne	r3, #0
 8011246:	b2db      	uxtb	r3, r3
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	b2d9      	uxtb	r1, r3
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	7893      	ldrb	r3, [r2, #2]
 8011252:	f361 0300 	bfi	r3, r1, #0, #1
 8011256:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	789b      	ldrb	r3, [r3, #2]
 801125c:	f003 0301 	and.w	r3, r3, #1
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8011266:	2380      	movs	r3, #128	; 0x80
 8011268:	e000      	b.n	801126c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801126a:	2340      	movs	r3, #64	; 0x40
 801126c:	461a      	mov	r2, r3
 801126e:	21e8      	movs	r1, #232	; 0xe8
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f7f0 fad5 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8011276:	e002      	b.n	801127e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8011278:	bf00      	nop
 801127a:	e000      	b.n	801127e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801127c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801127e:	2200      	movs	r2, #0
 8011280:	2138      	movs	r1, #56	; 0x38
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f7f0 facc 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	461a      	mov	r2, r3
 801128e:	2110      	movs	r1, #16
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f7f0 fac5 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011296:	8a7b      	ldrh	r3, [r7, #18]
 8011298:	b2db      	uxtb	r3, r3
 801129a:	461a      	mov	r2, r3
 801129c:	2138      	movs	r1, #56	; 0x38
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7f0 fabe 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f043 0320 	orr.w	r3, r3, #32
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	461a      	mov	r2, r3
 80112b0:	21f0      	movs	r1, #240	; 0xf0
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7f0 fab4 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80112b8:	21c8      	movs	r1, #200	; 0xc8
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7f0 fb02 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112c0:	4603      	mov	r3, r0
 80112c2:	b25b      	sxtb	r3, r3
 80112c4:	43db      	mvns	r3, r3
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	09db      	lsrs	r3, r3, #7
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d000      	beq.n	80112d2 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 80112d0:	e7f2      	b.n	80112b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80112d2:	2280      	movs	r2, #128	; 0x80
 80112d4:	21c8      	movs	r1, #200	; 0xc8
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f7f0 faa2 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 80112dc:	21f8      	movs	r1, #248	; 0xf8
 80112de:	68f8      	ldr	r0, [r7, #12]
 80112e0:	f7f0 faf0 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112e4:	4603      	mov	r3, r0
 80112e6:	f003 030f 	and.w	r3, r3, #15
 80112ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80112ee:	e76d      	b.n	80111cc <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 80112f0:	8bba      	ldrh	r2, [r7, #28]
 80112f2:	8a7b      	ldrh	r3, [r7, #18]
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 80112f8:	8a7b      	ldrh	r3, [r7, #18]
 80112fa:	6a3a      	ldr	r2, [r7, #32]
 80112fc:	4413      	add	r3, r2
 80112fe:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8011300:	e721      	b.n	8011146 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8011302:	bf00      	nop
 8011304:	e000      	b.n	8011308 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8011306:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8011308:	21f8      	movs	r1, #248	; 0xf8
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f7f0 fada 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011310:	4603      	mov	r3, r0
 8011312:	f003 0320 	and.w	r3, r3, #32
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801131a:	2101      	movs	r1, #1
 801131c:	e000      	b.n	8011320 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801131e:	2100      	movs	r1, #0
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	7893      	ldrb	r3, [r2, #2]
 8011324:	f361 0300 	bfi	r3, r1, #0, #1
 8011328:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801132a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801132e:	4618      	mov	r0, r3
 8011330:	3728      	adds	r7, #40	; 0x28
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8011336:	b580      	push	{r7, lr}
 8011338:	b086      	sub	sp, #24
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
 801133e:	4608      	mov	r0, r1
 8011340:	4611      	mov	r1, r2
 8011342:	461a      	mov	r2, r3
 8011344:	4603      	mov	r3, r0
 8011346:	70fb      	strb	r3, [r7, #3]
 8011348:	460b      	mov	r3, r1
 801134a:	70bb      	strb	r3, [r7, #2]
 801134c:	4613      	mov	r3, r2
 801134e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8011350:	f7f0 fd8a 	bl	8001e68 <HAL_GetTick>
 8011354:	4603      	mov	r3, r0
 8011356:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801135a:	3308      	adds	r3, #8
 801135c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801135e:	2300      	movs	r3, #0
 8011360:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8011366:	2300      	movs	r3, #0
 8011368:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801136a:	f7f0 fd7d 	bl	8001e68 <HAL_GetTick>
 801136e:	4602      	mov	r2, r0
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	0fdb      	lsrs	r3, r3, #31
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b00      	cmp	r3, #0
 801137a:	d04c      	beq.n	8011416 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801137c:	78fa      	ldrb	r2, [r7, #3]
 801137e:	78bb      	ldrb	r3, [r7, #2]
 8011380:	4313      	orrs	r3, r2
 8011382:	b2db      	uxtb	r3, r3
 8011384:	461a      	mov	r2, r3
 8011386:	21f0      	movs	r1, #240	; 0xf0
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f7f0 fa49 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801138e:	23ff      	movs	r3, #255	; 0xff
 8011390:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011392:	f7f0 fd69 	bl	8001e68 <HAL_GetTick>
 8011396:	4602      	mov	r2, r0
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	0fdb      	lsrs	r3, r3, #31
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d010      	beq.n	80113c6 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80113a4:	21c8      	movs	r1, #200	; 0xc8
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7f0 fa8c 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80113ac:	4603      	mov	r3, r0
 80113ae:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80113b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	daec      	bge.n	8011392 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80113b8:	2280      	movs	r2, #128	; 0x80
 80113ba:	21c8      	movs	r1, #200	; 0xc8
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7f0 fa2f 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80113c2:	2300      	movs	r3, #0
 80113c4:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80113c6:	21f8      	movs	r1, #248	; 0xf8
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7f0 fa7b 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80113ce:	4603      	mov	r3, r0
 80113d0:	f003 030f 	and.w	r3, r3, #15
 80113d4:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 80113d6:	7dfb      	ldrb	r3, [r7, #23]
 80113d8:	2b04      	cmp	r3, #4
 80113da:	d002      	beq.n	80113e2 <_ZN3USB11dispatchPktEhht+0xac>
 80113dc:	2b0e      	cmp	r3, #14
 80113de:	d00c      	beq.n	80113fa <_ZN3USB11dispatchPktEhht+0xc4>
 80113e0:	e013      	b.n	801140a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 80113e2:	8abb      	ldrh	r3, [r7, #20]
 80113e4:	3301      	adds	r3, #1
 80113e6:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 80113e8:	883b      	ldrh	r3, [r7, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00f      	beq.n	801140e <_ZN3USB11dispatchPktEhht+0xd8>
 80113ee:	8aba      	ldrh	r2, [r7, #20]
 80113f0:	883b      	ldrh	r3, [r7, #0]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d10b      	bne.n	801140e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 80113f6:	7dfb      	ldrb	r3, [r7, #23]
 80113f8:	e00e      	b.n	8011418 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 80113fa:	7dbb      	ldrb	r3, [r7, #22]
 80113fc:	3301      	adds	r3, #1
 80113fe:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8011400:	7dbb      	ldrb	r3, [r7, #22]
 8011402:	2b03      	cmp	r3, #3
 8011404:	d105      	bne.n	8011412 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8011406:	7dfb      	ldrb	r3, [r7, #23]
 8011408:	e006      	b.n	8011418 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	e004      	b.n	8011418 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801140e:	bf00      	nop
 8011410:	e7ab      	b.n	801136a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8011412:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8011414:	e7a9      	b.n	801136a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8011416:	7dfb      	ldrb	r3, [r7, #23]
}
 8011418:	4618      	mov	r0, r3
 801141a:	3718      	adds	r7, #24
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8011428:	2300      	movs	r3, #0
 801142a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fdfd 	bl	801202c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fe12 	bl	801205c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8011438:	4603      	mov	r3, r0
 801143a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801143c:	7b3b      	ldrb	r3, [r7, #12]
 801143e:	2b03      	cmp	r3, #3
 8011440:	d82e      	bhi.n	80114a0 <_ZN3USB4TaskEv+0x80>
 8011442:	a201      	add	r2, pc, #4	; (adr r2, 8011448 <_ZN3USB4TaskEv+0x28>)
 8011444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011448:	08011465 	.word	0x08011465
 801144c:	08011459 	.word	0x08011459
 8011450:	08011481 	.word	0x08011481
 8011454:	0801147d 	.word	0x0801147d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8011458:	4bbf      	ldr	r3, [pc, #764]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 801145a:	2213      	movs	r2, #19
 801145c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801145e:	2300      	movs	r3, #0
 8011460:	73fb      	strb	r3, [r7, #15]
                        break;
 8011462:	e01d      	b.n	80114a0 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8011464:	4bbc      	ldr	r3, [pc, #752]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801146c:	2b10      	cmp	r3, #16
 801146e:	d002      	beq.n	8011476 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011470:	4bb9      	ldr	r3, [pc, #740]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 8011472:	2211      	movs	r2, #17
 8011474:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011476:	2300      	movs	r3, #0
 8011478:	73fb      	strb	r3, [r7, #15]
                        break;
 801147a:	e011      	b.n	80114a0 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801147c:	2301      	movs	r3, #1
 801147e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011480:	4bb5      	ldr	r3, [pc, #724]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011488:	2b10      	cmp	r3, #16
 801148a:	d108      	bne.n	801149e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801148c:	f7f0 fcec 	bl	8001e68 <HAL_GetTick>
 8011490:	4603      	mov	r3, r0
 8011492:	33c8      	adds	r3, #200	; 0xc8
 8011494:	4ab1      	ldr	r2, [pc, #708]	; (801175c <_ZN3USB4TaskEv+0x33c>)
 8011496:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011498:	4baf      	ldr	r3, [pc, #700]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 801149a:	2220      	movs	r2, #32
 801149c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801149e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80114a0:	2300      	movs	r3, #0
 80114a2:	73bb      	strb	r3, [r7, #14]
 80114a4:	7bbb      	ldrb	r3, [r7, #14]
 80114a6:	2b0f      	cmp	r3, #15
 80114a8:	d81b      	bhi.n	80114e2 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80114aa:	7bba      	ldrb	r2, [r7, #14]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	321e      	adds	r2, #30
 80114b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d010      	beq.n	80114da <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80114b8:	7bba      	ldrb	r2, [r7, #14]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	321e      	adds	r2, #30
 80114be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114c2:	7bba      	ldrb	r2, [r7, #14]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	321e      	adds	r2, #30
 80114c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	330c      	adds	r3, #12
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4608      	mov	r0, r1
 80114d4:	4798      	blx	r3
 80114d6:	4603      	mov	r3, r0
 80114d8:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80114da:	7bbb      	ldrb	r3, [r7, #14]
 80114dc:	3301      	adds	r3, #1
 80114de:	73bb      	strb	r3, [r7, #14]
 80114e0:	e7e0      	b.n	80114a4 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 80114e2:	4b9d      	ldr	r3, [pc, #628]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	2ba0      	cmp	r3, #160	; 0xa0
 80114e8:	f000 8123 	beq.w	8011732 <_ZN3USB4TaskEv+0x312>
 80114ec:	2ba0      	cmp	r3, #160	; 0xa0
 80114ee:	f300 812f 	bgt.w	8011750 <_ZN3USB4TaskEv+0x330>
 80114f2:	2b90      	cmp	r3, #144	; 0x90
 80114f4:	f000 811f 	beq.w	8011736 <_ZN3USB4TaskEv+0x316>
 80114f8:	2b90      	cmp	r3, #144	; 0x90
 80114fa:	f300 8129 	bgt.w	8011750 <_ZN3USB4TaskEv+0x330>
 80114fe:	2b80      	cmp	r3, #128	; 0x80
 8011500:	f000 80fe 	beq.w	8011700 <_ZN3USB4TaskEv+0x2e0>
 8011504:	2b80      	cmp	r3, #128	; 0x80
 8011506:	f300 8123 	bgt.w	8011750 <_ZN3USB4TaskEv+0x330>
 801150a:	2b51      	cmp	r3, #81	; 0x51
 801150c:	f000 80ea 	beq.w	80116e4 <_ZN3USB4TaskEv+0x2c4>
 8011510:	2b51      	cmp	r3, #81	; 0x51
 8011512:	f300 811d 	bgt.w	8011750 <_ZN3USB4TaskEv+0x330>
 8011516:	2b40      	cmp	r3, #64	; 0x40
 8011518:	dc6a      	bgt.n	80115f0 <_ZN3USB4TaskEv+0x1d0>
 801151a:	2b11      	cmp	r3, #17
 801151c:	f2c0 8118 	blt.w	8011750 <_ZN3USB4TaskEv+0x330>
 8011520:	3b11      	subs	r3, #17
 8011522:	2b2f      	cmp	r3, #47	; 0x2f
 8011524:	f200 8114 	bhi.w	8011750 <_ZN3USB4TaskEv+0x330>
 8011528:	a201      	add	r2, pc, #4	; (adr r2, 8011530 <_ZN3USB4TaskEv+0x110>)
 801152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801152e:	bf00      	nop
 8011530:	080115f7 	.word	0x080115f7
 8011534:	0801173b 	.word	0x0801173b
 8011538:	0801173b 	.word	0x0801173b
 801153c:	08011751 	.word	0x08011751
 8011540:	08011751 	.word	0x08011751
 8011544:	08011751 	.word	0x08011751
 8011548:	08011751 	.word	0x08011751
 801154c:	08011751 	.word	0x08011751
 8011550:	08011751 	.word	0x08011751
 8011554:	08011751 	.word	0x08011751
 8011558:	08011751 	.word	0x08011751
 801155c:	08011751 	.word	0x08011751
 8011560:	08011751 	.word	0x08011751
 8011564:	08011751 	.word	0x08011751
 8011568:	08011751 	.word	0x08011751
 801156c:	08011647 	.word	0x08011647
 8011570:	08011751 	.word	0x08011751
 8011574:	08011751 	.word	0x08011751
 8011578:	08011751 	.word	0x08011751
 801157c:	08011751 	.word	0x08011751
 8011580:	08011751 	.word	0x08011751
 8011584:	08011751 	.word	0x08011751
 8011588:	08011751 	.word	0x08011751
 801158c:	08011751 	.word	0x08011751
 8011590:	08011751 	.word	0x08011751
 8011594:	08011751 	.word	0x08011751
 8011598:	08011751 	.word	0x08011751
 801159c:	08011751 	.word	0x08011751
 80115a0:	08011751 	.word	0x08011751
 80115a4:	08011751 	.word	0x08011751
 80115a8:	08011751 	.word	0x08011751
 80115ac:	08011663 	.word	0x08011663
 80115b0:	08011751 	.word	0x08011751
 80115b4:	08011751 	.word	0x08011751
 80115b8:	08011751 	.word	0x08011751
 80115bc:	08011751 	.word	0x08011751
 80115c0:	08011751 	.word	0x08011751
 80115c4:	08011751 	.word	0x08011751
 80115c8:	08011751 	.word	0x08011751
 80115cc:	08011751 	.word	0x08011751
 80115d0:	08011751 	.word	0x08011751
 80115d4:	08011751 	.word	0x08011751
 80115d8:	08011751 	.word	0x08011751
 80115dc:	08011751 	.word	0x08011751
 80115e0:	08011751 	.word	0x08011751
 80115e4:	08011751 	.word	0x08011751
 80115e8:	08011751 	.word	0x08011751
 80115ec:	08011675 	.word	0x08011675
 80115f0:	2b50      	cmp	r3, #80	; 0x50
 80115f2:	d05f      	beq.n	80116b4 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 80115f4:	e0ac      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        init();
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7ff fa8e 	bl	8010b18 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80115fc:	2300      	movs	r3, #0
 80115fe:	737b      	strb	r3, [r7, #13]
 8011600:	7b7b      	ldrb	r3, [r7, #13]
 8011602:	2b0f      	cmp	r3, #15
 8011604:	d81b      	bhi.n	801163e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8011606:	7b7a      	ldrb	r2, [r7, #13]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	321e      	adds	r2, #30
 801160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d010      	beq.n	8011636 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8011614:	7b7a      	ldrb	r2, [r7, #13]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	321e      	adds	r2, #30
 801161a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801161e:	7b7a      	ldrb	r2, [r7, #13]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	321e      	adds	r2, #30
 8011624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	3308      	adds	r3, #8
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	4608      	mov	r0, r1
 8011630:	4798      	blx	r3
 8011632:	4603      	mov	r3, r0
 8011634:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011636:	7b7b      	ldrb	r3, [r7, #13]
 8011638:	3301      	adds	r3, #1
 801163a:	737b      	strb	r3, [r7, #13]
 801163c:	e7e0      	b.n	8011600 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801163e:	4b46      	ldr	r3, [pc, #280]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 8011640:	2212      	movs	r2, #18
 8011642:	701a      	strb	r2, [r3, #0]
                        break;
 8011644:	e084      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8011646:	f7f0 fc0f 	bl	8001e68 <HAL_GetTick>
 801164a:	4602      	mov	r2, r0
 801164c:	4b43      	ldr	r3, [pc, #268]	; (801175c <_ZN3USB4TaskEv+0x33c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	43db      	mvns	r3, r3
 8011654:	0fdb      	lsrs	r3, r3, #31
 8011656:	b2db      	uxtb	r3, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d070      	beq.n	801173e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801165c:	4b3e      	ldr	r3, [pc, #248]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 801165e:	2230      	movs	r2, #48	; 0x30
 8011660:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011662:	2201      	movs	r2, #1
 8011664:	21e8      	movs	r1, #232	; 0xe8
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7f0 f8da 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801166c:	4b3a      	ldr	r3, [pc, #232]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 801166e:	2240      	movs	r2, #64	; 0x40
 8011670:	701a      	strb	r2, [r3, #0]
                        break;
 8011672:	e06d      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011674:	21e8      	movs	r1, #232	; 0xe8
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7f0 f924 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801167c:	4603      	mov	r3, r0
 801167e:	f003 0301 	and.w	r3, r3, #1
 8011682:	2b00      	cmp	r3, #0
 8011684:	bf0c      	ite	eq
 8011686:	2301      	moveq	r3, #1
 8011688:	2300      	movne	r3, #0
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d058      	beq.n	8011742 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011690:	21d8      	movs	r1, #216	; 0xd8
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7f0 f916 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011698:	4603      	mov	r3, r0
 801169a:	f043 0308 	orr.w	r3, r3, #8
 801169e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 80116a0:	7b3b      	ldrb	r3, [r7, #12]
 80116a2:	461a      	mov	r2, r3
 80116a4:	21d8      	movs	r1, #216	; 0xd8
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7f0 f8ba 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80116ac:	4b2a      	ldr	r3, [pc, #168]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 80116ae:	2250      	movs	r2, #80	; 0x50
 80116b0:	701a      	strb	r2, [r3, #0]
                        break;
 80116b2:	e046      	b.n	8011742 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80116b4:	21c8      	movs	r1, #200	; 0xc8
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7f0 f904 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80116bc:	4603      	mov	r3, r0
 80116be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	bf14      	ite	ne
 80116c6:	2301      	movne	r3, #1
 80116c8:	2300      	moveq	r3, #0
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d03a      	beq.n	8011746 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 80116d0:	4b21      	ldr	r3, [pc, #132]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 80116d2:	2251      	movs	r2, #81	; 0x51
 80116d4:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 80116d6:	f7f0 fbc7 	bl	8001e68 <HAL_GetTick>
 80116da:	4603      	mov	r3, r0
 80116dc:	3314      	adds	r3, #20
 80116de:	4a1f      	ldr	r2, [pc, #124]	; (801175c <_ZN3USB4TaskEv+0x33c>)
 80116e0:	6013      	str	r3, [r2, #0]
                        break;
 80116e2:	e030      	b.n	8011746 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 80116e4:	f7f0 fbc0 	bl	8001e68 <HAL_GetTick>
 80116e8:	4602      	mov	r2, r0
 80116ea:	4b1c      	ldr	r3, [pc, #112]	; (801175c <_ZN3USB4TaskEv+0x33c>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	43db      	mvns	r3, r3
 80116f2:	0fdb      	lsrs	r3, r3, #31
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d027      	beq.n	801174a <_ZN3USB4TaskEv+0x32a>
 80116fa:	4b17      	ldr	r3, [pc, #92]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 80116fc:	2280      	movs	r2, #128	; 0x80
 80116fe:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8011700:	7bfb      	ldrb	r3, [r7, #15]
 8011702:	2200      	movs	r2, #0
 8011704:	2100      	movs	r1, #0
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 f920 	bl	801194c <_ZN3USB11ConfiguringEhhb>
 801170c:	4603      	mov	r3, r0
 801170e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8011710:	7afb      	ldrb	r3, [r7, #11]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d009      	beq.n	801172a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8011716:	7afb      	ldrb	r3, [r7, #11]
 8011718:	2bd2      	cmp	r3, #210	; 0xd2
 801171a:	d018      	beq.n	801174e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801171c:	4a10      	ldr	r2, [pc, #64]	; (8011760 <_ZN3USB4TaskEv+0x340>)
 801171e:	7afb      	ldrb	r3, [r7, #11]
 8011720:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8011722:	4b0d      	ldr	r3, [pc, #52]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 8011724:	22a0      	movs	r2, #160	; 0xa0
 8011726:	701a      	strb	r2, [r3, #0]
                        break;
 8011728:	e011      	b.n	801174e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801172a:	4b0b      	ldr	r3, [pc, #44]	; (8011758 <_ZN3USB4TaskEv+0x338>)
 801172c:	2290      	movs	r2, #144	; 0x90
 801172e:	701a      	strb	r2, [r3, #0]
                        break;
 8011730:	e00d      	b.n	801174e <_ZN3USB4TaskEv+0x32e>
                        break;
 8011732:	bf00      	nop
 8011734:	e00c      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        break;
 8011736:	bf00      	nop
 8011738:	e00a      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        break;
 801173a:	bf00      	nop
 801173c:	e008      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801173e:	bf00      	nop
 8011740:	e006      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        break;
 8011742:	bf00      	nop
 8011744:	e004      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        break;
 8011746:	bf00      	nop
 8011748:	e002      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801174a:	bf00      	nop
 801174c:	e000      	b.n	8011750 <_ZN3USB4TaskEv+0x330>
                        break;
 801174e:	bf00      	nop
}
 8011750:	bf00      	nop
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	20004f81 	.word	0x20004f81
 801175c:	20004f84 	.word	0x20004f84
 8011760:	20004f80 	.word	0x20004f80

08011764 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	4608      	mov	r0, r1
 801176e:	4611      	mov	r1, r2
 8011770:	461a      	mov	r2, r3
 8011772:	4603      	mov	r3, r0
 8011774:	70fb      	strb	r3, [r7, #3]
 8011776:	460b      	mov	r3, r1
 8011778:	70bb      	strb	r3, [r7, #2]
 801177a:	4613      	mov	r3, r2
 801177c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801177e:	2300      	movs	r3, #0
 8011780:	617b      	str	r3, [r7, #20]
 8011782:	2300      	movs	r3, #0
 8011784:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2100      	movs	r1, #0
 801178a:	4618      	mov	r0, r3
 801178c:	f000 fbc0 	bl	8011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011790:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d101      	bne.n	801179c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011798:	23d6      	movs	r3, #214	; 0xd6
 801179a:	e03a      	b.n	8011812 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 80117a4:	23d7      	movs	r3, #215	; 0xd7
 80117a6:	e034      	b.n	8011812 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	787a      	ldrb	r2, [r7, #1]
 80117ac:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	78bb      	ldrb	r3, [r7, #2]
 80117b2:	78f9      	ldrb	r1, [r7, #3]
 80117b4:	2200      	movs	r2, #0
 80117b6:	f000 fc5f 	bl	8012078 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 80117ba:	4603      	mov	r3, r0
 80117bc:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 80117be:	7bfb      	ldrb	r3, [r7, #15]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80117c4:	23d4      	movs	r3, #212	; 0xd4
 80117c6:	e024      	b.n	8011812 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7bfa      	ldrb	r2, [r7, #15]
 80117cc:	4611      	mov	r1, r2
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 fb9e 	bl	8011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80117d4:	6138      	str	r0, [r7, #16]

        if(!p)
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d101      	bne.n	80117e0 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80117dc:	23d6      	movs	r3, #214	; 0xd6
 80117de:	e018      	b.n	8011812 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	787a      	ldrb	r2, [r7, #1]
 80117e4:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	2200      	movs	r2, #0
 80117ea:	2100      	movs	r1, #0
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f000 fae3 	bl	8011db8 <_ZN3USB7setAddrEhhh>
 80117f2:	4603      	mov	r3, r0
 80117f4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 80117f6:	7bbb      	ldrb	r3, [r7, #14]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d009      	beq.n	8011810 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	7bfa      	ldrb	r2, [r7, #15]
 8011800:	4611      	mov	r1, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f000 fcd0 	bl	80121a8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 801180c:	7bbb      	ldrb	r3, [r7, #14]
 801180e:	e000      	b.n	8011812 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8011810:	2300      	movs	r3, #0
};
 8011812:	4618      	mov	r0, r3
 8011814:	3718      	adds	r7, #24
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}

0801181a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 801181a:	b590      	push	{r4, r7, lr}
 801181c:	b085      	sub	sp, #20
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
 8011822:	4608      	mov	r0, r1
 8011824:	4611      	mov	r1, r2
 8011826:	461a      	mov	r2, r3
 8011828:	4603      	mov	r3, r0
 801182a:	70fb      	strb	r3, [r7, #3]
 801182c:	460b      	mov	r3, r1
 801182e:	70bb      	strb	r3, [r7, #2]
 8011830:	4613      	mov	r3, r2
 8011832:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8011838:	78fa      	ldrb	r2, [r7, #3]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	321e      	adds	r2, #30
 801183e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	321e      	adds	r2, #30
 8011848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	3304      	adds	r3, #4
 8011850:	681c      	ldr	r4, [r3, #0]
 8011852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011856:	787a      	ldrb	r2, [r7, #1]
 8011858:	78b9      	ldrb	r1, [r7, #2]
 801185a:	47a0      	blx	r4
 801185c:	4603      	mov	r3, r0
 801185e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8011860:	7bbb      	ldrb	r3, [r7, #14]
 8011862:	2be0      	cmp	r3, #224	; 0xe0
 8011864:	d11c      	bne.n	80118a0 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8011866:	78bb      	ldrb	r3, [r7, #2]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d108      	bne.n	801187e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801186c:	2201      	movs	r2, #1
 801186e:	21e8      	movs	r1, #232	; 0xe8
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ef ffd5 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011876:	2066      	movs	r0, #102	; 0x66
 8011878:	f7f0 fb02 	bl	8001e80 <HAL_Delay>
 801187c:	e022      	b.n	80118c4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801187e:	78ba      	ldrb	r2, [r7, #2]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	321e      	adds	r2, #30
 8011884:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011888:	78ba      	ldrb	r2, [r7, #2]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	321e      	adds	r2, #30
 801188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	3314      	adds	r3, #20
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	787a      	ldrb	r2, [r7, #1]
 801189a:	4611      	mov	r1, r2
 801189c:	4798      	blx	r3
 801189e:	e011      	b.n	80118c4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80118a0:	7bbb      	ldrb	r3, [r7, #14]
 80118a2:	2b0d      	cmp	r3, #13
 80118a4:	d109      	bne.n	80118ba <_ZN3USB13AttemptConfigEhhhb+0xa0>
 80118a6:	7bfb      	ldrb	r3, [r7, #15]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	d806      	bhi.n	80118ba <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 80118ac:	2064      	movs	r0, #100	; 0x64
 80118ae:	f7f0 fae7 	bl	8001e80 <HAL_Delay>
                retries++;
 80118b2:	7bfb      	ldrb	r3, [r7, #15]
 80118b4:	3301      	adds	r3, #1
 80118b6:	73fb      	strb	r3, [r7, #15]
                goto again;
 80118b8:	e7be      	b.n	8011838 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 80118ba:	7bbb      	ldrb	r3, [r7, #14]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d001      	beq.n	80118c4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 80118c0:	7bbb      	ldrb	r3, [r7, #14]
 80118c2:	e03f      	b.n	8011944 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 80118c4:	78fa      	ldrb	r2, [r7, #3]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	321e      	adds	r2, #30
 80118ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118ce:	78fa      	ldrb	r2, [r7, #3]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	321e      	adds	r2, #30
 80118d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	681c      	ldr	r4, [r3, #0]
 80118dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118e0:	787a      	ldrb	r2, [r7, #1]
 80118e2:	78b9      	ldrb	r1, [r7, #2]
 80118e4:	47a0      	blx	r4
 80118e6:	4603      	mov	r3, r0
 80118e8:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80118ea:	7bbb      	ldrb	r3, [r7, #14]
 80118ec:	2b0d      	cmp	r3, #13
 80118ee:	d109      	bne.n	8011904 <_ZN3USB13AttemptConfigEhhhb+0xea>
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d806      	bhi.n	8011904 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 80118f6:	2064      	movs	r0, #100	; 0x64
 80118f8:	f7f0 fac2 	bl	8001e80 <HAL_Delay>
                retries++;
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
 80118fe:	3301      	adds	r3, #1
 8011900:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011902:	e799      	b.n	8011838 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8011904:	7bbb      	ldrb	r3, [r7, #14]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d01b      	beq.n	8011942 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 801190a:	78bb      	ldrb	r3, [r7, #2]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d108      	bne.n	8011922 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011910:	2201      	movs	r2, #1
 8011912:	21e8      	movs	r1, #232	; 0xe8
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7ef ff83 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 801191a:	2066      	movs	r0, #102	; 0x66
 801191c:	f7f0 fab0 	bl	8001e80 <HAL_Delay>
 8011920:	e00f      	b.n	8011942 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8011922:	78ba      	ldrb	r2, [r7, #2]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	321e      	adds	r2, #30
 8011928:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801192c:	78ba      	ldrb	r2, [r7, #2]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	321e      	adds	r2, #30
 8011932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3314      	adds	r3, #20
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	787a      	ldrb	r2, [r7, #1]
 801193e:	4611      	mov	r1, r2
 8011940:	4798      	blx	r3
                }
        }
        return rcode;
 8011942:	7bbb      	ldrb	r3, [r7, #14]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	bd90      	pop	{r4, r7, pc}

0801194c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 801194c:	b580      	push	{r7, lr}
 801194e:	b090      	sub	sp, #64	; 0x40
 8011950:	af02      	add	r7, sp, #8
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	4608      	mov	r0, r1
 8011956:	4611      	mov	r1, r2
 8011958:	461a      	mov	r2, r3
 801195a:	4603      	mov	r3, r0
 801195c:	70fb      	strb	r3, [r7, #3]
 801195e:	460b      	mov	r3, r1
 8011960:	70bb      	strb	r3, [r7, #2]
 8011962:	4613      	mov	r3, r2
 8011964:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 801196c:	f107 030c 	add.w	r3, r7, #12
 8011970:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011972:	2300      	movs	r3, #0
 8011974:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011976:	2300      	movs	r3, #0
 8011978:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801197e:	2308      	movs	r3, #8
 8011980:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011982:	7abb      	ldrb	r3, [r7, #10]
 8011984:	f36f 0300 	bfc	r3, #0, #1
 8011988:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801198a:	7abb      	ldrb	r3, [r7, #10]
 801198c:	f36f 0341 	bfc	r3, #1, #1
 8011990:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011992:	7abb      	ldrb	r3, [r7, #10]
 8011994:	220f      	movs	r2, #15
 8011996:	f362 0387 	bfi	r3, r2, #2, #6
 801199a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7fa fd13 	bl	800c3c8 <_ZN3USB14GetAddressPoolEv>
 80119a2:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 80119a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2100      	movs	r1, #0
 80119ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119ae:	4798      	blx	r3
 80119b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d101      	bne.n	80119bc <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80119b8:	23d6      	movs	r3, #214	; 0xd6
 80119ba:	e15c      	b.n	8011c76 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 80119bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 80119c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c4:	f107 0208 	add.w	r2, r7, #8
 80119c8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 80119ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119cc:	787a      	ldrb	r2, [r7, #1]
 80119ce:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 80119d0:	f107 030c 	add.w	r3, r7, #12
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	2312      	movs	r3, #18
 80119d8:	2200      	movs	r2, #0
 80119da:	2100      	movs	r1, #0
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 f94e 	bl	8011c7e <_ZN3USB11getDevDescrEhhtPh>
 80119e2:	4603      	mov	r3, r0
 80119e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 80119e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119ec:	601a      	str	r2, [r3, #0]

        if(rcode) {
 80119ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 80119f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119fa:	e13c      	b.n	8011c76 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 80119fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fe:	7a1a      	ldrb	r2, [r3, #8]
 8011a00:	7a5b      	ldrb	r3, [r3, #9]
 8011a02:	021b      	lsls	r3, r3, #8
 8011a04:	4313      	orrs	r3, r2
 8011a06:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8011a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0a:	7a9a      	ldrb	r2, [r3, #10]
 8011a0c:	7adb      	ldrb	r3, [r3, #11]
 8011a0e:	021b      	lsls	r3, r3, #8
 8011a10:	4313      	orrs	r3, r2
 8011a12:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8011a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a16:	791b      	ldrb	r3, [r3, #4]
 8011a18:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	795b      	ldrb	r3, [r3, #5]
 8011a1e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011a20:	2300      	movs	r3, #0
 8011a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a2a:	2b0f      	cmp	r3, #15
 8011a2c:	f200 8081 	bhi.w	8011b32 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011a30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	321e      	adds	r2, #30
 8011a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d06e      	beq.n	8011b1e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011a40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	321e      	adds	r2, #30
 8011a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	321e      	adds	r2, #30
 8011a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	3310      	adds	r3, #16
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4608      	mov	r0, r1
 8011a60:	4798      	blx	r3
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	bf14      	ite	ne
 8011a68:	2301      	movne	r3, #1
 8011a6a:	2300      	moveq	r3, #0
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d157      	bne.n	8011b22 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011a72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	321e      	adds	r2, #30
 8011a7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	321e      	adds	r2, #30
 8011a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3320      	adds	r3, #32
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	7fba      	ldrb	r2, [r7, #30]
 8011a92:	4611      	mov	r1, r2
 8011a94:	4798      	blx	r3
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d02b      	beq.n	8011af4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	321e      	adds	r2, #30
 8011aa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011aa8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	321e      	adds	r2, #30
 8011ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	3318      	adds	r3, #24
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	8c3a      	ldrh	r2, [r7, #32]
 8011abc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011abe:	4798      	blx	r3
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d114      	bne.n	8011af0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011ac6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	321e      	adds	r2, #30
 8011ace:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	321e      	adds	r2, #30
 8011ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	331c      	adds	r3, #28
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	7ffa      	ldrb	r2, [r7, #31]
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	4798      	blx	r3
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011af0:	2301      	movs	r3, #1
 8011af2:	e000      	b.n	8011af6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011af4:	2300      	movs	r3, #0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d014      	beq.n	8011b24 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011afa:	78b8      	ldrb	r0, [r7, #2]
 8011afc:	78fa      	ldrb	r2, [r7, #3]
 8011afe:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011b02:	787b      	ldrb	r3, [r7, #1]
 8011b04:	9300      	str	r3, [sp, #0]
 8011b06:	4603      	mov	r3, r0
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff fe86 	bl	801181a <_ZN3USB13AttemptConfigEhhhb>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011b14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011b18:	2bd1      	cmp	r3, #209	; 0xd1
 8011b1a:	d109      	bne.n	8011b30 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011b1c:	e002      	b.n	8011b24 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011b1e:	bf00      	nop
 8011b20:	e000      	b.n	8011b24 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011b22:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b28:	3301      	adds	r3, #1
 8011b2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b2e:	e77a      	b.n	8011a26 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011b30:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b36:	2b0f      	cmp	r3, #15
 8011b38:	d802      	bhi.n	8011b40 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011b3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011b3e:	e09a      	b.n	8011c76 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011b40:	2300      	movs	r3, #0
 8011b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b4a:	2b0f      	cmp	r3, #15
 8011b4c:	f200 8088 	bhi.w	8011c60 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011b50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	321e      	adds	r2, #30
 8011b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d074      	beq.n	8011c4a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011b60:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	321e      	adds	r2, #30
 8011b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	321e      	adds	r2, #30
 8011b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	3310      	adds	r3, #16
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	4608      	mov	r0, r1
 8011b80:	4798      	blx	r3
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	bf14      	ite	ne
 8011b88:	2301      	movne	r3, #1
 8011b8a:	2300      	moveq	r3, #0
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d15d      	bne.n	8011c4e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011b92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	321e      	adds	r2, #30
 8011b9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b9e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	321e      	adds	r2, #30
 8011ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	3320      	adds	r3, #32
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	7fba      	ldrb	r2, [r7, #30]
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	4798      	blx	r3
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d02b      	beq.n	8011c14 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011bbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	321e      	adds	r2, #30
 8011bc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011bc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	321e      	adds	r2, #30
 8011bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3318      	adds	r3, #24
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	8c3a      	ldrh	r2, [r7, #32]
 8011bdc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011bde:	4798      	blx	r3
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d114      	bne.n	8011c10 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011be6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	321e      	adds	r2, #30
 8011bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011bf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	321e      	adds	r2, #30
 8011bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	331c      	adds	r3, #28
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	7ffa      	ldrb	r2, [r7, #31]
 8011c06:	4611      	mov	r1, r2
 8011c08:	4798      	blx	r3
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d001      	beq.n	8011c14 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011c10:	2301      	movs	r3, #1
 8011c12:	e000      	b.n	8011c16 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011c14:	2300      	movs	r3, #0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d11b      	bne.n	8011c52 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011c1a:	78b8      	ldrb	r0, [r7, #2]
 8011c1c:	78fa      	ldrb	r2, [r7, #3]
 8011c1e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011c22:	787b      	ldrb	r3, [r7, #1]
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	4603      	mov	r3, r0
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7ff fdf6 	bl	801181a <_ZN3USB13AttemptConfigEhhhb>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011c34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c38:	2bd1      	cmp	r3, #209	; 0xd1
 8011c3a:	d00b      	beq.n	8011c54 <_ZN3USB11ConfiguringEhhb+0x308>
 8011c3c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c40:	2bd9      	cmp	r3, #217	; 0xd9
 8011c42:	d007      	beq.n	8011c54 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011c44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c48:	e015      	b.n	8011c76 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011c4a:	bf00      	nop
 8011c4c:	e002      	b.n	8011c54 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011c4e:	bf00      	nop
 8011c50:	e000      	b.n	8011c54 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011c52:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c58:	3301      	adds	r3, #1
 8011c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c5e:	e772      	b.n	8011b46 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011c60:	787b      	ldrb	r3, [r7, #1]
 8011c62:	78ba      	ldrb	r2, [r7, #2]
 8011c64:	78f9      	ldrb	r1, [r7, #3]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff fd7c 	bl	8011764 <_ZN3USB17DefaultAddressingEhhb>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011c72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3738      	adds	r7, #56	; 0x38
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b08a      	sub	sp, #40	; 0x28
 8011c82:	af08      	add	r7, sp, #32
 8011c84:	6078      	str	r0, [r7, #4]
 8011c86:	4608      	mov	r0, r1
 8011c88:	4611      	mov	r1, r2
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	70fb      	strb	r3, [r7, #3]
 8011c90:	460b      	mov	r3, r1
 8011c92:	70bb      	strb	r3, [r7, #2]
 8011c94:	4613      	mov	r3, r2
 8011c96:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c98:	78ba      	ldrb	r2, [r7, #2]
 8011c9a:	78f9      	ldrb	r1, [r7, #3]
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9307      	str	r3, [sp, #28]
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	9306      	str	r3, [sp, #24]
 8011ca4:	883b      	ldrh	r3, [r7, #0]
 8011ca6:	9305      	str	r3, [sp, #20]
 8011ca8:	883b      	ldrh	r3, [r7, #0]
 8011caa:	9304      	str	r3, [sp, #16]
 8011cac:	2300      	movs	r3, #0
 8011cae:	9303      	str	r3, [sp, #12]
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	9302      	str	r3, [sp, #8]
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	9301      	str	r3, [sp, #4]
 8011cb8:	2306      	movs	r3, #6
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	2380      	movs	r3, #128	; 0x80
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7fe fffd 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011cc4:	4603      	mov	r3, r0
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b08a      	sub	sp, #40	; 0x28
 8011cd2:	af08      	add	r7, sp, #32
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	4611      	mov	r1, r2
 8011cda:	461a      	mov	r2, r3
 8011cdc:	4603      	mov	r3, r0
 8011cde:	70fb      	strb	r3, [r7, #3]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70bb      	strb	r3, [r7, #2]
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011ce8:	78ba      	ldrb	r2, [r7, #2]
 8011cea:	78f9      	ldrb	r1, [r7, #3]
 8011cec:	2300      	movs	r3, #0
 8011cee:	9307      	str	r3, [sp, #28]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	9306      	str	r3, [sp, #24]
 8011cf4:	883b      	ldrh	r3, [r7, #0]
 8011cf6:	9305      	str	r3, [sp, #20]
 8011cf8:	883b      	ldrh	r3, [r7, #0]
 8011cfa:	9304      	str	r3, [sp, #16]
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	9303      	str	r3, [sp, #12]
 8011d00:	2302      	movs	r3, #2
 8011d02:	9302      	str	r3, [sp, #8]
 8011d04:	7c3b      	ldrb	r3, [r7, #16]
 8011d06:	9301      	str	r3, [sp, #4]
 8011d08:	2306      	movs	r3, #6
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	2380      	movs	r3, #128	; 0x80
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7fe ffd5 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d14:	4603      	mov	r3, r0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b09e      	sub	sp, #120	; 0x78
 8011d22:	af08      	add	r7, sp, #32
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	4608      	mov	r0, r1
 8011d28:	4611      	mov	r1, r2
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	70fb      	strb	r3, [r7, #3]
 8011d30:	460b      	mov	r3, r1
 8011d32:	70bb      	strb	r3, [r7, #2]
 8011d34:	4613      	mov	r3, r2
 8011d36:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011d38:	2340      	movs	r3, #64	; 0x40
 8011d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011d3e:	f107 030c 	add.w	r3, r7, #12
 8011d42:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011d44:	78ba      	ldrb	r2, [r7, #2]
 8011d46:	78f9      	ldrb	r1, [r7, #3]
 8011d48:	f107 030c 	add.w	r3, r7, #12
 8011d4c:	9301      	str	r3, [sp, #4]
 8011d4e:	787b      	ldrb	r3, [r7, #1]
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	2309      	movs	r3, #9
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ffba 	bl	8011cce <_ZN3USB12getConfDescrEhhthPh>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011d60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d002      	beq.n	8011d6e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011d68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d6c:	e020      	b.n	8011db0 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d70:	789a      	ldrb	r2, [r3, #2]
 8011d72:	78db      	ldrb	r3, [r3, #3]
 8011d74:	021b      	lsls	r3, r3, #8
 8011d76:	4313      	orrs	r3, r2
 8011d78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011d7c:	78ba      	ldrb	r2, [r7, #2]
 8011d7e:	78f9      	ldrb	r1, [r7, #3]
 8011d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d82:	9307      	str	r3, [sp, #28]
 8011d84:	f107 030c 	add.w	r3, r7, #12
 8011d88:	9306      	str	r3, [sp, #24]
 8011d8a:	2340      	movs	r3, #64	; 0x40
 8011d8c:	9305      	str	r3, [sp, #20]
 8011d8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011d92:	9304      	str	r3, [sp, #16]
 8011d94:	2300      	movs	r3, #0
 8011d96:	9303      	str	r3, [sp, #12]
 8011d98:	2302      	movs	r3, #2
 8011d9a:	9302      	str	r3, [sp, #8]
 8011d9c:	787b      	ldrb	r3, [r7, #1]
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	2306      	movs	r3, #6
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	2380      	movs	r3, #128	; 0x80
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7fe ff89 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dac:	4603      	mov	r3, r0
 8011dae:	bf00      	nop
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3758      	adds	r7, #88	; 0x58
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b08c      	sub	sp, #48	; 0x30
 8011dbc:	af08      	add	r7, sp, #32
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	4608      	mov	r0, r1
 8011dc2:	4611      	mov	r1, r2
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	70fb      	strb	r3, [r7, #3]
 8011dca:	460b      	mov	r3, r1
 8011dcc:	70bb      	strb	r3, [r7, #2]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011dd2:	78ba      	ldrb	r2, [r7, #2]
 8011dd4:	78f9      	ldrb	r1, [r7, #3]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	9307      	str	r3, [sp, #28]
 8011dda:	2300      	movs	r3, #0
 8011ddc:	9306      	str	r3, [sp, #24]
 8011dde:	2300      	movs	r3, #0
 8011de0:	9305      	str	r3, [sp, #20]
 8011de2:	2300      	movs	r3, #0
 8011de4:	9304      	str	r3, [sp, #16]
 8011de6:	2300      	movs	r3, #0
 8011de8:	9303      	str	r3, [sp, #12]
 8011dea:	2300      	movs	r3, #0
 8011dec:	9302      	str	r3, [sp, #8]
 8011dee:	787b      	ldrb	r3, [r7, #1]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	2305      	movs	r3, #5
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	2300      	movs	r3, #0
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f7fe ff60 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011e02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011e06:	f7f0 f83b 	bl	8001e80 <HAL_Delay>
        return rcode;
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08a      	sub	sp, #40	; 0x28
 8011e18:	af08      	add	r7, sp, #32
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	4608      	mov	r0, r1
 8011e1e:	4611      	mov	r1, r2
 8011e20:	461a      	mov	r2, r3
 8011e22:	4603      	mov	r3, r0
 8011e24:	70fb      	strb	r3, [r7, #3]
 8011e26:	460b      	mov	r3, r1
 8011e28:	70bb      	strb	r3, [r7, #2]
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011e2e:	78ba      	ldrb	r2, [r7, #2]
 8011e30:	78f9      	ldrb	r1, [r7, #3]
 8011e32:	2300      	movs	r3, #0
 8011e34:	9307      	str	r3, [sp, #28]
 8011e36:	2300      	movs	r3, #0
 8011e38:	9306      	str	r3, [sp, #24]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	9305      	str	r3, [sp, #20]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	2300      	movs	r3, #0
 8011e44:	9303      	str	r3, [sp, #12]
 8011e46:	2300      	movs	r3, #0
 8011e48:	9302      	str	r3, [sp, #8]
 8011e4a:	787b      	ldrb	r3, [r7, #1]
 8011e4c:	9301      	str	r3, [sp, #4]
 8011e4e:	2309      	movs	r3, #9
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	2300      	movs	r3, #0
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f7fe ff32 	bl	8010cbe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011e5a:	4603      	mov	r3, r0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
};
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	4618      	mov	r0, r3
 8011e70:	370c      	adds	r7, #12
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
	...

08011e7c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	4a04      	ldr	r2, [pc, #16]	; (8011e98 <_ZN11AddressPoolC1Ev+0x1c>)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	601a      	str	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr
 8011e98:	080129d0 	.word	0x080129d0

08011e9c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff ffe8 	bl	8011e7c <_ZN11AddressPoolC1Ev>
 8011eac:	4a17      	ldr	r2, [pc, #92]	; (8011f0c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f990 	bl	80121e0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	1d1a      	adds	r2, r3, #4
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2208      	movs	r2, #8
 8011ed8:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	7993      	ldrb	r3, [r2, #6]
 8011ede:	f36f 0300 	bfc	r3, #0, #1
 8011ee2:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	7993      	ldrb	r3, [r2, #6]
 8011ee8:	f36f 0341 	bfc	r3, #1, #1
 8011eec:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	7993      	ldrb	r3, [r2, #6]
 8011ef2:	210f      	movs	r1, #15
 8011ef4:	f361 0387 	bfi	r3, r1, #2, #6
 8011ef8:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 f9a1 	bl	8012242 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	4618      	mov	r0, r3
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	080129bc 	.word	0x080129bc

08011f10 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011f1c:	78fb      	ldrb	r3, [r7, #3]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d102      	bne.n	8011f28 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	3308      	adds	r3, #8
 8011f26:	e014      	b.n	8011f52 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011f28:	78fb      	ldrb	r3, [r7, #3]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 f9a1 	bl	8012274 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011f32:	4603      	mov	r3, r0
 8011f34:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011f36:	7bfb      	ldrb	r3, [r7, #15]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d008      	beq.n	8011f4e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f103 0108 	add.w	r1, r3, #8
 8011f42:	7bfa      	ldrb	r2, [r7, #15]
 8011f44:	4613      	mov	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	1a9b      	subs	r3, r3, r2
 8011f4a:	440b      	add	r3, r1
 8011f4c:	e000      	b.n	8011f50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	bf00      	nop
        };
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
	...

08011f5c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	607b      	str	r3, [r7, #4]
 8011f66:	460b      	mov	r3, r1
 8011f68:	72fb      	strb	r3, [r7, #11]
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f6e:	f7ee fc97 	bl	80008a0 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011f72:	7afb      	ldrb	r3, [r7, #11]
 8011f74:	f043 0302 	orr.w	r3, r3, #2
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011f7c:	f107 0117 	add.w	r1, r7, #23
 8011f80:	f04f 33ff 	mov.w	r3, #4294967295
 8011f84:	2201      	movs	r2, #1
 8011f86:	480b      	ldr	r0, [pc, #44]	; (8011fb4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f88:	f7f2 fd4b 	bl	8004a22 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f8c:	7abb      	ldrb	r3, [r7, #10]
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	f04f 33ff 	mov.w	r3, #4294967295
 8011f94:	6879      	ldr	r1, [r7, #4]
 8011f96:	4807      	ldr	r0, [pc, #28]	; (8011fb4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f98:	f7f2 fd43 	bl	8004a22 <HAL_SPI_Transmit>
        data_p += nbytes;
 8011f9c:	7abb      	ldrb	r3, [r7, #10]
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011fa4:	f7ee fc70 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 8011fa8:	687b      	ldr	r3, [r7, #4]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	200002d4 	.word	0x200002d4

08011fb8 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	6039      	str	r1, [r7, #0]
 8011fc2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	607b      	str	r3, [r7, #4]
 8011fda:	460b      	mov	r3, r1
 8011fdc:	72fb      	strb	r3, [r7, #11]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011fe2:	f7ee fc5d 	bl	80008a0 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011fe6:	f107 010b 	add.w	r1, r7, #11
 8011fea:	f04f 33ff 	mov.w	r3, #4294967295
 8011fee:	2201      	movs	r2, #1
 8011ff0:	480d      	ldr	r0, [pc, #52]	; (8012028 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011ff2:	f7f2 fd16 	bl	8004a22 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011ff6:	7abb      	ldrb	r3, [r7, #10]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 fa91 	bl	8012524 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8012002:	7abb      	ldrb	r3, [r7, #10]
 8012004:	b29a      	uxth	r2, r3
 8012006:	f04f 33ff 	mov.w	r3, #4294967295
 801200a:	6879      	ldr	r1, [r7, #4]
 801200c:	4806      	ldr	r0, [pc, #24]	; (8012028 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801200e:	f7f2 fe44 	bl	8004c9a <HAL_SPI_Receive>
        data_p += nbytes;
 8012012:	7abb      	ldrb	r3, [r7, #10]
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	4413      	add	r3, r2
 8012018:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801201a:	f7ee fc35 	bl	8000888 <_ZN3P103SetEv>
        return ( data_p);
 801201e:	687b      	ldr	r3, [r7, #4]
}
 8012020:	4618      	mov	r0, r3
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	200002d4 	.word	0x200002d4

0801202c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8012034:	2300      	movs	r3, #0
 8012036:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8012038:	f7fe fd46 	bl	8010ac8 <_ZN2P95IsSetEv>
 801203c:	4603      	mov	r3, r0
 801203e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8012040:	7bbb      	ldrb	r3, [r7, #14]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d104      	bne.n	8012050 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f937 	bl	80122ba <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8012050:	7bfb      	ldrb	r3, [r7, #15]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
                return vbusState;
 8012064:	4b03      	ldr	r3, [pc, #12]	; (8012074 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8012066:	781b      	ldrb	r3, [r3, #0]
        };
 8012068:	4618      	mov	r0, r3
 801206a:	370c      	adds	r7, #12
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr
 8012074:	20000650 	.word	0x20000650

08012078 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	4608      	mov	r0, r1
 8012082:	4611      	mov	r1, r2
 8012084:	461a      	mov	r2, r3
 8012086:	4603      	mov	r3, r0
 8012088:	70fb      	strb	r3, [r7, #3]
 801208a:	460b      	mov	r3, r1
 801208c:	70bb      	strb	r3, [r7, #2]
 801208e:	4613      	mov	r3, r2
 8012090:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012092:	78fb      	ldrb	r3, [r7, #3]
 8012094:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012096:	7b3b      	ldrb	r3, [r7, #12]
 8012098:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801209c:	b2db      	uxtb	r3, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d102      	bne.n	80120a8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80120a2:	787b      	ldrb	r3, [r7, #1]
 80120a4:	2b07      	cmp	r3, #7
 80120a6:	d901      	bls.n	80120ac <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	e079      	b.n	80121a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 80120ac:	78bb      	ldrb	r3, [r7, #2]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d005      	beq.n	80120be <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	79db      	ldrb	r3, [r3, #7]
 80120b6:	2b07      	cmp	r3, #7
 80120b8:	d101      	bne.n	80120be <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 80120ba:	2300      	movs	r3, #0
 80120bc:	e070      	b.n	80121a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 80120be:	2100      	movs	r1, #0
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 f8d7 	bl	8012274 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80120c6:	4603      	mov	r3, r0
 80120c8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d101      	bne.n	80120d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e065      	b.n	80121a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 80120d4:	7b3b      	ldrb	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d124      	bne.n	8012124 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 80120da:	78bb      	ldrb	r3, [r7, #2]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00f      	beq.n	8012100 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 80120e0:	7bfa      	ldrb	r2, [r7, #15]
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	4613      	mov	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	440b      	add	r3, r1
 80120ec:	330c      	adds	r3, #12
 80120ee:	2241      	movs	r2, #65	; 0x41
 80120f0:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	79db      	ldrb	r3, [r3, #7]
 80120f6:	3301      	adds	r3, #1
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	71da      	strb	r2, [r3, #7]
 80120fe:	e008      	b.n	8012112 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8012100:	7bfa      	ldrb	r2, [r7, #15]
 8012102:	6879      	ldr	r1, [r7, #4]
 8012104:	4613      	mov	r3, r2
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	1a9b      	subs	r3, r3, r2
 801210a:	440b      	add	r3, r1
 801210c:	330c      	adds	r3, #12
 801210e:	2201      	movs	r2, #1
 8012110:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8012112:	7bfa      	ldrb	r2, [r7, #15]
 8012114:	6879      	ldr	r1, [r7, #4]
 8012116:	4613      	mov	r3, r2
 8012118:	00db      	lsls	r3, r3, #3
 801211a:	1a9b      	subs	r3, r3, r2
 801211c:	440b      	add	r3, r1
 801211e:	330c      	adds	r3, #12
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	e03d      	b.n	80121a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8012124:	2300      	movs	r3, #0
 8012126:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8012128:	7b3b      	ldrb	r3, [r7, #12]
 801212a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801212e:	b2da      	uxtb	r2, r3
 8012130:	7a3b      	ldrb	r3, [r7, #8]
 8012132:	f362 03c5 	bfi	r3, r2, #3, #3
 8012136:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8012138:	78bb      	ldrb	r3, [r7, #2]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d013      	beq.n	8012166 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801213e:	7a3b      	ldrb	r3, [r7, #8]
 8012140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012144:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	79db      	ldrb	r3, [r3, #7]
 801214a:	3301      	adds	r3, #1
 801214c:	b2da      	uxtb	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	71da      	strb	r2, [r3, #7]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	79db      	ldrb	r3, [r3, #7]
 8012156:	f003 0307 	and.w	r3, r3, #7
 801215a:	b2da      	uxtb	r2, r3
 801215c:	7a3b      	ldrb	r3, [r7, #8]
 801215e:	f362 0302 	bfi	r3, r2, #0, #3
 8012162:	723b      	strb	r3, [r7, #8]
 8012164:	e00b      	b.n	801217e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8012166:	7a3b      	ldrb	r3, [r7, #8]
 8012168:	f36f 1386 	bfc	r3, #6, #1
 801216c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801216e:	787b      	ldrb	r3, [r7, #1]
 8012170:	f003 0307 	and.w	r3, r3, #7
 8012174:	b2da      	uxtb	r2, r3
 8012176:	7a3b      	ldrb	r3, [r7, #8]
 8012178:	f362 0302 	bfi	r3, r2, #0, #3
 801217c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801217e:	7bfa      	ldrb	r2, [r7, #15]
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	1a9b      	subs	r3, r3, r2
 8012188:	440b      	add	r3, r1
 801218a:	330c      	adds	r3, #12
 801218c:	7a3a      	ldrb	r2, [r7, #8]
 801218e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012190:	7bfa      	ldrb	r2, [r7, #15]
 8012192:	6879      	ldr	r1, [r7, #4]
 8012194:	4613      	mov	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	440b      	add	r3, r1
 801219c:	330c      	adds	r3, #12
 801219e:	781b      	ldrb	r3, [r3, #0]
        };
 80121a0:	4618      	mov	r0, r3
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	460b      	mov	r3, r1
 80121b2:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 80121b4:	78fb      	ldrb	r3, [r7, #3]
 80121b6:	2b41      	cmp	r3, #65	; 0x41
 80121b8:	d103      	bne.n	80121c2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f000 f841 	bl	8012242 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 80121c0:	e00b      	b.n	80121da <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 80121c2:	78fb      	ldrb	r3, [r7, #3]
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 f854 	bl	8012274 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 80121d0:	7bfb      	ldrb	r3, [r7, #15]
 80121d2:	4619      	mov	r1, r3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f893 	bl	8012300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 80121ec:	78fa      	ldrb	r2, [r7, #3]
 80121ee:	6879      	ldr	r1, [r7, #4]
 80121f0:	4613      	mov	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	1a9b      	subs	r3, r3, r2
 80121f6:	440b      	add	r3, r1
 80121f8:	330c      	adds	r3, #12
 80121fa:	2200      	movs	r2, #0
 80121fc:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 80121fe:	78fa      	ldrb	r2, [r7, #3]
 8012200:	6879      	ldr	r1, [r7, #4]
 8012202:	4613      	mov	r3, r2
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	1a9b      	subs	r3, r3, r2
 8012208:	440b      	add	r3, r1
 801220a:	330d      	adds	r3, #13
 801220c:	2201      	movs	r2, #1
 801220e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8012210:	78fa      	ldrb	r2, [r7, #3]
 8012212:	6879      	ldr	r1, [r7, #4]
 8012214:	4613      	mov	r3, r2
 8012216:	00db      	lsls	r3, r3, #3
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	440b      	add	r3, r1
 801221c:	330e      	adds	r3, #14
 801221e:	2200      	movs	r2, #0
 8012220:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8012222:	78fa      	ldrb	r2, [r7, #3]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	1d19      	adds	r1, r3, #4
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	4613      	mov	r3, r2
 801222c:	00db      	lsls	r3, r3, #3
 801222e:	1a9b      	subs	r3, r3, r2
 8012230:	4403      	add	r3, r0
 8012232:	3308      	adds	r3, #8
 8012234:	6019      	str	r1, [r3, #0]
        };
 8012236:	bf00      	nop
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8012242:	b580      	push	{r7, lr}
 8012244:	b084      	sub	sp, #16
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801224a:	2301      	movs	r3, #1
 801224c:	73fb      	strb	r3, [r7, #15]
 801224e:	7bfb      	ldrb	r3, [r7, #15]
 8012250:	2b0f      	cmp	r3, #15
 8012252:	d808      	bhi.n	8012266 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8012254:	7bfb      	ldrb	r3, [r7, #15]
 8012256:	4619      	mov	r1, r3
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff ffc1 	bl	80121e0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801225e:	7bfb      	ldrb	r3, [r7, #15]
 8012260:	3301      	adds	r3, #1
 8012262:	73fb      	strb	r3, [r7, #15]
 8012264:	e7f3      	b.n	801224e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2200      	movs	r2, #0
 801226a:	71da      	strb	r2, [r3, #7]
        };
 801226c:	bf00      	nop
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8012274:	b480      	push	{r7}
 8012276:	b085      	sub	sp, #20
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	460b      	mov	r3, r1
 801227e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012280:	2301      	movs	r3, #1
 8012282:	73fb      	strb	r3, [r7, #15]
 8012284:	7bfb      	ldrb	r3, [r7, #15]
 8012286:	2b0f      	cmp	r3, #15
 8012288:	d810      	bhi.n	80122ac <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801228a:	7bfa      	ldrb	r2, [r7, #15]
 801228c:	6879      	ldr	r1, [r7, #4]
 801228e:	4613      	mov	r3, r2
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	440b      	add	r3, r1
 8012296:	330c      	adds	r3, #12
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	78fa      	ldrb	r2, [r7, #3]
 801229c:	429a      	cmp	r2, r3
 801229e:	d101      	bne.n	80122a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
 80122a2:	e004      	b.n	80122ae <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80122a4:	7bfb      	ldrb	r3, [r7, #15]
 80122a6:	3301      	adds	r3, #1
 80122a8:	73fb      	strb	r3, [r7, #15]
 80122aa:	e7eb      	b.n	8012284 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80122ac:	2300      	movs	r3, #0
        };
 80122ae:	4618      	mov	r0, r3
 80122b0:	3714      	adds	r7, #20
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80122c6:	21c8      	movs	r1, #200	; 0xc8
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ef fafb 	bl	80018c4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80122ce:	4603      	mov	r3, r0
 80122d0:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 80122d2:	7bbb      	ldrb	r3, [r7, #14]
 80122d4:	f003 0320 	and.w	r3, r3, #32
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d006      	beq.n	80122ea <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ef fb13 	bl	8001908 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
 80122e4:	f043 0320 	orr.w	r3, r3, #32
 80122e8:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 80122ea:	7bfb      	ldrb	r3, [r7, #15]
 80122ec:	461a      	mov	r2, r3
 80122ee:	21c8      	movs	r1, #200	; 0xc8
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ef fa95 	bl	8001820 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 80122f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	460b      	mov	r3, r1
 801230a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801230c:	78fb      	ldrb	r3, [r7, #3]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d03a      	beq.n	8012388 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8012312:	78fa      	ldrb	r2, [r7, #3]
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	4613      	mov	r3, r2
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	1a9b      	subs	r3, r3, r2
 801231c:	440b      	add	r3, r1
 801231e:	330c      	adds	r3, #12
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8012324:	7b3b      	ldrb	r3, [r7, #12]
 8012326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2b00      	cmp	r3, #0
 801232e:	d025      	beq.n	801237c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8012330:	2301      	movs	r3, #1
 8012332:	73fb      	strb	r3, [r7, #15]
 8012334:	7bfb      	ldrb	r3, [r7, #15]
 8012336:	461a      	mov	r2, r3
 8012338:	7b39      	ldrb	r1, [r7, #12]
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f000 f828 	bl	8012390 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8012340:	4603      	mov	r3, r0
 8012342:	73fb      	strb	r3, [r7, #15]
 8012344:	7bfb      	ldrb	r3, [r7, #15]
 8012346:	2b00      	cmp	r3, #0
 8012348:	bf14      	ite	ne
 801234a:	2301      	movne	r3, #1
 801234c:	2300      	moveq	r3, #0
 801234e:	b2db      	uxtb	r3, r3
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	4619      	mov	r1, r3
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7ff ffd1 	bl	8012300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801235e:	e7e9      	b.n	8012334 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	79db      	ldrb	r3, [r3, #7]
 8012364:	7b3a      	ldrb	r2, [r7, #12]
 8012366:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801236a:	b2d2      	uxtb	r2, r2
 801236c:	4293      	cmp	r3, r2
 801236e:	d105      	bne.n	801237c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	79db      	ldrb	r3, [r3, #7]
 8012374:	3b01      	subs	r3, #1
 8012376:	b2da      	uxtb	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801237c:	78fb      	ldrb	r3, [r7, #3]
 801237e:	4619      	mov	r1, r3
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7ff ff2d 	bl	80121e0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012386:	e000      	b.n	801238a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012388:	bf00      	nop
        }
 801238a:	3710      	adds	r7, #16
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	7039      	strb	r1, [r7, #0]
 801239a:	4613      	mov	r3, r2
 801239c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801239e:	78fb      	ldrb	r3, [r7, #3]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d004      	beq.n	80123ae <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80123a4:	78fb      	ldrb	r3, [r7, #3]
 80123a6:	2b0f      	cmp	r3, #15
 80123a8:	d801      	bhi.n	80123ae <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80123aa:	78fb      	ldrb	r3, [r7, #3]
 80123ac:	e000      	b.n	80123b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80123ae:	2301      	movs	r3, #1
 80123b0:	73fb      	strb	r3, [r7, #15]
 80123b2:	7bfb      	ldrb	r3, [r7, #15]
 80123b4:	2b0f      	cmp	r3, #15
 80123b6:	d816      	bhi.n	80123e6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80123b8:	7bfa      	ldrb	r2, [r7, #15]
 80123ba:	6879      	ldr	r1, [r7, #4]
 80123bc:	4613      	mov	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	1a9b      	subs	r3, r3, r2
 80123c2:	440b      	add	r3, r1
 80123c4:	3308      	adds	r3, #8
 80123c6:	791b      	ldrb	r3, [r3, #4]
 80123c8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80123cc:	b2da      	uxtb	r2, r3
 80123ce:	783b      	ldrb	r3, [r7, #0]
 80123d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d101      	bne.n	80123de <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 80123da:	7bfb      	ldrb	r3, [r7, #15]
 80123dc:	e004      	b.n	80123e8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80123de:	7bfb      	ldrb	r3, [r7, #15]
 80123e0:	3301      	adds	r3, #1
 80123e2:	73fb      	strb	r3, [r7, #15]
 80123e4:	e7e5      	b.n	80123b2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 80123e6:	2300      	movs	r3, #0
        };
 80123e8:	4618      	mov	r0, r3
 80123ea:	3714      	adds	r7, #20
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80123f4:	b480      	push	{r7}
 80123f6:	b085      	sub	sp, #20
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d101      	bne.n	801240c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8012408:	2300      	movs	r3, #0
 801240a:	e031      	b.n	8012470 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	791b      	ldrb	r3, [r3, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d022      	beq.n	801245a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	881b      	ldrh	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d01e      	beq.n	801245a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	68f9      	ldr	r1, [r7, #12]
 8012426:	7949      	ldrb	r1, [r1, #5]
 8012428:	4608      	mov	r0, r1
 801242a:	68f9      	ldr	r1, [r7, #12]
 801242c:	7909      	ldrb	r1, [r1, #4]
 801242e:	1a41      	subs	r1, r0, r1
 8012430:	440b      	add	r3, r1
 8012432:	7812      	ldrb	r2, [r2, #0]
 8012434:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	791b      	ldrb	r3, [r3, #4]
 801243a:	3b01      	subs	r3, #1
 801243c:	b2da      	uxtb	r2, r3
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	711a      	strb	r2, [r3, #4]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	881b      	ldrh	r3, [r3, #0]
 8012446:	3b01      	subs	r3, #1
 8012448:	b29a      	uxth	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	801a      	strh	r2, [r3, #0]
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	601a      	str	r2, [r3, #0]
 8012458:	e7d8      	b.n	801240c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	791b      	ldrb	r3, [r3, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d001      	beq.n	8012466 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8012462:	2300      	movs	r3, #0
 8012464:	e004      	b.n	8012470 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	795a      	ldrb	r2, [r3, #5]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	711a      	strb	r2, [r3, #4]
        return true;
 801246e:	2301      	movs	r3, #1
}
 8012470:	4618      	mov	r0, r3
 8012472:	3714      	adds	r7, #20
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <__cxa_pure_virtual>:
 801247c:	b508      	push	{r3, lr}
 801247e:	f000 f80d 	bl	801249c <_ZSt9terminatev>

08012482 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012482:	b508      	push	{r3, lr}
 8012484:	4780      	blx	r0
 8012486:	f000 f80e 	bl	80124a6 <abort>
	...

0801248c <_ZSt13get_terminatev>:
 801248c:	4b02      	ldr	r3, [pc, #8]	; (8012498 <_ZSt13get_terminatev+0xc>)
 801248e:	6818      	ldr	r0, [r3, #0]
 8012490:	f3bf 8f5b 	dmb	ish
 8012494:	4770      	bx	lr
 8012496:	bf00      	nop
 8012498:	2000013c 	.word	0x2000013c

0801249c <_ZSt9terminatev>:
 801249c:	b508      	push	{r3, lr}
 801249e:	f7ff fff5 	bl	801248c <_ZSt13get_terminatev>
 80124a2:	f7ff ffee 	bl	8012482 <_ZN10__cxxabiv111__terminateEPFvvE>

080124a6 <abort>:
 80124a6:	b508      	push	{r3, lr}
 80124a8:	2006      	movs	r0, #6
 80124aa:	f000 f86b 	bl	8012584 <raise>
 80124ae:	2001      	movs	r0, #1
 80124b0:	f7ef fc5a 	bl	8001d68 <_exit>

080124b4 <__errno>:
 80124b4:	4b01      	ldr	r3, [pc, #4]	; (80124bc <__errno+0x8>)
 80124b6:	6818      	ldr	r0, [r3, #0]
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop
 80124bc:	20000140 	.word	0x20000140

080124c0 <__libc_init_array>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	4d0d      	ldr	r5, [pc, #52]	; (80124f8 <__libc_init_array+0x38>)
 80124c4:	4c0d      	ldr	r4, [pc, #52]	; (80124fc <__libc_init_array+0x3c>)
 80124c6:	1b64      	subs	r4, r4, r5
 80124c8:	10a4      	asrs	r4, r4, #2
 80124ca:	2600      	movs	r6, #0
 80124cc:	42a6      	cmp	r6, r4
 80124ce:	d109      	bne.n	80124e4 <__libc_init_array+0x24>
 80124d0:	4d0b      	ldr	r5, [pc, #44]	; (8012500 <__libc_init_array+0x40>)
 80124d2:	4c0c      	ldr	r4, [pc, #48]	; (8012504 <__libc_init_array+0x44>)
 80124d4:	f000 f884 	bl	80125e0 <_init>
 80124d8:	1b64      	subs	r4, r4, r5
 80124da:	10a4      	asrs	r4, r4, #2
 80124dc:	2600      	movs	r6, #0
 80124de:	42a6      	cmp	r6, r4
 80124e0:	d105      	bne.n	80124ee <__libc_init_array+0x2e>
 80124e2:	bd70      	pop	{r4, r5, r6, pc}
 80124e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80124e8:	4798      	blx	r3
 80124ea:	3601      	adds	r6, #1
 80124ec:	e7ee      	b.n	80124cc <__libc_init_array+0xc>
 80124ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80124f2:	4798      	blx	r3
 80124f4:	3601      	adds	r6, #1
 80124f6:	e7f2      	b.n	80124de <__libc_init_array+0x1e>
 80124f8:	08012a44 	.word	0x08012a44
 80124fc:	08012a44 	.word	0x08012a44
 8012500:	08012a44 	.word	0x08012a44
 8012504:	08012a4c 	.word	0x08012a4c

08012508 <memcpy>:
 8012508:	440a      	add	r2, r1
 801250a:	4291      	cmp	r1, r2
 801250c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012510:	d100      	bne.n	8012514 <memcpy+0xc>
 8012512:	4770      	bx	lr
 8012514:	b510      	push	{r4, lr}
 8012516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801251a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801251e:	4291      	cmp	r1, r2
 8012520:	d1f9      	bne.n	8012516 <memcpy+0xe>
 8012522:	bd10      	pop	{r4, pc}

08012524 <memset>:
 8012524:	4402      	add	r2, r0
 8012526:	4603      	mov	r3, r0
 8012528:	4293      	cmp	r3, r2
 801252a:	d100      	bne.n	801252e <memset+0xa>
 801252c:	4770      	bx	lr
 801252e:	f803 1b01 	strb.w	r1, [r3], #1
 8012532:	e7f9      	b.n	8012528 <memset+0x4>

08012534 <_raise_r>:
 8012534:	291f      	cmp	r1, #31
 8012536:	b538      	push	{r3, r4, r5, lr}
 8012538:	4604      	mov	r4, r0
 801253a:	460d      	mov	r5, r1
 801253c:	d904      	bls.n	8012548 <_raise_r+0x14>
 801253e:	2316      	movs	r3, #22
 8012540:	6003      	str	r3, [r0, #0]
 8012542:	f04f 30ff 	mov.w	r0, #4294967295
 8012546:	bd38      	pop	{r3, r4, r5, pc}
 8012548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801254a:	b112      	cbz	r2, 8012552 <_raise_r+0x1e>
 801254c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012550:	b94b      	cbnz	r3, 8012566 <_raise_r+0x32>
 8012552:	4620      	mov	r0, r4
 8012554:	f000 f830 	bl	80125b8 <_getpid_r>
 8012558:	462a      	mov	r2, r5
 801255a:	4601      	mov	r1, r0
 801255c:	4620      	mov	r0, r4
 801255e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012562:	f000 b817 	b.w	8012594 <_kill_r>
 8012566:	2b01      	cmp	r3, #1
 8012568:	d00a      	beq.n	8012580 <_raise_r+0x4c>
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	d103      	bne.n	8012576 <_raise_r+0x42>
 801256e:	2316      	movs	r3, #22
 8012570:	6003      	str	r3, [r0, #0]
 8012572:	2001      	movs	r0, #1
 8012574:	e7e7      	b.n	8012546 <_raise_r+0x12>
 8012576:	2400      	movs	r4, #0
 8012578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801257c:	4628      	mov	r0, r5
 801257e:	4798      	blx	r3
 8012580:	2000      	movs	r0, #0
 8012582:	e7e0      	b.n	8012546 <_raise_r+0x12>

08012584 <raise>:
 8012584:	4b02      	ldr	r3, [pc, #8]	; (8012590 <raise+0xc>)
 8012586:	4601      	mov	r1, r0
 8012588:	6818      	ldr	r0, [r3, #0]
 801258a:	f7ff bfd3 	b.w	8012534 <_raise_r>
 801258e:	bf00      	nop
 8012590:	20000140 	.word	0x20000140

08012594 <_kill_r>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4d07      	ldr	r5, [pc, #28]	; (80125b4 <_kill_r+0x20>)
 8012598:	2300      	movs	r3, #0
 801259a:	4604      	mov	r4, r0
 801259c:	4608      	mov	r0, r1
 801259e:	4611      	mov	r1, r2
 80125a0:	602b      	str	r3, [r5, #0]
 80125a2:	f7ef fbd1 	bl	8001d48 <_kill>
 80125a6:	1c43      	adds	r3, r0, #1
 80125a8:	d102      	bne.n	80125b0 <_kill_r+0x1c>
 80125aa:	682b      	ldr	r3, [r5, #0]
 80125ac:	b103      	cbz	r3, 80125b0 <_kill_r+0x1c>
 80125ae:	6023      	str	r3, [r4, #0]
 80125b0:	bd38      	pop	{r3, r4, r5, pc}
 80125b2:	bf00      	nop
 80125b4:	20005950 	.word	0x20005950

080125b8 <_getpid_r>:
 80125b8:	f7ef bbbe 	b.w	8001d38 <_getpid>

080125bc <strncmp>:
 80125bc:	b510      	push	{r4, lr}
 80125be:	b16a      	cbz	r2, 80125dc <strncmp+0x20>
 80125c0:	3901      	subs	r1, #1
 80125c2:	1884      	adds	r4, r0, r2
 80125c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80125c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d103      	bne.n	80125d8 <strncmp+0x1c>
 80125d0:	42a0      	cmp	r0, r4
 80125d2:	d001      	beq.n	80125d8 <strncmp+0x1c>
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1f5      	bne.n	80125c4 <strncmp+0x8>
 80125d8:	1a98      	subs	r0, r3, r2
 80125da:	bd10      	pop	{r4, pc}
 80125dc:	4610      	mov	r0, r2
 80125de:	e7fc      	b.n	80125da <strncmp+0x1e>

080125e0 <_init>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	bf00      	nop
 80125e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e6:	bc08      	pop	{r3}
 80125e8:	469e      	mov	lr, r3
 80125ea:	4770      	bx	lr

080125ec <_fini>:
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ee:	bf00      	nop
 80125f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125f2:	bc08      	pop	{r3}
 80125f4:	469e      	mov	lr, r3
 80125f6:	4770      	bx	lr
