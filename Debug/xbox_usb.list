
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee18  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800efdc  0800efdc  0001efdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f308  0800f308  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f308  0800f308  0001f308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f310  0800f310  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f310  0800f310  0001f310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f318  0800f318  0001f318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  200001dc  0800f4f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f0c  0800f4f8  00020f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b059  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006966  00000000  00000000  0006b265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00071bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00073350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002acc1  00000000  00000000  000749a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e364  00000000  00000000  0009f661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e29c9  00000000  00000000  000bd9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a038e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006684  00000000  00000000  001a03e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800efc4 	.word	0x0800efc4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800efc4 	.word	0x0800efc4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1cf9      	adds	r1, r7, #3
 80005de:	2201      	movs	r2, #1
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	4798      	blx	r3
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6918      	ldr	r0, [r3, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	6979      	ldr	r1, [r7, #20]
 800060c:	f004 fcab 	bl	8004f66 <HAL_UART_Transmit>
	return size;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6918      	ldr	r0, [r3, #16]
 8000626:	f107 010f 	add.w	r1, r7, #15
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2201      	movs	r2, #1
 8000630:	f004 fd2b 	bl	800508a <HAL_UART_Receive>
	return data;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <_ZN5PrintC1Ev+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	0800f0e0 	.word	0x0800f0e0

080006ac <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffe4 	bl	8000684 <_ZN5PrintC1Ev>
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_ZN6StreamC1Ev+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0800f158 	.word	0x0800f158

080006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffe1 	bl	80006ac <_ZN6StreamC1Ev>
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	611a      	str	r2, [r3, #16]
	};
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800f0f0 	.word	0x0800f0f0

08000704 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	4903      	ldr	r1, [pc, #12]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <_ZN2P910SetDirReadEv+0x28>)
 800071e:	f001 fa1d 	bl	8001b5c <HAL_GPIO_Init>
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001f8 	.word	0x200001f8
 800072c:	40020800 	.word	0x40020800

08000730 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <_ZN3P103SetEv+0x14>)
 800073a:	f001 fbbb 	bl	8001eb4 <HAL_GPIO_WritePin>
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020400 	.word	0x40020400

08000748 <_ZN3P105ClearEv>:
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
 800074c:	2200      	movs	r2, #0
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <_ZN3P105ClearEv+0x14>)
 8000752:	f001 fbaf 	bl	8001eb4 <HAL_GPIO_WritePin>
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <_ZN3P1011SetDirWriteEv>:
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	4902      	ldr	r1, [pc, #8]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <_ZN3P1011SetDirWriteEv+0x2c>)
 8000780:	f001 f9ec 	bl	8001b5c <HAL_GPIO_Init>
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000020c 	.word	0x2000020c
 800078c:	40020400 	.word	0x40020400

08000790 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2206      	movs	r2, #6
 80007aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
                if(pBtd)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffde 	bl	8000790 <_ZN3BTD11pairWithHIDEv>
        };
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4798      	blx	r3
                OnInitBTHID();
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	331c      	adds	r3, #28
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	4798      	blx	r3
        };
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	460b      	mov	r3, r1
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	72fb      	strb	r3, [r7, #11]
                return;
 8000814:	bf00      	nop
        }
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <_ZN9PS4ParserC1Ev+0x20>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
                Reset();
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f00c fd72 	bl	800d318 <_ZN9PS4Parser5ResetEv>
        };
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800f14c 	.word	0x0800f14c

08000844 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 8000854:	78ba      	ldrb	r2, [r7, #2]
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	0098      	lsls	r0, r3, #2
 800085c:	4613      	mov	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	4413      	add	r3, r2
 8000862:	4403      	add	r3, r0
 8000864:	440b      	add	r3, r1
 8000866:	3320      	adds	r3, #32
 8000868:	799b      	ldrb	r3, [r3, #6]
 800086a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
        };
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	4608      	mov	r0, r1
 800088c:	4611      	mov	r1, r2
 800088e:	461a      	mov	r2, r3
 8000890:	4603      	mov	r3, r0
 8000892:	70fb      	strb	r3, [r7, #3]
 8000894:	460b      	mov	r3, r1
 8000896:	70bb      	strb	r3, [r7, #2]
 8000898:	4613      	mov	r3, r2
 800089a:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	78fa      	ldrb	r2, [r7, #3]
 80008a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	78ba      	ldrb	r2, [r7, #2]
 80008a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	787a      	ldrb	r2, [r7, #1]
 80008b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	141b      	asrs	r3, r3, #16
 80008d6:	b2d9      	uxtb	r1, r3
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	121b      	asrs	r3, r3, #8
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffcd 	bl	8000882 <_ZN9PS4Parser6setLedEhhh>
        };
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	f00b fb12 	bl	800bf30 <_ZN5BTHIDC1EP3BTDbPKc>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3378      	adds	r3, #120	; 0x78
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff85 	bl	8000820 <_ZN9PS4ParserC1Ev>
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3378      	adds	r3, #120	; 0x78
 8000926:	4618      	mov	r0, r3
 8000928:	f00c fcf6 	bl	800d318 <_ZN9PS4Parser5ResetEv>
        };
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800f110 	.word	0x0800f110
 800093c:	0800f140 	.word	0x0800f140

08000940 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	7d5b      	ldrb	r3, [r3, #21]
        };
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	460b      	mov	r3, r1
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3378      	adds	r3, #120	; 0x78
 800096a:	7af9      	ldrb	r1, [r7, #11]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f00c fc0d 	bl	800d18e <_ZN9PS4Parser5ParseEhPh>
        };
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3378      	adds	r3, #120	; 0x78
 8000988:	4618      	mov	r0, r3
 800098a:	f00c fcc5 	bl	800d318 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f855 	bl	8000a3e <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3378      	adds	r3, #120	; 0x78
 80009a0:	21ff      	movs	r1, #255	; 0xff
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff90 	bl	80008c8 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3378      	adds	r3, #120	; 0x78
 80009bc:	4618      	mov	r0, r3
 80009be:	f00c fcab 	bl	800d318 <_ZN9PS4Parser5ResetEv>
        };
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b096      	sub	sp, #88	; 0x58
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	224f      	movs	r2, #79	; 0x4f
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f00e fa93 	bl	800ef08 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 80009e2:	2352      	movs	r3, #82	; 0x52
 80009e4:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 80009e6:	2311      	movs	r3, #17
 80009e8:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 80009ee:	23ff      	movs	r3, #255	; 0xff
 80009f0:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	78db      	ldrb	r3, [r3, #3]
 8000a08:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	224f      	movs	r2, #79	; 0x4f
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f81a 	bl	8000a64 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000a30:	bf00      	nop
 8000a32:	3758      	adds	r7, #88	; 0x58
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000a38:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000a3c:	e7c5      	b.n	80009ca <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000a3e <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000a46:	2343      	movs	r3, #67	; 0x43
 8000a48:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2202      	movs	r2, #2
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f804 	bl	8000a64 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6898      	ldr	r0, [r3, #8]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	8999      	ldrh	r1, [r3, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	7d9b      	ldrb	r3, [r3, #22]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	7dd2      	ldrb	r2, [r2, #23]
 8000a82:	79fc      	ldrb	r4, [r7, #7]
 8000a84:	9201      	str	r2, [sp, #4]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4623      	mov	r3, r4
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f00a fae8 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fe99 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 fa5b 	bl	8000f5c <SystemClock_Config>
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 fb77 	bl	8001198 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000aaa:	f000 fb47 	bl	800113c <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000aae:	f000 fb09 	bl	80010c4 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000ab2:	f007 fc0b 	bl	80082cc <MX_USB_DEVICE_Init>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000ab6:	4ac5      	ldr	r2, [pc, #788]	; (8000dcc <main+0x334>)
 8000ab8:	4bc5      	ldr	r3, [pc, #788]	; (8000dd0 <main+0x338>)
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	2358      	movs	r3, #88	; 0x58
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f00e fa13 	bl	800eeec <memcpy>
  UART_Handle = huart2;
 8000ac6:	4ac3      	ldr	r2, [pc, #780]	; (8000dd4 <main+0x33c>)
 8000ac8:	4bc3      	ldr	r3, [pc, #780]	; (8000dd8 <main+0x340>)
 8000aca:	4610      	mov	r0, r2
 8000acc:	4619      	mov	r1, r3
 8000ace:	2344      	movs	r3, #68	; 0x44
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f00e fa0b 	bl	800eeec <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	70bb      	strb	r3, [r7, #2]
  gameHID.JoyY = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	70fb      	strb	r3, [r7, #3]
  gameHID.Joy2X = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	713b      	strb	r3, [r7, #4]
  gameHID.Joy2Y = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	717b      	strb	r3, [r7, #5]
  gameHID.Joy_LT = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	703b      	strb	r3, [r7, #0]
  gameHID.Joy_RT = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	707b      	strb	r3, [r7, #1]
  uint8_t RightHatY_val;

  uint8_t L2_val;
  uint8_t R2_val;

  if (Usb.Init() == -1) {
 8000aee:	48bb      	ldr	r0, [pc, #748]	; (8000ddc <main+0x344>)
 8000af0:	f000 fbb1 	bl	8001256 <_ZN8MAX3421eI3P102P9E4InitEv>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <main+0x78>
  		Serial.print(F("\r\nOSC did not start"));
 8000b06:	49b6      	ldr	r1, [pc, #728]	; (8000de0 <main+0x348>)
 8000b08:	48b6      	ldr	r0, [pc, #728]	; (8000de4 <main+0x34c>)
 8000b0a:	f7ff fd41 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000b0e:	e7fe      	b.n	8000b0e <main+0x76>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000b10:	49b5      	ldr	r1, [pc, #724]	; (8000de8 <main+0x350>)
 8000b12:	48b4      	ldr	r0, [pc, #720]	; (8000de4 <main+0x34c>)
 8000b14:	f7ff fd3c 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000b18:	48b0      	ldr	r0, [pc, #704]	; (8000ddc <main+0x344>)
 8000b1a:	f00d f959 	bl	800ddd0 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2208      	movs	r2, #8
 8000b22:	4619      	mov	r1, r3
 8000b24:	48b1      	ldr	r0, [pc, #708]	; (8000dec <main+0x354>)
 8000b26:	f006 f9e1 	bl	8006eec <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000b2a:	48b1      	ldr	r0, [pc, #708]	; (8000df0 <main+0x358>)
 8000b2c:	f7ff ff08 	bl	8000940 <_ZN5PS4BT9connectedEv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 81dc 	beq.w	8000ef0 <main+0x458>
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	48ae      	ldr	r0, [pc, #696]	; (8000df4 <main+0x35c>)
 8000b3c:	f00c fb17 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000b40:	4603      	mov	r3, r0
 8000b42:	73bb      	strb	r3, [r7, #14]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000b44:	2101      	movs	r1, #1
 8000b46:	48ab      	ldr	r0, [pc, #684]	; (8000df4 <main+0x35c>)
 8000b48:	f00c fb11 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	737b      	strb	r3, [r7, #13]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000b50:	2102      	movs	r1, #2
 8000b52:	48a8      	ldr	r0, [pc, #672]	; (8000df4 <main+0x35c>)
 8000b54:	f00c fb0b 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	733b      	strb	r3, [r7, #12]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	48a5      	ldr	r0, [pc, #660]	; (8000df4 <main+0x35c>)
 8000b60:	f00c fb05 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000b64:	4603      	mov	r3, r0
 8000b66:	72fb      	strb	r3, [r7, #11]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
 8000b6a:	2b89      	cmp	r3, #137	; 0x89
 8000b6c:	d814      	bhi.n	8000b98 <main+0x100>
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	2b74      	cmp	r3, #116	; 0x74
 8000b72:	d911      	bls.n	8000b98 <main+0x100>
 8000b74:	7b7b      	ldrb	r3, [r7, #13]
 8000b76:	2b89      	cmp	r3, #137	; 0x89
 8000b78:	d80e      	bhi.n	8000b98 <main+0x100>
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	2b74      	cmp	r3, #116	; 0x74
 8000b7e:	d90b      	bls.n	8000b98 <main+0x100>
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	2b89      	cmp	r3, #137	; 0x89
 8000b84:	d808      	bhi.n	8000b98 <main+0x100>
 8000b86:	7b3b      	ldrb	r3, [r7, #12]
 8000b88:	2b74      	cmp	r3, #116	; 0x74
 8000b8a:	d905      	bls.n	8000b98 <main+0x100>
 8000b8c:	7afb      	ldrb	r3, [r7, #11]
 8000b8e:	2b89      	cmp	r3, #137	; 0x89
 8000b90:	d802      	bhi.n	8000b98 <main+0x100>
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	2b74      	cmp	r3, #116	; 0x74
 8000b96:	d824      	bhi.n	8000be2 <main+0x14a>

				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4896      	ldr	r0, [pc, #600]	; (8000df4 <main+0x35c>)
 8000b9c:	f00c fae7 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	3b80      	subs	r3, #128	; 0x80
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000baa:	2101      	movs	r1, #1
 8000bac:	4891      	ldr	r0, [pc, #580]	; (8000df4 <main+0x35c>)
 8000bae:	f00c fade 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	3b80      	subs	r3, #128	; 0x80
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	488d      	ldr	r0, [pc, #564]	; (8000df4 <main+0x35c>)
 8000bc0:	f00c fad5 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	3b80      	subs	r3, #128	; 0x80
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000bce:	2103      	movs	r1, #3
 8000bd0:	4888      	ldr	r0, [pc, #544]	; (8000df4 <main+0x35c>)
 8000bd2:	f00c facc 	bl	800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	3b80      	subs	r3, #128	; 0x80
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	717b      	strb	r3, [r7, #5]
 8000be0:	e007      	b.n	8000bf2 <main+0x15a>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	717b      	strb	r3, [r7, #5]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	487f      	ldr	r0, [pc, #508]	; (8000df4 <main+0x35c>)
 8000bf6:	f00c faa1 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	3b80      	subs	r3, #128	; 0x80
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	703b      	strb	r3, [r7, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000c04:	2109      	movs	r1, #9
 8000c06:	487b      	ldr	r0, [pc, #492]	; (8000df4 <main+0x35c>)
 8000c08:	f00c fa98 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	3b80      	subs	r3, #128	; 0x80
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	707b      	strb	r3, [r7, #1]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000c16:	2108      	movs	r1, #8
 8000c18:	4876      	ldr	r0, [pc, #472]	; (8000df4 <main+0x35c>)
 8000c1a:	f00c fa8f 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <main+0x360>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d108      	bne.n	8000c3c <main+0x1a4>
 8000c2a:	2109      	movs	r1, #9
 8000c2c:	4871      	ldr	r0, [pc, #452]	; (8000df4 <main+0x35c>)
 8000c2e:	f00c fa85 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <main+0x364>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	486d      	ldr	r0, [pc, #436]	; (8000df4 <main+0x35c>)
 8000c40:	f00c fa7c 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <main+0x360>)
 8000c4a:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000c4c:	2109      	movs	r1, #9
 8000c4e:	4869      	ldr	r0, [pc, #420]	; (8000df4 <main+0x35c>)
 8000c50:	f00c fa74 	bl	800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <main+0x364>)
 8000c5a:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000c5c:	2110      	movs	r1, #16
 8000c5e:	4865      	ldr	r0, [pc, #404]	; (8000df4 <main+0x35c>)
 8000c60:	f00c fa2c 	bl	800d0bc <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <main+0x1dc>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	e136      	b.n	8000ee2 <main+0x44a>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000c74:	210c      	movs	r1, #12
 8000c76:	485f      	ldr	r0, [pc, #380]	; (8000df4 <main+0x35c>)
 8000c78:	f00c f9f8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <main+0x1f4>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e003      	b.n	8000c94 <main+0x1fc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f36f 0300 	bfc	r3, #0, #1
 8000c92:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000c94:	210d      	movs	r1, #13
 8000c96:	4857      	ldr	r0, [pc, #348]	; (8000df4 <main+0x35c>)
 8000c98:	f00c f9e8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <main+0x214>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	71bb      	strb	r3, [r7, #6]
 8000caa:	e003      	b.n	8000cb4 <main+0x21c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	f36f 13c7 	bfc	r3, #7, #1
 8000cb2:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000cb4:	210e      	movs	r1, #14
 8000cb6:	484f      	ldr	r0, [pc, #316]	; (8000df4 <main+0x35c>)
 8000cb8:	f00c f9d8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <main+0x234>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	e003      	b.n	8000cd4 <main+0x23c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	f36f 1386 	bfc	r3, #6, #1
 8000cd2:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	4847      	ldr	r0, [pc, #284]	; (8000df4 <main+0x35c>)
 8000cd8:	f00c f9c8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <main+0x254>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e003      	b.n	8000cf4 <main+0x25c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f36f 0341 	bfc	r3, #1, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(UP)) {
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	483f      	ldr	r0, [pc, #252]	; (8000df4 <main+0x35c>)
 8000cf8:	f00c f9b8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <main+0x274>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e003      	b.n	8000d14 <main+0x27c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f36f 0382 	bfc	r3, #2, #1
 8000d12:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000d14:	2101      	movs	r1, #1
 8000d16:	4837      	ldr	r0, [pc, #220]	; (8000df4 <main+0x35c>)
 8000d18:	f00c f9a8 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <main+0x294>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e003      	b.n	8000d34 <main+0x29c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f36f 03c3 	bfc	r3, #3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000d34:	2102      	movs	r1, #2
 8000d36:	482f      	ldr	r0, [pc, #188]	; (8000df4 <main+0x35c>)
 8000d38:	f00c f998 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <main+0x2b4>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e003      	b.n	8000d54 <main+0x2bc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f36f 1345 	bfc	r3, #5, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(LEFT)) {
 8000d54:	2103      	movs	r1, #3
 8000d56:	4827      	ldr	r0, [pc, #156]	; (8000df4 <main+0x35c>)
 8000d58:	f00c f988 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <main+0x2d4>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f043 0310 	orr.w	r3, r3, #16
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	e003      	b.n	8000d74 <main+0x2dc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f36f 1304 	bfc	r3, #4, #1
 8000d72:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(L1)) {
 8000d74:	210a      	movs	r1, #10
 8000d76:	481f      	ldr	r0, [pc, #124]	; (8000df4 <main+0x35c>)
 8000d78:	f00c f978 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <main+0x2f4>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	71bb      	strb	r3, [r7, #6]
 8000d8a:	e003      	b.n	8000d94 <main+0x2fc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	f36f 1345 	bfc	r3, #5, #1
 8000d92:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(L3)) {
 8000d94:	2106      	movs	r1, #6
 8000d96:	4817      	ldr	r0, [pc, #92]	; (8000df4 <main+0x35c>)
 8000d98:	f00c f968 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <main+0x314>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e003      	b.n	8000db4 <main+0x31c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f36f 1386 	bfc	r3, #6, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(R1)) {
 8000db4:	210b      	movs	r1, #11
 8000db6:	480f      	ldr	r0, [pc, #60]	; (8000df4 <main+0x35c>)
 8000db8:	f00c f958 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d01e      	beq.n	8000e00 <main+0x368>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	71bb      	strb	r3, [r7, #6]
 8000dca:	e01d      	b.n	8000e08 <main+0x370>
 8000dcc:	200002bc 	.word	0x200002bc
 8000dd0:	20000220 	.word	0x20000220
 8000dd4:	20000314 	.word	0x20000314
 8000dd8:	20000278 	.word	0x20000278
 8000ddc:	2000036c 	.word	0x2000036c
 8000de0:	0800efdc 	.word	0x0800efdc
 8000de4:	20000358 	.word	0x20000358
 8000de8:	0800eff0 	.word	0x0800eff0
 8000dec:	20000630 	.word	0x20000630
 8000df0:	20000540 	.word	0x20000540
 8000df4:	200005b8 	.word	0x200005b8
 8000df8:	2000060a 	.word	0x2000060a
 8000dfc:	2000060b 	.word	0x2000060b
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	f36f 1304 	bfc	r3, #4, #1
 8000e06:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(R3)) {
 8000e08:	2107      	movs	r1, #7
 8000e0a:	484b      	ldr	r0, [pc, #300]	; (8000f38 <main+0x4a0>)
 8000e0c:	f00c f92e 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <main+0x388>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e003      	b.n	8000e28 <main+0x390>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f36f 13c7 	bfc	r3, #7, #1
 8000e26:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(SHARE)) {
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4843      	ldr	r0, [pc, #268]	; (8000f38 <main+0x4a0>)
 8000e2c:	f00c f91e 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <main+0x3a8>
					gameHID.ps4ButtonsTag.button_share = 1;
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	e003      	b.n	8000e48 <main+0x3b0>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	f36f 03c3 	bfc	r3, #3, #1
 8000e46:	71bb      	strb	r3, [r7, #6]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 8000e48:	2105      	movs	r1, #5
 8000e4a:	483b      	ldr	r0, [pc, #236]	; (8000f38 <main+0x4a0>)
 8000e4c:	f00c f90e 	bl	800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <main+0x3d6>
					gameHID.ps4ButtonsTag.button_start = 1;
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <main+0x4a4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f083 0301 	eor.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <main+0x4a4>)
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e003      	b.n	8000e76 <main+0x3de>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	f36f 0382 	bfc	r3, #2, #1
 8000e74:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 8000e76:	2111      	movs	r1, #17
 8000e78:	482f      	ldr	r0, [pc, #188]	; (8000f38 <main+0x4a0>)
 8000e7a:	f00c f91f 	bl	800d0bc <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <main+0x3fa>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <main+0x4a8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <main+0x4a8>)
 8000e90:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <main+0x4a8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d023      	beq.n	8000ee2 <main+0x44a>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4826      	ldr	r0, [pc, #152]	; (8000f38 <main+0x4a0>)
 8000ea0:	f7ff fcd0 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <main+0x422>
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2101      	movs	r1, #1
 8000eae:	4822      	ldr	r0, [pc, #136]	; (8000f38 <main+0x4a0>)
 8000eb0:	f7ff fcc8 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <main+0x426>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <main+0x428>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <main+0x44a>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d809      	bhi.n	8000ee2 <main+0x44a>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4818      	ldr	r0, [pc, #96]	; (8000f38 <main+0x4a0>)
 8000ed6:	f7ff fcb5 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e7f2      	b.n	8000ec8 <main+0x430>
					}
				}


			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <main+0x4ac>)
 8000eea:	f005 ffff 	bl	8006eec <USBD_HID_SendReport>
 8000eee:	e613      	b.n	8000b18 <main+0x80>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef4:	4814      	ldr	r0, [pc, #80]	; (8000f48 <main+0x4b0>)
 8000ef6:	f000 ffc5 	bl	8001e84 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d011      	beq.n	8000f2e <main+0x496>
		    if (!buttonPressed) {
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <main+0x4b4>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <main+0x48e>
		    	Serial.print(F("\r\nButton Pressed"));
 8000f18:	490d      	ldr	r1, [pc, #52]	; (8000f50 <main+0x4b8>)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <main+0x4bc>)
 8000f1c:	f7ff fb38 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0x4c0>)
 8000f22:	f7ff fc4a 	bl	80007ba <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <main+0x4b4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e5f4      	b.n	8000b18 <main+0x80>
		} else
		    buttonPressed = false;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <main+0x4b4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
  }
 8000f34:	e5f0      	b.n	8000b18 <main+0x80>
 8000f36:	bf00      	nop
 8000f38:	200005b8 	.word	0x200005b8
 8000f3c:	20000608 	.word	0x20000608
 8000f40:	20000609 	.word	0x20000609
 8000f44:	20000630 	.word	0x20000630
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	2000060c 	.word	0x2000060c
 8000f50:	0800f010 	.word	0x0800f010
 8000f54:	20000358 	.word	0x20000358
 8000f58:	20000540 	.word	0x20000540

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0ac      	sub	sp, #176	; 0xb0
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00d ffcc 	bl	800ef08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	225c      	movs	r2, #92	; 0x5c
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00d ffbd 	bl	800ef08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <SystemClock_Config+0x15c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <SystemClock_Config+0x15c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <SystemClock_Config+0x15c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b43      	ldr	r3, [pc, #268]	; (80010bc <SystemClock_Config+0x160>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a42      	ldr	r2, [pc, #264]	; (80010bc <SystemClock_Config+0x160>)
 8000fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <SystemClock_Config+0x160>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe6:	23a8      	movs	r3, #168	; 0xa8
 8000fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001002:	4618      	mov	r0, r3
 8001004:	f002 ff1c 	bl	8003e40 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001018:	f000 f918 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2302      	movs	r3, #2
 8001022:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001028:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800102c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001034:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001038:	2105      	movs	r1, #5
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f90a 	bl	8003254 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001050:	f000 f8fc 	bl	800124c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fa10 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001078:	f000 f8e8 	bl	800124c <Error_Handler>
  }
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800107c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f002 f8e6 	bl	8003254 <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 8001088:	f002 f9ca 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 800108c:	4603      	mov	r3, r0
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <SystemClock_Config+0x164>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fd37 	bl	8001b0a <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800109c:	2004      	movs	r0, #4
 800109e:	f000 fd41 	bl	8001b24 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	f04f 30ff 	mov.w	r0, #4294967295
 80010aa:	f000 fd04 	bl	8001ab6 <HAL_NVIC_SetPriority>

}
 80010ae:	bf00      	nop
 80010b0:	37b0      	adds	r7, #176	; 0xb0
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000
 80010c0:	431bde83 	.word	0x431bde83

080010c4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <_ZL12MX_SPI1_Initv+0x74>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010f8:	2218      	movs	r2, #24
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <_ZL12MX_SPI1_Initv+0x70>)
 8001116:	f003 f931 	bl	800437c <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800112a:	f000 f88f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000220 	.word	0x20000220
 8001138:	40013000 	.word	0x40013000

0800113c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001174:	f003 feaa 	bl	8004ecc <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf14      	ite	ne
 800117e:	2301      	movne	r3, #1
 8001180:	2300      	moveq	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001188:	f000 f860 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000278 	.word	0x20000278
 8001194:	40004400 	.word	0x40004400

08001198 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <_ZL12MX_GPIO_Initv+0xa8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_ZL12MX_GPIO_Initv+0xac>)
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <_ZL12MX_GPIO_Initv+0xb0>)
 8001234:	f000 fc92 	bl	8001b5c <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	10210000 	.word	0x10210000
 8001248:	40020800 	.word	0x40020800

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>

08001256 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800125e:	f7ff fa7f 	bl	8000760 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001262:	f7ff fa65 	bl	8000730 <_ZN3P103SetEv>
        spi::init();
 8001266:	f000 f845 	bl	80012f4 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 800126a:	f7ff fa4b 	bl	8000704 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800126e:	2218      	movs	r2, #24
 8001270:	2188      	movs	r1, #136	; 0x88
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f846 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f865 	bl	8001348 <_ZN8MAX3421eI3P102P9E5resetEv>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e02b      	b.n	80012ec <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001294:	22c1      	movs	r2, #193	; 0xc1
 8001296:	21d8      	movs	r1, #216	; 0xd8
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f833 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800129e:	2260      	movs	r2, #96	; 0x60
 80012a0:	21d0      	movs	r1, #208	; 0xd0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f82e 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80012a8:	2204      	movs	r2, #4
 80012aa:	21e8      	movs	r1, #232	; 0xe8
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f829 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80012b2:	21e8      	movs	r1, #232	; 0xe8
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f877 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d000      	beq.n	80012d0 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80012ce:	e7f0      	b.n	80012b2 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f88b 	bl	80013ec <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80012d6:	2220      	movs	r2, #32
 80012d8:	21c8      	movs	r1, #200	; 0xc8
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f812 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80012e0:	2201      	movs	r2, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f80d 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
        }
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001314:	f7ff fa18 	bl	8000748 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001322:	78bb      	ldrb	r3, [r7, #2]
 8001324:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001326:	f107 010c 	add.w	r1, r7, #12
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	2202      	movs	r2, #2
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001332:	f003 f8ac 	bl	800448e <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001336:	f7ff f9fb 	bl	8000730 <_ZN3P103SetEv>
        return;
 800133a:	bf00      	nop
};
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002bc 	.word	0x200002bc

08001348 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001354:	2220      	movs	r2, #32
 8001356:	2178      	movs	r1, #120	; 0x78
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffd3 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800135e:	2200      	movs	r2, #0
 8001360:	2178      	movs	r1, #120	; 0x78
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffce 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	3301      	adds	r3, #1
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00f      	beq.n	800139e <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800137e:	2168      	movs	r1, #104	; 0x68
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f811 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 800139a:	e7e5      	b.n	8001368 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 800139c:	bf00      	nop
        return ( i);
 800139e:	89fb      	ldrh	r3, [r7, #14]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80013b4:	f7ff f9c8 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80013b8:	1cf9      	adds	r1, r7, #3
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80013c2:	f003 f864 	bl	800448e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80013ca:	f107 010f 	add.w	r1, r7, #15
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2201      	movs	r2, #1
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80013d6:	f003 f996 	bl	8004706 <HAL_SPI_Receive>
        SPI_SS::Set();
 80013da:	f7ff f9a9 	bl	8000730 <_ZN3P103SetEv>
        return (rv);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200002bc 	.word	0x200002bc

080013ec <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80013f4:	21f8      	movs	r1, #248	; 0xf8
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffd6 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001406:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2bc0      	cmp	r3, #192	; 0xc0
 800140c:	d04a      	beq.n	80014a4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800140e:	2bc0      	cmp	r3, #192	; 0xc0
 8001410:	dc55      	bgt.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001412:	2b80      	cmp	r3, #128	; 0x80
 8001414:	d006      	beq.n	8001424 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001416:	2b80      	cmp	r3, #128	; 0x80
 8001418:	dc51      	bgt.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800141a:	2b00      	cmp	r3, #0
 800141c:	d046      	beq.n	80014ac <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800141e:	2b40      	cmp	r3, #64	; 0x40
 8001420:	d020      	beq.n	8001464 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001422:	e04c      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001424:	21d8      	movs	r1, #216	; 0xd8
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffbe 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800142c:	4603      	mov	r3, r0
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001440:	22c9      	movs	r2, #201	; 0xc9
 8001442:	21d8      	movs	r1, #216	; 0xd8
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff5d 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
                        break;
 8001450:	e035      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001452:	22cb      	movs	r2, #203	; 0xcb
 8001454:	21d8      	movs	r1, #216	; 0xd8
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff54 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
                        break;
 8001462:	e02c      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001464:	21d8      	movs	r1, #216	; 0xd8
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff9e 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001480:	22cb      	movs	r2, #203	; 0xcb
 8001482:	21d8      	movs	r1, #216	; 0xd8
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff3d 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800148c:	2203      	movs	r2, #3
 800148e:	701a      	strb	r2, [r3, #0]
                        break;
 8001490:	e015      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001492:	22c9      	movs	r2, #201	; 0xc9
 8001494:	21d8      	movs	r1, #216	; 0xd8
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff34 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
                        break;
 80014a2:	e00c      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
                        break;
 80014aa:	e008      	b.n	80014be <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80014ac:	22d1      	movs	r2, #209	; 0xd1
 80014ae:	21d8      	movs	r1, #216	; 0xd8
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff27 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
                        break;
 80014bc:	bf00      	nop
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000060d 	.word	0x2000060d

080014cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d115      	bne.n	8001508 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d110      	bne.n	8001508 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80014e6:	490a      	ldr	r1, [pc, #40]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80014e8:	480a      	ldr	r0, [pc, #40]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80014ea:	f7ff f8f5 	bl	80006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80014f0:	f00b ffb0 	bl	800d454 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80014f4:	4908      	ldr	r1, [pc, #32]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80014f8:	f007 fd8e 	bl	8009018 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001504:	f7ff f9f4 	bl	80008f0 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000278 	.word	0x20000278
 8001514:	20000358 	.word	0x20000358
 8001518:	2000036c 	.word	0x2000036c
 800151c:	20000428 	.word	0x20000428
 8001520:	0800f024 	.word	0x0800f024
 8001524:	20000540 	.word	0x20000540

08001528 <_GLOBAL__sub_I_hspi1>:
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
 800152c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff ffcb 	bl	80014cc <_Z41__static_initialization_and_destruction_0ii>
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001576:	2007      	movs	r0, #7
 8001578:	f000 fa92 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12b      	bne.n	8001602 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23e0      	movs	r3, #224	; 0xe0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015fe:	f000 faad 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40013000 	.word	0x40013000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 fa65 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f8c0 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <OTG_FS_IRQHandler+0x10>)
 8001702:	f000 fd47 	bl	8002194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000b00 	.word	0x20000b00

08001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_kill>:

int _kill(int pid, int sig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800172a:	f00d fbb5 	bl	800ee98 <__errno>
 800172e:	4603      	mov	r3, r0
 8001730:	2216      	movs	r2, #22
 8001732:	601a      	str	r2, [r3, #0]
	return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_exit>:

void _exit (int status)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001752:	e7fe      	b.n	8001752 <_exit+0x12>

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <SystemInit+0x28>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <SystemInit+0x28>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <SystemInit+0x28>)
 800176a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176e:	609a      	str	r2, [r3, #8]
#endif
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001786:	e003      	b.n	8001790 <LoopCopyDataInit>

08001788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800178a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800178c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800178e:	3104      	adds	r1, #4

08001790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001798:	d3f6      	bcc.n	8001788 <CopyDataInit>
  ldr  r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800179c:	e002      	b.n	80017a4 <LoopFillZerobss>

0800179e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800179e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a0:	f842 3b04 	str.w	r3, [r2], #4

080017a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017a8:	d3f9      	bcc.n	800179e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd3 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f00d fb79 	bl	800eea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff f971 	bl	8000a98 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017bc:	0800f31c 	.word	0x0800f31c
  ldr  r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017c4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80017c8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80017cc:	20000f0c 	.word	0x20000f0c

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe96 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	2000062c 	.word	0x2000062c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000062c 	.word	0x2000062c

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d106      	bne.n	8001b40 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b3e:	e005      	b.n	8001b4c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e165      	b.n	8001e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8154 	bne.w	8001e3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ae 	beq.w	8001e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_GPIO_Init+0x308>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d025      	beq.n	8001d76 <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x30c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01f      	beq.n	8001d72 <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x310>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x314>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x318>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x20a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x31c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x206>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x320>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x202>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x21c>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f ae96 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	619a      	str	r2, [r3, #24]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee8:	b08f      	sub	sp, #60	; 0x3c
 8001eea:	af0a      	add	r7, sp, #40	; 0x28
 8001eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e116      	b.n	8002126 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f006 fb22 	bl	800855c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fc71 	bl	800581e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	687e      	ldr	r6, [r7, #4]
 8001f44:	466d      	mov	r5, sp
 8001f46:	f106 0410 	add.w	r4, r6, #16
 8001f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5a:	1d33      	adds	r3, r6, #4
 8001f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f003 fb48 	bl	80055f4 <USB_CoreInit>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0d7      	b.n	8002126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fc5f 	bl	8005840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e04a      	b.n	800201e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	333d      	adds	r3, #61	; 0x3d
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	333c      	adds	r3, #60	; 0x3c
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	b298      	uxth	r0, r3
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3342      	adds	r3, #66	; 0x42
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	333f      	adds	r3, #63	; 0x3f
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	; 0x44
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3348      	adds	r3, #72	; 0x48
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3350      	adds	r3, #80	; 0x50
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3301      	adds	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3af      	bcc.n	8001f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e044      	b.n	80020b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	3301      	adds	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d3b5      	bcc.n	800202e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	687e      	ldr	r6, [r7, #4]
 80020ca:	466d      	mov	r5, sp
 80020cc:	f106 0410 	add.w	r4, r6, #16
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e0:	1d33      	adds	r3, r6, #4
 80020e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f003 fbd5 	bl	8005894 <USB_DevInit>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e014      	b.n	8002126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f001 f879 	bl	800320c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fc10 	bl	8006944 <USB_DevDisconnect>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_PCD_Start+0x1c>
 8002146:	2302      	movs	r3, #2
 8002148:	e020      	b.n	800218c <HAL_PCD_Start+0x5e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	2b01      	cmp	r3, #1
 8002158:	d109      	bne.n	800216e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800215e:	2b01      	cmp	r3, #1
 8002160:	d005      	beq.n	800216e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fb42 	bl	80057fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fbc0 	bl	8006902 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b08d      	sub	sp, #52	; 0x34
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fc7e 	bl	8006aac <USB_GetMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 83ca 	bne.w	800294c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fbe2 	bl	8006986 <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 83c0 	beq.w	800294a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fbd9 	bl	8006986 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f002 0202 	and.w	r2, r2, #2
 80021ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fbc7 	bl	8006986 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d161      	bne.n	80022c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0210 	bic.w	r2, r2, #16
 8002210:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	3304      	adds	r3, #4
 8002230:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	0c5b      	lsrs	r3, r3, #17
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	2b02      	cmp	r3, #2
 800223c:	d124      	bne.n	8002288 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d035      	beq.n	80022b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	6a38      	ldr	r0, [r7, #32]
 800225e:	f004 fa2d 	bl	80066bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226e:	441a      	add	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002280:	441a      	add	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e016      	b.n	80022b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	0c5b      	lsrs	r3, r3, #17
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	2b06      	cmp	r3, #6
 8002292:	d110      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800229a:	2208      	movs	r2, #8
 800229c:	4619      	mov	r1, r3
 800229e:	6a38      	ldr	r0, [r7, #32]
 80022a0:	f004 fa0c 	bl	80066bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b0:	441a      	add	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0210 	orr.w	r2, r2, #16
 80022c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fb5b 	bl	8006986 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022da:	d16e      	bne.n	80023ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 fb61 	bl	80069ac <USB_ReadDevAllOutEpInterrupt>
 80022ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022ec:	e062      	b.n	80023b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d057      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fb86 	bl	8006a14 <USB_ReadDevOutEPInterrupt>
 8002308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2301      	movs	r3, #1
 8002324:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fdc5 	bl	8002eb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00c      	beq.n	8002352 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	2308      	movs	r3, #8
 8002348:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800234a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 febf 	bl	80030d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002368:	461a      	mov	r2, r3
 800236a:	2310      	movs	r3, #16
 800236c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002384:	461a      	mov	r2, r3
 8002386:	2320      	movs	r3, #32
 8002388:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3301      	adds	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d199      	bne.n	80022ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fae1 	bl	8006986 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ce:	f040 80c0 	bne.w	8002552 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fb02 	bl	80069e0 <USB_ReadDevAllInEpInterrupt>
 80023dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023e2:	e0b2      	b.n	800254a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a7 	beq.w	800253e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 fb28 	bl	8006a50 <USB_ReadDevInEPInterrupt>
 8002400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d057      	beq.n	80024bc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2201      	movs	r2, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	69f9      	ldr	r1, [r7, #28]
 8002428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242c:	4013      	ands	r3, r2
 800242e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243c:	461a      	mov	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d132      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3348      	adds	r3, #72	; 0x48
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4403      	add	r3, r0
 800246a:	3344      	adds	r3, #68	; 0x44
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4419      	add	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4403      	add	r3, r0
 800247e:	3348      	adds	r3, #72	; 0x48
 8002480:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d113      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x31c>
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3350      	adds	r3, #80	; 0x50
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024a8:	461a      	mov	r2, r3
 80024aa:	2101      	movs	r1, #1
 80024ac:	f004 fb30 	bl	8006b10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f006 f8d1 	bl	800865e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d2:	461a      	mov	r2, r3
 80024d4:	2308      	movs	r3, #8
 80024d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ee:	461a      	mov	r2, r3
 80024f0:	2310      	movs	r3, #16
 80024f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2340      	movs	r3, #64	; 0x40
 800250e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2302      	movs	r3, #2
 800252a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fc30 	bl	8002d9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f af49 	bne.w	80023e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 fa15 	bl	8006986 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002566:	d122      	bne.n	80025ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f006 faa1 	bl	8008ad8 <HAL_PCDEx_LPM_Callback>
 8002596:	e002      	b.n	800259e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f006 f8d7 	bl	800874c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f9e7 	bl	8006986 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c2:	d112      	bne.n	80025ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f006 f893 	bl	8008700 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025e8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f9c9 	bl	8006986 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025fe:	d121      	bne.n	8002644 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800260e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d111      	bne.n	800263e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002634:	2101      	movs	r1, #1
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f006 fa4e 	bl	8008ad8 <HAL_PCDEx_LPM_Callback>
 800263c:	e002      	b.n	8002644 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f006 f85e 	bl	8008700 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f004 f99c 	bl	8006986 <USB_ReadInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002658:	f040 80c7 	bne.w	80027ea <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2110      	movs	r1, #16
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fa6a 	bl	8005b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002680:	e056      	b.n	8002730 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268e:	461a      	mov	r2, r3
 8002690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002694:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	0151      	lsls	r1, r2, #5
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	440a      	add	r2, r1
 80026ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e2:	461a      	mov	r2, r3
 80026e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fa:	0151      	lsls	r1, r2, #5
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	440a      	add	r2, r1
 8002700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	440a      	add	r2, r1
 8002720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002728:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	3301      	adds	r3, #1
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002736:	429a      	cmp	r2, r3
 8002738:	d3a3      	bcc.n	8002682 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002748:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800274c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002766:	f043 030b 	orr.w	r3, r3, #11
 800276a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277c:	f043 030b 	orr.w	r3, r3, #11
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	e015      	b.n	80027b0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002792:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002796:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800279a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027aa:	f043 030b 	orr.w	r3, r3, #11
 80027ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d4:	461a      	mov	r2, r3
 80027d6:	f004 f99b 	bl	8006b10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 f8c9 	bl	8006986 <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	d124      	bne.n	800284a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 f95f 	bl	8006ac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f9ff 	bl	8005c12 <USB_GetDevSpeed>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681c      	ldr	r4, [r3, #0]
 8002820:	f000 fdfe 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8002824:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	4620      	mov	r0, r4
 8002830:	f002 ff42 	bl	80056b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f005 ff3a 	bl	80086ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002848:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f004 f899 	bl	8006986 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d10a      	bne.n	8002874 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 ff17 	bl	8008692 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f002 0208 	and.w	r2, r2, #8
 8002872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f004 f884 	bl	8006986 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002888:	d10f      	bne.n	80028aa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f005 ff79 	bl	800878c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f869 	bl	8006986 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028be:	d10f      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f005 ff4c 	bl	8008768 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 f84e 	bl	8006986 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d10a      	bne.n	800290c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f005 ff5a 	bl	80087b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800290a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f004 f838 	bl	8006986 <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d115      	bne.n	800294c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f005 ff4a 	bl	80087cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e000      	b.n	800294c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800294a:	bf00      	nop
    }
  }
}
 800294c:	3734      	adds	r7, #52	; 0x34
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}

08002952 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_PCD_SetAddress+0x1a>
 8002968:	2302      	movs	r3, #2
 800296a:	e013      	b.n	8002994 <HAL_PCD_SetAddress+0x42>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f003 ff96 	bl	80068b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	460b      	mov	r3, r1
 80029b0:	803b      	strh	r3, [r7, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da0f      	bge.n	80029e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	705a      	strb	r2, [r3, #1]
 80029e0:	e00f      	b.n	8002a02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a0e:	883a      	ldrh	r2, [r7, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	78ba      	ldrb	r2, [r7, #2]
 8002a18:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a2c:	78bb      	ldrb	r3, [r7, #2]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d102      	bne.n	8002a38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_PCD_EP_Open+0xaa>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e00e      	b.n	8002a64 <HAL_PCD_EP_Open+0xc8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 f901 	bl	8005c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a62:	7afb      	ldrb	r3, [r7, #11]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da0f      	bge.n	8002aa0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	705a      	strb	r2, [r3, #1]
 8002a9e:	e00f      	b.n	8002ac0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_PCD_EP_Close+0x6e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e00e      	b.n	8002af8 <HAL_PCD_EP_Close+0x8c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f93f 	bl	8005d6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	f003 fc1a 	bl	80063ac <USB_EP0StartXfer>
 8002b78:	e008      	b.n	8002b8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	f003 f9cc 	bl	8005f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d102      	bne.n	8002bf0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	f003 fbd0 	bl	80063ac <USB_EP0StartXfer>
 8002c0c:	e008      	b.n	8002c20 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	f003 f982 	bl	8005f24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d901      	bls.n	8002c48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e050      	b.n	8002cea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da0f      	bge.n	8002c70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	705a      	strb	r2, [r3, #1]
 8002c6e:	e00d      	b.n	8002c8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_SetStall+0x82>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e01e      	b.n	8002cea <HAL_PCD_EP_SetStall+0xc0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fd27 	bl	800670e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	b2d9      	uxtb	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f003 ff18 	bl	8006b10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d901      	bls.n	8002d10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e042      	b.n	8002d96 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0f      	bge.n	8002d38 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3338      	adds	r3, #56	; 0x38
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	705a      	strb	r2, [r3, #1]
 8002d36:	e00f      	b.n	8002d58 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_PCD_EP_ClrStall+0x86>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e00e      	b.n	8002d96 <HAL_PCD_EP_ClrStall+0xa4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fd2f 	bl	80067ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b08a      	sub	sp, #40	; 0x28
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3338      	adds	r3, #56	; 0x38
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d901      	bls.n	8002dd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06c      	b.n	8002eb0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d902      	bls.n	8002df2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3303      	adds	r3, #3
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfa:	e02b      	b.n	8002e54 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d902      	bls.n	8002e18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3303      	adds	r3, #3
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f003 fc0b 	bl	8006652 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	441a      	add	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d809      	bhi.n	8002e7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d203      	bcs.n	8002e7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1be      	bne.n	8002dfc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d811      	bhi.n	8002eae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	6939      	ldr	r1, [r7, #16]
 8002ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eaa:	4013      	ands	r3, r2
 8002eac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 80a0 	bne.w	8003030 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f240 80dd 	bls.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80d7 	beq.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	6093      	str	r3, [r2, #8]
 8002f24:	e0cb      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2320      	movs	r3, #32
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e0bc      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 80b7 	bne.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d90f      	bls.n	8002f78 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e0a2      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f8a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	0159      	lsls	r1, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f9e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4403      	add	r3, r0
 8002fae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fb2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4403      	add	r3, r0
 8002fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4419      	add	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4403      	add	r3, r0
 8002fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d114      	bne.n	8003022 <PCD_EP_OutXfrComplete_int+0x16a>
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d108      	bne.n	8003022 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800301a:	461a      	mov	r2, r3
 800301c:	2101      	movs	r1, #1
 800301e:	f003 fd77 	bl	8006b10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f005 fafd 	bl	8008628 <HAL_PCD_DataOutStageCallback>
 800302e:	e046      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a26      	ldr	r2, [pc, #152]	; (80030cc <PCD_EP_OutXfrComplete_int+0x214>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d124      	bne.n	8003082 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e032      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2320      	movs	r3, #32
 8003072:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f005 fad4 	bl	8008628 <HAL_PCD_DataOutStageCallback>
 8003080:	e01d      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d114      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030aa:	461a      	mov	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f003 fd2f 	bl	8006b10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f005 fab5 	bl	8008628 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	4f54300a 	.word	0x4f54300a
 80030cc:	4f54310a 	.word	0x4f54310a

080030d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	333c      	adds	r3, #60	; 0x3c
 80030e8:	3304      	adds	r3, #4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <PCD_EP_OutSetupPacket_int+0x88>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d90e      	bls.n	8003124 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f005 fa6d 	bl	8008604 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <PCD_EP_OutSetupPacket_int+0x88>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d90c      	bls.n	800314c <PCD_EP_OutSetupPacket_int+0x7c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d108      	bne.n	800314c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003144:	461a      	mov	r2, r3
 8003146:	2101      	movs	r1, #1
 8003148:	f003 fce2 	bl	8006b10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	4f54300a 	.word	0x4f54300a

0800315c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
 8003168:	4613      	mov	r3, r2
 800316a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800317a:	883b      	ldrh	r3, [r7, #0]
 800317c:	0419      	lsls	r1, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	430a      	orrs	r2, r1
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
 8003188:	e028      	b.n	80031dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e00d      	b.n	80031ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3340      	adds	r3, #64	; 0x40
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	3b01      	subs	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3ec      	bcc.n	800319e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031c4:	883b      	ldrh	r3, [r7, #0]
 80031c6:	0418      	lsls	r0, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4302      	orrs	r2, r0
 80031d4:	3340      	adds	r3, #64	; 0x40
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	f043 0303 	orr.w	r3, r3, #3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fe faac 	bl	80018a0 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe faa8 	bl	80018a0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 fb7f 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fa0c 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	0800f170 	.word	0x0800f170
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	0800f180 	.word	0x0800f180

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	0800f180 	.word	0x0800f180

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d010      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80034c0:	4b6f      	ldr	r3, [pc, #444]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	496c      	ldr	r1, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80034de:	2301      	movs	r3, #1
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80034ee:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	4960      	ldr	r1, [pc, #384]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800350c:	2301      	movs	r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d017      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800351e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4955      	ldr	r1, [pc, #340]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353a:	d101      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800353c:	2301      	movs	r3, #1
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003548:	2301      	movs	r3, #1
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d017      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800355a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	4946      	ldr	r1, [pc, #280]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003576:	d101      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003578:	2301      	movs	r3, #1
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003584:	2301      	movs	r3, #1
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 808a 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a38      	ldr	r2, [pc, #224]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a33      	ldr	r2, [pc, #204]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035be:	f7fe f96f 	bl	80018a0 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fe f96b 	bl	80018a0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e278      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d028      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d114      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800362a:	f7fe f939 	bl	80018a0 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fe f935 	bl	80018a0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e240      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ee      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003660:	d114      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	4902      	ldr	r1, [pc, #8]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]
 800367c:	e00c      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000
 8003688:	42470e40 	.word	0x42470e40
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003692:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800369a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	4944      	ldr	r1, [pc, #272]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80036bc:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80036be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	4937      	ldr	r1, [pc, #220]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ee:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	492e      	ldr	r1, [pc, #184]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003710:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	4926      	ldr	r1, [pc, #152]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372e:	d101      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003730:	2301      	movs	r3, #1
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	491a      	ldr	r1, [pc, #104]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003768:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	4911      	ldr	r1, [pc, #68]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003782:	2301      	movs	r3, #1
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d005      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	f040 80ff 	bne.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800379e:	f7fe f87f 	bl	80018a0 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a4:	e00e      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037a6:	f7fe f87b 	bl	80018a0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d907      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e188      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	424711e0 	.word	0x424711e0
 80037c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c4:	4b7e      	ldr	r3, [pc, #504]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ea      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d028      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d124      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037f8:	4b71      	ldr	r3, [pc, #452]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	3301      	adds	r3, #1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800380a:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	431a      	orrs	r2, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	071b      	lsls	r3, r3, #28
 800383a:	4961      	ldr	r1, [pc, #388]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003860:	2b00      	cmp	r3, #0
 8003862:	d035      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d130      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800386e:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003880:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	0f1b      	lsrs	r3, r3, #28
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	431a      	orrs	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	431a      	orrs	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	071b      	lsls	r3, r3, #28
 80038b0:	4943      	ldr	r1, [pc, #268]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038b8:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038be:	f023 021f 	bic.w	r2, r3, #31
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	493d      	ldr	r1, [pc, #244]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d029      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e4:	d124      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038e6:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fe:	0f1b      	lsrs	r3, r3, #28
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	019b      	lsls	r3, r3, #6
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	071b      	lsls	r3, r3, #28
 8003928:	4925      	ldr	r1, [pc, #148]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003938:	2b00      	cmp	r3, #0
 800393a:	d016      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	4917      	ldr	r1, [pc, #92]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003970:	f7fd ff96 	bl	80018a0 <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003978:	f7fd ff92 	bl	80018a0 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e09f      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 8095 	bne.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd ff7c 	bl	80018a0 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039aa:	e00f      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039ac:	f7fd ff78 	bl	80018a0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d908      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e085      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470068 	.word	0x42470068
 80039c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d0e8      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02b      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d127      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003a02:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	4928      	ldr	r1, [pc, #160]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	3b01      	subs	r3, #1
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01d      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a66:	d118      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	0e1b      	lsrs	r3, r3, #24
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	019b      	lsls	r3, r3, #6
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	4910      	ldr	r1, [pc, #64]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fefe 	bl	80018a0 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003aa8:	f7fd fefa 	bl	80018a0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e007      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac6:	d1ef      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3730      	adds	r7, #48	; 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	42470070 	.word	0x42470070

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4bce      	ldr	r3, [pc, #824]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f200 818d 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x344>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <HAL_RCC_GetSysClockFreq+0x30>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003e21 	.word	0x08003e21
 8003b14:	08003e21 	.word	0x08003e21
 8003b18:	08003e21 	.word	0x08003e21
 8003b1c:	08003b47 	.word	0x08003b47
 8003b20:	08003e21 	.word	0x08003e21
 8003b24:	08003e21 	.word	0x08003e21
 8003b28:	08003e21 	.word	0x08003e21
 8003b2c:	08003b4d 	.word	0x08003b4d
 8003b30:	08003e21 	.word	0x08003e21
 8003b34:	08003e21 	.word	0x08003e21
 8003b38:	08003e21 	.word	0x08003e21
 8003b3c:	08003cc1 	.word	0x08003cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b40:	4bbd      	ldr	r3, [pc, #756]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b42:	61bb      	str	r3, [r7, #24]
       break;
 8003b44:	e16f      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b46:	4bbd      	ldr	r3, [pc, #756]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x360>)
 8003b48:	61bb      	str	r3, [r7, #24]
      break;
 8003b4a:	e16c      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4c:	4bb9      	ldr	r3, [pc, #740]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b56:	4bb7      	ldr	r3, [pc, #732]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d053      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b62:	4bb4      	ldr	r3, [pc, #720]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	ea02 0400 	and.w	r4, r2, r0
 8003b7a:	603c      	str	r4, [r7, #0]
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	014b      	lsls	r3, r1, #5
 8003b92:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b96:	0142      	lsls	r2, r0, #5
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	1ac0      	subs	r0, r0, r3
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	eb61 0103 	sbc.w	r1, r1, r3
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	018b      	lsls	r3, r1, #6
 8003bb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bb4:	0182      	lsls	r2, r0, #6
 8003bb6:	1a12      	subs	r2, r2, r0
 8003bb8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbc:	f04f 0000 	mov.w	r0, #0
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	00d9      	lsls	r1, r3, #3
 8003bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bca:	00d0      	lsls	r0, r2, #3
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	1852      	adds	r2, r2, r1
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb43 0101 	adc.w	r1, r3, r1
 8003bda:	460b      	mov	r3, r1
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0259      	lsls	r1, r3, #9
 8003be6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bea:	0250      	lsls	r0, r2, #9
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f7fc fb0a 	bl	8000214 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	e04c      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b8a      	ldr	r3, [pc, #552]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	461a      	mov	r2, r3
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	ea02 0a00 	and.w	sl, r2, r0
 8003c22:	ea03 0b01 	and.w	fp, r3, r1
 8003c26:	4650      	mov	r0, sl
 8003c28:	4659      	mov	r1, fp
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c38:	0142      	lsls	r2, r0, #5
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	ebb0 000a 	subs.w	r0, r0, sl
 8003c42:	eb61 010b 	sbc.w	r1, r1, fp
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c54:	0182      	lsls	r2, r0, #6
 8003c56:	1a12      	subs	r2, r2, r0
 8003c58:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	00d9      	lsls	r1, r3, #3
 8003c66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6a:	00d0      	lsls	r0, r2, #3
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	eb12 020a 	adds.w	r2, r2, sl
 8003c74:	eb43 030b 	adc.w	r3, r3, fp
 8003c78:	f04f 0000 	mov.w	r0, #0
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	0299      	lsls	r1, r3, #10
 8003c82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c86:	0290      	lsls	r0, r2, #10
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f7fc fabc 	bl	8000214 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca4:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
      break;
 8003cbe:	e0b2      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cca:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04d      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	ea02 0800 	and.w	r8, r2, r0
 8003cee:	ea03 0901 	and.w	r9, r3, r1
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	014b      	lsls	r3, r1, #5
 8003d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d04:	0142      	lsls	r2, r0, #5
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d0e:	eb61 0109 	sbc.w	r1, r1, r9
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d20:	0182      	lsls	r2, r0, #6
 8003d22:	1a12      	subs	r2, r2, r0
 8003d24:	eb63 0301 	sbc.w	r3, r3, r1
 8003d28:	f04f 0000 	mov.w	r0, #0
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	00d9      	lsls	r1, r3, #3
 8003d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d36:	00d0      	lsls	r0, r2, #3
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	eb12 0208 	adds.w	r2, r2, r8
 8003d40:	eb43 0309 	adc.w	r3, r3, r9
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	0259      	lsls	r1, r3, #9
 8003d4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d52:	0250      	lsls	r0, r2, #9
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f7fc fa56 	bl	8000214 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	e04a      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	ea02 0400 	and.w	r4, r2, r0
 8003d8a:	ea03 0501 	and.w	r5, r3, r1
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	014b      	lsls	r3, r1, #5
 8003d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da0:	0142      	lsls	r2, r0, #5
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	1b00      	subs	r0, r0, r4
 8003da8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	018b      	lsls	r3, r1, #6
 8003db6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dba:	0182      	lsls	r2, r0, #6
 8003dbc:	1a12      	subs	r2, r2, r0
 8003dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	00d9      	lsls	r1, r3, #3
 8003dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd0:	00d0      	lsls	r0, r2, #3
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	1912      	adds	r2, r2, r4
 8003dd8:	eb45 0303 	adc.w	r3, r5, r3
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	0299      	lsls	r1, r3, #10
 8003de6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dea:	0290      	lsls	r0, r2, #10
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	f7fc fa0a 	bl	8000214 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0f1b      	lsrs	r3, r3, #28
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	61bb      	str	r3, [r7, #24]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e22:	61bb      	str	r3, [r7, #24]
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	69bb      	ldr	r3, [r7, #24]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e28d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8083 	beq.w	8003f66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e60:	4b94      	ldr	r3, [pc, #592]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e78:	4b8e      	ldr	r3, [pc, #568]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b8b      	ldr	r3, [pc, #556]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b84      	ldr	r3, [pc, #528]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x124>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e25a      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x90>
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xb4>
 8003eda:	4b76      	ldr	r3, [pc, #472]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a75      	ldr	r2, [pc, #468]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a72      	ldr	r2, [pc, #456]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fcc4 	bl	80018a0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fcc0 	bl	80018a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e21f      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xdc>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fcb0 	bl	80018a0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd fcac 	bl	80018a0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e20b      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b57      	ldr	r3, [pc, #348]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x104>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06f      	beq.n	8004052 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f72:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e1d3      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCC_OscConfig+0x278>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd fc59 	bl	80018a0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fd fc55 	bl	80018a0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1b4      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4925      	ldr	r1, [pc, #148]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x278>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fc38 	bl	80018a0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004034:	f7fd fc34 	bl	80018a0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e193      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d036      	beq.n	80040cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd fc18 	bl	80018a0 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd fc14 	bl	80018a0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e173      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x234>
 8004092:	e01b      	b.n	80040cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fd fc01 	bl	80018a0 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	e00e      	b.n	80040c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fd fbfd 	bl	80018a0 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d907      	bls.n	80040c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e15c      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	42470000 	.word	0x42470000
 80040bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	4b8a      	ldr	r3, [pc, #552]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ea      	bne.n	80040a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8097 	beq.w	8004208 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b83      	ldr	r3, [pc, #524]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b7f      	ldr	r3, [pc, #508]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a7e      	ldr	r2, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b7c      	ldr	r3, [pc, #496]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b79      	ldr	r3, [pc, #484]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004122:	f7fd fbbd 	bl	80018a0 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412a:	f7fd fbb9 	bl	80018a0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e118      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x31e>
 8004150:	4b66      	ldr	r3, [pc, #408]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x340>
 8004166:	4b61      	ldr	r3, [pc, #388]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a60      	ldr	r2, [pc, #384]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a5d      	ldr	r2, [pc, #372]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a59      	ldr	r2, [pc, #356]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b57      	ldr	r3, [pc, #348]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fb7e 	bl	80018a0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd fb7a 	bl	80018a0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0d7      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <HAL_RCC_OscConfig+0x368>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fb68 	bl	80018a0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fd fb64 	bl	80018a0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0c1      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	4b40      	ldr	r3, [pc, #256]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ee      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a3a      	ldr	r2, [pc, #232]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80ad 	beq.w	800436c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b08      	cmp	r3, #8
 800421c:	d060      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d145      	bne.n	80042b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fb38 	bl	80018a0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd fb34 	bl	80018a0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e093      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	491b      	ldr	r1, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd fb09 	bl	80018a0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004292:	f7fd fb05 	bl	80018a0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e064      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x452>
 80042b0:	e05c      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd faf2 	bl	80018a0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fd faee 	bl	80018a0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x480>
 80042de:	e045      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e040      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000
 80042f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_RCC_OscConfig+0x538>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d030      	beq.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d129      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d122      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800432e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004330:	4293      	cmp	r3, r2
 8004332:	d119      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	3b01      	subs	r3, #1
 8004342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d10f      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07b      	b.n	8004486 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439e:	d009      	beq.n	80043b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f8da 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0104 	and.w	r1, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f003 0210 	and.w	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b088      	sub	sp, #32
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_SPI_Transmit+0x22>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e126      	b.n	80046fe <HAL_SPI_Transmit+0x270>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b8:	f7fd f9f2 	bl	80018a0 <HAL_GetTick>
 80044bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d2:	e10b      	b.n	80046ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0x52>
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e4:	e102      	b.n	80046ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2203      	movs	r2, #3
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	d10f      	bne.n	800454e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d007      	beq.n	800456c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004574:	d14b      	bne.n	800460e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0xf6>
 800457e:	8afb      	ldrh	r3, [r7, #22]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d13e      	bne.n	8004602 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045a8:	e02b      	b.n	8004602 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d112      	bne.n	80045de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	881a      	ldrh	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	86da      	strh	r2, [r3, #54]	; 0x36
 80045dc:	e011      	b.n	8004602 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045de:	f7fd f95f 	bl	80018a0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d803      	bhi.n	80045f6 <HAL_SPI_Transmit+0x168>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d102      	bne.n	80045fc <HAL_SPI_Transmit+0x16e>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004600:	e074      	b.n	80046ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ce      	bne.n	80045aa <HAL_SPI_Transmit+0x11c>
 800460c:	e04c      	b.n	80046a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_SPI_Transmit+0x18e>
 8004616:	8afb      	ldrh	r3, [r7, #22]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d140      	bne.n	800469e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004642:	e02c      	b.n	800469e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d113      	bne.n	800467a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	86da      	strh	r2, [r3, #54]	; 0x36
 8004678:	e011      	b.n	800469e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467a:	f7fd f911 	bl	80018a0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d803      	bhi.n	8004692 <HAL_SPI_Transmit+0x204>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d102      	bne.n	8004698 <HAL_SPI_Transmit+0x20a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800469c:	e026      	b.n	80046ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1cd      	bne.n	8004644 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	6839      	ldr	r1, [r7, #0]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fbcb 	bl	8004e48 <SPI_EndRxTxTransaction>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e000      	b.n	80046ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80046ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b088      	sub	sp, #32
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004722:	d112      	bne.n	800474a <HAL_SPI_Receive+0x44>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10e      	bne.n	800474a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2204      	movs	r2, #4
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f8f1 	bl	8004928 <HAL_SPI_TransmitReceive>
 8004746:	4603      	mov	r3, r0
 8004748:	e0ea      	b.n	8004920 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_SPI_Receive+0x52>
 8004754:	2302      	movs	r3, #2
 8004756:	e0e3      	b.n	8004920 <HAL_SPI_Receive+0x21a>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004760:	f7fd f89e 	bl	80018a0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d002      	beq.n	8004778 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004772:	2302      	movs	r3, #2
 8004774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004776:	e0ca      	b.n	800490e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Receive+0x7e>
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004788:	e0c1      	b.n	800490e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2204      	movs	r2, #4
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d10f      	bne.n	80047f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d007      	beq.n	8004810 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d162      	bne.n	80048de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004818:	e02e      	b.n	8004878 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d115      	bne.n	8004854 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f103 020c 	add.w	r2, r3, #12
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004852:	e011      	b.n	8004878 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004854:	f7fd f824 	bl	80018a0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d803      	bhi.n	800486c <HAL_SPI_Receive+0x166>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d102      	bne.n	8004872 <HAL_SPI_Receive+0x16c>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004876:	e04a      	b.n	800490e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1cb      	bne.n	800481a <HAL_SPI_Receive+0x114>
 8004882:	e031      	b.n	80048e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d113      	bne.n	80048ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	b292      	uxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b8:	e011      	b.n	80048de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ba:	f7fc fff1 	bl	80018a0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d803      	bhi.n	80048d2 <HAL_SPI_Receive+0x1cc>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Receive+0x1d2>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048dc:	e017      	b.n	800490e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1cd      	bne.n	8004884 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	6839      	ldr	r1, [r7, #0]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fa45 	bl	8004d7c <SPI_EndRxTransaction>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
 800490a:	e000      	b.n	800490e <HAL_SPI_Receive+0x208>
  }

error :
 800490c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	; 0x30
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004936:	2301      	movs	r3, #1
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_SPI_TransmitReceive+0x26>
 800494a:	2302      	movs	r3, #2
 800494c:	e18a      	b.n	8004c64 <HAL_SPI_TransmitReceive+0x33c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004956:	f7fc ffa3 	bl	80018a0 <HAL_GetTick>
 800495a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004974:	2b01      	cmp	r3, #1
 8004976:	d00f      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x70>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497e:	d107      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x68>
 8004988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800498c:	2b04      	cmp	r3, #4
 800498e:	d003      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004996:	e15b      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x82>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x82>
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049b0:	e14e      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d003      	beq.n	80049c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2205      	movs	r2, #5
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	887a      	ldrh	r2, [r7, #2]
 80049ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d007      	beq.n	8004a1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	d178      	bne.n	8004b16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x10a>
 8004a2c:	8b7b      	ldrh	r3, [r7, #26]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d166      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a56:	e053      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d11b      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x176>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d016      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x176>
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d113      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	881a      	ldrh	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d119      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x1b8>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d014      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004adc:	2301      	movs	r3, #1
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ae0:	f7fc fede 	bl	80018a0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d807      	bhi.n	8004b00 <HAL_SPI_TransmitReceive+0x1d8>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d003      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004afe:	e0a7      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1a6      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x130>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1a1      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x130>
 8004b14:	e07c      	b.n	8004c10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x1fc>
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d16b      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4a:	e057      	b.n	8004bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d11c      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x26c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x26c>
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d114      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d119      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x2ae>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d014      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bd6:	f7fc fe63 	bl	80018a0 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d803      	bhi.n	8004bee <HAL_SPI_TransmitReceive+0x2c6>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x2cc>
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bfa:	e029      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1a2      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x224>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d19d      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f917 	bl	8004e48 <SPI_EndRxTxTransaction>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c2c:	e010      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e000      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3730      	adds	r7, #48	; 0x30
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c7c:	f7fc fe10 	bl	80018a0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c8c:	f7fc fe08 	bl	80018a0 <HAL_GetTick>
 8004c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	015b      	lsls	r3, r3, #5
 8004c98:	0d1b      	lsrs	r3, r3, #20
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca2:	e054      	b.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d050      	beq.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cac:	f7fc fdf8 	bl	80018a0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d902      	bls.n	8004cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d13d      	bne.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d111      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d004      	beq.n	8004cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cee:	d107      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d08:	d10f      	bne.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e017      	b.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d19b      	bne.n	8004ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000000 	.word	0x20000000

08004d7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d90:	d111      	bne.n	8004db6 <SPI_EndRxTransaction+0x3a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9a:	d004      	beq.n	8004da6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d107      	bne.n	8004db6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbe:	d12a      	bne.n	8004e16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d012      	beq.n	8004df0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ff49 	bl	8004c6c <SPI_WaitFlagStateUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02d      	beq.n	8004e3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e026      	b.n	8004e3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2101      	movs	r1, #1
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff ff36 	bl	8004c6c <SPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01a      	beq.n	8004e3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e013      	b.n	8004e3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2101      	movs	r1, #1
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff ff23 	bl	8004c6c <SPI_WaitFlagStateUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <SPI_EndRxTxTransaction+0x7c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <SPI_EndRxTxTransaction+0x80>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0d5b      	lsrs	r3, r3, #21
 8004e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e72:	d112      	bne.n	8004e9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fef4 	bl	8004c6c <SPI_WaitFlagStateUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00f      	b.n	8004eba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d0f2      	beq.n	8004e9a <SPI_EndRxTxTransaction+0x52>
 8004eb4:	e000      	b.n	8004eb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004eb6:	bf00      	nop
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	165e9f81 	.word	0x165e9f81

08004ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e03f      	b.n	8004f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc fb90 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2224      	movs	r2, #36	; 0x24
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9a7 	bl	8005264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b08a      	sub	sp, #40	; 0x28
 8004f6a:	af02      	add	r7, sp, #8
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d17c      	bne.n	8005080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_UART_Transmit+0x2c>
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e075      	b.n	8005082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Transmit+0x3e>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e06e      	b.n	8005082 <HAL_UART_Transmit+0x11c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2221      	movs	r2, #33	; 0x21
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fba:	f7fc fc71 	bl	80018a0 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	88fa      	ldrh	r2, [r7, #6]
 8004fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d108      	bne.n	8004fe8 <HAL_UART_Transmit+0x82>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	e003      	b.n	8004ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ff8:	e02a      	b.n	8005050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f8e2 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e036      	b.n	8005082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3302      	adds	r3, #2
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e007      	b.n	8005042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3301      	adds	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1cf      	bne.n	8004ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8b2 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e006      	b.n	8005082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e000      	b.n	8005082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08a      	sub	sp, #40	; 0x28
 800508e:	af02      	add	r7, sp, #8
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	f040 808c 	bne.w	80051c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_UART_Receive+0x2e>
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e084      	b.n	80051c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Receive+0x40>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e07d      	b.n	80051c6 <HAL_UART_Receive+0x13c>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2222      	movs	r2, #34	; 0x22
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e6:	f7fc fbdb 	bl	80018a0 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005100:	d108      	bne.n	8005114 <HAL_UART_Receive+0x8a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	e003      	b.n	800511c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005124:	e043      	b.n	80051ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2120      	movs	r1, #32
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f84c 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e042      	b.n	80051c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	b29a      	uxth	r2, r3
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	3302      	adds	r3, #2
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e01f      	b.n	80051a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d007      	beq.n	800517a <HAL_UART_Receive+0xf0>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <HAL_UART_Receive+0xfe>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e008      	b.n	800519a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005194:	b2da      	uxtb	r2, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b6      	bne.n	8005126 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051de:	e02c      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d028      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x30>
 80051ee:	f7fc fb57 	bl	80018a0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d21d      	bcs.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800520c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	429a      	cmp	r2, r3
 8005256:	d0c3      	beq.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	b09f      	sub	sp, #124	; 0x7c
 800526a:	af00      	add	r7, sp, #0
 800526c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	68d9      	ldr	r1, [r3, #12]
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	ea40 0301 	orr.w	r3, r0, r1
 8005284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	431a      	orrs	r2, r3
 8005290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	431a      	orrs	r2, r3
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4313      	orrs	r3, r2
 800529c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052a8:	f021 010c 	bic.w	r1, r1, #12
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b2:	430b      	orrs	r3, r1
 80052b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c2:	6999      	ldr	r1, [r3, #24]
 80052c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	ea40 0301 	orr.w	r3, r0, r1
 80052cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4bc5      	ldr	r3, [pc, #788]	; (80055e8 <UART_SetConfig+0x384>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d004      	beq.n	80052e2 <UART_SetConfig+0x7e>
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4bc3      	ldr	r3, [pc, #780]	; (80055ec <UART_SetConfig+0x388>)
 80052de:	429a      	cmp	r2, r3
 80052e0:	d103      	bne.n	80052ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e2:	f7fe f8bd 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 80052e6:	6778      	str	r0, [r7, #116]	; 0x74
 80052e8:	e002      	b.n	80052f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ea:	f7fe f8a5 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 80052ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	f040 80b6 	bne.w	8005468 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fe:	461c      	mov	r4, r3
 8005300:	f04f 0500 	mov.w	r5, #0
 8005304:	4622      	mov	r2, r4
 8005306:	462b      	mov	r3, r5
 8005308:	1891      	adds	r1, r2, r2
 800530a:	6439      	str	r1, [r7, #64]	; 0x40
 800530c:	415b      	adcs	r3, r3
 800530e:	647b      	str	r3, [r7, #68]	; 0x44
 8005310:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005314:	1912      	adds	r2, r2, r4
 8005316:	eb45 0303 	adc.w	r3, r5, r3
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	00d9      	lsls	r1, r3, #3
 8005324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005328:	00d0      	lsls	r0, r2, #3
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	1911      	adds	r1, r2, r4
 8005330:	6639      	str	r1, [r7, #96]	; 0x60
 8005332:	416b      	adcs	r3, r5
 8005334:	667b      	str	r3, [r7, #100]	; 0x64
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	461a      	mov	r2, r3
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	1891      	adds	r1, r2, r2
 8005342:	63b9      	str	r1, [r7, #56]	; 0x38
 8005344:	415b      	adcs	r3, r3
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800534c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005350:	f7fa ff60 	bl	8000214 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4ba5      	ldr	r3, [pc, #660]	; (80055f0 <UART_SetConfig+0x38c>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	011e      	lsls	r6, r3, #4
 8005362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005364:	461c      	mov	r4, r3
 8005366:	f04f 0500 	mov.w	r5, #0
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	1891      	adds	r1, r2, r2
 8005370:	6339      	str	r1, [r7, #48]	; 0x30
 8005372:	415b      	adcs	r3, r3
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
 8005376:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800537a:	1912      	adds	r2, r2, r4
 800537c:	eb45 0303 	adc.w	r3, r5, r3
 8005380:	f04f 0000 	mov.w	r0, #0
 8005384:	f04f 0100 	mov.w	r1, #0
 8005388:	00d9      	lsls	r1, r3, #3
 800538a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800538e:	00d0      	lsls	r0, r2, #3
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	1911      	adds	r1, r2, r4
 8005396:	65b9      	str	r1, [r7, #88]	; 0x58
 8005398:	416b      	adcs	r3, r5
 800539a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800539c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	1891      	adds	r1, r2, r2
 80053a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80053aa:	415b      	adcs	r3, r3
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053b6:	f7fa ff2d 	bl	8000214 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4b8c      	ldr	r3, [pc, #560]	; (80055f0 <UART_SetConfig+0x38c>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a87      	ldr	r2, [pc, #540]	; (80055f0 <UART_SetConfig+0x38c>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e0:	441e      	add	r6, r3
 80053e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e4:	4618      	mov	r0, r3
 80053e6:	f04f 0100 	mov.w	r1, #0
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	1894      	adds	r4, r2, r2
 80053f0:	623c      	str	r4, [r7, #32]
 80053f2:	415b      	adcs	r3, r3
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053fa:	1812      	adds	r2, r2, r0
 80053fc:	eb41 0303 	adc.w	r3, r1, r3
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	f04f 0500 	mov.w	r5, #0
 8005408:	00dd      	lsls	r5, r3, #3
 800540a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800540e:	00d4      	lsls	r4, r2, #3
 8005410:	4622      	mov	r2, r4
 8005412:	462b      	mov	r3, r5
 8005414:	1814      	adds	r4, r2, r0
 8005416:	653c      	str	r4, [r7, #80]	; 0x50
 8005418:	414b      	adcs	r3, r1
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	1891      	adds	r1, r2, r2
 8005428:	61b9      	str	r1, [r7, #24]
 800542a:	415b      	adcs	r3, r3
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005432:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005436:	f7fa feed 	bl	8000214 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <UART_SetConfig+0x38c>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	; 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	3332      	adds	r3, #50	; 0x32
 8005452:	4a67      	ldr	r2, [pc, #412]	; (80055f0 <UART_SetConfig+0x38c>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 0207 	and.w	r2, r3, #7
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4432      	add	r2, r6
 8005464:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005466:	e0b9      	b.n	80055dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546a:	461c      	mov	r4, r3
 800546c:	f04f 0500 	mov.w	r5, #0
 8005470:	4622      	mov	r2, r4
 8005472:	462b      	mov	r3, r5
 8005474:	1891      	adds	r1, r2, r2
 8005476:	6139      	str	r1, [r7, #16]
 8005478:	415b      	adcs	r3, r3
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005480:	1912      	adds	r2, r2, r4
 8005482:	eb45 0303 	adc.w	r3, r5, r3
 8005486:	f04f 0000 	mov.w	r0, #0
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	00d9      	lsls	r1, r3, #3
 8005490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005494:	00d0      	lsls	r0, r2, #3
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	eb12 0804 	adds.w	r8, r2, r4
 800549e:	eb43 0905 	adc.w	r9, r3, r5
 80054a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	008b      	lsls	r3, r1, #2
 80054b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ba:	0082      	lsls	r2, r0, #2
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	f7fa fea8 	bl	8000214 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <UART_SetConfig+0x38c>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	011e      	lsls	r6, r3, #4
 80054d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d4:	4618      	mov	r0, r3
 80054d6:	f04f 0100 	mov.w	r1, #0
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	1894      	adds	r4, r2, r2
 80054e0:	60bc      	str	r4, [r7, #8]
 80054e2:	415b      	adcs	r3, r3
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ea:	1812      	adds	r2, r2, r0
 80054ec:	eb41 0303 	adc.w	r3, r1, r3
 80054f0:	f04f 0400 	mov.w	r4, #0
 80054f4:	f04f 0500 	mov.w	r5, #0
 80054f8:	00dd      	lsls	r5, r3, #3
 80054fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054fe:	00d4      	lsls	r4, r2, #3
 8005500:	4622      	mov	r2, r4
 8005502:	462b      	mov	r3, r5
 8005504:	1814      	adds	r4, r2, r0
 8005506:	64bc      	str	r4, [r7, #72]	; 0x48
 8005508:	414b      	adcs	r3, r1
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	008b      	lsls	r3, r1, #2
 8005520:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005524:	0082      	lsls	r2, r0, #2
 8005526:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800552a:	f7fa fe73 	bl	8000214 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <UART_SetConfig+0x38c>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	; 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	3332      	adds	r3, #50	; 0x32
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <UART_SetConfig+0x38c>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005552:	441e      	add	r6, r3
 8005554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005556:	4618      	mov	r0, r3
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	1894      	adds	r4, r2, r2
 8005562:	603c      	str	r4, [r7, #0]
 8005564:	415b      	adcs	r3, r3
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	1812      	adds	r2, r2, r0
 800556e:	eb41 0303 	adc.w	r3, r1, r3
 8005572:	f04f 0400 	mov.w	r4, #0
 8005576:	f04f 0500 	mov.w	r5, #0
 800557a:	00dd      	lsls	r5, r3, #3
 800557c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005580:	00d4      	lsls	r4, r2, #3
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	eb12 0a00 	adds.w	sl, r2, r0
 800558a:	eb43 0b01 	adc.w	fp, r3, r1
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	008b      	lsls	r3, r1, #2
 80055a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055a6:	0082      	lsls	r2, r0, #2
 80055a8:	4650      	mov	r0, sl
 80055aa:	4659      	mov	r1, fp
 80055ac:	f7fa fe32 	bl	8000214 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <UART_SetConfig+0x38c>)
 80055b6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2164      	movs	r1, #100	; 0x64
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	3332      	adds	r3, #50	; 0x32
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <UART_SetConfig+0x38c>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4432      	add	r2, r6
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	377c      	adds	r7, #124	; 0x7c
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40011000 	.word	0x40011000
 80055ec:	40011400 	.word	0x40011400
 80055f0:	51eb851f 	.word	0x51eb851f

080055f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 001c 	add.w	r0, r7, #28
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d122      	bne.n	8005652 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fac0 	bl	8006bcc <USB_CoreReset>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e01a      	b.n	8005688 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 fab4 	bl	8006bcc <USB_CoreReset>
 8005664:	4603      	mov	r3, r0
 8005666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
 800567a:	e005      	b.n	8005688 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10b      	bne.n	80056a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f043 0206 	orr.w	r2, r3, #6
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b2:	b004      	add	sp, #16
 80056b4:	4770      	bx	lr
	...

080056b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d165      	bne.n	8005798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a41      	ldr	r2, [pc, #260]	; (80057d4 <USB_SetTurnaroundTime+0x11c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d906      	bls.n	80056e2 <USB_SetTurnaroundTime+0x2a>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <USB_SetTurnaroundTime+0x120>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d202      	bcs.n	80056e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056dc:	230f      	movs	r3, #15
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e062      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <USB_SetTurnaroundTime+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d306      	bcc.n	80056f8 <USB_SetTurnaroundTime+0x40>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <USB_SetTurnaroundTime+0x124>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d202      	bcs.n	80056f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056f2:	230e      	movs	r3, #14
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e057      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a38      	ldr	r2, [pc, #224]	; (80057dc <USB_SetTurnaroundTime+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d306      	bcc.n	800570e <USB_SetTurnaroundTime+0x56>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a37      	ldr	r2, [pc, #220]	; (80057e0 <USB_SetTurnaroundTime+0x128>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d202      	bcs.n	800570e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005708:	230d      	movs	r3, #13
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e04c      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a33      	ldr	r2, [pc, #204]	; (80057e0 <USB_SetTurnaroundTime+0x128>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d306      	bcc.n	8005724 <USB_SetTurnaroundTime+0x6c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a32      	ldr	r2, [pc, #200]	; (80057e4 <USB_SetTurnaroundTime+0x12c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d802      	bhi.n	8005724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800571e:	230c      	movs	r3, #12
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e041      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a2f      	ldr	r2, [pc, #188]	; (80057e4 <USB_SetTurnaroundTime+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d906      	bls.n	800573a <USB_SetTurnaroundTime+0x82>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <USB_SetTurnaroundTime+0x130>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d802      	bhi.n	800573a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005734:	230b      	movs	r3, #11
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e036      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <USB_SetTurnaroundTime+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d906      	bls.n	8005750 <USB_SetTurnaroundTime+0x98>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <USB_SetTurnaroundTime+0x134>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d802      	bhi.n	8005750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800574a:	230a      	movs	r3, #10
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e02b      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a26      	ldr	r2, [pc, #152]	; (80057ec <USB_SetTurnaroundTime+0x134>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d906      	bls.n	8005766 <USB_SetTurnaroundTime+0xae>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <USB_SetTurnaroundTime+0x138>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d202      	bcs.n	8005766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005760:	2309      	movs	r3, #9
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e020      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <USB_SetTurnaroundTime+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d306      	bcc.n	800577c <USB_SetTurnaroundTime+0xc4>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <USB_SetTurnaroundTime+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d802      	bhi.n	800577c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005776:	2308      	movs	r3, #8
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e015      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <USB_SetTurnaroundTime+0x13c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d906      	bls.n	8005792 <USB_SetTurnaroundTime+0xda>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <USB_SetTurnaroundTime+0x140>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d202      	bcs.n	8005792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800578c:	2307      	movs	r3, #7
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e00a      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005792:	2306      	movs	r3, #6
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e007      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800579e:	2309      	movs	r3, #9
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e001      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057a4:	2309      	movs	r3, #9
 80057a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00d8acbf 	.word	0x00d8acbf
 80057d8:	00e4e1c0 	.word	0x00e4e1c0
 80057dc:	00f42400 	.word	0x00f42400
 80057e0:	01067380 	.word	0x01067380
 80057e4:	011a499f 	.word	0x011a499f
 80057e8:	01312cff 	.word	0x01312cff
 80057ec:	014ca43f 	.word	0x014ca43f
 80057f0:	016e3600 	.word	0x016e3600
 80057f4:	01a6ab1f 	.word	0x01a6ab1f
 80057f8:	01e84800 	.word	0x01e84800

080057fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d106      	bne.n	800586c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	e00b      	b.n	8005884 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e001      	b.n	8005884 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e003      	b.n	800588c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005884:	2032      	movs	r0, #50	; 0x32
 8005886:	f7fc f817 	bl	80018b8 <HAL_Delay>

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005894:	b084      	sub	sp, #16
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e009      	b.n	80058c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b0e      	cmp	r3, #14
 80058cc:	d9f2      	bls.n	80058b4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11c      	bne.n	800590e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e005      	b.n	800591a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	4619      	mov	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	461a      	mov	r2, r3
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10c      	bne.n	800595a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f949 	bl	8005be0 <USB_SetDevSpeed>
 800594e:	e008      	b.n	8005962 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005950:	2101      	movs	r1, #1
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f944 	bl	8005be0 <USB_SetDevSpeed>
 8005958:	e003      	b.n	8005962 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f93f 	bl	8005be0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005962:	2110      	movs	r1, #16
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8f3 	bl	8005b50 <USB_FlushTxFifo>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f911 	bl	8005b9c <USB_FlushRxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e043      	b.n	8005a36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d118      	bne.n	80059f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e013      	b.n	8005a0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e008      	b.n	8005a0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3301      	adds	r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b7      	bcc.n	80059ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e043      	b.n	8005acc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5a:	d118      	bne.n	8005a8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e013      	b.n	8005aa0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e008      	b.n	8005aa0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b7      	bcc.n	8005a44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <USB_DevInit+0x2b8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f043 0208 	orr.w	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b48:	b004      	add	sp, #16
 8005b4a:	4770      	bx	lr
 8005b4c:	803c3800 	.word	0x803c3800

08005b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	019b      	lsls	r3, r3, #6
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <USB_FlushTxFifo+0x48>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d0f0      	beq.n	8005b6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	00030d40 	.word	0x00030d40

08005b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2210      	movs	r2, #16
 8005bac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <USB_FlushRxFifo+0x40>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d0f0      	beq.n	8005bae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	00030d40 	.word	0x00030d40

08005be0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	75fb      	strb	r3, [r7, #23]
 8005c36:	e00a      	b.n	8005c4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d002      	beq.n	8005c44 <USB_GetDevSpeed+0x32>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d102      	bne.n	8005c4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c44:	2302      	movs	r3, #2
 8005c46:	75fb      	strb	r3, [r7, #23]
 8005c48:	e001      	b.n	8005c4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c4a:	230f      	movs	r3, #15
 8005c4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d13a      	bne.n	8005cee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	2101      	movs	r1, #1
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	68f9      	ldr	r1, [r7, #12]
 8005c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d155      	bne.n	8005d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	78db      	ldrb	r3, [r3, #3]
 8005cca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ccc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	059b      	lsls	r3, r3, #22
 8005cd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	e036      	b.n	8005d5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	2101      	movs	r1, #1
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11a      	bne.n	8005d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d42:	430b      	orrs	r3, r1
 8005d44:	4313      	orrs	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d161      	bne.n	8005e4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9e:	d11f      	bne.n	8005de0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e00:	4013      	ands	r3, r2
 8005e02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e24:	4013      	ands	r3, r2
 8005e26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	0159      	lsls	r1, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	440b      	add	r3, r1
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	4619      	mov	r1, r3
 8005e44:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <USB_DeactivateEndpoint+0x1b0>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]
 8005e4a:	e060      	b.n	8005f0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d11f      	bne.n	8005ea4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	041b      	lsls	r3, r3, #16
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	0159      	lsls	r1, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	4619      	mov	r1, r3
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <USB_DeactivateEndpoint+0x1b4>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	ec337800 	.word	0xec337800
 8005f20:	eff37800 	.word	0xeff37800

08005f24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	f040 815c 	bne.w	80061fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d132      	bne.n	8005fb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	0cdb      	lsrs	r3, r3, #19
 8005fae:	04db      	lsls	r3, r3, #19
 8005fb0:	6113      	str	r3, [r2, #16]
 8005fb2:	e074      	b.n	800609e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	0cdb      	lsrs	r3, r3, #19
 8005fd0:	04db      	lsls	r3, r3, #19
 8005fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	440b      	add	r3, r1
 8006010:	1e59      	subs	r1, r3, #1
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	fbb1 f3f3 	udiv	r3, r1, r3
 800601a:	04d9      	lsls	r1, r3, #19
 800601c:	4b9d      	ldr	r3, [pc, #628]	; (8006294 <USB_EPStartXfer+0x370>)
 800601e:	400b      	ands	r3, r1
 8006020:	69b9      	ldr	r1, [r7, #24]
 8006022:	0148      	lsls	r0, r1, #5
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	4401      	add	r1, r0
 8006028:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006046:	69b9      	ldr	r1, [r7, #24]
 8006048:	0148      	lsls	r0, r1, #5
 800604a:	69f9      	ldr	r1, [r7, #28]
 800604c:	4401      	add	r1, r0
 800604e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006052:	4313      	orrs	r3, r2
 8006054:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d11f      	bne.n	800609e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006078:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800607c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800609c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d14b      	bne.n	800613c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	78db      	ldrb	r3, [r3, #3]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d128      	bne.n	800611a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d110      	bne.n	80060fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e00f      	b.n	800611a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e12f      	b.n	800639c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d015      	beq.n	8006190 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8117 	beq.w	800639c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	69f9      	ldr	r1, [r7, #28]
 8006186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618a:	4313      	orrs	r3, r2
 800618c:	634b      	str	r3, [r1, #52]	; 0x34
 800618e:	e105      	b.n	800639c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d110      	bne.n	80061c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e00f      	b.n	80061e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68d9      	ldr	r1, [r3, #12]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	b298      	uxth	r0, r3
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4603      	mov	r3, r0
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fa2b 	bl	8006652 <USB_WritePacket>
 80061fc:	e0ce      	b.n	800639c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006218:	0cdb      	lsrs	r3, r3, #19
 800621a:	04db      	lsls	r3, r3, #19
 800621c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800623c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006240:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d126      	bne.n	8006298 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	0148      	lsls	r0, r1, #5
 8006264:	69f9      	ldr	r1, [r7, #28]
 8006266:	4401      	add	r1, r0
 8006268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800626c:	4313      	orrs	r3, r2
 800626e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800628e:	6113      	str	r3, [r2, #16]
 8006290:	e036      	b.n	8006300 <USB_EPStartXfer+0x3dc>
 8006292:	bf00      	nop
 8006294:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	8afb      	ldrh	r3, [r7, #22]
 80062be:	04d9      	lsls	r1, r3, #19
 80062c0:	4b39      	ldr	r3, [pc, #228]	; (80063a8 <USB_EPStartXfer+0x484>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	0148      	lsls	r0, r1, #5
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	4401      	add	r1, r0
 80062cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d0:	4313      	orrs	r3, r2
 80062d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	8af9      	ldrh	r1, [r7, #22]
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	0148      	lsls	r0, r1, #5
 80062f4:	69f9      	ldr	r1, [r7, #28]
 80062f6:	4401      	add	r1, r0
 80062f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062fc:	4313      	orrs	r3, r2
 80062fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10d      	bne.n	8006322 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	460a      	mov	r2, r1
 8006320:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	78db      	ldrb	r3, [r3, #3]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d128      	bne.n	800637c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e00f      	b.n	800637c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	1ff80000 	.word	0x1ff80000

080063ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 80cd 	bne.w	8006568 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d132      	bne.n	800643c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006434:	0cdb      	lsrs	r3, r3, #19
 8006436:	04db      	lsls	r3, r3, #19
 8006438:	6113      	str	r3, [r2, #16]
 800643a:	e04e      	b.n	80064da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006456:	0cdb      	lsrs	r3, r3, #19
 8006458:	04db      	lsls	r3, r3, #19
 800645a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800647a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800647e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d903      	bls.n	8006494 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	6979      	ldr	r1, [r7, #20]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d11e      	bne.n	800651e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e092      	b.n	8006644 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800653c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d07e      	beq.n	8006644 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	2101      	movs	r1, #1
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006562:	4313      	orrs	r3, r2
 8006564:	634b      	str	r3, [r1, #52]	; 0x34
 8006566:	e06d      	b.n	8006644 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006582:	0cdb      	lsrs	r3, r3, #19
 8006584:	04db      	lsls	r3, r3, #19
 8006586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f2:	6939      	ldr	r1, [r7, #16]
 80065f4:	0148      	lsls	r0, r1, #5
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	4401      	add	r1, r0
 80065fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065fe:	4313      	orrs	r3, r2
 8006600:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10d      	bne.n	8006624 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68d9      	ldr	r1, [r3, #12]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	460a      	mov	r2, r1
 8006622:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006652:	b480      	push	{r7}
 8006654:	b089      	sub	sp, #36	; 0x24
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	4611      	mov	r1, r2
 800665e:	461a      	mov	r2, r3
 8006660:	460b      	mov	r3, r1
 8006662:	71fb      	strb	r3, [r7, #7]
 8006664:	4613      	mov	r3, r2
 8006666:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006670:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11a      	bne.n	80066ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006678:	88bb      	ldrh	r3, [r7, #4]
 800667a:	3303      	adds	r3, #3
 800667c:	089b      	lsrs	r3, r3, #2
 800667e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e00f      	b.n	80066a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	031a      	lsls	r2, r3, #12
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006692:	461a      	mov	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6013      	str	r3, [r2, #0]
      pSrc++;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	3304      	adds	r3, #4
 800669e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3eb      	bcc.n	8006686 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3724      	adds	r7, #36	; 0x24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066bc:	b480      	push	{r7}
 80066be:	b089      	sub	sp, #36	; 0x24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	3303      	adds	r3, #3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e00b      	b.n	80066f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3304      	adds	r3, #4
 80066f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	3301      	adds	r3, #1
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d3ef      	bcc.n	80066e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006700:	69fb      	ldr	r3, [r7, #28]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3724      	adds	r7, #36	; 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d12c      	bne.n	8006784 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	db12      	blt.n	8006762 <USB_EPSetStall+0x54>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00f      	beq.n	8006762 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006760:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e02b      	b.n	80067dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	db12      	blt.n	80067bc <USB_EPSetStall+0xae>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00f      	beq.n	80067bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d128      	bne.n	8006858 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	78db      	ldrb	r3, [r3, #3]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d003      	beq.n	8006836 <USB_EPClearStall+0x4c>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d138      	bne.n	80068a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e027      	b.n	80068a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d003      	beq.n	8006888 <USB_EPClearStall+0x9e>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	78db      	ldrb	r3, [r3, #3]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d10f      	bne.n	80068a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006930:	f023 0302 	bic.w	r3, r3, #2
 8006934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006972:	f043 0302 	orr.w	r3, r3, #2
 8006976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	0c1b      	lsrs	r3, r3, #16
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	4013      	ands	r3, r2
 8006a02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	b29b      	uxth	r3, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a42:	68bb      	ldr	r3, [r7, #8]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	333c      	adds	r3, #60	; 0x3c
 8006b26:	3304      	adds	r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4a26      	ldr	r2, [pc, #152]	; (8006bc8 <USB_EP0_OutStart+0xb8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d90a      	bls.n	8006b4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b44:	d101      	bne.n	8006b4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e037      	b.n	8006bba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	461a      	mov	r2, r3
 8006b52:	2300      	movs	r3, #0
 8006b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b78:	f043 0318 	orr.w	r3, r3, #24
 8006b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d10f      	bne.n	8006bb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	4f54300a 	.word	0x4f54300a

08006bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <USB_CoreReset+0x64>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e01b      	b.n	8006c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	daf2      	bge.n	8006bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <USB_CoreReset+0x64>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d901      	bls.n	8006c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e006      	b.n	8006c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d0f0      	beq.n	8006c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	00030d40 	.word	0x00030d40

08006c34 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006c40:	2010      	movs	r0, #16
 8006c42:	f001 ff97 	bl	8008b74 <USBD_static_malloc>
 8006c46:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c56:	2302      	movs	r3, #2
 8006c58:	e01b      	b.n	8006c92 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7c1b      	ldrb	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006c70:	e002      	b.n	8006c78 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220a      	movs	r2, #10
 8006c76:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006c78:	2304      	movs	r3, #4
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	2181      	movs	r1, #129	; 0x81
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fe19 	bl	80088b6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006ca6:	2181      	movs	r1, #129	; 0x81
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fe2a 	bl	8008902 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 ff60 	bl	8008b90 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0e8      	b.n	8006eda <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d046      	beq.n	8006da2 <USBD_HID_Setup+0xbe>
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	f040 80d8 	bne.w	8006eca <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	3b02      	subs	r3, #2
 8006d20:	2b09      	cmp	r3, #9
 8006d22:	d836      	bhi.n	8006d92 <USBD_HID_Setup+0xae>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <USBD_HID_Setup+0x48>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d83 	.word	0x08006d83
 8006d30:	08006d63 	.word	0x08006d63
 8006d34:	08006d93 	.word	0x08006d93
 8006d38:	08006d93 	.word	0x08006d93
 8006d3c:	08006d93 	.word	0x08006d93
 8006d40:	08006d93 	.word	0x08006d93
 8006d44:	08006d93 	.word	0x08006d93
 8006d48:	08006d93 	.word	0x08006d93
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d55 	.word	0x08006d55
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]
          break;
 8006d60:	e01e      	b.n	8006da0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fa4c 	bl	8008206 <USBD_CtlSendData>
          break;
 8006d6e:	e017      	b.n	8006da0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]
          break;
 8006d80:	e00e      	b.n	8006da0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3304      	adds	r3, #4
 8006d86:	2201      	movs	r2, #1
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fa3b 	bl	8008206 <USBD_CtlSendData>
          break;
 8006d90:	e006      	b.n	8006da0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f9c5 	bl	8008124 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9e:	bf00      	nop
      }
      break;
 8006da0:	e09a      	b.n	8006ed8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b0b      	cmp	r3, #11
 8006da8:	f200 8086 	bhi.w	8006eb8 <USBD_HID_Setup+0x1d4>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBD_HID_Setup+0xd0>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de5 	.word	0x08006de5
 8006db8:	08006ec7 	.word	0x08006ec7
 8006dbc:	08006eb9 	.word	0x08006eb9
 8006dc0:	08006eb9 	.word	0x08006eb9
 8006dc4:	08006eb9 	.word	0x08006eb9
 8006dc8:	08006eb9 	.word	0x08006eb9
 8006dcc:	08006e0f 	.word	0x08006e0f
 8006dd0:	08006eb9 	.word	0x08006eb9
 8006dd4:	08006eb9 	.word	0x08006eb9
 8006dd8:	08006eb9 	.word	0x08006eb9
 8006ddc:	08006e67 	.word	0x08006e67
 8006de0:	08006e91 	.word	0x08006e91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d107      	bne.n	8006e00 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006df0:	f107 030a 	add.w	r3, r7, #10
 8006df4:	2202      	movs	r2, #2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fa04 	bl	8008206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dfe:	e063      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 f98e 	bl	8008124 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0c:	e05c      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b22      	cmp	r3, #34	; 0x22
 8006e18:	d108      	bne.n	8006e2c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	2b4a      	cmp	r3, #74	; 0x4a
 8006e20:	bf28      	it	cs
 8006e22:	234a      	movcs	r3, #74	; 0x4a
 8006e24:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <USBD_HID_Setup+0x200>)
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	e015      	b.n	8006e58 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	885b      	ldrh	r3, [r3, #2]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b21      	cmp	r3, #33	; 0x21
 8006e36:	d108      	bne.n	8006e4a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006e38:	4b2b      	ldr	r3, [pc, #172]	; (8006ee8 <USBD_HID_Setup+0x204>)
 8006e3a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	bf28      	it	cs
 8006e44:	2309      	movcs	r3, #9
 8006e46:	82bb      	strh	r3, [r7, #20]
 8006e48:	e006      	b.n	8006e58 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f969 	bl	8008124 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e52:	2303      	movs	r3, #3
 8006e54:	75fb      	strb	r3, [r7, #23]
            break;
 8006e56:	e037      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e58:	8abb      	ldrh	r3, [r7, #20]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6939      	ldr	r1, [r7, #16]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 f9d1 	bl	8008206 <USBD_CtlSendData>
          break;
 8006e64:	e030      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3308      	adds	r3, #8
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f9c3 	bl	8008206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e80:	e022      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f94d 	bl	8008124 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8e:	e01b      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d106      	bne.n	8006eaa <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	885b      	ldrh	r3, [r3, #2]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ea8:	e00e      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f939 	bl	8008124 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb6:	e007      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 f932 	bl	8008124 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec4:	e000      	b.n	8006ec8 <USBD_HID_Setup+0x1e4>
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e006      	b.n	8006ed8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f929 	bl	8008124 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200000c8 	.word	0x200000c8
 8006ee8:	200000b0 	.word	0x200000b0

08006eec <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f00:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e013      	b.n	8006f34 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d10c      	bne.n	8006f32 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	7b1b      	ldrb	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d108      	bne.n	8006f32 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2201      	movs	r2, #1
 8006f24:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	2181      	movs	r1, #129	; 0x81
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 fd90 	bl	8008a52 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2222      	movs	r2, #34	; 0x22
 8006f48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006f4a:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000044 	.word	0x20000044

08006f5c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2222      	movs	r2, #34	; 0x22
 8006f68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006f6a:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20000068 	.word	0x20000068

08006f7c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2222      	movs	r2, #34	; 0x22
 8006f88:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	2000008c 	.word	0x2000008c

08006f9c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fae:	2200      	movs	r2, #0
 8006fb0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	220a      	movs	r2, #10
 8006fcc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200000bc 	.word	0x200000bc

08006fe0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e01f      	b.n	8007038 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	79fa      	ldrb	r2, [r7, #7]
 800702a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 fbdb 	bl	80087e8 <USBD_LL_Init>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e016      	b.n	8007086 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fbf2 	bl	8008880 <USBD_LL_Start>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	4611      	mov	r1, r2
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
  }

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ffba 	bl	80080b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2b02      	cmp	r3, #2
 800715e:	d01a      	beq.n	8007196 <USBD_LL_SetupStage+0x72>
 8007160:	2b02      	cmp	r3, #2
 8007162:	d822      	bhi.n	80071aa <USBD_LL_SetupStage+0x86>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USBD_LL_SetupStage+0x4a>
 8007168:	2b01      	cmp	r3, #1
 800716a:	d00a      	beq.n	8007182 <USBD_LL_SetupStage+0x5e>
 800716c:	e01d      	b.n	80071aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa62 	bl	8007640 <USBD_StdDevReq>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	e020      	b.n	80071c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fac6 	bl	800771c <USBD_StdItfReq>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
      break;
 8007194:	e016      	b.n	80071c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fb05 	bl	80077ae <USBD_StdEPReq>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
      break;
 80071a8:	e00c      	b.n	80071c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fbc1 	bl	8008940 <USBD_LL_StallEP>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
      break;
 80071c2:	bf00      	nop
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	460b      	mov	r3, r1
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d138      	bne.n	8007254 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d14a      	bne.n	800728a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d913      	bls.n	8007228 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4293      	cmp	r3, r2
 8007218:	bf28      	it	cs
 800721a:	4613      	movcs	r3, r2
 800721c:	461a      	mov	r2, r3
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f001 f81c 	bl	800825e <USBD_CtlContinueRx>
 8007226:	e030      	b.n	800728a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b03      	cmp	r3, #3
 8007232:	d10b      	bne.n	800724c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 f817 	bl	8008280 <USBD_CtlSendStatus>
 8007252:	e01a      	b.n	800728a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b03      	cmp	r3, #3
 800725e:	d114      	bne.n	800728a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	7afa      	ldrb	r2, [r7, #11]
 8007276:	4611      	mov	r1, r2
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	e000      	b.n	800728c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d16b      	bne.n	8007380 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3314      	adds	r3, #20
 80072ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d156      	bne.n	8007366 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d914      	bls.n	80072ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 ffae 	bl	800823c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e0:	2300      	movs	r3, #0
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 fbd4 	bl	8008a94 <USBD_LL_PrepareReceive>
 80072ec:	e03b      	b.n	8007366 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d11c      	bne.n	8007334 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007302:	429a      	cmp	r2, r3
 8007304:	d316      	bcc.n	8007334 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007310:	429a      	cmp	r2, r3
 8007312:	d20f      	bcs.n	8007334 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 ff8f 	bl	800823c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 fbb1 	bl	8008a94 <USBD_LL_PrepareReceive>
 8007332:	e018      	b.n	8007366 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10b      	bne.n	8007358 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f001 faf0 	bl	8008940 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 ffa0 	bl	80082a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800736c:	2b01      	cmp	r3, #1
 800736e:	d122      	bne.n	80073b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff fe98 	bl	80070a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800737e:	e01a      	b.n	80073b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b03      	cmp	r3, #3
 800738a:	d114      	bne.n	80073b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	7afa      	ldrb	r2, [r7, #11]
 80073a2:	4611      	mov	r1, r2
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	4798      	blx	r3
 80073a8:	4603      	mov	r3, r0
 80073aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	e000      	b.n	80073b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e02f      	b.n	8007454 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00f      	beq.n	800741e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6852      	ldr	r2, [r2, #4]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	4611      	mov	r1, r2
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800741e:	2340      	movs	r3, #64	; 0x40
 8007420:	2200      	movs	r2, #0
 8007422:	2100      	movs	r1, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fa46 	bl	80088b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2240      	movs	r2, #64	; 0x40
 8007436:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	2200      	movs	r2, #0
 800743e:	2180      	movs	r1, #128	; 0x80
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fa38 	bl	80088b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748a:	b2da      	uxtb	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d106      	bne.n	80074ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e012      	b.n	8007514 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d10b      	bne.n	8007512 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	e014      	b.n	8007560 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d10d      	bne.n	800755e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	78fa      	ldrb	r2, [r7, #3]
 8007558:	4611      	mov	r1, r2
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	e014      	b.n	80075ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d10d      	bne.n	80075aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6852      	ldr	r2, [r2, #4]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	4611      	mov	r1, r2
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007602:	b480      	push	{r7}
 8007604:	b087      	sub	sp, #28
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	3301      	adds	r3, #1
 8007618:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007620:	8a3b      	ldrh	r3, [r7, #16]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	b21a      	sxth	r2, r3
 8007626:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800762a:	4313      	orrs	r3, r2
 800762c:	b21b      	sxth	r3, r3
 800762e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007630:	89fb      	ldrh	r3, [r7, #14]
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d005      	beq.n	8007666 <USBD_StdDevReq+0x26>
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d853      	bhi.n	8007706 <USBD_StdDevReq+0xc6>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBD_StdDevReq+0x3a>
 8007662:	2b20      	cmp	r3, #32
 8007664:	d14f      	bne.n	8007706 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]
      break;
 8007678:	e04a      	b.n	8007710 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b09      	cmp	r3, #9
 8007680:	d83b      	bhi.n	80076fa <USBD_StdDevReq+0xba>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_StdDevReq+0x48>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076dd 	.word	0x080076dd
 800768c:	080076f1 	.word	0x080076f1
 8007690:	080076fb 	.word	0x080076fb
 8007694:	080076e7 	.word	0x080076e7
 8007698:	080076fb 	.word	0x080076fb
 800769c:	080076bb 	.word	0x080076bb
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076fb 	.word	0x080076fb
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	080076c5 	.word	0x080076c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f9de 	bl	8007a74 <USBD_GetDescriptor>
          break;
 80076b8:	e024      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb6d 	bl	8007d9c <USBD_SetAddress>
          break;
 80076c2:	e01f      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fbac 	bl	8007e24 <USBD_SetConfig>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
          break;
 80076d0:	e018      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc4b 	bl	8007f70 <USBD_GetConfig>
          break;
 80076da:	e013      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fc7c 	bl	8007fdc <USBD_GetStatus>
          break;
 80076e4:	e00e      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fcab 	bl	8008044 <USBD_SetFeature>
          break;
 80076ee:	e009      	b.n	8007704 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fcba 	bl	800806c <USBD_ClrFeature>
          break;
 80076f8:	e004      	b.n	8007704 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fd11 	bl	8008124 <USBD_CtlError>
          break;
 8007702:	bf00      	nop
      }
      break;
 8007704:	e004      	b.n	8007710 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fd0b 	bl	8008124 <USBD_CtlError>
      break;
 800770e:	bf00      	nop
  }

  return ret;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop

0800771c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d005      	beq.n	8007742 <USBD_StdItfReq+0x26>
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d82f      	bhi.n	800779a <USBD_StdItfReq+0x7e>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <USBD_StdItfReq+0x26>
 800773e:	2b20      	cmp	r3, #32
 8007740:	d12b      	bne.n	800779a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007748:	b2db      	uxtb	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	2b02      	cmp	r3, #2
 800774e:	d81d      	bhi.n	800778c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	889b      	ldrh	r3, [r3, #4]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d813      	bhi.n	8007782 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d110      	bne.n	8007796 <USBD_StdItfReq+0x7a>
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10d      	bne.n	8007796 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fd80 	bl	8008280 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007780:	e009      	b.n	8007796 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fccd 	bl	8008124 <USBD_CtlError>
          break;
 800778a:	e004      	b.n	8007796 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fcc8 	bl	8008124 <USBD_CtlError>
          break;
 8007794:	e000      	b.n	8007798 <USBD_StdItfReq+0x7c>
          break;
 8007796:	bf00      	nop
      }
      break;
 8007798:	e004      	b.n	80077a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fcc1 	bl	8008124 <USBD_CtlError>
      break;
 80077a2:	bf00      	nop
  }

  return ret;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	889b      	ldrh	r3, [r3, #4]
 80077c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d007      	beq.n	80077de <USBD_StdEPReq+0x30>
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	f200 8145 	bhi.w	8007a5e <USBD_StdEPReq+0x2b0>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <USBD_StdEPReq+0x44>
 80077d8:	2b20      	cmp	r3, #32
 80077da:	f040 8140 	bne.w	8007a5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
      break;
 80077f0:	e13a      	b.n	8007a68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d007      	beq.n	800780a <USBD_StdEPReq+0x5c>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f300 8129 	bgt.w	8007a52 <USBD_StdEPReq+0x2a4>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d07f      	beq.n	8007904 <USBD_StdEPReq+0x156>
 8007804:	2b01      	cmp	r3, #1
 8007806:	d03c      	beq.n	8007882 <USBD_StdEPReq+0xd4>
 8007808:	e123      	b.n	8007a52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d002      	beq.n	800781c <USBD_StdEPReq+0x6e>
 8007816:	2b03      	cmp	r3, #3
 8007818:	d016      	beq.n	8007848 <USBD_StdEPReq+0x9a>
 800781a:	e02c      	b.n	8007876 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00d      	beq.n	800783e <USBD_StdEPReq+0x90>
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b80      	cmp	r3, #128	; 0x80
 8007826:	d00a      	beq.n	800783e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f887 	bl	8008940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007832:	2180      	movs	r1, #128	; 0x80
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f883 	bl	8008940 <USBD_LL_StallEP>
 800783a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800783c:	e020      	b.n	8007880 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc6f 	bl	8008124 <USBD_CtlError>
              break;
 8007846:	e01b      	b.n	8007880 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10e      	bne.n	800786e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <USBD_StdEPReq+0xc0>
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d008      	beq.n	800786e <USBD_StdEPReq+0xc0>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	88db      	ldrh	r3, [r3, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f869 	bl	8008940 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fd06 	bl	8008280 <USBD_CtlSendStatus>

              break;
 8007874:	e004      	b.n	8007880 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc53 	bl	8008124 <USBD_CtlError>
              break;
 800787e:	bf00      	nop
          }
          break;
 8007880:	e0ec      	b.n	8007a5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d002      	beq.n	8007894 <USBD_StdEPReq+0xe6>
 800788e:	2b03      	cmp	r3, #3
 8007890:	d016      	beq.n	80078c0 <USBD_StdEPReq+0x112>
 8007892:	e030      	b.n	80078f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <USBD_StdEPReq+0x108>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b80      	cmp	r3, #128	; 0x80
 800789e:	d00a      	beq.n	80078b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f84b 	bl	8008940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078aa:	2180      	movs	r1, #128	; 0x80
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f847 	bl	8008940 <USBD_LL_StallEP>
 80078b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b4:	e025      	b.n	8007902 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc33 	bl	8008124 <USBD_CtlError>
              break;
 80078be:	e020      	b.n	8007902 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	885b      	ldrh	r3, [r3, #2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d11b      	bne.n	8007900 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 f851 	bl	800897e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fccf 	bl	8008280 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80078f4:	e004      	b.n	8007900 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc13 	bl	8008124 <USBD_CtlError>
              break;
 80078fe:	e000      	b.n	8007902 <USBD_StdEPReq+0x154>
              break;
 8007900:	bf00      	nop
          }
          break;
 8007902:	e0ab      	b.n	8007a5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d002      	beq.n	8007916 <USBD_StdEPReq+0x168>
 8007910:	2b03      	cmp	r3, #3
 8007912:	d032      	beq.n	800797a <USBD_StdEPReq+0x1cc>
 8007914:	e097      	b.n	8007a46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <USBD_StdEPReq+0x17e>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d004      	beq.n	800792c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fbfd 	bl	8008124 <USBD_CtlError>
                break;
 800792a:	e091      	b.n	8007a50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da0b      	bge.n	800794c <USBD_StdEPReq+0x19e>
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	3310      	adds	r3, #16
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	e00b      	b.n	8007964 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4413      	add	r3, r2
 8007962:	3304      	adds	r3, #4
 8007964:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2202      	movs	r2, #2
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fc47 	bl	8008206 <USBD_CtlSendData>
              break;
 8007978:	e06a      	b.n	8007a50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800797a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	da11      	bge.n	80079a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	f003 020f 	and.w	r2, r3, #15
 8007988:	6879      	ldr	r1, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	3324      	adds	r3, #36	; 0x24
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d117      	bne.n	80079cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbc0 	bl	8008124 <USBD_CtlError>
                  break;
 80079a4:	e054      	b.n	8007a50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fbad 	bl	8008124 <USBD_CtlError>
                  break;
 80079ca:	e041      	b.n	8007a50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0b      	bge.n	80079ec <USBD_StdEPReq+0x23e>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3310      	adds	r3, #16
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	e00b      	b.n	8007a04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <USBD_StdEPReq+0x264>
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d103      	bne.n	8007a1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e00e      	b.n	8007a38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 ffcc 	bl	80089bc <USBD_LL_IsStallEP>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e002      	b.n	8007a38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fbe1 	bl	8008206 <USBD_CtlSendData>
              break;
 8007a44:	e004      	b.n	8007a50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fb6b 	bl	8008124 <USBD_CtlError>
              break;
 8007a4e:	bf00      	nop
          }
          break;
 8007a50:	e004      	b.n	8007a5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb65 	bl	8008124 <USBD_CtlError>
          break;
 8007a5a:	bf00      	nop
      }
      break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb5f 	bl	8008124 <USBD_CtlError>
      break;
 8007a66:	bf00      	nop
  }

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	885b      	ldrh	r3, [r3, #2]
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	2b0e      	cmp	r3, #14
 8007a96:	f200 8152 	bhi.w	8007d3e <USBD_GetDescriptor+0x2ca>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <USBD_GetDescriptor+0x2c>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007b29 	.word	0x08007b29
 8007aa8:	08007b69 	.word	0x08007b69
 8007aac:	08007d3f 	.word	0x08007d3f
 8007ab0:	08007d3f 	.word	0x08007d3f
 8007ab4:	08007cdf 	.word	0x08007cdf
 8007ab8:	08007d0b 	.word	0x08007d0b
 8007abc:	08007d3f 	.word	0x08007d3f
 8007ac0:	08007d3f 	.word	0x08007d3f
 8007ac4:	08007d3f 	.word	0x08007d3f
 8007ac8:	08007d3f 	.word	0x08007d3f
 8007acc:	08007d3f 	.word	0x08007d3f
 8007ad0:	08007d3f 	.word	0x08007d3f
 8007ad4:	08007d3f 	.word	0x08007d3f
 8007ad8:	08007add 	.word	0x08007add
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007afe:	e126      	b.n	8007d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fb0e 	bl	8008124 <USBD_CtlError>
        err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b0e:	e11e      	b.n	8007d4e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
      break;
 8007b26:	e112      	b.n	8007d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7c1b      	ldrb	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10d      	bne.n	8007b4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f107 0208 	add.w	r2, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b4a:	e100      	b.n	8007d4e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f107 0208 	add.w	r2, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	2202      	movs	r2, #2
 8007b64:	701a      	strb	r2, [r3, #0]
      break;
 8007b66:	e0f2      	b.n	8007d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	f200 80ac 	bhi.w	8007ccc <USBD_GetDescriptor+0x258>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USBD_GetDescriptor+0x108>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007bc9 	.word	0x08007bc9
 8007b84:	08007bfd 	.word	0x08007bfd
 8007b88:	08007c31 	.word	0x08007c31
 8007b8c:	08007c65 	.word	0x08007c65
 8007b90:	08007c99 	.word	0x08007c99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb6:	e091      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fab2 	bl	8008124 <USBD_CtlError>
            err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc6:	e089      	b.n	8007cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bea:	e077      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa98 	bl	8008124 <USBD_CtlError>
            err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfa:	e06f      	b.n	8007cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1e:	e05d      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa7e 	bl	8008124 <USBD_CtlError>
            err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2e:	e055      	b.n	8007cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c52:	e043      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa64 	bl	8008124 <USBD_CtlError>
            err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
          break;
 8007c62:	e03b      	b.n	8007cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c86:	e029      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa4a 	bl	8008124 <USBD_CtlError>
            err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
          break;
 8007c96:	e021      	b.n	8007cdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cba:	e00f      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa30 	bl	8008124 <USBD_CtlError>
            err++;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cca:	e007      	b.n	8007cdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa28 	bl	8008124 <USBD_CtlError>
          err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007cda:	bf00      	nop
      }
      break;
 8007cdc:	e037      	b.n	8007d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7c1b      	ldrb	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f107 0208 	add.w	r2, r7, #8
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4798      	blx	r3
 8007cf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf8:	e029      	b.n	8007d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa11 	bl	8008124 <USBD_CtlError>
        err++;
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	3301      	adds	r3, #1
 8007d06:	72fb      	strb	r3, [r7, #11]
      break;
 8007d08:	e021      	b.n	8007d4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c1b      	ldrb	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	f107 0208 	add.w	r2, r7, #8
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4798      	blx	r3
 8007d22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	2207      	movs	r2, #7
 8007d2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2c:	e00f      	b.n	8007d4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9f7 	bl	8008124 <USBD_CtlError>
        err++;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3c:	e007      	b.n	8007d4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9ef 	bl	8008124 <USBD_CtlError>
      err++;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4c:	bf00      	nop
  }

  if (err != 0U)
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11e      	bne.n	8007d92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d5c:	893b      	ldrh	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	88da      	ldrh	r2, [r3, #6]
 8007d66:	893b      	ldrh	r3, [r7, #8]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	bf28      	it	cs
 8007d6c:	4613      	movcs	r3, r2
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	461a      	mov	r2, r3
 8007d76:	68f9      	ldr	r1, [r7, #12]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa44 	bl	8008206 <USBD_CtlSendData>
 8007d7e:	e009      	b.n	8007d94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9ce 	bl	8008124 <USBD_CtlError>
 8007d88:	e004      	b.n	8007d94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa78 	bl	8008280 <USBD_CtlSendStatus>
 8007d90:	e000      	b.n	8007d94 <USBD_GetDescriptor+0x320>
    return;
 8007d92:	bf00      	nop
  }
}
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	889b      	ldrh	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d131      	bne.n	8007e12 <USBD_SetAddress+0x76>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d12d      	bne.n	8007e12 <USBD_SetAddress+0x76>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	885b      	ldrh	r3, [r3, #2]
 8007dba:	2b7f      	cmp	r3, #127	; 0x7f
 8007dbc:	d829      	bhi.n	8007e12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d104      	bne.n	8007de0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9a3 	bl	8008124 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	e01d      	b.n	8007e1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7bfa      	ldrb	r2, [r7, #15]
 8007de4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fe11 	bl	8008a14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa44 	bl	8008280 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	e009      	b.n	8007e1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	e004      	b.n	8007e1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f985 	bl	8008124 <USBD_CtlError>
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	885b      	ldrh	r3, [r3, #2]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	4b4c      	ldr	r3, [pc, #304]	; (8007f6c <USBD_SetConfig+0x148>)
 8007e3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e3c:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <USBD_SetConfig+0x148>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d905      	bls.n	8007e50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f96c 	bl	8008124 <USBD_CtlError>
    return USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e088      	b.n	8007f62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d002      	beq.n	8007e62 <USBD_SetConfig+0x3e>
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d025      	beq.n	8007eac <USBD_SetConfig+0x88>
 8007e60:	e071      	b.n	8007f46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e62:	4b42      	ldr	r3, [pc, #264]	; (8007f6c <USBD_SetConfig+0x148>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01c      	beq.n	8007ea4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e6a:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <USBD_SetConfig+0x148>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e74:	4b3d      	ldr	r3, [pc, #244]	; (8007f6c <USBD_SetConfig+0x148>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f91e 	bl	80070bc <USBD_SetClassConfig>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f949 	bl	8008124 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e92:	e065      	b.n	8007f60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9f3 	bl	8008280 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ea2:	e05d      	b.n	8007f60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f9eb 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007eaa:	e059      	b.n	8007f60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007eac:	4b2f      	ldr	r3, [pc, #188]	; (8007f6c <USBD_SetConfig+0x148>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d112      	bne.n	8007eda <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ebc:	4b2b      	ldr	r3, [pc, #172]	; (8007f6c <USBD_SetConfig+0x148>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ec6:	4b29      	ldr	r3, [pc, #164]	; (8007f6c <USBD_SetConfig+0x148>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff f911 	bl	80070f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9d4 	bl	8008280 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ed8:	e042      	b.n	8007f60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <USBD_SetConfig+0x148>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d02a      	beq.n	8007f3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f8ff 	bl	80070f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <USBD_SetConfig+0x148>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <USBD_SetConfig+0x148>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff f8d8 	bl	80070bc <USBD_SetClassConfig>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00f      	beq.n	8007f36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f903 	bl	8008124 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff f8e4 	bl	80070f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f34:	e014      	b.n	8007f60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9a2 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007f3c:	e010      	b.n	8007f60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f99e 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007f44:	e00c      	b.n	8007f60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8eb 	bl	8008124 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <USBD_SetConfig+0x148>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff f8cd 	bl	80070f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5e:	bf00      	nop
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	2000060e 	.word	0x2000060e

08007f70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	88db      	ldrh	r3, [r3, #6]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d004      	beq.n	8007f8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f8cd 	bl	8008124 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f8a:	e023      	b.n	8007fd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	dc02      	bgt.n	8007f9e <USBD_GetConfig+0x2e>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dc03      	bgt.n	8007fa4 <USBD_GetConfig+0x34>
 8007f9c:	e015      	b.n	8007fca <USBD_GetConfig+0x5a>
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d00b      	beq.n	8007fba <USBD_GetConfig+0x4a>
 8007fa2:	e012      	b.n	8007fca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3308      	adds	r3, #8
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f927 	bl	8008206 <USBD_CtlSendData>
        break;
 8007fb8:	e00c      	b.n	8007fd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f91f 	bl	8008206 <USBD_CtlSendData>
        break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8a9 	bl	8008124 <USBD_CtlError>
        break;
 8007fd2:	bf00      	nop
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d81e      	bhi.n	8008032 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	88db      	ldrh	r3, [r3, #6]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d004      	beq.n	8008006 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f890 	bl	8008124 <USBD_CtlError>
        break;
 8008004:	e01a      	b.n	800803c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f043 0202 	orr.w	r2, r3, #2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	330c      	adds	r3, #12
 8008026:	2202      	movs	r2, #2
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8eb 	bl	8008206 <USBD_CtlSendData>
      break;
 8008030:	e004      	b.n	800803c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f875 	bl	8008124 <USBD_CtlError>
      break;
 800803a:	bf00      	nop
  }
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d106      	bne.n	8008064 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f90e 	bl	8008280 <USBD_CtlSendStatus>
  }
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807c:	b2db      	uxtb	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	2b02      	cmp	r3, #2
 8008082:	d80b      	bhi.n	800809c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10c      	bne.n	80080a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f8f3 	bl	8008280 <USBD_CtlSendStatus>
      }
      break;
 800809a:	e004      	b.n	80080a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f840 	bl	8008124 <USBD_CtlError>
      break;
 80080a4:	e000      	b.n	80080a8 <USBD_ClrFeature+0x3c>
      break;
 80080a6:	bf00      	nop
  }
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fa91 	bl	8007602 <SWAPBYTE>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fa84 	bl	8007602 <SWAPBYTE>
 80080fa:	4603      	mov	r3, r0
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fa77 	bl	8007602 <SWAPBYTE>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	80da      	strh	r2, [r3, #6]
}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800812e:	2180      	movs	r1, #128	; 0x80
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fc05 	bl	8008940 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008136:	2100      	movs	r1, #0
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc01 	bl	8008940 <USBD_LL_StallEP>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d036      	beq.n	80081ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008160:	6938      	ldr	r0, [r7, #16]
 8008162:	f000 f836 	bl	80081d2 <USBD_GetLen>
 8008166:	4603      	mov	r3, r0
 8008168:	3301      	adds	r3, #1
 800816a:	b29b      	uxth	r3, r3
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	3301      	adds	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	4413      	add	r3, r2
 800818c:	2203      	movs	r2, #3
 800818e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	3301      	adds	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008196:	e013      	b.n	80081c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	7812      	ldrb	r2, [r2, #0]
 80081a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3301      	adds	r3, #1
 80081a8:	613b      	str	r3, [r7, #16]
    idx++;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	3301      	adds	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e7      	bne.n	8008198 <USBD_GetString+0x52>
 80081c8:	e000      	b.n	80081cc <USBD_GetString+0x86>
    return;
 80081ca:	bf00      	nop
  }
}
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081e2:	e005      	b.n	80081f0 <USBD_GetLen+0x1e>
  {
    len++;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	3301      	adds	r3, #1
 80081e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3301      	adds	r3, #1
 80081ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1f5      	bne.n	80081e4 <USBD_GetLen+0x12>
  }

  return len;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2202      	movs	r2, #2
 8008216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	2100      	movs	r1, #0
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fc10 	bl	8008a52 <USBD_LL_Transmit>

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fbff 	bl	8008a52 <USBD_LL_Transmit>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	2100      	movs	r1, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fc0f 	bl	8008a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2204      	movs	r2, #4
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fbdb 	bl	8008a52 <USBD_LL_Transmit>

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2205      	movs	r2, #5
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082b6:	2300      	movs	r3, #0
 80082b8:	2200      	movs	r2, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fbe9 	bl	8008a94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082d0:	2200      	movs	r2, #0
 80082d2:	490e      	ldr	r1, [pc, #56]	; (800830c <MX_USB_DEVICE_Init+0x40>)
 80082d4:	480e      	ldr	r0, [pc, #56]	; (8008310 <MX_USB_DEVICE_Init+0x44>)
 80082d6:	f7fe fe83 	bl	8006fe0 <USBD_Init>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082e0:	f7f8 ffb4 	bl	800124c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80082e4:	490b      	ldr	r1, [pc, #44]	; (8008314 <MX_USB_DEVICE_Init+0x48>)
 80082e6:	480a      	ldr	r0, [pc, #40]	; (8008310 <MX_USB_DEVICE_Init+0x44>)
 80082e8:	f7fe feaa 	bl	8007040 <USBD_RegisterClass>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082f2:	f7f8 ffab 	bl	800124c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082f6:	4806      	ldr	r0, [pc, #24]	; (8008310 <MX_USB_DEVICE_Init+0x44>)
 80082f8:	f7fe fec9 	bl	800708e <USBD_Start>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008302:	f7f8 ffa3 	bl	800124c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008306:	bf00      	nop
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000114 	.word	0x20000114
 8008310:	20000630 	.word	0x20000630
 8008314:	2000000c 	.word	0x2000000c

08008318 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2212      	movs	r2, #18
 8008328:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800832a:	4b03      	ldr	r3, [pc, #12]	; (8008338 <USBD_FS_DeviceDescriptor+0x20>)
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000134 	.word	0x20000134

0800833c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2204      	movs	r2, #4
 800834c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20000154 	.word	0x20000154

08008360 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4907      	ldr	r1, [pc, #28]	; (8008394 <USBD_FS_ProductStrDescriptor+0x34>)
 8008376:	4808      	ldr	r0, [pc, #32]	; (8008398 <USBD_FS_ProductStrDescriptor+0x38>)
 8008378:	f7ff fee5 	bl	8008146 <USBD_GetString>
 800837c:	e004      	b.n	8008388 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4904      	ldr	r1, [pc, #16]	; (8008394 <USBD_FS_ProductStrDescriptor+0x34>)
 8008382:	4805      	ldr	r0, [pc, #20]	; (8008398 <USBD_FS_ProductStrDescriptor+0x38>)
 8008384:	f7ff fedf 	bl	8008146 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000900 	.word	0x20000900
 8008398:	0800f02c 	.word	0x0800f02c

0800839c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	4904      	ldr	r1, [pc, #16]	; (80083bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083ac:	4804      	ldr	r0, [pc, #16]	; (80083c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ae:	f7ff feca 	bl	8008146 <USBD_GetString>
  return USBD_StrDesc;
 80083b2:	4b02      	ldr	r3, [pc, #8]	; (80083bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000900 	.word	0x20000900
 80083c0:	0800f044 	.word	0x0800f044

080083c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	221a      	movs	r2, #26
 80083d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083d6:	f000 f855 	bl	8008484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083da:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000158 	.word	0x20000158

080083e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	4907      	ldr	r1, [pc, #28]	; (800841c <USBD_FS_ConfigStrDescriptor+0x34>)
 80083fe:	4808      	ldr	r0, [pc, #32]	; (8008420 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008400:	f7ff fea1 	bl	8008146 <USBD_GetString>
 8008404:	e004      	b.n	8008410 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4904      	ldr	r1, [pc, #16]	; (800841c <USBD_FS_ConfigStrDescriptor+0x34>)
 800840a:	4805      	ldr	r0, [pc, #20]	; (8008420 <USBD_FS_ConfigStrDescriptor+0x38>)
 800840c:	f7ff fe9b 	bl	8008146 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000900 	.word	0x20000900
 8008420:	0800f058 	.word	0x0800f058

08008424 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4907      	ldr	r1, [pc, #28]	; (8008458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800843c:	f7ff fe83 	bl	8008146 <USBD_GetString>
 8008440:	e004      	b.n	800844c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008448:	f7ff fe7d 	bl	8008146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000900 	.word	0x20000900
 800845c:	0800f064 	.word	0x0800f064

08008460 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	220c      	movs	r2, #12
 8008470:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000148 	.word	0x20000148

08008484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <Get_SerialNum+0x44>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <Get_SerialNum+0x48>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <Get_SerialNum+0x4c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084aa:	2208      	movs	r2, #8
 80084ac:	4909      	ldr	r1, [pc, #36]	; (80084d4 <Get_SerialNum+0x50>)
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f814 	bl	80084dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084b4:	2204      	movs	r2, #4
 80084b6:	4908      	ldr	r1, [pc, #32]	; (80084d8 <Get_SerialNum+0x54>)
 80084b8:	68b8      	ldr	r0, [r7, #8]
 80084ba:	f000 f80f 	bl	80084dc <IntToUnicode>
  }
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	1fff7a10 	.word	0x1fff7a10
 80084cc:	1fff7a14 	.word	0x1fff7a14
 80084d0:	1fff7a18 	.word	0x1fff7a18
 80084d4:	2000015a 	.word	0x2000015a
 80084d8:	2000016a 	.word	0x2000016a

080084dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	75fb      	strb	r3, [r7, #23]
 80084f2:	e027      	b.n	8008544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0f1b      	lsrs	r3, r3, #28
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	d80b      	bhi.n	8008514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	0f1b      	lsrs	r3, r3, #28
 8008500:	b2da      	uxtb	r2, r3
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	4619      	mov	r1, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	440b      	add	r3, r1
 800850c:	3230      	adds	r2, #48	; 0x30
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e00a      	b.n	800852a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	0f1b      	lsrs	r3, r3, #28
 8008518:	b2da      	uxtb	r2, r3
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4619      	mov	r1, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	440b      	add	r3, r1
 8008524:	3237      	adds	r2, #55	; 0x37
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	3301      	adds	r3, #1
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	4413      	add	r3, r2
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	3301      	adds	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	7dfa      	ldrb	r2, [r7, #23]
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	429a      	cmp	r2, r3
 800854a:	d3d3      	bcc.n	80084f4 <IntToUnicode+0x18>
  }
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800857c:	d13a      	bne.n	80085f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	4b1e      	ldr	r3, [pc, #120]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 8008588:	f043 0301 	orr.w	r3, r3, #1
 800858c:	6313      	str	r3, [r2, #48]	; 0x30
 800858e:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800859a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800859e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a0:	2302      	movs	r3, #2
 80085a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085a8:	2303      	movs	r3, #3
 80085aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085ac:	230a      	movs	r3, #10
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	4619      	mov	r1, r3
 80085b6:	4812      	ldr	r0, [pc, #72]	; (8008600 <HAL_PCD_MspInit+0xa4>)
 80085b8:	f7f9 fad0 	bl	8001b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 80085c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c6:	6353      	str	r3, [r2, #52]	; 0x34
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 80085ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d0:	4a0a      	ldr	r2, [pc, #40]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 80085d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d6:	6453      	str	r3, [r2, #68]	; 0x44
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <HAL_PCD_MspInit+0xa0>)
 80085da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	2043      	movs	r0, #67	; 0x43
 80085ea:	f7f9 fa64 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085ee:	2043      	movs	r0, #67	; 0x43
 80085f0:	f7f9 fa7d 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085f4:	bf00      	nop
 80085f6:	3728      	adds	r7, #40	; 0x28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40023800 	.word	0x40023800
 8008600:	40020000 	.word	0x40020000

08008604 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f7fe fd82 	bl	8007124 <USBD_LL_SetupStage>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	4619      	mov	r1, r3
 8008652:	f7fe fdbc 	bl	80071ce <USBD_LL_DataOutStage>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	1a9b      	subs	r3, r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	3348      	adds	r3, #72	; 0x48
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	4619      	mov	r1, r3
 8008686:	f7fe fe05 	bl	8007294 <USBD_LL_DataInStage>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe ff19 	bl	80074d8 <USBD_LL_SOF>
}
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
 80086c6:	e008      	b.n	80086da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d102      	bne.n	80086d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
 80086d4:	e001      	b.n	80086da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086d6:	f7f8 fdb9 	bl	800124c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086e0:	7bfa      	ldrb	r2, [r7, #15]
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe feb9 	bl	800745c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fe65 	bl	80073c0 <USBD_LL_Reset>
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe feb4 	bl	800747c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <HAL_PCD_SuspendCallback+0x48>)
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	4a03      	ldr	r2, [pc, #12]	; (8008748 <HAL_PCD_SuspendCallback+0x48>)
 800873a:	f043 0306 	orr.w	r3, r3, #6
 800873e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	e000ed00 	.word	0xe000ed00

0800874c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fea4 	bl	80074a8 <USBD_LL_Resume>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	4611      	mov	r1, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fef2 	bl	8007568 <USBD_LL_IsoOUTIncomplete>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe feba 	bl	800751c <USBD_LL_IsoINIncomplete>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fef8 	bl	80075b4 <USBD_LL_DevConnected>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fef5 	bl	80075ca <USBD_LL_DevDisconnected>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d13c      	bne.n	8008872 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087f8:	4a20      	ldr	r2, [pc, #128]	; (800887c <USBD_LL_Init+0x94>)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a1e      	ldr	r2, [pc, #120]	; (800887c <USBD_LL_Init+0x94>)
 8008804:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <USBD_LL_Init+0x94>)
 800880a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800880e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008810:	4b1a      	ldr	r3, [pc, #104]	; (800887c <USBD_LL_Init+0x94>)
 8008812:	2206      	movs	r2, #6
 8008814:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008816:	4b19      	ldr	r3, [pc, #100]	; (800887c <USBD_LL_Init+0x94>)
 8008818:	2202      	movs	r2, #2
 800881a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800881c:	4b17      	ldr	r3, [pc, #92]	; (800887c <USBD_LL_Init+0x94>)
 800881e:	2200      	movs	r2, #0
 8008820:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008822:	4b16      	ldr	r3, [pc, #88]	; (800887c <USBD_LL_Init+0x94>)
 8008824:	2202      	movs	r2, #2
 8008826:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <USBD_LL_Init+0x94>)
 800882a:	2200      	movs	r2, #0
 800882c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <USBD_LL_Init+0x94>)
 8008830:	2200      	movs	r2, #0
 8008832:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008834:	4b11      	ldr	r3, [pc, #68]	; (800887c <USBD_LL_Init+0x94>)
 8008836:	2200      	movs	r2, #0
 8008838:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800883a:	4b10      	ldr	r3, [pc, #64]	; (800887c <USBD_LL_Init+0x94>)
 800883c:	2200      	movs	r2, #0
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <USBD_LL_Init+0x94>)
 8008842:	2200      	movs	r2, #0
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008846:	480d      	ldr	r0, [pc, #52]	; (800887c <USBD_LL_Init+0x94>)
 8008848:	f7f9 fb4d 	bl	8001ee6 <HAL_PCD_Init>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008852:	f7f8 fcfb 	bl	800124c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008856:	2180      	movs	r1, #128	; 0x80
 8008858:	4808      	ldr	r0, [pc, #32]	; (800887c <USBD_LL_Init+0x94>)
 800885a:	f7fa fcc6 	bl	80031ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800885e:	2240      	movs	r2, #64	; 0x40
 8008860:	2100      	movs	r1, #0
 8008862:	4806      	ldr	r0, [pc, #24]	; (800887c <USBD_LL_Init+0x94>)
 8008864:	f7fa fc7a 	bl	800315c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008868:	2280      	movs	r2, #128	; 0x80
 800886a:	2101      	movs	r1, #1
 800886c:	4803      	ldr	r0, [pc, #12]	; (800887c <USBD_LL_Init+0x94>)
 800886e:	f7fa fc75 	bl	800315c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000b00 	.word	0x20000b00

08008880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 fc49 	bl	800212e <HAL_PCD_Start>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f97e 	bl	8008ba4 <USBD_Get_USB_Status>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	461a      	mov	r2, r3
 80088c4:	4603      	mov	r3, r0
 80088c6:	70fb      	strb	r3, [r7, #3]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70bb      	strb	r3, [r7, #2]
 80088cc:	4613      	mov	r3, r2
 80088ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088de:	78bb      	ldrb	r3, [r7, #2]
 80088e0:	883a      	ldrh	r2, [r7, #0]
 80088e2:	78f9      	ldrb	r1, [r7, #3]
 80088e4:	f7fa f85a 	bl	800299c <HAL_PCD_EP_Open>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f958 	bl	8008ba4 <USBD_Get_USB_Status>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	460b      	mov	r3, r1
 800890c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7fa f8a3 	bl	8002a6c <HAL_PCD_EP_Close>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f939 	bl	8008ba4 <USBD_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008936:	7bbb      	ldrb	r3, [r7, #14]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f7fa f963 	bl	8002c2a <HAL_PCD_EP_SetStall>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f91a 	bl	8008ba4 <USBD_Get_USB_Status>
 8008970:	4603      	mov	r3, r0
 8008972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	4611      	mov	r1, r2
 800899c:	4618      	mov	r0, r3
 800899e:	f7fa f9a8 	bl	8002cf2 <HAL_PCD_EP_ClrStall>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 f8fb 	bl	8008ba4 <USBD_Get_USB_Status>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da0b      	bge.n	80089f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	4613      	mov	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	333e      	adds	r3, #62	; 0x3e
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	e00b      	b.n	8008a08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	4613      	mov	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	4611      	mov	r1, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f9 ff8d 	bl	8002952 <HAL_PCD_SetAddress>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f8b0 	bl	8008ba4 <USBD_Get_USB_Status>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b086      	sub	sp, #24
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a70:	7af9      	ldrb	r1, [r7, #11]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	f7fa f88e 	bl	8002b96 <HAL_PCD_EP_Transmit>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f88f 	bl	8008ba4 <USBD_Get_USB_Status>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ab2:	7af9      	ldrb	r1, [r7, #11]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	f7fa f822 	bl	8002b00 <HAL_PCD_EP_Receive>
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f86e 	bl	8008ba4 <USBD_Get_USB_Status>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008acc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_PCDEx_LPM_Callback+0x18>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d01f      	beq.n	8008b2e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008aee:	e03b      	b.n	8008b68 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d007      	beq.n	8008b08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008af8:	f7f8 fa30 	bl	8000f5c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008afc:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <HAL_PCDEx_LPM_Callback+0x98>)
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b02:	f023 0306 	bic.w	r3, r3, #6
 8008b06:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b1a:	f023 0301 	bic.w	r3, r3, #1
 8008b1e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fcbe 	bl	80074a8 <USBD_LL_Resume>
    break;
 8008b2c:	e01c      	b.n	8008b68 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fc95 	bl	800747c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	4a04      	ldr	r2, [pc, #16]	; (8008b70 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b60:	f043 0306 	orr.w	r3, r3, #6
 8008b64:	6113      	str	r3, [r2, #16]
    break;
 8008b66:	bf00      	nop
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	e000ed00 	.word	0xe000ed00

08008b74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b7c:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <USBD_static_malloc+0x18>)
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000610 	.word	0x20000610

08008b90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]

}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d817      	bhi.n	8008be8 <USBD_Get_USB_Status+0x44>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <USBD_Get_USB_Status+0x1c>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bd1 	.word	0x08008bd1
 8008bc4:	08008bd7 	.word	0x08008bd7
 8008bc8:	08008bdd 	.word	0x08008bdd
 8008bcc:	08008be3 	.word	0x08008be3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd4:	e00b      	b.n	8008bee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bda:	e008      	b.n	8008bee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e005      	b.n	8008bee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	73fb      	strb	r3, [r7, #15]
    break;
 8008be6:	e002      	b.n	8008bee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	bf00      	nop
  }
  return usb_status;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	70fb      	strb	r3, [r7, #3]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70bb      	strb	r3, [r7, #2]
 8008c12:	4613      	mov	r3, r2
 8008c14:	707b      	strb	r3, [r7, #1]
                return 0;
 8008c16:	2300      	movs	r3, #0
        }
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	461a      	mov	r2, r3
 8008c32:	4603      	mov	r3, r0
 8008c34:	70fb      	strb	r3, [r7, #3]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70bb      	strb	r3, [r7, #2]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	707b      	strb	r3, [r7, #1]
                return 0;
 8008c3e:	2300      	movs	r3, #0
        }
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
                return 0;
 8008c54:	2300      	movs	r3, #0
        }
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
                return 0;
 8008c6a:	2300      	movs	r3, #0
        }
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
                return 0;
 8008c80:	2300      	movs	r3, #0
        }
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
                return;
 8008c9a:	bf00      	nop
        } // Note used for hubs only!
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	807b      	strh	r3, [r7, #2]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	803b      	strh	r3, [r7, #0]
                return false;
 8008cb6:	2300      	movs	r3, #0
        }
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
                return false;
 8008cd0:	2300      	movs	r3, #0
        }
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
                return true;
 8008cea:	2301      	movs	r3, #1
        }
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 8008d00:	687b      	ldr	r3, [r7, #4]
        };
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	d812      	bhi.n	8008d48 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	321e      	adds	r2, #30
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d107      	bne.n	8008d40 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 8008d30:	7bfa      	ldrb	r2, [r7, #15]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	321e      	adds	r2, #30
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e004      	b.n	8008d4a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	3301      	adds	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
 8008d46:	e7e9      	b.n	8008d1c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 8008d48:	23d3      	movs	r3, #211	; 0xd3
        };
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	705a      	strb	r2, [r3, #1]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	709a      	strb	r2, [r3, #2]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	70da      	strb	r2, [r3, #3]
 8008d72:	2200      	movs	r2, #0
 8008d74:	711a      	strb	r2, [r3, #4]
        };
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	711a      	strb	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	715a      	strb	r2, [r3, #5]
        };
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781a      	ldrb	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	715a      	strb	r2, [r3, #5]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	795a      	ldrb	r2, [r3, #5]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	711a      	strb	r2, [r3, #4]
        };
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	711a      	strb	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	80da      	strh	r2, [r3, #6]
        };
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
                countDown = 0;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	80da      	strh	r2, [r3, #6]
        };
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	791b      	ldrb	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d009      	beq.n	8008e58 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 8008e44:	e029      	b.n	8008e9a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	887a      	ldrh	r2, [r7, #2]
 8008e4a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	3301      	adds	r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	88db      	ldrh	r3, [r3, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d015      	beq.n	8008e8c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d011      	beq.n	8008e8c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88db      	ldrh	r3, [r3, #6]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	80da      	strh	r2, [r3, #6]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	801a      	strh	r2, [r3, #0]
 8008e8a:	e7e5      	b.n	8008e58 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88db      	ldrh	r3, [r3, #6]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bf0c      	ite	eq
 8008ea2:	2301      	moveq	r3, #1
 8008ea4:	2300      	movne	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
        };
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	70fb      	strb	r3, [r7, #3]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70bb      	strb	r3, [r7, #2]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	707b      	strb	r3, [r7, #1]
        };
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	0800f200 	.word	0x0800f200

08008efc <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	0800f1e8 	.word	0x0800f1e8

08008f1c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
                return bAddress;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	2be0      	cmp	r3, #224	; 0xe0
 8008f60:	bf0c      	ite	eq
 8008f62:	2301      	moveq	r3, #1
 8008f64:	2300      	movne	r3, #0
 8008f66:	b2db      	uxtb	r3, r3
        };
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	807b      	strh	r3, [r7, #2]
 8008f80:	4613      	mov	r3, r2
 8008f82:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 8008f84:	887b      	ldrh	r3, [r7, #2]
 8008f86:	f640 225c 	movw	r2, #2652	; 0xa5c
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d104      	bne.n	8008f98 <_ZN3BTD8VIDPIDOKEtt+0x24>
 8008f8e:	883b      	ldrh	r3, [r7, #0]
 8008f90:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <_ZN3BTD8VIDPIDOKEtt+0x38>
 8008f98:	887b      	ldrh	r3, [r7, #2]
 8008f9a:	f240 520d 	movw	r2, #1293	; 0x50d
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d106      	bne.n	8008fb0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 8008fa2:	883b      	ldrh	r3, [r7, #0]
 8008fa4:	f240 625a 	movw	r2, #1626	; 0x65a
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d101      	bne.n	8008fb0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e02d      	b.n	800900c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7d1b      	ldrb	r3, [r3, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d113      	bne.n	8008fe0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7d5b      	ldrb	r3, [r3, #21]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10f      	bne.n	8008fe0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7d9b      	ldrb	r3, [r3, #22]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7ddb      	ldrb	r3, [r3, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7e1b      	ldrb	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7e5b      	ldrb	r3, [r3, #25]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d014      	beq.n	800900a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	f240 524c 	movw	r2, #1356	; 0x54c
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d10f      	bne.n	800900a <_ZN3BTD8VIDPIDOKEtt+0x96>
 8008fea:	883b      	ldrh	r3, [r7, #0]
 8008fec:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8008ff0:	d009      	beq.n	8009006 <_ZN3BTD8VIDPIDOKEtt+0x92>
 8008ff2:	883b      	ldrh	r3, [r7, #0]
 8008ff4:	f240 422f 	movw	r2, #1071	; 0x42f
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d004      	beq.n	8009006 <_ZN3BTD8VIDPIDOKEtt+0x92>
 8008ffc:	883b      	ldrh	r3, [r7, #0]
 8008ffe:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009002:	4293      	cmp	r3, r2
 8009004:	d101      	bne.n	800900a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 8009006:	2301      	movs	r3, #1
 8009008:	e000      	b.n	800900c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800900a:	2300      	movs	r3, #0
        };
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff ff59 	bl	8008edc <_ZN15USBDeviceConfigC1Ev>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff ff64 	bl	8008efc <_ZN17UsbConfigXtracterC1Ev>
 8009034:	4a2b      	ldr	r2, [pc, #172]	; (80090e4 <_ZN3BTDC1EP3USB+0xcc>)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	4a2b      	ldr	r2, [pc, #172]	; (80090e8 <_ZN3BTDC1EP3USB+0xd0>)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	64da      	str	r2, [r3, #76]	; 0x4c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	661a      	str	r2, [r3, #96]	; 0x60
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d80a      	bhi.n	80090bc <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	3318      	adds	r3, #24
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	2200      	movs	r2, #0
 80090b2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	3301      	adds	r3, #1
 80090b8:	73fb      	strb	r3, [r7, #15]
 80090ba:	e7f1      	b.n	80090a0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa83 	bl	80095c8 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d006      	beq.n	80090d8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4611      	mov	r1, r2
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff fe1b 	bl	8008d0e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	0800f1a8 	.word	0x0800f1a8
 80090e8:	0800f1dc 	.word	0x0800f1dc

080090ec <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b08f      	sub	sp, #60	; 0x3c
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	4603      	mov	r3, r0
 80090fc:	70fb      	strb	r3, [r7, #3]
 80090fe:	460b      	mov	r3, r1
 8009100:	70bb      	strb	r3, [r7, #2]
 8009102:	4613      	mov	r3, r2
 8009104:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 8009106:	2312      	movs	r3, #18
 8009108:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800910c:	f107 0308 	add.w	r3, r7, #8
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa54 	bl	80095c8 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009124:	4618      	mov	r0, r3
 8009126:	f7ff fde7 	bl	8008cf8 <_ZN3USB14GetAddressPoolEv>
 800912a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 8009136:	23d9      	movs	r3, #217	; 0xd9
 8009138:	e087      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2100      	movs	r1, #0
 8009142:	69f8      	ldr	r0, [r7, #28]
 8009144:	4798      	blx	r3
 8009146:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800914e:	23d6      	movs	r3, #214	; 0xd6
 8009150:	e07b      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800915a:	23d7      	movs	r3, #215	; 0xd7
 800915c:	e075      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	787a      	ldrb	r2, [r7, #1]
 8009172:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009178:	f107 0308 	add.w	r3, r7, #8
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	2312      	movs	r3, #18
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	f005 fa6b 	bl	800e65e <_ZN3USB11getDevDescrEhhtPh>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	6a3a      	ldr	r2, [r7, #32]
 8009192:	601a      	str	r2, [r3, #0]

        if(rcode)
 8009194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009198:	2b00      	cmp	r3, #0
 800919a:	d146      	bne.n	800922a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3304      	adds	r3, #4
 80091a2:	681c      	ldr	r4, [r3, #0]
 80091a4:	78bb      	ldrb	r3, [r7, #2]
 80091a6:	78f9      	ldrb	r1, [r7, #3]
 80091a8:	2200      	movs	r2, #0
 80091aa:	69f8      	ldr	r0, [r7, #28]
 80091ac:	47a0      	blx	r4
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80091c2:	23d4      	movs	r3, #212	; 0xd4
 80091c4:	e041      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	791b      	ldrb	r3, [r3, #4]
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d017      	beq.n	80091fe <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	79da      	ldrb	r2, [r3, #7]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	7c5a      	ldrb	r2, [r3, #17]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	891b      	ldrh	r3, [r3, #8]
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	895b      	ldrh	r3, [r3, #10]
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 80091fa:	23e0      	movs	r3, #224	; 0xe0
 80091fc:	e025      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 80091fe:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800920a:	2300      	movs	r3, #0
 800920c:	2200      	movs	r2, #0
 800920e:	f005 fac3 	bl	800e798 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009212:	23d1      	movs	r3, #209	; 0xd1
 8009214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
        return rcode;
 8009224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009228:	e00f      	b.n	800924a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800922a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800922c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009230:	2b0d      	cmp	r3, #13
 8009232:	d002      	beq.n	800923a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 8009234:	23e1      	movs	r3, #225	; 0xe1
 8009236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
        return rcode;
 8009246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800924a:	4618      	mov	r0, r3
 800924c:	3734      	adds	r7, #52	; 0x34
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
	...

08009254 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 8009254:	b580      	push	{r7, lr}
 8009256:	b096      	sub	sp, #88	; 0x58
 8009258:	af02      	add	r7, sp, #8
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4603      	mov	r3, r0
 8009264:	70fb      	strb	r3, [r7, #3]
 8009266:	460b      	mov	r3, r1
 8009268:	70bb      	strb	r3, [r7, #2]
 800926a:	4613      	mov	r3, r2
 800926c:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009274:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff fd37 	bl	8008cf8 <_ZN3USB14GetAddressPoolEv>
 800928a:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800928c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009298:	4611      	mov	r1, r2
 800929a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800929c:	4798      	blx	r3
 800929e:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 80092a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80092a6:	23d6      	movs	r3, #214	; 0xd6
 80092a8:	e189      	b.n	80095be <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 80092aa:	48b8      	ldr	r0, [pc, #736]	; (800958c <_ZN3BTD4InitEhhb+0x338>)
 80092ac:	f7f8 fb04 	bl	80018b8 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	f005 fa6b 	bl	800e798 <_ZN3USB7setAddrEhhh>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 80092c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 80092d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d2:	2200      	movs	r2, #0
 80092d4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 80092d6:	e16a      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 80092d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092da:	2200      	movs	r2, #0
 80092dc:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 80092de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80092ea:	4611      	mov	r1, r2
 80092ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80092ee:	4798      	blx	r3
 80092f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 80092f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80092f8:	23d6      	movs	r3, #214	; 0xd6
 80092fa:	e160      	b.n	80095be <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 80092fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fe:	787a      	ldrb	r2, [r7, #1]
 8009300:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3351      	adds	r3, #81	; 0x51
 8009310:	2201      	movs	r2, #1
 8009312:	f004 f8fe 	bl	800d512 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800931c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8128 	bne.w	8009576 <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800932c:	f240 524c 	movw	r2, #1356	; 0x54c
 8009330:	4293      	cmp	r3, r2
 8009332:	d177      	bne.n	8009424 <_ZN3BTD4InitEhhb+0x1d0>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800933a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800933e:	d00d      	beq.n	800935c <_ZN3BTD4InitEhhb+0x108>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009346:	f240 422f 	movw	r2, #1071	; 0x42f
 800934a:	4293      	cmp	r3, r2
 800934c:	d006      	beq.n	800935c <_ZN3BTD4InitEhhb+0x108>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009354:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009358:	4293      	cmp	r3, r2
 800935a:	d163      	bne.n	8009424 <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 800935c:	488c      	ldr	r0, [pc, #560]	; (8009590 <_ZN3BTD4InitEhhb+0x33c>)
 800935e:	f7f8 faab 	bl	80018b8 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009372:	2301      	movs	r3, #1
 8009374:	f005 fa40 	bl	800e7f8 <_ZN3USB7setConfEhhh>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800937e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 80f9 	bne.w	800957a <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7d1b      	ldrb	r3, [r3, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d113      	bne.n	80093b8 <_ZN3BTD4InitEhhb+0x164>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7d5b      	ldrb	r3, [r3, #21]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10f      	bne.n	80093b8 <_ZN3BTD4InitEhhb+0x164>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7d9b      	ldrb	r3, [r3, #22]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10b      	bne.n	80093b8 <_ZN3BTD4InitEhhb+0x164>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7ddb      	ldrb	r3, [r3, #23]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d107      	bne.n	80093b8 <_ZN3BTD4InitEhhb+0x164>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7e1b      	ldrb	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <_ZN3BTD4InitEhhb+0x164>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7e5b      	ldrb	r3, [r3, #25]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d019      	beq.n	80093ec <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80093be:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 80093c2:	d006      	beq.n	80093d2 <_ZN3BTD4InitEhhb+0x17e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80093ca:	f240 422f 	movw	r2, #1071	; 0x42f
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d106      	bne.n	80093e0 <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3314      	adds	r3, #20
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 f8c3 	bl	800b564 <_ZN3BTD9setBdaddrEPh>
 80093de:	e005      	b.n	80093ec <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3314      	adds	r3, #20
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f002 f8fc 	bl	800b5e4 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80093fc:	2300      	movs	r3, #0
 80093fe:	f005 f9fb 	bl	800e7f8 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800940c:	2300      	movs	r3, #0
 800940e:	2200      	movs	r2, #0
 8009410:	f005 f9c2 	bl	800e798 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009420:	23d1      	movs	r3, #209	; 0xd1
 8009422:	e0cc      	b.n	80095be <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009424:	2300      	movs	r3, #0
 8009426:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800942a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800942e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009432:	429a      	cmp	r2, r3
 8009434:	d25e      	bcs.n	80094f4 <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800943c:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009440:	4293      	cmp	r3, r2
 8009442:	d106      	bne.n	8009452 <_ZN3BTD4InitEhhb+0x1fe>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800944a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800944e:	4293      	cmp	r3, r2
 8009450:	d00d      	beq.n	800946e <_ZN3BTD4InitEhhb+0x21a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009458:	f240 520d 	movw	r2, #1293	; 0x50d
 800945c:	4293      	cmp	r3, r2
 800945e:	d120      	bne.n	80094a2 <_ZN3BTD4InitEhhb+0x24e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009466:	f240 625a 	movw	r2, #1626	; 0x65a
 800946a:	4293      	cmp	r3, r2
 800946c:	d119      	bne.n	80094a2 <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	f107 0308 	add.w	r3, r7, #8
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f002 f907 	bl	800b68c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009488:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	2200      	movs	r2, #0
 8009496:	f005 f932 	bl	800e6fe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800949a:	4603      	mov	r3, r0
 800949c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80094a0:	e018      	b.n	80094d4 <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	1d1a      	adds	r2, r3, #4
 80094a6:	f107 0308 	add.w	r3, r7, #8
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f002 f93b 	bl	800b728 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80094bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4613      	mov	r3, r2
 80094c8:	2200      	movs	r2, #0
 80094ca:	f005 f918 	bl	800e6fe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 80094d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d150      	bne.n	800957e <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d805      	bhi.n	80094f2 <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 80094e6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80094ea:	3301      	adds	r3, #1
 80094ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80094f0:	e79b      	b.n	800942a <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 80094f2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d94a      	bls.n	8009594 <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3351      	adds	r3, #81	; 0x51
 8009512:	f003 fffe 	bl	800d512 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800951c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009520:	2b00      	cmp	r3, #0
 8009522:	d12e      	bne.n	8009582 <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800953a:	f005 f95d 	bl	800e7f8 <_ZN3USB7setConfEhhh>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009544:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2264      	movs	r2, #100	; 0x64
 8009550:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009572:	2300      	movs	r3, #0
 8009574:	e023      	b.n	80095be <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 8009576:	bf00      	nop
 8009578:	e019      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 800957a:	bf00      	nop
 800957c:	e017      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 800957e:	bf00      	nop
 8009580:	e015      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 8009582:	bf00      	nop
 8009584:	e013      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009586:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009588:	e011      	b.n	80095ae <_ZN3BTD4InitEhhb+0x35a>
 800958a:	bf00      	nop
 800958c:	000493e0 	.word	0x000493e0
 8009590:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 8009594:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80095a0:	2300      	movs	r3, #0
 80095a2:	2200      	movs	r2, #0
 80095a4:	f005 f8f8 	bl	800e798 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 80095a8:	23d1      	movs	r3, #209	; 0xd1
 80095aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
        return rcode;
 80095ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3750      	adds	r7, #80	; 0x50
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop

080095c8 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d845      	bhi.n	8009666 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 80095da:	7bfa      	ldrb	r2, [r7, #15]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	4413      	add	r3, r2
 80095e4:	440b      	add	r3, r1
 80095e6:	3351      	adds	r3, #81	; 0x51
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <_ZN3BTD10InitializeEv+0x2e>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e000      	b.n	80095f8 <_ZN3BTD10InitializeEv+0x30>
 80095f6:	2008      	movs	r0, #8
 80095f8:	7bfa      	ldrb	r2, [r7, #15]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	440b      	add	r3, r1
 8009604:	3352      	adds	r3, #82	; 0x52
 8009606:	4602      	mov	r2, r0
 8009608:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	4413      	add	r3, r2
 8009614:	440b      	add	r3, r1
 8009616:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800961a:	78d3      	ldrb	r3, [r2, #3]
 800961c:	f36f 0300 	bfc	r3, #0, #1
 8009620:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009622:	7bfa      	ldrb	r2, [r7, #15]
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	4413      	add	r3, r2
 800962c:	440b      	add	r3, r1
 800962e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009632:	78d3      	ldrb	r3, [r2, #3]
 8009634:	f36f 0341 	bfc	r3, #1, #1
 8009638:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <_ZN3BTD10InitializeEv+0x7c>
 8009640:	2101      	movs	r1, #1
 8009642:	e000      	b.n	8009646 <_ZN3BTD10InitializeEv+0x7e>
 8009644:	210f      	movs	r1, #15
 8009646:	7bfa      	ldrb	r2, [r7, #15]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	4413      	add	r3, r2
 8009650:	4403      	add	r3, r0
 8009652:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009656:	78d3      	ldrb	r3, [r2, #3]
 8009658:	f361 0387 	bfi	r3, r1, #2, #6
 800965c:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	3301      	adds	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
 8009664:	e7b6      	b.n	80095d4 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d81c      	bhi.n	80096aa <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	3318      	adds	r3, #24
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	3318      	adds	r3, #24
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	3318      	adds	r3, #24
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4608      	mov	r0, r1
 80096a0:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	3301      	adds	r3, #1
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e7df      	b.n	800966a <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	4608      	mov	r0, r1
 8009712:	4611      	mov	r1, r2
 8009714:	461a      	mov	r2, r3
 8009716:	4603      	mov	r3, r0
 8009718:	70fb      	strb	r3, [r7, #3]
 800971a:	460b      	mov	r3, r1
 800971c:	70bb      	strb	r3, [r7, #2]
 800971e:	4613      	mov	r3, r2
 8009720:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 8009722:	787b      	ldrb	r3, [r7, #1]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d15d      	bne.n	80097e4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	78db      	ldrb	r3, [r3, #3]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b03      	cmp	r3, #3
 800973a:	d114      	bne.n	8009766 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	789b      	ldrb	r3, [r3, #2]
 8009740:	b25b      	sxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	da0f      	bge.n	8009766 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800974a:	7bfa      	ldrb	r2, [r7, #15]
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4413      	add	r3, r2
 8009754:	440b      	add	r3, r1
 8009756:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800975a:	78d3      	ldrb	r3, [r2, #3]
 800975c:	2101      	movs	r1, #1
 800975e:	f361 0387 	bfi	r3, r1, #2, #6
 8009762:	70d3      	strb	r3, [r2, #3]
 8009764:	e00e      	b.n	8009784 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	78db      	ldrb	r3, [r3, #3]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d13a      	bne.n	80097e8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	789b      	ldrb	r3, [r3, #2]
 8009776:	b25b      	sxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	da01      	bge.n	8009780 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800977c:	2302      	movs	r3, #2
 800977e:	e000      	b.n	8009782 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 8009780:	2303      	movs	r3, #3
 8009782:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	789b      	ldrb	r3, [r3, #2]
 8009788:	7bfa      	ldrb	r2, [r7, #15]
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	b2d8      	uxtb	r0, r3
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	4413      	add	r3, r2
 8009798:	440b      	add	r3, r1
 800979a:	3351      	adds	r3, #81	; 0x51
 800979c:	4602      	mov	r2, r0
 800979e:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	889b      	ldrh	r3, [r3, #4]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	7bfa      	ldrb	r2, [r7, #15]
 80097a8:	b2d8      	uxtb	r0, r3
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	4413      	add	r3, r2
 80097b2:	440b      	add	r3, r1
 80097b4:	3352      	adds	r3, #82	; 0x52
 80097b6:	4602      	mov	r2, r0
 80097b8:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	799b      	ldrb	r3, [r3, #6]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d204      	bcs.n	80097d2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	799a      	ldrb	r2, [r3, #6]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80097d8:	3301      	adds	r3, #1
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80097e2:	e002      	b.n	80097ea <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 80097e4:	bf00      	nop
 80097e6:	e000      	b.n	80097ea <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 80097e8:	bf00      	nop
}
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 80097f4:	f1a0 0004 	sub.w	r0, r0, #4
 80097f8:	f7ff bf86 	b.w	8009708 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

080097fc <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fedf 	bl	80095c8 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980e:	4618      	mov	r0, r3
 8009810:	f7ff fa72 	bl	8008cf8 <_ZN3USB14GetAddressPoolEv>
 8009814:	4603      	mov	r3, r0
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	3208      	adds	r2, #8
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8009822:	4618      	mov	r0, r3
 8009824:	4790      	blx	r2
        return 0;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800983e:	f083 0301 	eor.w	r3, r3, #1
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <_ZN3BTD4PollEv+0x1c>
                return 0;
 8009848:	2300      	movs	r3, #0
 800984a:	e025      	b.n	8009898 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800984c:	f7f8 f828 	bl	80018a0 <HAL_GetTick>
 8009850:	4603      	mov	r3, r0
 8009852:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <_ZN3BTD4PollEv+0x70>)
 8009854:	fba2 2303 	umull	r2, r3, r2, r3
 8009858:	099a      	lsrs	r2, r3, #6
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	43db      	mvns	r3, r3
 8009862:	0fdb      	lsrs	r3, r3, #31
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d015      	beq.n	8009896 <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800986a:	f7f8 f819 	bl	80018a0 <HAL_GetTick>
 800986e:	4603      	mov	r3, r0
 8009870:	4a0b      	ldr	r2, [pc, #44]	; (80098a0 <_ZN3BTD4PollEv+0x70>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	099b      	lsrs	r3, r3, #6
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800987e:	441a      	add	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f80d 	bl	80098a4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fb24 	bl	8009ed8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fe4d 	bl	800a530 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	10624dd3 	.word	0x10624dd3

080098a4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 80098a4:	b5b0      	push	{r4, r5, r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 80098ac:	2340      	movs	r3, #64	; 0x40
 80098ae:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3389      	adds	r3, #137	; 0x89
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80098ca:	f107 050c 	add.w	r5, r7, #12
 80098ce:	9201      	str	r2, [sp, #4]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	462b      	mov	r3, r5
 80098d4:	4622      	mov	r2, r4
 80098d6:	f003 ff84 	bl	800d7e2 <_ZN3USB10inTransferEhhPtPhh>
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <_ZN3BTD14HCI_event_taskEv+0x48>
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	f040 82f1 	bne.w	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80098f2:	3b01      	subs	r3, #1
 80098f4:	2b35      	cmp	r3, #53	; 0x35
 80098f6:	f200 82ea 	bhi.w	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009ae1 	.word	0x08009ae1
 8009904:	08009b41 	.word	0x08009b41
 8009908:	08009c99 	.word	0x08009c99
 800990c:	08009d83 	.word	0x08009d83
 8009910:	08009cf5 	.word	0x08009cf5
 8009914:	08009e41 	.word	0x08009e41
 8009918:	08009d27 	.word	0x08009d27
 800991c:	08009eb9 	.word	0x08009eb9
 8009920:	08009eb9 	.word	0x08009eb9
 8009924:	08009ecf 	.word	0x08009ecf
 8009928:	08009ecf 	.word	0x08009ecf
 800992c:	08009eb9 	.word	0x08009eb9
 8009930:	08009eb9 	.word	0x08009eb9
 8009934:	080099d9 	.word	0x080099d9
 8009938:	08009eb9 	.word	0x08009eb9
 800993c:	08009ecf 	.word	0x08009ecf
 8009940:	08009ecf 	.word	0x08009ecf
 8009944:	08009eb9 	.word	0x08009eb9
 8009948:	08009eb9 	.word	0x08009eb9
 800994c:	08009ecf 	.word	0x08009ecf
 8009950:	08009ecf 	.word	0x08009ecf
 8009954:	08009e0f 	.word	0x08009e0f
 8009958:	08009e39 	.word	0x08009e39
 800995c:	08009eb9 	.word	0x08009eb9
 8009960:	08009eb9 	.word	0x08009eb9
 8009964:	08009eb9 	.word	0x08009eb9
 8009968:	08009eb9 	.word	0x08009eb9
 800996c:	08009ecf 	.word	0x08009ecf
 8009970:	08009ecf 	.word	0x08009ecf
 8009974:	08009ecf 	.word	0x08009ecf
 8009978:	08009ecf 	.word	0x08009ecf
 800997c:	08009eb9 	.word	0x08009eb9
 8009980:	08009ecf 	.word	0x08009ecf
 8009984:	08009ecf 	.word	0x08009ecf
 8009988:	08009ecf 	.word	0x08009ecf
 800998c:	08009ecf 	.word	0x08009ecf
 8009990:	08009ecf 	.word	0x08009ecf
 8009994:	08009ecf 	.word	0x08009ecf
 8009998:	08009ecf 	.word	0x08009ecf
 800999c:	08009ecf 	.word	0x08009ecf
 80099a0:	08009ecf 	.word	0x08009ecf
 80099a4:	08009ecf 	.word	0x08009ecf
 80099a8:	08009ecf 	.word	0x08009ecf
 80099ac:	08009ecf 	.word	0x08009ecf
 80099b0:	08009ecf 	.word	0x08009ecf
 80099b4:	08009ecf 	.word	0x08009ecf
 80099b8:	08009ecf 	.word	0x08009ecf
 80099bc:	08009ecf 	.word	0x08009ecf
 80099c0:	08009ea9 	.word	0x08009ea9
 80099c4:	08009eb9 	.word	0x08009eb9
 80099c8:	08009eb1 	.word	0x08009eb1
 80099cc:	08009ecf 	.word	0x08009ecf
 80099d0:	08009ecf 	.word	0x08009ecf
 80099d4:	08009eb9 	.word	0x08009eb9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 826c 	bne.w	8009ebc <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d114      	bne.n	8009a2a <_ZN3BTD14HCI_event_taskEv+0x186>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009a06:	2b10      	cmp	r3, #16
 8009a08:	d10f      	bne.n	8009a2a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8009a28:	e059      	b.n	8009ade <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d12a      	bne.n	8009a8a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d125      	bne.n	8009a8a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d114      	bne.n	8009a76 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10f      	bne.n	8009a76 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8009a6c:	e003      	b.n	8009a76 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8009a88:	e029      	b.n	8009ade <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009a90:	2b09      	cmp	r3, #9
 8009a92:	f040 8213 	bne.w	8009ebc <_ZN3BTD14HCI_event_taskEv+0x618>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	f040 820d 	bne.w	8009ebc <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	2b05      	cmp	r3, #5
 8009aaa:	d80e      	bhi.n	8009aca <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	1d9a      	adds	r2, r3, #6
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	460a      	mov	r2, r1
 8009ac0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	75fb      	strb	r3, [r7, #23]
 8009ac8:	e7ed      	b.n	8009aa6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009ad0:	f043 0320 	orr.w	r3, r3, #32
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 8009adc:	e1ee      	b.n	8009ebc <_ZN3BTD14HCI_event_taskEv+0x618>
 8009ade:	e1ed      	b.n	8009ebc <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d921      	bls.n	8009b2e <_ZN3BTD14HCI_event_taskEv+0x28a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <_ZN3BTD14HCI_event_taskEv+0x25a>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d017      	beq.n	8009b2e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	220a      	movs	r2, #10
 8009b2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009b34:	3301      	adds	r3, #1
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 8009b3e:	e1c6      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 81ba 	beq.w	8009ec0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	75bb      	strb	r3, [r7, #22]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009b56:	7dba      	ldrb	r2, [r7, #22]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	f080 81b1 	bcs.w	8009ec0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	7dbb      	ldrb	r3, [r7, #22]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	0049      	lsls	r1, r1, #1
 8009b6e:	440b      	add	r3, r1
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	757b      	strb	r3, [r7, #21]
 8009b7a:	7d7b      	ldrb	r3, [r7, #21]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d811      	bhi.n	8009ba4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 8009b80:	7d7b      	ldrb	r3, [r7, #21]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	441a      	add	r2, r3
 8009b88:	7d7b      	ldrb	r3, [r7, #21]
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	460a      	mov	r2, r1
 8009b98:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 8009b9c:	7d7b      	ldrb	r3, [r7, #21]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	757b      	strb	r3, [r7, #21]
 8009ba2:	e7ea      	b.n	8009b7a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d038      	beq.n	8009c20 <_ZN3BTD14HCI_event_taskEv+0x37c>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d133      	bne.n	8009c20 <_ZN3BTD14HCI_event_taskEv+0x37c>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d12e      	bne.n	8009c20 <_ZN3BTD14HCI_event_taskEv+0x37c>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009bc8:	f003 030c 	and.w	r3, r3, #12
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d027      	beq.n	8009c20 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	753b      	strb	r3, [r7, #20]
 8009bdc:	7d3b      	ldrb	r3, [r7, #20]
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	d814      	bhi.n	8009c0c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 8009be2:	7d3b      	ldrb	r3, [r7, #20]
 8009be4:	1cd9      	adds	r1, r3, #3
 8009be6:	7dba      	ldrb	r2, [r7, #22]
 8009be8:	4613      	mov	r3, r2
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	4413      	add	r3, r2
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	18ca      	adds	r2, r1, r3
 8009bf2:	7d3b      	ldrb	r3, [r7, #20]
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	4413      	add	r3, r2
 8009c00:	460a      	mov	r2, r1
 8009c02:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 8009c04:	7d3b      	ldrb	r3, [r7, #20]
 8009c06:	3301      	adds	r3, #1
 8009c08:	753b      	strb	r3, [r7, #20]
 8009c0a:	e7e7      	b.n	8009bdc <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 8009c1e:	e03a      	b.n	8009c96 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d031      	beq.n	8009c8e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	d12a      	bne.n	8009c8e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009c3e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d023      	beq.n	8009c8e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 8009c46:	2300      	movs	r3, #0
 8009c48:	74fb      	strb	r3, [r7, #19]
 8009c4a:	7cfb      	ldrb	r3, [r7, #19]
 8009c4c:	2b05      	cmp	r3, #5
 8009c4e:	d814      	bhi.n	8009c7a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 8009c50:	7cfb      	ldrb	r3, [r7, #19]
 8009c52:	1cd9      	adds	r1, r3, #3
 8009c54:	7dba      	ldrb	r2, [r7, #22]
 8009c56:	4613      	mov	r3, r2
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	4413      	add	r3, r2
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	18ca      	adds	r2, r1, r3
 8009c60:	7cfb      	ldrb	r3, [r7, #19]
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	440a      	add	r2, r1
 8009c66:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	460a      	mov	r2, r1
 8009c70:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 8009c72:	7cfb      	ldrb	r3, [r7, #19]
 8009c74:	3301      	adds	r3, #1
 8009c76:	74fb      	strb	r3, [r7, #19]
 8009c78:	e7e7      	b.n	8009c4a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 8009c8c:	e003      	b.n	8009c96 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 8009c8e:	7dbb      	ldrb	r3, [r7, #22]
 8009c90:	3301      	adds	r3, #1
 8009c92:	75bb      	strb	r3, [r7, #22]
 8009c94:	e75c      	b.n	8009b50 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 8009c96:	e113      	b.n	8009ec0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11a      	bne.n	8009cea <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009cba:	b21a      	sxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	b21b      	sxth	r3, r3
 8009cc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009cca:	b21b      	sxth	r3, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b21b      	sxth	r3, r3
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009cdc:	f043 0302 	orr.w	r3, r3, #2
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 8009ce8:	e0f1      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2206      	movs	r2, #6
 8009cee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 8009cf2:	e0ec      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 80e2 	bne.w	8009ec4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009d06:	f043 0304 	orr.w	r3, r3, #4
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009d18:	f023 0302 	bic.w	r3, r3, #2
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 8009d24:	e0ce      	b.n	8009ec4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 80cb 	bne.w	8009ec8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 8009d32:	2300      	movs	r3, #0
 8009d34:	74bb      	strb	r3, [r7, #18]
 8009d36:	7cbb      	ldrb	r3, [r7, #18]
 8009d38:	2b1d      	cmp	r3, #29
 8009d3a:	d818      	bhi.n	8009d6e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 8009d3c:	7cbb      	ldrb	r3, [r7, #18]
 8009d3e:	f103 0209 	add.w	r2, r3, #9
 8009d42:	7cbb      	ldrb	r3, [r7, #18]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	440a      	add	r2, r1
 8009d48:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4413      	add	r3, r2
 8009d50:	460a      	mov	r2, r1
 8009d52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 8009d56:	7cbb      	ldrb	r3, [r7, #18]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 8009d64:	7cbb      	ldrb	r3, [r7, #18]
 8009d66:	3301      	adds	r3, #1
 8009d68:	74bb      	strb	r3, [r7, #18]
 8009d6a:	e7e4      	b.n	8009d36 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 8009d6c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 8009d80:	e0a2      	b.n	8009ec8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 8009d82:	2300      	movs	r3, #0
 8009d84:	747b      	strb	r3, [r7, #17]
 8009d86:	7c7b      	ldrb	r3, [r7, #17]
 8009d88:	2b05      	cmp	r3, #5
 8009d8a:	d80e      	bhi.n	8009daa <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 8009d8c:	7c7b      	ldrb	r3, [r7, #17]
 8009d8e:	1c9a      	adds	r2, r3, #2
 8009d90:	7c7b      	ldrb	r3, [r7, #17]
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	440a      	add	r2, r1
 8009d96:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	460a      	mov	r2, r1
 8009da0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 8009da2:	7c7b      	ldrb	r3, [r7, #17]
 8009da4:	3301      	adds	r3, #1
 8009da6:	747b      	strb	r3, [r7, #17]
 8009da8:	e7ed      	b.n	8009d86 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	743b      	strb	r3, [r7, #16]
 8009dae:	7c3b      	ldrb	r3, [r7, #16]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d810      	bhi.n	8009dd6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 8009db4:	7c3b      	ldrb	r3, [r7, #16]
 8009db6:	f103 0208 	add.w	r2, r3, #8
 8009dba:	7c3b      	ldrb	r3, [r7, #16]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	460a      	mov	r2, r1
 8009dca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 8009dce:	7c3b      	ldrb	r3, [r7, #16]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	743b      	strb	r3, [r7, #16]
 8009dd4:	e7eb      	b.n	8009dae <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	2b05      	cmp	r3, #5
 8009de2:	d10a      	bne.n	8009dfa <_ZN3BTD14HCI_event_taskEv+0x556>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009dea:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009e00:	f043 0310 	orr.w	r3, r3, #16
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 8009e0c:	e05f      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 feec 	bl	800abf6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 8009e1e:	e056      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fee4 	bl	800abf6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 8009e2e:	e04e      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ff93 	bl	800ad5c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 8009e36:	e04a      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 ffca 	bl	800add2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 8009e3e:	e046      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d123      	bne.n	8009e92 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00c      	beq.n	8009e6e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e5a:	f083 0301 	eor.w	r3, r3, #1
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 8009e6c:	e02e      	b.n	8009ecc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d029      	beq.n	8009ecc <_ZN3BTD14HCI_event_taskEv+0x628>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009e7e:	f083 0301 	eor.w	r3, r3, #1
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d021      	beq.n	8009ecc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 8009e90:	e01c      	b.n	8009ecc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8b5b      	ldrh	r3, [r3, #26]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f882 	bl	800afa2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2210      	movs	r2, #16
 8009ea2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 8009ea6:	e011      	b.n	8009ecc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 ffcd 	bl	800ae48 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 8009eae:	e00e      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f810 	bl	800aed6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 8009eb6:	e00a      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 8009eb8:	bf00      	nop
 8009eba:	e008      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 8009ebc:	bf00      	nop
 8009ebe:	e006      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 8009ec0:	bf00      	nop
 8009ec2:	e004      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 8009ec4:	bf00      	nop
 8009ec6:	e002      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 8009ec8:	bf00      	nop
 8009eca:	e000      	b.n	8009ece <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 8009ecc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 8009ece:	bf00      	nop
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ed6:	bf00      	nop

08009ed8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ee6:	2b13      	cmp	r3, #19
 8009ee8:	f200 82ef 	bhi.w	800a4ca <_ZN3BTD8HCI_taskEv+0x5f2>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <_ZN3BTD8HCI_taskEv+0x1c>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f45 	.word	0x08009f45
 8009ef8:	08009f7f 	.word	0x08009f7f
 8009efc:	0800a005 	.word	0x0800a005
 8009f00:	0800a025 	.word	0x0800a025
 8009f04:	0800a045 	.word	0x0800a045
 8009f08:	0800a099 	.word	0x0800a099
 8009f0c:	0800a13f 	.word	0x0800a13f
 8009f10:	0800a16d 	.word	0x0800a16d
 8009f14:	0800a1a7 	.word	0x0800a1a7
 8009f18:	0800a1cf 	.word	0x0800a1cf
 8009f1c:	0800a205 	.word	0x0800a205
 8009f20:	0800a263 	.word	0x0800a263
 8009f24:	0800a2a1 	.word	0x0800a2a1
 8009f28:	0800a3c7 	.word	0x0800a3c7
 8009f2c:	0800a4cb 	.word	0x0800a4cb
 8009f30:	0800a40d 	.word	0x0800a40d
 8009f34:	0800a43b 	.word	0x0800a43b
 8009f38:	0800a0cf 	.word	0x0800a0cf
 8009f3c:	0800a105 	.word	0x0800a105
 8009f40:	0800a125 	.word	0x0800a125
                case HCI_INIT_STATE:
                        hci_counter++;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009f60:	429a      	cmp	r2, r3
 8009f62:	f240 82b4 	bls.w	800a4ce <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fb7d 	bl	800a666 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 8009f7c:	e2a7      	b.n	800a4ce <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009f84:	3301      	adds	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00b      	beq.n	8009fb4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f830 	bl	800b012 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 8009fb2:	e28e      	b.n	800a4d2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	f240 8286 	bls.w	800a4d2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009fcc:	461a      	mov	r2, r3
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009fe2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009fe6:	d904      	bls.n	8009ff2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009fee:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a002:	e266      	b.n	800a4d2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8261 	beq.w	800a4d6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fb72 	bl	800a706 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a022:	e258      	b.n	800a4d6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 8253 	beq.w	800a4da <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fb8a 	bl	800a74e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2204      	movs	r2, #4
 800a03e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a042:	e24a      	b.n	800a4da <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8245 	beq.w	800a4de <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fc5d 	bl	800a922 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2205      	movs	r2, #5
 800a06c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a070:	e235      	b.n	800a4de <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d008      	beq.n	800a08e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a07c:	2100      	movs	r1, #0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb89 	bl	800a796 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2211      	movs	r2, #17
 800a088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a08c:	e227      	b.n	800a4de <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2206      	movs	r2, #6
 800a092:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a096:	e222      	b.n	800a4de <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 821d 	beq.w	800a4e2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fb6e 	bl	800a796 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2211      	movs	r2, #17
 800a0be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a0c2:	e20e      	b.n	800a4e2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2206      	movs	r2, #6
 800a0c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a0cc:	e209      	b.n	800a4e2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a0d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 8204 	beq.w	800a4e6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d008      	beq.n	800a0fa <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fc9d 	bl	800aa2a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2212      	movs	r2, #18
 800a0f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a0f8:	e1f5      	b.n	800a4e6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2206      	movs	r2, #6
 800a0fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a102:	e1f0      	b.n	800a4e6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 81eb 	beq.w	800a4ea <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc4d 	bl	800a9b4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2213      	movs	r2, #19
 800a11e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a122:	e1e2      	b.n	800a4ea <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 81dd 	beq.w	800a4ee <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2206      	movs	r2, #6
 800a138:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a13c:	e1d7      	b.n	800a4ee <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <_ZN3BTD8HCI_taskEv+0x27a>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fc8f 	bl	800aa76 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2207      	movs	r2, #7
 800a15c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800a160:	e1d8      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	220a      	movs	r2, #10
 800a166:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a16a:	e1d3      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 81bb 	beq.w	800a4f2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fcb2 	bl	800aae6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fb74 	bl	800a87a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	220c      	movs	r2, #12
 800a196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800a19a:	e1aa      	b.n	800a4f2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2208      	movs	r2, #8
 800a1a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a1a4:	e1a5      	b.n	800a4f2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 81a0 	beq.w	800a4f6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fcac 	bl	800ab1c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2209      	movs	r2, #9
 800a1c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a1cc:	e193      	b.n	800a4f6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 818e 	beq.w	800a4fa <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fead 	bl	800af4c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800a1fa:	e17e      	b.n	800a4fa <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc8d 	bl	800ab1c <_ZN3BTD11hci_connectEv>
                        break;
 800a202:	e17a      	b.n	800a4fa <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	f083 0301 	eor.w	r3, r3, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 8174 	beq.w	800a4fe <_ZN3BTD8HCI_taskEv+0x626>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a21c:	f083 0301 	eor.w	r3, r3, #1
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 816b 	beq.w	800a4fe <_ZN3BTD8HCI_taskEv+0x626>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a22e:	f083 0301 	eor.w	r3, r3, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8162 	beq.w	800a4fe <_ZN3BTD8HCI_taskEv+0x626>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a240:	f083 0301 	eor.w	r3, r3, #1
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8159 	beq.w	800a4fe <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fa29 	bl	800a6a4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	220b      	movs	r2, #11
 800a25c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a260:	e14d      	b.n	800a4fe <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 faff 	bl	800a87a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220c      	movs	r2, #12
 800a280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800a284:	e13d      	b.n	800a502 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8136 	beq.w	800a502 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2210      	movs	r2, #16
 800a29a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a29e:	e130      	b.n	800a502 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 812b 	beq.w	800a506 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3322      	adds	r3, #34	; 0x22
 800a2b4:	2208      	movs	r2, #8
 800a2b6:	4999      	ldr	r1, [pc, #612]	; (800a51c <_ZN3BTD8HCI_taskEv+0x644>)
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f004 fe71 	bl	800efa0 <strncmp>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d147      	bne.n	800a354 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3322      	adds	r3, #34	; 0x22
 800a2e8:	2216      	movs	r2, #22
 800a2ea:	498d      	ldr	r1, [pc, #564]	; (800a520 <_ZN3BTD8HCI_taskEv+0x648>)
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f004 fe57 	bl	800efa0 <strncmp>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a300:	e028      	b.n	800a354 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3322      	adds	r3, #34	; 0x22
 800a306:	2216      	movs	r2, #22
 800a308:	4986      	ldr	r1, [pc, #536]	; (800a524 <_ZN3BTD8HCI_taskEv+0x64c>)
 800a30a:	4618      	mov	r0, r3
 800a30c:	f004 fe48 	bl	800efa0 <strncmp>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d110      	bne.n	800a338 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a336:	e00d      	b.n	800a354 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3322      	adds	r3, #34	; 0x22
 800a33c:	2213      	movs	r2, #19
 800a33e:	497a      	ldr	r1, [pc, #488]	; (800a528 <_ZN3BTD8HCI_taskEv+0x650>)
 800a340:	4618      	mov	r0, r3
 800a342:	f004 fe2d 	bl	800efa0 <strncmp>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d117      	bne.n	800a38e <_ZN3BTD8HCI_taskEv+0x4b6>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a364:	2b25      	cmp	r3, #37	; 0x25
 800a366:	d112      	bne.n	800a38e <_ZN3BTD8HCI_taskEv+0x4b6>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d10d      	bne.n	800a38e <_ZN3BTD8HCI_taskEv+0x4b6>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3322      	adds	r3, #34	; 0x22
 800a376:	2213      	movs	r2, #19
 800a378:	496c      	ldr	r1, [pc, #432]	; (800a52c <_ZN3BTD8HCI_taskEv+0x654>)
 800a37a:	4618      	mov	r0, r3
 800a37c:	f004 fe10 	bl	800efa0 <strncmp>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a394:	2b00      	cmp	r3, #0
 800a396:	d104      	bne.n	800a3a2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <_ZN3BTD8HCI_taskEv+0x4de>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2208      	movs	r2, #8
 800a3b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800a3b4:	e0a7      	b.n	800a506 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa17 	bl	800a7ea <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	220d      	movs	r2, #13
 800a3c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a3c4:	e09f      	b.n	800a506 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3cc:	f003 0302 	and.w	r3, r3, #2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 809a 	beq.w	800a50a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	220f      	movs	r2, #15
 800a406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a40a:	e07e      	b.n	800a50a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a412:	3301      	adds	r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a426:	d972      	bls.n	800a50e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	220a      	movs	r2, #10
 800a434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a438:	e069      	b.n	800a50e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d064      	beq.n	800a512 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3389      	adds	r3, #137	; 0x89
 800a454:	2240      	movs	r2, #64	; 0x40
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f004 fd55 	bl	800ef08 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	33c9      	adds	r3, #201	; 0xc9
 800a462:	2240      	movs	r2, #64	; 0x40
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f004 fd4e 	bl	800ef08 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	220a      	movs	r2, #10
 800a4c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a4c8:	e023      	b.n	800a512 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800a4ca:	bf00      	nop
 800a4cc:	e022      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4ce:	bf00      	nop
 800a4d0:	e020      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4d2:	bf00      	nop
 800a4d4:	e01e      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4d6:	bf00      	nop
 800a4d8:	e01c      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4da:	bf00      	nop
 800a4dc:	e01a      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4de:	bf00      	nop
 800a4e0:	e018      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4e2:	bf00      	nop
 800a4e4:	e016      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4e6:	bf00      	nop
 800a4e8:	e014      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4ea:	bf00      	nop
 800a4ec:	e012      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4ee:	bf00      	nop
 800a4f0:	e010      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4f2:	bf00      	nop
 800a4f4:	e00e      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4f6:	bf00      	nop
 800a4f8:	e00c      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4fa:	bf00      	nop
 800a4fc:	e00a      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a4fe:	bf00      	nop
 800a500:	e008      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a502:	bf00      	nop
 800a504:	e006      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a506:	bf00      	nop
 800a508:	e004      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a50a:	bf00      	nop
 800a50c:	e002      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a50e:	bf00      	nop
 800a510:	e000      	b.n	800a514 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800a512:	bf00      	nop
        }
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	0800f074 	.word	0x0800f074
 800a520:	0800f080 	.word	0x0800f080
 800a524:	0800f098 	.word	0x0800f098
 800a528:	0800f0b0 	.word	0x0800f0b0
 800a52c:	0800f0c4 	.word	0x0800f0c4

0800a530 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800a530:	b5b0      	push	{r4, r5, r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af02      	add	r7, sp, #8
 800a536:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800a538:	2340      	movs	r3, #64	; 0x40
 800a53a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	33c9      	adds	r3, #201	; 0xc9
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a556:	f107 050a 	add.w	r5, r7, #10
 800a55a:	9201      	str	r2, [sp, #4]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462b      	mov	r3, r5
 800a560:	4622      	mov	r2, r4
 800a562:	f003 f93e 	bl	800d7e2 <_ZN3USB10inTransferEhhPtPhh>
 800a566:	4603      	mov	r3, r0
 800a568:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800a56a:	7b7b      	ldrb	r3, [r7, #13]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d125      	bne.n	800a5bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800a570:	897b      	ldrh	r3, [r7, #10]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d022      	beq.n	800a5bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d81d      	bhi.n	800a5bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	3318      	adds	r3, #24
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d011      	beq.n	800a5b4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	3318      	adds	r3, #24
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	6858      	ldr	r0, [r3, #4]
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	3318      	adds	r3, #24
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	32c9      	adds	r2, #201	; 0xc9
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
 800a5ba:	e7de      	b.n	800a57a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d81c      	bhi.n	800a600 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	3318      	adds	r3, #24
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d010      	beq.n	800a5f8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	3318      	adds	r3, #24
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	6859      	ldr	r1, [r3, #4]
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	3318      	adds	r3, #24
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	73bb      	strb	r3, [r7, #14]
 800a5fe:	e7df      	b.n	800a5c0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bdb0      	pop	{r4, r5, r7, pc}

0800a608 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08c      	sub	sp, #48	; 0x30
 800a60c:	af08      	add	r7, sp, #32
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a61c:	f023 0301 	bic.w	r3, r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800a638:	2300      	movs	r3, #0
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	9306      	str	r3, [sp, #24]
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	9305      	str	r3, [sp, #20]
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	2300      	movs	r3, #0
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	2300      	movs	r3, #0
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	2300      	movs	r3, #0
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	2300      	movs	r3, #0
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2320      	movs	r3, #32
 800a65a:	f002 ffea 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800a666:	b580      	push	{r7, lr}
 800a668:	b082      	sub	sp, #8
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2203      	movs	r2, #3
 800a67a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	220c      	movs	r2, #12
 800a682:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3389      	adds	r3, #137	; 0x89
 800a692:	2203      	movs	r2, #3
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ffb6 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6b2:	f023 0310 	bic.w	r3, r3, #16
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	221a      	movs	r2, #26
 800a6c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	220c      	movs	r2, #12
 800a6ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d004      	beq.n	800a6e8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2203      	movs	r2, #3
 800a6e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800a6e6:	e003      	b.n	800a6f0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3389      	adds	r3, #137	; 0x89
 800a6f4:	2204      	movs	r2, #4
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff85 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a714:	f023 0320 	bic.w	r3, r3, #32
 800a718:	b29a      	uxth	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2209      	movs	r2, #9
 800a724:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2210      	movs	r2, #16
 800a72c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3389      	adds	r3, #137	; 0x89
 800a73c:	2203      	movs	r2, #3
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff61 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2210      	movs	r2, #16
 800a774:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3389      	adds	r3, #137	; 0x89
 800a784:	2203      	movs	r2, #3
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff ff3d 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	460b      	mov	r3, r1
 800a7a0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2204      	movs	r2, #4
 800a7b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3389      	adds	r3, #137	; 0x89
 800a7d8:	2204      	movs	r2, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ff13 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7f8:	f023 0302 	bic.w	r3, r3, #2
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2209      	movs	r2, #9
 800a808:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2204      	movs	r2, #4
 800a810:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2207      	movs	r2, #7
 800a818:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7f1a      	ldrb	r2, [r3, #28]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	7f5a      	ldrb	r2, [r3, #29]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7f9a      	ldrb	r2, [r3, #30]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	7fda      	ldrb	r2, [r3, #31]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3389      	adds	r3, #137	; 0x89
 800a868:	220a      	movs	r2, #10
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fecb 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a888:	f023 0308 	bic.w	r3, r3, #8
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2219      	movs	r2, #25
 800a898:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2204      	movs	r2, #4
 800a8a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	220a      	movs	r2, #10
 800a8a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	7f1a      	ldrb	r2, [r3, #28]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7f5a      	ldrb	r2, [r3, #29]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7f9a      	ldrb	r2, [r3, #30]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	7fda      	ldrb	r2, [r3, #31]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3389      	adds	r3, #137	; 0x89
 800a910:	220d      	movs	r2, #13
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff fe77 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800a922:	b590      	push	{r4, r7, lr}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2213      	movs	r2, #19
 800a930:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	220c      	movs	r2, #12
 800a938:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800a93c:	6838      	ldr	r0, [r7, #0]
 800a93e:	f7f5 fc61 	bl	8000204 <strlen>
 800a942:	4603      	mov	r3, r0
 800a944:	b2db      	uxtb	r3, r3
 800a946:	3301      	adds	r3, #1
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
 800a954:	7bfc      	ldrb	r4, [r7, #15]
 800a956:	6838      	ldr	r0, [r7, #0]
 800a958:	f7f5 fc54 	bl	8000204 <strlen>
 800a95c:	4603      	mov	r3, r0
 800a95e:	429c      	cmp	r4, r3
 800a960:	d20e      	bcs.n	800a980 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	441a      	add	r2, r3
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	3303      	adds	r3, #3
 800a96c:	7811      	ldrb	r1, [r2, #0]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	460a      	mov	r2, r1
 800a974:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	3301      	adds	r3, #1
 800a97c:	73fb      	strb	r3, [r7, #15]
 800a97e:	e7e9      	b.n	800a954 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	3303      	adds	r3, #3
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	4413      	add	r3, r2
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800a994:	6838      	ldr	r0, [r7, #0]
 800a996:	f7f5 fc35 	bl	8000204 <strlen>
 800a99a:	4603      	mov	r3, r0
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3304      	adds	r3, #4
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff fe2e 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}

0800a9b4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	220c      	movs	r2, #12
 800a9c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	22ff      	movs	r2, #255	; 0xff
 800a9d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	22ff      	movs	r2, #255	; 0xff
 800a9e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	22ff      	movs	r2, #255	; 0xff
 800a9e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	22ff      	movs	r2, #255	; 0xff
 800a9f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	22ff      	movs	r2, #255	; 0xff
 800a9f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	221f      	movs	r2, #31
 800aa00:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	22ff      	movs	r2, #255	; 0xff
 800aa08:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3389      	adds	r3, #137	; 0x89
 800aa18:	220b      	movs	r2, #11
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff fdf3 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2256      	movs	r2, #86	; 0x56
 800aa3a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	220c      	movs	r2, #12
 800aa42:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800aa54:	2201      	movs	r2, #1
 800aa56:	e000      	b.n	800aa5a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3389      	adds	r3, #137	; 0x89
 800aa64:	2204      	movs	r2, #4
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7ff fdcd 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2205      	movs	r2, #5
 800aaa4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2233      	movs	r2, #51	; 0x33
 800aaac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	228b      	movs	r2, #139	; 0x8b
 800aab4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	229e      	movs	r2, #158	; 0x9e
 800aabc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2230      	movs	r2, #48	; 0x30
 800aac4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	220a      	movs	r2, #10
 800aacc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3389      	adds	r3, #137	; 0x89
 800aad4:	2208      	movs	r2, #8
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fd95 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2204      	movs	r2, #4
 800aafa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3389      	adds	r3, #137	; 0x89
 800ab0a:	2203      	movs	r2, #3
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff fd7a 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	331c      	adds	r3, #28
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f804 	bl	800ab38 <_ZN3BTD11hci_connectEPh>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2205      	movs	r2, #5
 800ab58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	220d      	movs	r2, #13
 800ab68:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781a      	ldrb	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	785a      	ldrb	r2, [r3, #1]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	789a      	ldrb	r2, [r3, #2]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	78da      	ldrb	r2, [r3, #3]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	791a      	ldrb	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	795a      	ldrb	r2, [r3, #5]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2218      	movs	r2, #24
 800abac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	22cc      	movs	r2, #204	; 0xcc
 800abb4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3389      	adds	r3, #137	; 0x89
 800abe4:	2210      	movs	r2, #16
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fd0d 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800abf6:	b590      	push	{r4, r7, lr}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	220d      	movs	r2, #13
 800ac02:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2204      	movs	r2, #4
 800ac0a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2217      	movs	r2, #23
 800ac12:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	7f1a      	ldrb	r2, [r3, #28]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7f5a      	ldrb	r2, [r3, #29]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7f9a      	ldrb	r2, [r3, #30]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	7fda      	ldrb	r2, [r3, #31]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d03f      	beq.n	800ace0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2206      	movs	r2, #6
 800ac64:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d013      	beq.n	800ac9a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d822      	bhi.n	800acc2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800ac7c:	7bfa      	ldrb	r2, [r7, #15]
 800ac7e:	7bfb      	ldrb	r3, [r7, #15]
 800ac80:	330a      	adds	r3, #10
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	440a      	add	r2, r1
 800ac86:	7d11      	ldrb	r1, [r2, #20]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	460a      	mov	r2, r1
 800ac8e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	3301      	adds	r3, #1
 800ac96:	73fb      	strb	r3, [r7, #15]
 800ac98:	e7ed      	b.n	800ac76 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73bb      	strb	r3, [r7, #14]
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	2b05      	cmp	r3, #5
 800aca2:	d80e      	bhi.n	800acc2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800aca4:	7bba      	ldrb	r2, [r7, #14]
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	330a      	adds	r3, #10
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	440a      	add	r2, r1
 800acae:	7f11      	ldrb	r1, [r2, #28]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	460a      	mov	r2, r1
 800acb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	3301      	adds	r3, #1
 800acbe:	73bb      	strb	r3, [r7, #14]
 800acc0:	e7ed      	b.n	800ac9e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800acc2:	2310      	movs	r3, #16
 800acc4:	737b      	strb	r3, [r7, #13]
 800acc6:	7b7b      	ldrb	r3, [r7, #13]
 800acc8:	2b19      	cmp	r3, #25
 800acca:	d83c      	bhi.n	800ad46 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800accc:	7b7b      	ldrb	r3, [r7, #13]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4413      	add	r3, r2
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800acd8:	7b7b      	ldrb	r3, [r7, #13]
 800acda:	3301      	adds	r3, #1
 800acdc:	737b      	strb	r3, [r7, #13]
 800acde:	e7f2      	b.n	800acc6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f5 fa8d 	bl	8000204 <strlen>
 800acea:	4603      	mov	r3, r0
 800acec:	b2da      	uxtb	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800acf4:	2300      	movs	r3, #0
 800acf6:	733b      	strb	r3, [r7, #12]
 800acf8:	7b3c      	ldrb	r4, [r7, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f5 fa80 	bl	8000204 <strlen>
 800ad04:	4603      	mov	r3, r0
 800ad06:	429c      	cmp	r4, r3
 800ad08:	d20f      	bcs.n	800ad2a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691a      	ldr	r2, [r3, #16]
 800ad0e:	7b3b      	ldrb	r3, [r7, #12]
 800ad10:	441a      	add	r2, r3
 800ad12:	7b3b      	ldrb	r3, [r7, #12]
 800ad14:	330a      	adds	r3, #10
 800ad16:	7811      	ldrb	r1, [r2, #0]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	460a      	mov	r2, r1
 800ad1e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800ad22:	7b3b      	ldrb	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	733b      	strb	r3, [r7, #12]
 800ad28:	e7e6      	b.n	800acf8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800ad2a:	7b3b      	ldrb	r3, [r7, #12]
 800ad2c:	2b0f      	cmp	r3, #15
 800ad2e:	d80a      	bhi.n	800ad46 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800ad30:	7b3b      	ldrb	r3, [r7, #12]
 800ad32:	330a      	adds	r3, #10
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	4413      	add	r3, r2
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800ad3e:	7b3b      	ldrb	r3, [r7, #12]
 800ad40:	3301      	adds	r3, #1
 800ad42:	733b      	strb	r3, [r7, #12]
 800ad44:	e7f1      	b.n	800ad2a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3389      	adds	r3, #137	; 0x89
 800ad4a:	221a      	movs	r2, #26
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fc5a 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}

0800ad5c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	220e      	movs	r2, #14
 800ad68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2204      	movs	r2, #4
 800ad70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2206      	movs	r2, #6
 800ad78:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7f1a      	ldrb	r2, [r3, #28]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7f5a      	ldrb	r2, [r3, #29]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7f9a      	ldrb	r2, [r3, #30]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7fda      	ldrb	r2, [r3, #31]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3389      	adds	r3, #137	; 0x89
 800adc0:	2209      	movs	r2, #9
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff fc1f 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	220c      	movs	r2, #12
 800adde:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2204      	movs	r2, #4
 800ade6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2206      	movs	r2, #6
 800adee:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	7f1a      	ldrb	r2, [r3, #28]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7f5a      	ldrb	r2, [r3, #29]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	7f9a      	ldrb	r2, [r3, #30]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7fda      	ldrb	r2, [r3, #31]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3389      	adds	r3, #137	; 0x89
 800ae36:	2209      	movs	r2, #9
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff fbe4 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	222b      	movs	r2, #43	; 0x2b
 800ae54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2209      	movs	r2, #9
 800ae64:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7f1a      	ldrb	r2, [r3, #28]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7f5a      	ldrb	r2, [r3, #29]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7f9a      	ldrb	r2, [r3, #30]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7fda      	ldrb	r2, [r3, #31]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2203      	movs	r2, #3
 800aeac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3389      	adds	r3, #137	; 0x89
 800aec4:	220c      	movs	r2, #12
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fb9d 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	222c      	movs	r2, #44	; 0x2c
 800aee2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2204      	movs	r2, #4
 800aeea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2206      	movs	r2, #6
 800aef2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	7f1a      	ldrb	r2, [r3, #28]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7f5a      	ldrb	r2, [r3, #29]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	7f9a      	ldrb	r2, [r3, #30]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7fda      	ldrb	r2, [r3, #31]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 2020 	ldrb.w	r2, [r3, #32]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3389      	adds	r3, #137	; 0x89
 800af3a:	2209      	movs	r2, #9
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fb62 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2211      	movs	r2, #17
 800af58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2204      	movs	r2, #4
 800af60:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	8b5b      	ldrh	r3, [r3, #26]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	8b5b      	ldrh	r3, [r3, #26]
 800af7c:	121b      	asrs	r3, r3, #8
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	b2da      	uxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3389      	adds	r3, #137	; 0x89
 800af90:	2205      	movs	r2, #5
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff fb37 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	460b      	mov	r3, r1
 800afac:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800afb4:	f023 0304 	bic.w	r3, r3, #4
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2206      	movs	r2, #6
 800afc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2204      	movs	r2, #4
 800afcc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2203      	movs	r2, #3
 800afd4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800afd8:	887b      	ldrh	r3, [r7, #2]
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800afe2:	887b      	ldrh	r3, [r7, #2]
 800afe4:	121b      	asrs	r3, r3, #8
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 030f 	and.w	r3, r3, #15
 800afec:	b2da      	uxtb	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2213      	movs	r2, #19
 800aff8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3389      	adds	r3, #137	; 0x89
 800b000:	2206      	movs	r2, #6
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff faff 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2224      	movs	r2, #36	; 0x24
 800b01e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	220c      	movs	r2, #12
 800b026:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2203      	movs	r2, #3
 800b02e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2204      	movs	r2, #4
 800b036:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2208      	movs	r2, #8
 800b03e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3389      	adds	r3, #137	; 0x89
 800b04e:	2206      	movs	r2, #6
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fad8 	bl	800a608 <_ZN3BTD11HCI_CommandEPht>
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b08a      	sub	sp, #40	; 0x28
 800b064:	af02      	add	r7, sp, #8
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	461a      	mov	r2, r3
 800b06c:	460b      	mov	r3, r1
 800b06e:	817b      	strh	r3, [r7, #10]
 800b070:	4613      	mov	r3, r2
 800b072:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b074:	466b      	mov	r3, sp
 800b076:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b078:	7a7b      	ldrb	r3, [r7, #9]
 800b07a:	1ddc      	adds	r4, r3, #7
 800b07c:	61bc      	str	r4, [r7, #24]
 800b07e:	4623      	mov	r3, r4
 800b080:	3301      	adds	r3, #1
 800b082:	4618      	mov	r0, r3
 800b084:	f04f 0100 	mov.w	r1, #0
 800b088:	f04f 0200 	mov.w	r2, #0
 800b08c:	f04f 0300 	mov.w	r3, #0
 800b090:	00cb      	lsls	r3, r1, #3
 800b092:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b096:	00c2      	lsls	r2, r0, #3
 800b098:	4623      	mov	r3, r4
 800b09a:	3301      	adds	r3, #1
 800b09c:	4618      	mov	r0, r3
 800b09e:	f04f 0100 	mov.w	r1, #0
 800b0a2:	f04f 0200 	mov.w	r2, #0
 800b0a6:	f04f 0300 	mov.w	r3, #0
 800b0aa:	00cb      	lsls	r3, r1, #3
 800b0ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b0b0:	00c2      	lsls	r2, r0, #3
 800b0b2:	4623      	mov	r3, r4
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	3307      	adds	r3, #7
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	ebad 0d03 	sub.w	sp, sp, r3
 800b0c0:	ab02      	add	r3, sp, #8
 800b0c2:	3300      	adds	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b0c6:	897b      	ldrh	r3, [r7, #10]
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b0ce:	897b      	ldrh	r3, [r7, #10]
 800b0d0:	121b      	asrs	r3, r3, #8
 800b0d2:	b25b      	sxtb	r3, r3
 800b0d4:	f003 030f 	and.w	r3, r3, #15
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	f043 0320 	orr.w	r3, r3, #32
 800b0de:	b25b      	sxtb	r3, r3
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b0e6:	7a7b      	ldrb	r3, [r7, #9]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b0f0:	7a7b      	ldrb	r3, [r7, #9]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	121b      	asrs	r3, r3, #8
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	7a7a      	ldrb	r2, [r7, #9]
 800b100:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b102:	7a7b      	ldrb	r3, [r7, #9]
 800b104:	121b      	asrs	r3, r3, #8
 800b106:	b2da      	uxtb	r2, r3
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b112:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b11a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b11c:	2300      	movs	r3, #0
 800b11e:	83fb      	strh	r3, [r7, #30]
 800b120:	7a7b      	ldrb	r3, [r7, #9]
 800b122:	b29b      	uxth	r3, r3
 800b124:	8bfa      	ldrh	r2, [r7, #30]
 800b126:	429a      	cmp	r2, r3
 800b128:	d20b      	bcs.n	800b142 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800b12a:	8bfb      	ldrh	r3, [r7, #30]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	441a      	add	r2, r3
 800b130:	8bfb      	ldrh	r3, [r7, #30]
 800b132:	3308      	adds	r3, #8
 800b134:	7811      	ldrb	r1, [r2, #0]
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b13a:	8bfb      	ldrh	r3, [r7, #30]
 800b13c:	3301      	adds	r3, #1
 800b13e:	83fb      	strh	r3, [r7, #30]
 800b140:	e7ee      	b.n	800b120 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800b152:	7a7b      	ldrb	r3, [r7, #9]
 800b154:	b29b      	uxth	r3, r3
 800b156:	3308      	adds	r3, #8
 800b158:	b29c      	uxth	r4, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	4623      	mov	r3, r4
 800b160:	f002 fc4a 	bl	800d9f8 <_ZN3USB11outTransferEhhtPh>
 800b164:	4603      	mov	r3, r0
 800b166:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800b168:	7cfb      	ldrb	r3, [r7, #19]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800b16e:	4804      	ldr	r0, [pc, #16]	; (800b180 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800b170:	f7f6 fba2 	bl	80018b8 <HAL_Delay>
 800b174:	46ad      	mov	sp, r5
}
 800b176:	bf00      	nop
 800b178:	3720      	adds	r7, #32
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bdb0      	pop	{r4, r5, r7, pc}
 800b17e:	bf00      	nop
 800b180:	000186a0 	.word	0x000186a0

0800b184 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af02      	add	r7, sp, #8
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	817b      	strh	r3, [r7, #10]
 800b192:	4613      	mov	r3, r2
 800b194:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2202      	movs	r2, #2
 800b19a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	7a7a      	ldrb	r2, [r7, #9]
 800b1a2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2204      	movs	r2, #4
 800b1aa:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800b1b6:	8b3b      	ldrh	r3, [r7, #24]
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800b1c0:	8b3b      	ldrh	r3, [r7, #24]
 800b1c2:	121b      	asrs	r3, r3, #8
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	781a      	ldrb	r2, [r3, #0]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	785a      	ldrb	r2, [r3, #1]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b1e6:	8979      	ldrh	r1, [r7, #10]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff ff34 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b1f8:	bf00      	nop
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af02      	add	r7, sp, #8
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	817b      	strh	r3, [r7, #10]
 800b20e:	4613      	mov	r3, r2
 800b210:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2203      	movs	r2, #3
 800b216:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	7a7a      	ldrb	r2, [r7, #9]
 800b21e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2208      	movs	r2, #8
 800b226:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	785a      	ldrb	r2, [r3, #1]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	785a      	ldrb	r2, [r3, #1]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	7f3a      	ldrb	r2, [r7, #28]
 800b25e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b280:	8979      	ldrh	r1, [r7, #10]
 800b282:	2300      	movs	r3, #0
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	2301      	movs	r3, #1
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	230c      	movs	r3, #12
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7ff fee7 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b292:	bf00      	nop
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af02      	add	r7, sp, #8
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	607b      	str	r3, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	817b      	strh	r3, [r7, #10]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	7a7a      	ldrb	r2, [r7, #9]
 800b2b8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	781a      	ldrb	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	785a      	ldrb	r2, [r3, #1]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	22ff      	movs	r2, #255	; 0xff
 800b304:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	22ff      	movs	r2, #255	; 0xff
 800b30c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b316:	8979      	ldrh	r1, [r7, #10]
 800b318:	2300      	movs	r3, #0
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	2301      	movs	r3, #1
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	230c      	movs	r3, #12
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7ff fe9c 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b328:	bf00      	nop
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af02      	add	r7, sp, #8
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	607b      	str	r3, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	817b      	strh	r3, [r7, #10]
 800b33e:	4613      	mov	r3, r2
 800b340:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2205      	movs	r2, #5
 800b346:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	7a7a      	ldrb	r2, [r7, #9]
 800b34e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	220a      	movs	r2, #10
 800b356:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	781a      	ldrb	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	785a      	ldrb	r2, [r3, #1]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	22a0      	movs	r2, #160	; 0xa0
 800b3aa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b3bc:	8979      	ldrh	r1, [r7, #10]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	230e      	movs	r3, #14
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff fe49 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af02      	add	r7, sp, #8
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	607b      	str	r3, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	817b      	strh	r3, [r7, #10]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2206      	movs	r2, #6
 800b3ec:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	7a7a      	ldrb	r2, [r7, #9]
 800b3f4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2204      	movs	r2, #4
 800b3fc:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	781a      	ldrb	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	785a      	ldrb	r2, [r3, #1]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	781a      	ldrb	r2, [r3, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	785a      	ldrb	r2, [r3, #1]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b436:	8979      	ldrh	r1, [r7, #10]
 800b438:	2300      	movs	r3, #0
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	2301      	movs	r3, #1
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	2308      	movs	r3, #8
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff fe0c 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	607b      	str	r3, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	817b      	strh	r3, [r7, #10]
 800b45e:	4613      	mov	r3, r2
 800b460:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2207      	movs	r2, #7
 800b466:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	7a7a      	ldrb	r2, [r7, #9]
 800b46e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2204      	movs	r2, #4
 800b476:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	781a      	ldrb	r2, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	785a      	ldrb	r2, [r3, #1]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	785a      	ldrb	r2, [r3, #1]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b4b0:	8979      	ldrh	r1, [r7, #10]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f7ff fdcf 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b4c2:	bf00      	nop
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af02      	add	r7, sp, #8
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	4608      	mov	r0, r1
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4603      	mov	r3, r0
 800b4da:	807b      	strh	r3, [r7, #2]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	707b      	strb	r3, [r7, #1]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	220b      	movs	r2, #11
 800b4e8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	787a      	ldrb	r2, [r7, #1]
 800b4f0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2208      	movs	r2, #8
 800b4f8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	783a      	ldrb	r2, [r7, #0]
 800b508:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7c3a      	ldrb	r2, [r7, #16]
 800b510:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b54a:	8879      	ldrh	r1, [r7, #2]
 800b54c:	2300      	movs	r3, #0
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	2301      	movs	r3, #1
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	230c      	movs	r3, #12
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff fd82 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b08e      	sub	sp, #56	; 0x38
 800b568:	af08      	add	r7, sp, #32
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800b56e:	2301      	movs	r3, #1
 800b570:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800b572:	2300      	movs	r3, #0
 800b574:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800b576:	2300      	movs	r3, #0
 800b578:	75fb      	strb	r3, [r7, #23]
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b05      	cmp	r3, #5
 800b57e:	d811      	bhi.n	800b5a4 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	f1c3 0305 	rsb	r3, r3, #5
 800b586:	461a      	mov	r2, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	441a      	add	r2, r3
 800b58c:	7dfb      	ldrb	r3, [r7, #23]
 800b58e:	3302      	adds	r3, #2
 800b590:	7812      	ldrb	r2, [r2, #0]
 800b592:	f107 0118 	add.w	r1, r7, #24
 800b596:	440b      	add	r3, r1
 800b598:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	75fb      	strb	r3, [r7, #23]
 800b5a2:	e7ea      	b.n	800b57a <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9307      	str	r3, [sp, #28]
 800b5b8:	f107 030c 	add.w	r3, r7, #12
 800b5bc:	9306      	str	r3, [sp, #24]
 800b5be:	2308      	movs	r3, #8
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	9302      	str	r3, [sp, #8]
 800b5ce:	23f5      	movs	r3, #245	; 0xf5
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	2309      	movs	r3, #9
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2321      	movs	r3, #33	; 0x21
 800b5d8:	f002 f82b 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800b5dc:	bf00      	nop
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08e      	sub	sp, #56	; 0x38
 800b5e8:	af08      	add	r7, sp, #32
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800b5ee:	2305      	movs	r3, #5
 800b5f0:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800b5f2:	2310      	movs	r3, #16
 800b5f4:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800b5fe:	2312      	movs	r3, #18
 800b600:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	d80e      	bhi.n	800b62a <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	441a      	add	r2, r3
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	3301      	adds	r3, #1
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	f107 0118 	add.w	r1, r7, #24
 800b61c:	440b      	add	r3, r1
 800b61e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	3301      	adds	r3, #1
 800b626:	75fb      	strb	r3, [r7, #23]
 800b628:	e7ed      	b.n	800b606 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800b63a:	2300      	movs	r3, #0
 800b63c:	9307      	str	r3, [sp, #28]
 800b63e:	f107 030c 	add.w	r3, r7, #12
 800b642:	9306      	str	r3, [sp, #24]
 800b644:	230b      	movs	r3, #11
 800b646:	9305      	str	r3, [sp, #20]
 800b648:	230b      	movs	r3, #11
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	2300      	movs	r3, #0
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	2303      	movs	r3, #3
 800b652:	9302      	str	r3, [sp, #8]
 800b654:	2305      	movs	r3, #5
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	2309      	movs	r3, #9
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2321      	movs	r3, #33	; 0x21
 800b65e:	f001 ffe8 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800b662:	bf00      	nop
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	4a04      	ldr	r2, [pc, #16]	; (800b688 <_ZN13USBReadParserC1Ev+0x1c>)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	0800f1f4 	.word	0x0800f1f4

0800b68c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ffe7 	bl	800b66c <_ZN13USBReadParserC1Ev>
 800b69e:	4a21      	ldr	r2, [pc, #132]	; (800b724 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fd fb51 	bl	8008d56 <_ZN16MultiValueBufferC1Ev>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fd fb63 	bl	8008d84 <_ZN20MultiByteValueParserC1Ev>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3318      	adds	r3, #24
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fd fb8a 	bl	8008ddc <_ZN11ByteSkipperC1Ev>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f103 0220 	add.w	r2, r3, #32
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f103 0210 	add.w	r2, r3, #16
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fd fb53 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f103 0218 	add.w	r2, r3, #24
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3308      	adds	r3, #8
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fd fb76 	bl	8008e04 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	0800f19c 	.word	0x0800f19c

0800b728 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff ff99 	bl	800b66c <_ZN13USBReadParserC1Ev>
 800b73a:	4a21      	ldr	r2, [pc, #132]	; (800b7c0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	605a      	str	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3308      	adds	r3, #8
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fd fb03 	bl	8008d56 <_ZN16MultiValueBufferC1Ev>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3310      	adds	r3, #16
 800b754:	4618      	mov	r0, r3
 800b756:	f7fd fb15 	bl	8008d84 <_ZN20MultiByteValueParserC1Ev>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fd fb3c 	bl	8008ddc <_ZN11ByteSkipperC1Ev>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f103 0220 	add.w	r2, r3, #32
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f103 0210 	add.w	r2, r3, #16
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3308      	adds	r3, #8
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7fd fb05 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f103 0218 	add.w	r2, r3, #24
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	f7fd fb28 	bl	8008e04 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	0800f190 	.word	0x0800f190

0800b7c4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	607a      	str	r2, [r7, #4]
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800b7d4:	897b      	ldrh	r3, [r7, #10]
 800b7d6:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800b7dc:	8afb      	ldrh	r3, [r7, #22]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00f      	beq.n	800b802 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800b7e2:	f107 0216 	add.w	r2, r7, #22
 800b7e6:	f107 0310 	add.w	r3, r7, #16
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 f82d 	bl	800b84c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f083 0301 	eor.w	r3, r3, #1
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d100      	bne.n	800b800 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800b7fe:	e7ed      	b.n	800b7dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800b800:	bf00      	nop
}
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	607a      	str	r2, [r7, #4]
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	460b      	mov	r3, r1
 800b816:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800b818:	897b      	ldrh	r3, [r7, #10]
 800b81a:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800b820:	8afb      	ldrh	r3, [r7, #22]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00f      	beq.n	800b846 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800b826:	f107 0216 	add.w	r2, r7, #22
 800b82a:	f107 0310 	add.w	r3, r7, #16
 800b82e:	4619      	mov	r1, r3
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f981 	bl	800bb38 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800b836:	4603      	mov	r3, r0
 800b838:	f083 0301 	eor.w	r3, r3, #1
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d100      	bne.n	800b844 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800b842:	e7ed      	b.n	800b820 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800b844:	bf00      	nop
}
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84e:	b089      	sub	sp, #36	; 0x24
 800b850:	af02      	add	r7, sp, #8
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3320      	adds	r3, #32
 800b85c:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3320      	adds	r3, #32
 800b862:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	f200 815e 	bhi.w	800bb2c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800b870:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b8ad 	.word	0x0800b8ad
 800b880:	0800b8ef 	.word	0x0800b8ef
 800b884:	0800b903 	.word	0x0800b903
 800b888:	0800b9c7 	.word	0x0800b9c7
                case 0:
                        theBuffer.valueSize = 2;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2202      	movs	r2, #2
 800b890:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f103 0210 	add.w	r2, r3, #16
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3308      	adds	r3, #8
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7fd fa84 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3310      	adds	r3, #16
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f003 fa8f 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	f083 0301 	eor.w	r3, r3, #1
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e131      	b.n	800bb2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800b8d0:	781a      	ldrb	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800b8de:	785a      	ldrb	r2, [r3, #1]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3320      	adds	r3, #32
 800b8f2:	1c9a      	adds	r2, r3, #2
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b908:	3b02      	subs	r3, #2
 800b90a:	2b1f      	cmp	r3, #31
 800b90c:	d847      	bhi.n	800b99e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800b90e:	a201      	add	r2, pc, #4	; (adr r2, 800b914 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800b910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b914:	0800b99f 	.word	0x0800b99f
 800b918:	0800b99f 	.word	0x0800b99f
 800b91c:	0800b995 	.word	0x0800b995
 800b920:	0800b99f 	.word	0x0800b99f
 800b924:	0800b99f 	.word	0x0800b99f
 800b928:	0800b99f 	.word	0x0800b99f
 800b92c:	0800b99f 	.word	0x0800b99f
 800b930:	0800b99f 	.word	0x0800b99f
 800b934:	0800b99f 	.word	0x0800b99f
 800b938:	0800b99f 	.word	0x0800b99f
 800b93c:	0800b99f 	.word	0x0800b99f
 800b940:	0800b99f 	.word	0x0800b99f
 800b944:	0800b99f 	.word	0x0800b99f
 800b948:	0800b99f 	.word	0x0800b99f
 800b94c:	0800b99f 	.word	0x0800b99f
 800b950:	0800b99f 	.word	0x0800b99f
 800b954:	0800b99f 	.word	0x0800b99f
 800b958:	0800b99f 	.word	0x0800b99f
 800b95c:	0800b99f 	.word	0x0800b99f
 800b960:	0800b99f 	.word	0x0800b99f
 800b964:	0800b99f 	.word	0x0800b99f
 800b968:	0800b99f 	.word	0x0800b99f
 800b96c:	0800b99f 	.word	0x0800b99f
 800b970:	0800b99f 	.word	0x0800b99f
 800b974:	0800b99f 	.word	0x0800b99f
 800b978:	0800b99f 	.word	0x0800b99f
 800b97c:	0800b99f 	.word	0x0800b99f
 800b980:	0800b99f 	.word	0x0800b99f
 800b984:	0800b99f 	.word	0x0800b99f
 800b988:	0800b99f 	.word	0x0800b99f
 800b98c:	0800b99f 	.word	0x0800b99f
 800b990:	0800b99f 	.word	0x0800b99f
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800b99c:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9a4:	3b02      	subs	r3, #2
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f103 0210 	add.w	r2, r3, #16
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fd f9f7 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2204      	movs	r2, #4
 800b9c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d055      	beq.n	800ba7c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800b9d0:	2b05      	cmp	r3, #5
 800b9d2:	f300 8085 	bgt.w	800bae0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d002      	beq.n	800b9e0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800b9da:	2b04      	cmp	r3, #4
 800b9dc:	d015      	beq.n	800ba0a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800b9de:	e07f      	b.n	800bae0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	3310      	adds	r3, #16
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f003 f9f5 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f083 0301 	eor.w	r3, r3, #1
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e097      	b.n	800bb2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	795a      	ldrb	r2, [r3, #5]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800ba08:	e086      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	68b9      	ldr	r1, [r7, #8]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f003 f9e0 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f083 0301 	eor.w	r3, r3, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800ba24:	2300      	movs	r3, #0
 800ba26:	e082      	b.n	800bb2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	795b      	ldrb	r3, [r3, #5]
 800ba2c:	2be0      	cmp	r3, #224	; 0xe0
 800ba2e:	d16c      	bne.n	800bb0a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	799b      	ldrb	r3, [r3, #6]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d16a      	bne.n	800bb0e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	79db      	ldrb	r3, [r3, #7]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800ba4a:	e065      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	79db      	ldrb	r3, [r3, #7]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d15e      	bne.n	800bb12 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	789a      	ldrb	r2, [r3, #2]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	78da      	ldrb	r2, [r3, #3]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	79da      	ldrb	r2, [r3, #7]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800ba7a:	e04d      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3310      	adds	r3, #16
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	68b9      	ldr	r1, [r7, #8]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f003 f9a7 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f083 0301 	eor.w	r3, r3, #1
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e049      	b.n	800bb2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d038      	beq.n	800bb16 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d034      	beq.n	800bb16 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6858      	ldr	r0, [r3, #4]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681c      	ldr	r4, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	3220      	adds	r2, #32
 800bad4:	9201      	str	r2, [sp, #4]
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	4633      	mov	r3, r6
 800bada:	462a      	mov	r2, r5
 800badc:	47a0      	blx	r4
                                        break;
 800bade:	e01a      	b.n	800bb16 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f103 0018 	add.w	r0, r3, #24
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b02      	subs	r3, #2
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	68b9      	ldr	r1, [r7, #8]
 800baf6:	f7fd f998 	bl	8008e2a <_ZN11ByteSkipper4SkipEPPhPtt>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f083 0301 	eor.w	r3, r3, #1
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e011      	b.n	800bb2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800bb0a:	bf00      	nop
 800bb0c:	e004      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800bb0e:	bf00      	nop
 800bb10:	e002      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800bb12:	bf00      	nop
 800bb14:	e000      	b.n	800bb18 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800bb16:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f103 0220 	add.w	r2, r3, #32
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800bb2c:	2301      	movs	r3, #1
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb36:	bf00      	nop

0800bb38 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3a:	b089      	sub	sp, #36	; 0x24
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3320      	adds	r3, #32
 800bb48:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3320      	adds	r3, #32
 800bb4e:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	f200 815e 	bhi.w	800be18 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800bb5c:	a201      	add	r2, pc, #4	; (adr r2, 800bb64 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800bb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb62:	bf00      	nop
 800bb64:	0800bb79 	.word	0x0800bb79
 800bb68:	0800bb99 	.word	0x0800bb99
 800bb6c:	0800bbdb 	.word	0x0800bbdb
 800bb70:	0800bbef 	.word	0x0800bbef
 800bb74:	0800bcb3 	.word	0x0800bcb3
                        theBuffer.valueSize = 2;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f103 0210 	add.w	r2, r3, #16
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3308      	adds	r3, #8
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fd f90e 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3310      	adds	r3, #16
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f003 f919 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f083 0301 	eor.w	r3, r3, #1
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e131      	b.n	800be1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800bbbc:	781a      	ldrb	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800bbca:	785a      	ldrb	r2, [r3, #1]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3320      	adds	r3, #32
 800bbde:	1c9a      	adds	r2, r3, #2
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2203      	movs	r2, #3
 800bbea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bbf4:	3b02      	subs	r3, #2
 800bbf6:	2b1f      	cmp	r3, #31
 800bbf8:	d847      	bhi.n	800bc8a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800bbfa:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc8b 	.word	0x0800bc8b
 800bc04:	0800bc8b 	.word	0x0800bc8b
 800bc08:	0800bc81 	.word	0x0800bc81
 800bc0c:	0800bc8b 	.word	0x0800bc8b
 800bc10:	0800bc8b 	.word	0x0800bc8b
 800bc14:	0800bc8b 	.word	0x0800bc8b
 800bc18:	0800bc8b 	.word	0x0800bc8b
 800bc1c:	0800bc8b 	.word	0x0800bc8b
 800bc20:	0800bc8b 	.word	0x0800bc8b
 800bc24:	0800bc8b 	.word	0x0800bc8b
 800bc28:	0800bc8b 	.word	0x0800bc8b
 800bc2c:	0800bc8b 	.word	0x0800bc8b
 800bc30:	0800bc8b 	.word	0x0800bc8b
 800bc34:	0800bc8b 	.word	0x0800bc8b
 800bc38:	0800bc8b 	.word	0x0800bc8b
 800bc3c:	0800bc8b 	.word	0x0800bc8b
 800bc40:	0800bc8b 	.word	0x0800bc8b
 800bc44:	0800bc8b 	.word	0x0800bc8b
 800bc48:	0800bc8b 	.word	0x0800bc8b
 800bc4c:	0800bc8b 	.word	0x0800bc8b
 800bc50:	0800bc8b 	.word	0x0800bc8b
 800bc54:	0800bc8b 	.word	0x0800bc8b
 800bc58:	0800bc8b 	.word	0x0800bc8b
 800bc5c:	0800bc8b 	.word	0x0800bc8b
 800bc60:	0800bc8b 	.word	0x0800bc8b
 800bc64:	0800bc8b 	.word	0x0800bc8b
 800bc68:	0800bc8b 	.word	0x0800bc8b
 800bc6c:	0800bc8b 	.word	0x0800bc8b
 800bc70:	0800bc8b 	.word	0x0800bc8b
 800bc74:	0800bc8b 	.word	0x0800bc8b
 800bc78:	0800bc8b 	.word	0x0800bc8b
 800bc7c:	0800bc8b 	.word	0x0800bc8b
                                        isGoodInterface = false;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800bc88:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc90:	3b02      	subs	r3, #2
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f103 0210 	add.w	r2, r3, #16
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3308      	adds	r3, #8
 800bca2:	4619      	mov	r1, r3
 800bca4:	4610      	mov	r0, r2
 800bca6:	f7fd f881 	bl	8008dac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2204      	movs	r2, #4
 800bcae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bcb8:	2b05      	cmp	r3, #5
 800bcba:	d055      	beq.n	800bd68 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800bcbc:	2b05      	cmp	r3, #5
 800bcbe:	f300 8085 	bgt.w	800bdcc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d002      	beq.n	800bccc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	d015      	beq.n	800bcf6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800bcca:	e07f      	b.n	800bdcc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3310      	adds	r3, #16
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	68b9      	ldr	r1, [r7, #8]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f003 f87f 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f083 0301 	eor.w	r3, r3, #1
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e097      	b.n	800be1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	795a      	ldrb	r2, [r3, #5]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800bcf4:	e086      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3310      	adds	r3, #16
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	68b9      	ldr	r1, [r7, #8]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f003 f86a 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f083 0301 	eor.w	r3, r3, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800bd10:	2300      	movs	r3, #0
 800bd12:	e082      	b.n	800be1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	795b      	ldrb	r3, [r3, #5]
 800bd18:	2bff      	cmp	r3, #255	; 0xff
 800bd1a:	d16c      	bne.n	800bdf6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	799b      	ldrb	r3, [r3, #6]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d16a      	bne.n	800bdfa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	79db      	ldrb	r3, [r3, #7]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800bd36:	e065      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	79db      	ldrb	r3, [r3, #7]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d15e      	bne.n	800bdfe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	789a      	ldrb	r2, [r3, #2]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	78da      	ldrb	r2, [r3, #3]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	79da      	ldrb	r2, [r3, #7]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800bd66:	e04d      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3310      	adds	r3, #16
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f003 f831 	bl	800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f083 0301 	eor.w	r3, r3, #1
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e049      	b.n	800be1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d038      	beq.n	800be02 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d034      	beq.n	800be02 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6858      	ldr	r0, [r3, #4]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681c      	ldr	r4, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	3220      	adds	r2, #32
 800bdc0:	9201      	str	r2, [sp, #4]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	4633      	mov	r3, r6
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	47a0      	blx	r4
                                        break;
 800bdca:	e01a      	b.n	800be02 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f103 0018 	add.w	r0, r3, #24
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b02      	subs	r3, #2
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	f7fd f822 	bl	8008e2a <_ZN11ByteSkipper4SkipEPPhPtt>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f083 0301 	eor.w	r3, r3, #1
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d008      	beq.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e011      	b.n	800be1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800bdf6:	bf00      	nop
 800bdf8:	e004      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800bdfa:	bf00      	nop
 800bdfc:	e002      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800bdfe:	bf00      	nop
 800be00:	e000      	b.n	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800be02:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f103 0220 	add.w	r2, r3, #32
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800be18:	2301      	movs	r3, #1
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	bf00      	nop

0800be24 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]
 800be32:	7bfb      	ldrb	r3, [r7, #15]
 800be34:	2b03      	cmp	r3, #3
 800be36:	d815      	bhi.n	800be64 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	3318      	adds	r3, #24
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	3318      	adds	r3, #24
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800be56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be5a:	e005      	b.n	800be68 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	3301      	adds	r3, #1
 800be60:	73fb      	strb	r3, [r7, #15]
 800be62:	e7e6      	b.n	800be32 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800be64:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	4a0a      	ldr	r2, [pc, #40]	; (800bea8 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7ff ffc3 	bl	800be24 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	0800f258 	.word	0x0800f258

0800beac <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	88fb      	ldrh	r3, [r7, #6]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d10b      	bne.n	800bee0 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	3301      	adds	r3, #1
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	88fb      	ldrh	r3, [r7, #6]
 800bed2:	121b      	asrs	r3, r3, #8
 800bed4:	f043 0320 	orr.w	r3, r3, #32
 800bed8:	429a      	cmp	r2, r3
 800beda:	d101      	bne.n	800bee0 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800bedc:	2301      	movs	r3, #1
 800bede:	e000      	b.n	800bee2 <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800bee0:	2300      	movs	r3, #0
        }
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	460b      	mov	r3, r1
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	72fb      	strb	r3, [r7, #11]
                return;
 800befc:	bf00      	nop
        };
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
                return;
 800bf10:	bf00      	nop
        };
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
                return;
 800bf24:	bf00      	nop
        }
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff ff95 	bl	800be74 <_ZN16BluetoothServiceC1EP3BTD>
 800bf4a:	4a1f      	ldr	r2, [pc, #124]	; (800bfc8 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75fb      	strb	r3, [r7, #23]
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d809      	bhi.n	800bf76 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800bf62:	7dfa      	ldrb	r2, [r7, #23]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3208      	adds	r2, #8
 800bf68:	2100      	movs	r1, #0
 800bf6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	3301      	adds	r3, #1
 800bf72:	75fb      	strb	r3, [r7, #23]
 800bf74:	e7f2      	b.n	800bf5c <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	79fa      	ldrb	r2, [r7, #7]
 800bf7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2250      	movs	r2, #80	; 0x50
 800bf8c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2270      	movs	r2, #112	; 0x70
 800bf9c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2271      	movs	r2, #113	; 0x71
 800bfac:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 f807 	bl	800bfcc <_ZN5BTHID5ResetEv>
}
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0800f22c 	.word	0x0800f22c

0800bfcc <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
        connected = false;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	220a      	movs	r2, #10
 800bff4:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3320      	adds	r3, #32
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c012:	b590      	push	{r4, r7, lr}
 800c014:	b085      	sub	sp, #20
 800c016:	af02      	add	r7, sp, #8
 800c018:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c020:	2b00      	cmp	r3, #0
 800c022:	d014      	beq.n	800c04e <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6898      	ldr	r0, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	8999      	ldrh	r1, [r3, #12]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7d1b      	ldrb	r3, [r3, #20]
 800c030:	3301      	adds	r3, #1
 800c032:	b2da      	uxtb	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	751a      	strb	r2, [r3, #20]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	7d1a      	ldrb	r2, [r3, #20]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f103 041b 	add.w	r4, r3, #27
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	336f      	adds	r3, #111	; 0x6f
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	4623      	mov	r3, r4
 800c04a:	f7ff f9c4 	bl	800b3d6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6898      	ldr	r0, [r3, #8]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	8999      	ldrh	r1, [r3, #12]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	3301      	adds	r3, #1
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	751a      	strb	r2, [r3, #20]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	7d1a      	ldrb	r2, [r3, #20]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f103 0418 	add.w	r4, r3, #24
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	336d      	adds	r3, #109	; 0x6d
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	4623      	mov	r3, r4
 800c074:	f7ff f9af 	bl	800b3d6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3308      	adds	r3, #8
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	220e      	movs	r2, #14
 800c088:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2209      	movs	r2, #9
 800c08e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	bd90      	pop	{r4, r7, pc}
	...

0800c09c <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b087      	sub	sp, #28
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7d5b      	ldrb	r3, [r3, #21]
 800c0aa:	f083 0301 	eor.w	r3, r3, #1
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d023      	beq.n	800c0fc <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d11e      	bne.n	800c0fc <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	330c      	adds	r3, #12
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	330d      	adds	r3, #13
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d113      	bne.n	800c0fc <_ZN5BTHID7ACLDataEPh+0x60>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	7a9b      	ldrb	r3, [r3, #10]
 800c0da:	f083 0301 	eor.w	r3, r3, #1
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	8b5a      	ldrh	r2, [r3, #26]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	7a5b      	ldrb	r3, [r3, #9]
 800c102:	f083 0301 	eor.w	r3, r3, #1
 800c106:	b2db      	uxtb	r3, r3
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d03a      	beq.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c114:	2b00      	cmp	r3, #0
 800c116:	d034      	beq.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d5b      	ldrb	r3, [r3, #21]
 800c11c:	f083 0301 	eor.w	r3, r3, #1
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d02d      	beq.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c12c:	f083 0301 	eor.w	r3, r3, #1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d025      	beq.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d120      	bne.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	330c      	adds	r3, #12
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	330d      	adds	r3, #13
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	021b      	lsls	r3, r3, #8
 800c150:	4313      	orrs	r3, r2
 800c152:	2b11      	cmp	r3, #17
 800c154:	d115      	bne.n	800c182 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	2201      	movs	r2, #1
 800c166:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	8b5a      	ldrh	r2, [r3, #26]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	899b      	ldrh	r3, [r3, #12]
 800c188:	461a      	mov	r2, r3
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	f7ff fe8e 	bl	800beac <_ZN16BluetoothService14checkHciHandleEPht>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 83dd 	beq.w	800c952 <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	3306      	adds	r3, #6
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	3307      	adds	r3, #7
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	021b      	lsls	r3, r3, #8
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	f040 829b 	bne.w	800c6e6 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	f000 83c5 	beq.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	3308      	adds	r3, #8
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	f040 808d 	bne.w	800c2e2 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	3310      	adds	r3, #16
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3311      	adds	r3, #17
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	021b      	lsls	r3, r3, #8
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f040 83b3 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	3312      	adds	r3, #18
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	3313      	adds	r3, #19
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	021b      	lsls	r3, r3, #8
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f040 83a7 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	330e      	adds	r3, #14
 800c1fc:	781a      	ldrb	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c204:	429a      	cmp	r2, r3
 800c206:	d124      	bne.n	800c252 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	330f      	adds	r3, #15
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c214:	429a      	cmp	r2, r3
 800c216:	d11c      	bne.n	800c252 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	7a5a      	ldrb	r2, [r3, #9]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	7b1a      	ldrb	r2, [r3, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	7b5a      	ldrb	r2, [r3, #13]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7d1b      	ldrb	r3, [r3, #20]
 800c234:	3301      	adds	r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6898      	ldr	r0, [r3, #8]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	8999      	ldrh	r1, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7d1a      	ldrb	r2, [r3, #20]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	331b      	adds	r3, #27
 800c24c:	f7ff f825 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>
 800c250:	e379      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	330e      	adds	r3, #14
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c25e:	429a      	cmp	r2, r3
 800c260:	d11a      	bne.n	800c298 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	330f      	adds	r3, #15
 800c266:	781a      	ldrb	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c26e:	429a      	cmp	r2, r3
 800c270:	d112      	bne.n	800c298 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	7a5a      	ldrb	r2, [r3, #9]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	7b1a      	ldrb	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	7b5a      	ldrb	r2, [r3, #13]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	f043 0204 	orr.w	r2, r3, #4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	611a      	str	r2, [r3, #16]
 800c296:	e356      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	330e      	adds	r3, #14
 800c29c:	781a      	ldrb	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	f040 834e 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	330f      	adds	r3, #15
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	f040 8345 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	7a5a      	ldrb	r2, [r3, #9]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	7b1a      	ldrb	r2, [r3, #12]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	7b5a      	ldrb	r2, [r3, #13]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	611a      	str	r2, [r3, #16]
 800c2e0:	e331      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d15a      	bne.n	800c3a2 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	330c      	adds	r3, #12
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	330d      	adds	r3, #13
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d112      	bne.n	800c328 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	7a5a      	ldrb	r2, [r3, #9]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	7b9a      	ldrb	r2, [r3, #14]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	7bda      	ldrb	r2, [r3, #15]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	611a      	str	r2, [r3, #16]
 800c326:	e30e      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	330c      	adds	r3, #12
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	330d      	adds	r3, #13
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	4313      	orrs	r3, r2
 800c33a:	2b11      	cmp	r3, #17
 800c33c:	d112      	bne.n	800c364 <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	7a5a      	ldrb	r2, [r3, #9]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	7b9a      	ldrb	r2, [r3, #14]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	7bda      	ldrb	r2, [r3, #15]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f043 0201 	orr.w	r2, r3, #1
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	611a      	str	r2, [r3, #16]
 800c362:	e2f0      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	330c      	adds	r3, #12
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	461a      	mov	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	330d      	adds	r3, #13
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	021b      	lsls	r3, r3, #8
 800c374:	4313      	orrs	r3, r2
 800c376:	2b13      	cmp	r3, #19
 800c378:	f040 82e5 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	7a5a      	ldrb	r2, [r3, #9]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	7b9a      	ldrb	r2, [r3, #14]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	7bda      	ldrb	r2, [r3, #15]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	f043 0210 	orr.w	r2, r3, #16
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	611a      	str	r2, [r3, #16]
 800c3a0:	e2d1      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b05      	cmp	r3, #5
 800c3aa:	d15e      	bne.n	800c46a <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	3310      	adds	r3, #16
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	3311      	adds	r3, #17
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	021b      	lsls	r3, r3, #8
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f040 82c1 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	330c      	adds	r3, #12
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d112      	bne.n	800c3fa <_ZN5BTHID7ACLDataEPh+0x35e>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	330d      	adds	r3, #13
 800c3d8:	781a      	ldrb	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d10a      	bne.n	800c3fa <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	7a5a      	ldrb	r2, [r3, #9]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	611a      	str	r2, [r3, #16]
 800c3f8:	e2a5      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	330c      	adds	r3, #12
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c406:	429a      	cmp	r2, r3
 800c408:	d112      	bne.n	800c430 <_ZN5BTHID7ACLDataEPh+0x394>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	330d      	adds	r3, #13
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c416:	429a      	cmp	r2, r3
 800c418:	d10a      	bne.n	800c430 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	7a5a      	ldrb	r2, [r3, #9]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	f043 0202 	orr.w	r2, r3, #2
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	611a      	str	r2, [r3, #16]
 800c42e:	e28a      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	330c      	adds	r3, #12
 800c434:	781a      	ldrb	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c43c:	429a      	cmp	r2, r3
 800c43e:	f040 8282 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	330d      	adds	r3, #13
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c44e:	429a      	cmp	r2, r3
 800c450:	f040 8279 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	7a5a      	ldrb	r2, [r3, #9]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	f043 0220 	orr.w	r2, r3, #32
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	611a      	str	r2, [r3, #16]
 800c468:	e26d      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	3308      	adds	r3, #8
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b04      	cmp	r3, #4
 800c472:	d155      	bne.n	800c520 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	330c      	adds	r3, #12
 800c478:	781a      	ldrb	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c480:	429a      	cmp	r2, r3
 800c482:	d113      	bne.n	800c4ac <_ZN5BTHID7ACLDataEPh+0x410>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	330d      	adds	r3, #13
 800c488:	781a      	ldrb	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c490:	429a      	cmp	r2, r3
 800c492:	d10b      	bne.n	800c4ac <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6898      	ldr	r0, [r3, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	8999      	ldrh	r1, [r3, #12]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	3309      	adds	r3, #9
 800c4a0:	781a      	ldrb	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	331b      	adds	r3, #27
 800c4a6:	f7fe ff43 	bl	800b330 <_ZN3BTD21l2cap_config_responseEthPh>
 800c4aa:	e24c      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	330c      	adds	r3, #12
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d113      	bne.n	800c4e4 <_ZN5BTHID7ACLDataEPh+0x448>
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	330d      	adds	r3, #13
 800c4c0:	781a      	ldrb	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d10b      	bne.n	800c4e4 <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6898      	ldr	r0, [r3, #8]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8999      	ldrh	r1, [r3, #12]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	3309      	adds	r3, #9
 800c4d8:	781a      	ldrb	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	3316      	adds	r3, #22
 800c4de:	f7fe ff27 	bl	800b330 <_ZN3BTD21l2cap_config_responseEthPh>
 800c4e2:	e230      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	330c      	adds	r3, #12
 800c4e8:	781a      	ldrb	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	f040 8228 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	330d      	adds	r3, #13
 800c4fa:	781a      	ldrb	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c502:	429a      	cmp	r2, r3
 800c504:	f040 821f 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6898      	ldr	r0, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	8999      	ldrh	r1, [r3, #12]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	3309      	adds	r3, #9
 800c514:	781a      	ldrb	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3318      	adds	r3, #24
 800c51a:	f7fe ff09 	bl	800b330 <_ZN3BTD21l2cap_config_responseEthPh>
 800c51e:	e212      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	2b06      	cmp	r3, #6
 800c528:	d170      	bne.n	800c60c <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	330c      	adds	r3, #12
 800c52e:	781a      	ldrb	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c536:	429a      	cmp	r2, r3
 800c538:	d112      	bne.n	800c560 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	330d      	adds	r3, #13
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c546:	429a      	cmp	r2, r3
 800c548:	d10a      	bne.n	800c560 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	7a5a      	ldrb	r2, [r3, #9]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	611a      	str	r2, [r3, #16]
 800c55e:	e1f2      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	330c      	adds	r3, #12
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d121      	bne.n	800c5b4 <_ZN5BTHID7ACLDataEPh+0x518>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	330d      	adds	r3, #13
 800c574:	781a      	ldrb	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d119      	bne.n	800c5b4 <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	7a5a      	ldrb	r2, [r3, #9]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6898      	ldr	r0, [r3, #8]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8999      	ldrh	r1, [r3, #12]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	7d1a      	ldrb	r2, [r3, #20]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3316      	adds	r3, #22
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	f7fe ff55 	bl	800b450 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
 800c5b2:	e1c8      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	330c      	adds	r3, #12
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	f040 81c0 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	330d      	adds	r3, #13
 800c5ca:	781a      	ldrb	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	f040 81b7 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	7a5a      	ldrb	r2, [r3, #9]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6898      	ldr	r0, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	8999      	ldrh	r1, [r3, #12]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7d1a      	ldrb	r2, [r3, #20]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3318      	adds	r3, #24
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	f7fe ff29 	bl	800b450 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
 800c60a:	e19c      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	3308      	adds	r3, #8
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	2b07      	cmp	r3, #7
 800c614:	d14c      	bne.n	800c6b0 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	330c      	adds	r3, #12
 800c61a:	781a      	ldrb	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	7edb      	ldrb	r3, [r3, #27]
 800c620:	429a      	cmp	r2, r3
 800c622:	d111      	bne.n	800c648 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	330d      	adds	r3, #13
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	7f1b      	ldrb	r3, [r3, #28]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d10a      	bne.n	800c648 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	7a5a      	ldrb	r2, [r3, #9]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	611a      	str	r2, [r3, #16]
 800c646:	e17e      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	330c      	adds	r3, #12
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7d9b      	ldrb	r3, [r3, #22]
 800c652:	429a      	cmp	r2, r3
 800c654:	d111      	bne.n	800c67a <_ZN5BTHID7ACLDataEPh+0x5de>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	330d      	adds	r3, #13
 800c65a:	781a      	ldrb	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7ddb      	ldrb	r3, [r3, #23]
 800c660:	429a      	cmp	r2, r3
 800c662:	d10a      	bne.n	800c67a <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	7a5a      	ldrb	r2, [r3, #9]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	f043 0208 	orr.w	r2, r3, #8
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	611a      	str	r2, [r3, #16]
 800c678:	e165      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	330c      	adds	r3, #12
 800c67e:	781a      	ldrb	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7e1b      	ldrb	r3, [r3, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	f040 815e 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	330d      	adds	r3, #13
 800c68e:	781a      	ldrb	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7e5b      	ldrb	r3, [r3, #25]
 800c694:	429a      	cmp	r2, r3
 800c696:	f040 8156 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	7a5a      	ldrb	r2, [r3, #9]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	611a      	str	r2, [r3, #16]
 800c6ae:	e14a      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b0a      	cmp	r3, #10
 800c6b8:	f040 8145 	bne.w	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	7a5a      	ldrb	r2, [r3, #9]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6898      	ldr	r0, [r3, #8]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8999      	ldrh	r1, [r3, #12]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7d1a      	ldrb	r2, [r3, #20]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	330c      	adds	r3, #12
 800c6d4:	781c      	ldrb	r4, [r3, #0]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	330d      	adds	r3, #13
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	4623      	mov	r3, r4
 800c6e0:	f7fe fef3 	bl	800b4ca <_ZN3BTD26l2cap_information_responseEthhh>
 800c6e4:	e12f      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	3306      	adds	r3, #6
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	f040 8087 	bne.w	800c806 <_ZN5BTHID7ACLDataEPh+0x76a>
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	3307      	adds	r3, #7
 800c6fc:	781a      	ldrb	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c704:	429a      	cmp	r2, r3
 800c706:	d17e      	bne.n	800c806 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d131      	bne.n	800c776 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2203      	movs	r2, #3
 800c716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	7a5a      	ldrb	r2, [r3, #9]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	7a9a      	ldrb	r2, [r3, #10]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2205      	movs	r2, #5
 800c73a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3328      	adds	r3, #40	; 0x28
 800c76a:	220a      	movs	r2, #10
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fb7a 	bl	800ce68 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800c774:	e0e4      	b.n	800c940 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	3308      	adds	r3, #8
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d131      	bne.n	800c7e4 <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2205      	movs	r2, #5
 800c784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	7a5a      	ldrb	r2, [r3, #9]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	7a9a      	ldrb	r2, [r3, #10]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2205      	movs	r2, #5
 800c7a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2235      	movs	r2, #53	; 0x35
 800c7c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3328      	adds	r3, #40	; 0x28
 800c7d8:	220a      	movs	r2, #10
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fb43 	bl	800ce68 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800c7e2:	e0ad      	b.n	800c940 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b06      	cmp	r3, #6
 800c7ec:	f040 80a8 	bne.w	800c940 <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	3309      	adds	r3, #9
 800c7f4:	7819      	ldrb	r1, [r3, #0]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	330a      	adds	r3, #10
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fb4c 	bl	800ce9c <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800c804:	e09c      	b.n	800c940 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	3306      	adds	r3, #6
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c812:	429a      	cmp	r2, r3
 800c814:	d166      	bne.n	800c8e4 <_ZN5BTHID7ACLDataEPh+0x848>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	3307      	adds	r3, #7
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c822:	429a      	cmp	r2, r3
 800c824:	d15e      	bne.n	800c8e4 <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	3308      	adds	r3, #8
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2ba1      	cmp	r3, #161	; 0xa1
 800c82e:	f040 8089 	bne.w	800c944 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800c832:	f7f5 f835 	bl	80018a0 <HAL_GetTick>
 800c836:	4603      	mov	r3, r0
 800c838:	4a48      	ldr	r2, [pc, #288]	; (800c95c <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800c83a:	fba2 2303 	umull	r2, r3, r2, r3
 800c83e:	099a      	lsrs	r2, r3, #6
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	3305      	adds	r3, #5
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	b21a      	sxth	r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	3304      	adds	r3, #4
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	b21b      	sxth	r3, r3
 800c856:	4313      	orrs	r3, r2
 800c858:	b21b      	sxth	r3, r3
 800c85a:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3314      	adds	r3, #20
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	89fa      	ldrh	r2, [r7, #14]
 800c866:	b2d2      	uxtb	r2, r2
 800c868:	3a01      	subs	r2, #1
 800c86a:	b2d1      	uxtb	r1, r2
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	3209      	adds	r2, #9
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	3309      	adds	r3, #9
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d002      	beq.n	800c884 <_ZN5BTHID7ACLDataEPh+0x7e8>
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d016      	beq.n	800c8b0 <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800c882:	e05f      	b.n	800c944 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d027      	beq.n	800c8dc <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a18      	ldr	r0, [r3, #32]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681c      	ldr	r4, [r3, #0]
 800c898:	89fb      	ldrh	r3, [r7, #14]
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	3b02      	subs	r3, #2
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	330a      	adds	r3, #10
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	6879      	ldr	r1, [r7, #4]
 800c8ac:	47a0      	blx	r4
                                                break;
 800c8ae:	e015      	b.n	800c8dc <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d013      	beq.n	800c8e0 <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681c      	ldr	r4, [r3, #0]
 800c8c4:	89fb      	ldrh	r3, [r7, #14]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	3b02      	subs	r3, #2
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	330a      	adds	r3, #10
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	6879      	ldr	r1, [r7, #4]
 800c8d8:	47a0      	blx	r4
                                                break;
 800c8da:	e001      	b.n	800c8e0 <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800c8dc:	bf00      	nop
 800c8de:	e031      	b.n	800c944 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800c8e0:	bf00      	nop
                        }
 800c8e2:	e02f      	b.n	800c944 <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	3306      	adds	r3, #6
 800c8e8:	781a      	ldrb	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d128      	bne.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	3307      	adds	r3, #7
 800c8f8:	781a      	ldrb	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c900:	429a      	cmp	r2, r3
 800c902:	d120      	bne.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2ba3      	cmp	r3, #163	; 0xa3
 800c90c:	d11b      	bne.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	3305      	adds	r3, #5
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	021b      	lsls	r3, r3, #8
 800c916:	b21a      	sxth	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	3304      	adds	r3, #4
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	b21b      	sxth	r3, r3
 800c920:	4313      	orrs	r3, r2
 800c922:	b21b      	sxth	r3, r3
 800c924:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3318      	adds	r3, #24
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	89ba      	ldrh	r2, [r7, #12]
 800c930:	b2d2      	uxtb	r2, r2
 800c932:	3a01      	subs	r2, #1
 800c934:	b2d1      	uxtb	r1, r2
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	3209      	adds	r2, #9
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	4798      	blx	r3
 800c93e:	e002      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800c944:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f80a 	bl	800c960 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f8b9 	bl	800cac4 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	bd90      	pop	{r4, r7, pc}
 800c95a:	bf00      	nop
 800c95c:	10624dd3 	.word	0x10624dd3

0800c960 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800c960:	b5b0      	push	{r4, r5, r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af02      	add	r7, sp, #8
 800c966:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7e9b      	ldrb	r3, [r3, #26]
 800c96c:	2b0e      	cmp	r3, #14
 800c96e:	f000 8086 	beq.w	800ca7e <_ZN5BTHID8SDP_taskEv+0x11e>
 800c972:	2b0e      	cmp	r3, #14
 800c974:	f300 80a1 	bgt.w	800caba <_ZN5BTHID8SDP_taskEv+0x15a>
 800c978:	2b0a      	cmp	r3, #10
 800c97a:	d002      	beq.n	800c982 <_ZN5BTHID8SDP_taskEv+0x22>
 800c97c:	2b0b      	cmp	r3, #11
 800c97e:	d06a      	beq.n	800ca56 <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800c980:	e09b      	b.n	800caba <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d043      	beq.n	800ca16 <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6898      	ldr	r0, [r3, #8]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8999      	ldrh	r1, [r3, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7d1a      	ldrb	r2, [r3, #20]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	331b      	adds	r3, #27
 800c9b0:	2501      	movs	r5, #1
 800c9b2:	9501      	str	r5, [sp, #4]
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	f7fe fc22 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800c9bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c9c0:	f7f4 ff7a 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6898      	ldr	r0, [r3, #8]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	8999      	ldrh	r1, [r3, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	7d1a      	ldrb	r2, [r3, #20]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	331b      	adds	r3, #27
 800c9da:	2500      	movs	r5, #0
 800c9dc:	9501      	str	r5, [sp, #4]
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	f7fe fc0d 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800c9f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c9f6:	f7f4 ff5f 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6898      	ldr	r0, [r3, #8]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	8999      	ldrh	r1, [r3, #12]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7d1a      	ldrb	r2, [r3, #20]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	331b      	adds	r3, #27
 800ca0a:	f7fe fc46 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	220b      	movs	r2, #11
 800ca12:	769a      	strb	r2, [r3, #26]
                        break;
 800ca14:	e04c      	b.n	800cab0 <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d046      	beq.n	800cab0 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6898      	ldr	r0, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8999      	ldrh	r1, [r3, #12]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7d1a      	ldrb	r2, [r3, #20]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	331b      	adds	r3, #27
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4623      	mov	r3, r4
 800ca50:	f7fe fcfe 	bl	800b450 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800ca54:	e02c      	b.n	800cab0 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d028      	beq.n	800cab4 <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	220a      	movs	r2, #10
 800ca7a:	769a      	strb	r2, [r3, #26]
                        break;
 800ca7c:	e01a      	b.n	800cab4 <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d016      	beq.n	800cab8 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689a      	ldr	r2, [r3, #8]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	4619      	mov	r1, r3
 800ca94:	4610      	mov	r0, r2
 800ca96:	f7fe fa84 	bl	800afa2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caa0:	819a      	strh	r2, [r3, #12]
                                Reset();
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3308      	adds	r3, #8
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
                        break;
 800caae:	e003      	b.n	800cab8 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800cab8:	bf00      	nop
}
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cac4 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800cac4:	b5b0      	push	{r4, r5, r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af02      	add	r7, sp, #8
 800caca:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800cad2:	3b01      	subs	r3, #1
 800cad4:	2b08      	cmp	r3, #8
 800cad6:	f200 812f 	bhi.w	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800cada:	a201      	add	r2, pc, #4	; (adr r2, 800cae0 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800cadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae0:	0800cd17 	.word	0x0800cd17
 800cae4:	0800cbaf 	.word	0x0800cbaf
 800cae8:	0800cbe7 	.word	0x0800cbe7
 800caec:	0800cb05 	.word	0x0800cb05
 800caf0:	0800cce3 	.word	0x0800cce3
 800caf4:	0800cb23 	.word	0x0800cb23
 800caf8:	0800cc31 	.word	0x0800cc31
 800cafc:	0800cc67 	.word	0x0800cc67
 800cb00:	0800cca3 	.word	0x0800cca3
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 8104 	beq.w	800cd1a <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f9fd 	bl	800cf12 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2206      	movs	r2, #6
 800cb1c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cb20:	e0fb      	b.n	800cd1a <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	f003 0310 	and.w	r3, r3, #16
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 80f7 	beq.w	800cd1e <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6898      	ldr	r0, [r3, #8]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8999      	ldrh	r1, [r3, #12]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7d1a      	ldrb	r2, [r3, #20]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3318      	adds	r3, #24
 800cb46:	2501      	movs	r5, #1
 800cb48:	9501      	str	r5, [sp, #4]
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	f7fe fb57 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800cb52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cb56:	f7f4 feaf 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6898      	ldr	r0, [r3, #8]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	8999      	ldrh	r1, [r3, #12]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7d1a      	ldrb	r2, [r3, #20]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3318      	adds	r3, #24
 800cb70:	2500      	movs	r5, #0
 800cb72:	9501      	str	r5, [sp, #4]
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4623      	mov	r3, r4
 800cb78:	f7fe fb42 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	7d1b      	ldrb	r3, [r3, #20]
 800cb80:	3301      	adds	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800cb88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cb8c:	f7f4 fe94 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6898      	ldr	r0, [r3, #8]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	8999      	ldrh	r1, [r3, #12]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1a      	ldrb	r2, [r3, #20]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3318      	adds	r3, #24
 800cba0:	f7fe fb7b 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2208      	movs	r2, #8
 800cba8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cbac:	e0b7      	b.n	800cd1e <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f003 0304 	and.w	r3, r3, #4
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 80b3 	beq.w	800cd22 <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7d1b      	ldrb	r3, [r3, #20]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	b2da      	uxtb	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6898      	ldr	r0, [r3, #8]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	8999      	ldrh	r1, [r3, #12]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1a      	ldrb	r2, [r3, #20]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3316      	adds	r3, #22
 800cbd8:	f7fe fb5f 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2203      	movs	r2, #3
 800cbe0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cbe4:	e09d      	b.n	800cd22 <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 8099 	beq.w	800cd26 <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f98c 	bl	800cf12 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800cbfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cbfe:	f7f4 fe5b 	bl	80018b8 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7d1b      	ldrb	r3, [r3, #20]
 800cc06:	3301      	adds	r3, #1
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6898      	ldr	r0, [r3, #8]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	8999      	ldrh	r1, [r3, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7d1a      	ldrb	r2, [r3, #20]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	336d      	adds	r3, #109	; 0x6d
 800cc1e:	2413      	movs	r4, #19
 800cc20:	9400      	str	r4, [sp, #0]
 800cc22:	f7fe faaf 	bl	800b184 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2207      	movs	r2, #7
 800cc2a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cc2e:	e07a      	b.n	800cd26 <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d076      	beq.n	800cd2a <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	7d1b      	ldrb	r3, [r3, #20]
 800cc40:	3301      	adds	r3, #1
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6898      	ldr	r0, [r3, #8]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8999      	ldrh	r1, [r3, #12]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	7d1a      	ldrb	r2, [r3, #20]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3318      	adds	r3, #24
 800cc58:	f7fe fb1f 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2208      	movs	r2, #8
 800cc60:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cc64:	e061      	b.n	800cd2a <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f003 0320 	and.w	r3, r3, #32
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d05d      	beq.n	800cd2e <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	755a      	strb	r2, [r3, #21]
                                onInit();
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3310      	adds	r3, #16
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cca0:	e045      	b.n	800cd2e <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d041      	beq.n	800cd32 <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7d1b      	ldrb	r3, [r3, #20]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6898      	ldr	r0, [r3, #8]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	8999      	ldrh	r1, [r3, #12]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7d1a      	ldrb	r2, [r3, #20]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 0416 	add.w	r4, r3, #22
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	336b      	adds	r3, #107	; 0x6b
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	f7fe fb7f 	bl	800b3d6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2205      	movs	r2, #5
 800ccdc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cce0:	e027      	b.n	800cd32 <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	f003 0308 	and.w	r3, r3, #8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d023      	beq.n	800cd36 <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689a      	ldr	r2, [r3, #8]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	f7fe f952 	bl	800afa2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd04:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800cd14:	e00f      	b.n	800cd36 <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800cd16:	bf00      	nop
 800cd18:	e00e      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd1a:	bf00      	nop
 800cd1c:	e00c      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd1e:	bf00      	nop
 800cd20:	e00a      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd22:	bf00      	nop
 800cd24:	e008      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd26:	bf00      	nop
 800cd28:	e006      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd2a:	bf00      	nop
 800cd2c:	e004      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd2e:	bf00      	nop
 800cd30:	e002      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd32:	bf00      	nop
 800cd34:	e000      	b.n	800cd38 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800cd36:	bf00      	nop
        }
}
 800cd38:	bf00      	nop
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bdb0      	pop	{r4, r5, r7, pc}

0800cd40 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800cd40:	b5b0      	push	{r4, r5, r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 8086 	bne.w	800ce60 <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d03a      	beq.n	800cdd6 <_ZN5BTHID3RunEv+0x96>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	7a5b      	ldrb	r3, [r3, #9]
 800cd66:	f083 0301 	eor.w	r3, r3, #1
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d032      	beq.n	800cdd6 <_ZN5BTHID3RunEv+0x96>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d5b      	ldrb	r3, [r3, #21]
 800cd74:	f083 0301 	eor.w	r3, r3, #1
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d02b      	beq.n	800cdd6 <_ZN5BTHID3RunEv+0x96>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800cd84:	f083 0301 	eor.w	r3, r3, #1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d023      	beq.n	800cdd6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	2201      	movs	r2, #1
 800cd94:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	8b5a      	ldrh	r2, [r3, #26]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6898      	ldr	r0, [r3, #8]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	8999      	ldrh	r1, [r3, #12]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7d1a      	ldrb	r2, [r3, #20]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	336b      	adds	r3, #107	; 0x6b
 800cdc4:	2411      	movs	r4, #17
 800cdc6:	9400      	str	r4, [sp, #0]
 800cdc8:	f7fe f9dc 	bl	800b184 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800cdd4:	e043      	b.n	800ce5e <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d03d      	beq.n	800ce5e <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6898      	ldr	r0, [r3, #8]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8999      	ldrh	r1, [r3, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	7d1a      	ldrb	r2, [r3, #20]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3316      	adds	r3, #22
 800cdf8:	2501      	movs	r5, #1
 800cdfa:	9501      	str	r5, [sp, #4]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	4623      	mov	r3, r4
 800ce00:	f7fe f9fe 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800ce04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce08:	f7f4 fd56 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6898      	ldr	r0, [r3, #8]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8999      	ldrh	r1, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1a      	ldrb	r2, [r3, #20]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3316      	adds	r3, #22
 800ce22:	2500      	movs	r5, #0
 800ce24:	9501      	str	r5, [sp, #4]
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	4623      	mov	r3, r4
 800ce2a:	f7fe f9e9 	bl	800b200 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7d1b      	ldrb	r3, [r3, #20]
 800ce32:	3301      	adds	r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800ce3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce3e:	f7f4 fd3b 	bl	80018b8 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6898      	ldr	r0, [r3, #8]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8999      	ldrh	r1, [r3, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	7d1a      	ldrb	r2, [r3, #20]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	3316      	adds	r3, #22
 800ce52:	f7fe fa22 	bl	800b29a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2204      	movs	r2, #4
 800ce5a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800ce5e:	bf00      	nop
        }
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bdb0      	pop	{r4, r5, r7, pc}

0800ce68 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800ce68:	b590      	push	{r4, r7, lr}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	4613      	mov	r3, r2
 800ce74:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6898      	ldr	r0, [r3, #8]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8999      	ldrh	r1, [r3, #12]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	7edb      	ldrb	r3, [r3, #27]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	7f12      	ldrb	r2, [r2, #28]
 800ce86:	79fc      	ldrb	r4, [r7, #7]
 800ce88:	9201      	str	r2, [sp, #4]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	f7fe f8e6 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ce94:	bf00      	nop
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd90      	pop	{r4, r7, pc}

0800ce9c <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2207      	movs	r2, #7
 800ceb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	78ba      	ldrb	r2, [r7, #2]
 800cec0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2205      	movs	r2, #5
 800ced0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2202      	movs	r2, #2
 800cee0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2235      	movs	r2, #53	; 0x35
 800cee8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3328      	adds	r3, #40	; 0x28
 800cf00:	220a      	movs	r2, #10
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff ffaf 	bl	800ce68 <_ZN5BTHID11SDP_CommandEPhh>
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800cf12:	b590      	push	{r4, r7, lr}
 800cf14:	b087      	sub	sp, #28
 800cf16:	af02      	add	r7, sp, #8
 800cf18:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d008      	beq.n	800cf36 <_ZN5BTHID11setProtocolEv+0x24>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d003      	beq.n	800cf36 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cf3c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6898      	ldr	r0, [r3, #8]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	8999      	ldrh	r1, [r3, #12]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7d9b      	ldrb	r3, [r3, #22]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	7dd2      	ldrb	r2, [r2, #23]
 800cf54:	f107 040f 	add.w	r4, r7, #15
 800cf58:	9201      	str	r2, [sp, #4]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	4622      	mov	r2, r4
 800cf60:	f7fe f87e 	bl	800b060 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800cf64:	bf00      	nop
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd90      	pop	{r4, r7, pc}

0800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	d86e      	bhi.n	800d05c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800cf7e:	a201      	add	r2, pc, #4	; (adr r2, 800cf84 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800cf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf84:	0800cf95 	.word	0x0800cf95
 800cf88:	0800cfc7 	.word	0x0800cfc7
 800cf8c:	0800cff9 	.word	0x0800cff9
 800cf90:	0800d02b 	.word	0x0800d02b
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7a1b      	ldrb	r3, [r3, #8]
 800cf98:	f003 030f 	and.w	r3, r3, #15
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b07      	cmp	r3, #7
 800cfa0:	d00d      	beq.n	800cfbe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	7a1b      	ldrb	r3, [r3, #8]
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d006      	beq.n	800cfbe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7a1b      	ldrb	r3, [r3, #8]
 800cfb4:	f003 030f 	and.w	r3, r3, #15
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d101      	bne.n	800cfc2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e04d      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e04b      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7a1b      	ldrb	r3, [r3, #8]
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d00d      	beq.n	800cff0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7a1b      	ldrb	r3, [r3, #8]
 800cfd8:	f003 030f 	and.w	r3, r3, #15
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d006      	beq.n	800cff0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7a1b      	ldrb	r3, [r3, #8]
 800cfe6:	f003 030f 	and.w	r3, r3, #15
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d101      	bne.n	800cff4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e034      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800cff4:	2300      	movs	r3, #0
 800cff6:	e032      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7a1b      	ldrb	r3, [r3, #8]
 800cffc:	f003 030f 	and.w	r3, r3, #15
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b03      	cmp	r3, #3
 800d004:	d00d      	beq.n	800d022 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	7a1b      	ldrb	r3, [r3, #8]
 800d00a:	f003 030f 	and.w	r3, r3, #15
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b04      	cmp	r3, #4
 800d012:	d006      	beq.n	800d022 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	7a1b      	ldrb	r3, [r3, #8]
 800d018:	f003 030f 	and.w	r3, r3, #15
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b05      	cmp	r3, #5
 800d020:	d101      	bne.n	800d026 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d022:	2301      	movs	r3, #1
 800d024:	e01b      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d026:	2300      	movs	r3, #0
 800d028:	e019      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7a1b      	ldrb	r3, [r3, #8]
 800d02e:	f003 030f 	and.w	r3, r3, #15
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b05      	cmp	r3, #5
 800d036:	d00d      	beq.n	800d054 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	7a1b      	ldrb	r3, [r3, #8]
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b06      	cmp	r3, #6
 800d044:	d006      	beq.n	800d054 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7a1b      	ldrb	r3, [r3, #8]
 800d04a:	f003 030f 	and.w	r3, r3, #15
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	2b07      	cmp	r3, #7
 800d052:	d101      	bne.n	800d058 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d054:	2301      	movs	r3, #1
 800d056:	e002      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d058:	2300      	movs	r3, #0
 800d05a:	e000      	b.n	800d05e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d05c:	2300      	movs	r3, #0
        }
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop

0800d06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d078:	78fb      	ldrb	r3, [r7, #3]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d806      	bhi.n	800d08c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d07e:	78fb      	ldrb	r3, [r7, #3]
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff ff72 	bl	800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d088:	4603      	mov	r3, r0
 800d08a:	e011      	b.n	800d0b0 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d094:	4619      	mov	r1, r3
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	4a07      	ldr	r2, [pc, #28]	; (800d0b8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d09a:	4413      	add	r3, r2
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	fa21 f303 	lsr.w	r3, r1, r3
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	bf14      	ite	ne
 800d0aa:	2301      	movne	r3, #1
 800d0ac:	2300      	moveq	r3, #0
 800d0ae:	b2db      	uxtb	r3, r3
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	0800f26c 	.word	0x0800f26c

0800d0bc <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d0c8:	78fb      	ldrb	r3, [r7, #3]
 800d0ca:	4a1b      	ldr	r2, [pc, #108]	; (800d138 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d0cc:	4413      	add	r3, r2
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	4093      	lsls	r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d0de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bf14      	ite	ne
 800d0f0:	2301      	movne	r3, #1
 800d0f2:	2300      	moveq	r3, #0
 800d0f4:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d0fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d100:	021b      	lsls	r3, r3, #8
 800d102:	4313      	orrs	r3, r2
 800d104:	461a      	mov	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	43db      	mvns	r3, r3
 800d10a:	4013      	ands	r3, r2
 800d10c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	b2d1      	uxtb	r1, r2
 800d114:	2000      	movs	r0, #0
 800d116:	4301      	orrs	r1, r0
 800d118:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d11c:	0a12      	lsrs	r2, r2, #8
 800d11e:	b292      	uxth	r2, r2
 800d120:	2100      	movs	r1, #0
 800d122:	430a      	orrs	r2, r1
 800d124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d128:	7afb      	ldrb	r3, [r7, #11]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	0800f26c 	.word	0x0800f26c

0800d13c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	2b08      	cmp	r3, #8
 800d14c:	d102      	bne.n	800d154 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	7adb      	ldrb	r3, [r3, #11]
 800d152:	e006      	b.n	800d162 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	2b09      	cmp	r3, #9
 800d158:	d102      	bne.n	800d160 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	7b1b      	ldrb	r3, [r3, #12]
 800d15e:	e000      	b.n	800d162 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	4413      	add	r3, r2
 800d180:	791b      	ldrb	r3, [r3, #4]
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800d18e:	b580      	push	{r7, lr}
 800d190:	b086      	sub	sp, #24
 800d192:	af00      	add	r7, sp, #0
 800d194:	60f8      	str	r0, [r7, #12]
 800d196:	460b      	mov	r3, r1
 800d198:	607a      	str	r2, [r7, #4]
 800d19a:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800d19c:	7afb      	ldrb	r3, [r7, #11]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	f240 80a6 	bls.w	800d2f0 <_ZN9PS4Parser5ParseEhPh+0x162>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 80a2 	beq.w	800d2f0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d10e      	bne.n	800d1d2 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	1d18      	adds	r0, r3, #4
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	7afb      	ldrb	r3, [r7, #11]
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b3c      	cmp	r3, #60	; 0x3c
 800d1c4:	bf28      	it	cs
 800d1c6:	233c      	movcs	r3, #60	; 0x3c
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f001 fe8e 	bl	800eeec <memcpy>
 800d1d0:	e016      	b.n	800d200 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b11      	cmp	r3, #17
 800d1d8:	f040 8098 	bne.w	800d30c <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	f240 8096 	bls.w	800d310 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	1d18      	adds	r0, r3, #4
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	1cd9      	adds	r1, r3, #3
 800d1ec:	7afb      	ldrb	r3, [r7, #11]
 800d1ee:	3b03      	subs	r3, #3
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	2b3c      	cmp	r3, #60	; 0x3c
 800d1f4:	bf28      	it	cs
 800d1f6:	233c      	movcs	r3, #60	; 0x3c
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f001 fe76 	bl	800eeec <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d210:	429a      	cmp	r2, r3
 800d212:	d06d      	beq.n	800d2f0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d21c:	461a      	mov	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d222:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d226:	43db      	mvns	r3, r3
 800d228:	4013      	ands	r3, r2
 800d22a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	b2d1      	uxtb	r1, r2
 800d232:	2000      	movs	r0, #0
 800d234:	4301      	orrs	r1, r0
 800d236:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d23a:	0a12      	lsrs	r2, r2, #8
 800d23c:	b292      	uxth	r2, r2
 800d23e:	2100      	movs	r1, #0
 800d240:	430a      	orrs	r2, r1
 800d242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d252:	f361 0317 	bfi	r3, r1, #0, #24
 800d256:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800d25c:	2100      	movs	r1, #0
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7ff fe84 	bl	800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	f043 0301 	orr.w	r3, r3, #1
 800d270:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800d272:	2101      	movs	r1, #1
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f7ff fe79 	bl	800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d003      	beq.n	800d288 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	f043 0302 	orr.w	r3, r3, #2
 800d286:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800d288:	2102      	movs	r1, #2
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f7ff fe6e 	bl	800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	f043 0304 	orr.w	r3, r3, #4
 800d29c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800d29e:	2103      	movs	r1, #3
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fe63 	bl	800cf6c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d003      	beq.n	800d2b4 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	f043 0308 	orr.w	r3, r3, #8
 800d2b2:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2ba:	7dfa      	ldrb	r2, [r7, #23]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d017      	beq.n	800d2f0 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2c6:	b25b      	sxtb	r3, r3
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	b25a      	sxtb	r2, r3
 800d2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	b25b      	sxtb	r3, r3
 800d2d4:	f003 030f 	and.w	r3, r3, #15
 800d2d8:	b2d9      	uxtb	r1, r3
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800d2e0:	f361 0303 	bfi	r3, r1, #0, #4
 800d2e4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	7dfa      	ldrb	r2, [r7, #23]
 800d2ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00b      	beq.n	800d312 <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	3246      	adds	r2, #70	; 0x46
 800d304:	4611      	mov	r1, r2
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	4798      	blx	r3
 800d30a:	e002      	b.n	800d312 <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800d30c:	bf00      	nop
 800d30e:	e000      	b.n	800d312 <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800d310:	bf00      	nop
}
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	2b03      	cmp	r3, #3
 800d328:	d808      	bhi.n	800d33c <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	4413      	add	r3, r2
 800d330:	227f      	movs	r2, #127	; 0x7f
 800d332:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	3301      	adds	r3, #1
 800d338:	73fb      	strb	r3, [r7, #15]
 800d33a:	e7f3      	b.n	800d324 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	6893      	ldr	r3, [r2, #8]
 800d340:	f36f 0317 	bfc	r3, #0, #24
 800d344:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d34a:	f36f 0317 	bfc	r3, #0, #24
 800d34e:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d808      	bhi.n	800d36c <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4413      	add	r3, r2
 800d360:	2200      	movs	r2, #0
 800d362:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800d364:	7bfb      	ldrb	r3, [r7, #15]
 800d366:	3301      	adds	r3, #1
 800d368:	73fb      	strb	r3, [r7, #15]
 800d36a:	e7f3      	b.n	800d354 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800d36c:	2300      	movs	r3, #0
 800d36e:	73fb      	strb	r3, [r7, #15]
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d81b      	bhi.n	800d3ae <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800d376:	2300      	movs	r3, #0
 800d378:	73bb      	strb	r3, [r7, #14]
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d812      	bhi.n	800d3a6 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800d380:	7bfa      	ldrb	r2, [r7, #15]
 800d382:	7bbb      	ldrb	r3, [r7, #14]
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	0098      	lsls	r0, r3, #2
 800d388:	4613      	mov	r3, r2
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	4413      	add	r3, r2
 800d38e:	4403      	add	r3, r0
 800d390:	440b      	add	r3, r1
 800d392:	f103 0220 	add.w	r2, r3, #32
 800d396:	7993      	ldrb	r3, [r2, #6]
 800d398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d39c:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800d39e:	7bbb      	ldrb	r3, [r7, #14]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	73bb      	strb	r3, [r7, #14]
 800d3a4:	e7e9      	b.n	800d37a <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	73fb      	strb	r3, [r7, #15]
 800d3ac:	e7e0      	b.n	800d370 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	7a13      	ldrb	r3, [r2, #8]
 800d3b2:	2108      	movs	r1, #8
 800d3b4:	f361 0303 	bfi	r3, r1, #0, #4
 800d3b8:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d3c0:	2108      	movs	r1, #8
 800d3c2:	f361 0303 	bfi	r3, r1, #0, #4
 800d3c6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800d3d0:	f36f 0303 	bfc	r3, #0, #4
 800d3d4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800d430:	bf00      	nop
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
 800d440:	2180      	movs	r1, #128	; 0x80
 800d442:	4803      	ldr	r0, [pc, #12]	; (800d450 <_ZN2P95IsSetEv+0x14>)
 800d444:	f7f4 fd1e 	bl	8001e84 <HAL_GPIO_ReadPin>
 800d448:	4603      	mov	r3, r0
 800d44a:	4618      	mov	r0, r3
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	40020800 	.word	0x40020800

0800d454 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f001 f9f3 	bl	800e848 <_ZN8MAX3421eI3P102P9EC1Ev>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	f001 fa0b 	bl	800e880 <_ZN15AddressPoolImplILh16EEC1Ev>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <_ZN3USBC1Ev+0x34>)
 800d474:	2211      	movs	r2, #17
 800d476:	701a      	strb	r2, [r3, #0]
        init();
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f807 	bl	800d48c <_ZN3USB4initEv>
}
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20000625 	.word	0x20000625

0800d48c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	70fb      	strb	r3, [r7, #3]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	78fa      	ldrb	r2, [r7, #3]
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 fa18 	bl	800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800d4c4:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d003      	beq.n	800d4d4 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e018      	b.n	800d50a <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800d4de:	2300      	movs	r3, #0
 800d4e0:	74fb      	strb	r3, [r7, #19]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	795b      	ldrb	r3, [r3, #5]
 800d4e6:	7cfa      	ldrb	r2, [r7, #19]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d20d      	bcs.n	800d508 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	78ba      	ldrb	r2, [r7, #2]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d101      	bne.n	800d4fa <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	e007      	b.n	800d50a <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	3303      	adds	r3, #3
 800d4fe:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800d500:	7cfb      	ldrb	r3, [r7, #19]
 800d502:	3301      	adds	r3, #1
 800d504:	74fb      	strb	r3, [r7, #19]
 800d506:	e7ec      	b.n	800d4e2 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	607b      	str	r3, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	72fb      	strb	r3, [r7, #11]
 800d520:	4613      	mov	r3, r2
 800d522:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800d52a:	23d8      	movs	r3, #216	; 0xd8
 800d52c:	e015      	b.n	800d55a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	7afa      	ldrb	r2, [r7, #11]
 800d532:	4611      	mov	r1, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f001 f9dd 	bl	800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800d53a:	6178      	str	r0, [r7, #20]

        if(!p)
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800d542:	23d6      	movs	r3, #214	; 0xd6
 800d544:	e009      	b.n	800d55a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	7afa      	ldrb	r2, [r7, #11]
 800d54a:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	7aba      	ldrb	r2, [r7, #10]
 800d556:	715a      	strb	r2, [r3, #5]

        return 0;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800d562:	b580      	push	{r7, lr}
 800d564:	b086      	sub	sp, #24
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	607b      	str	r3, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	72fb      	strb	r3, [r7, #11]
 800d570:	4613      	mov	r3, r2
 800d572:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	7afa      	ldrb	r2, [r7, #11]
 800d578:	4611      	mov	r1, r2
 800d57a:	4618      	mov	r0, r3
 800d57c:	f001 f9ba 	bl	800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800d580:	6178      	str	r0, [r7, #20]

        if(!p)
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800d588:	23d6      	movs	r3, #214	; 0xd6
 800d58a:	e04e      	b.n	800d62a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800d594:	23d7      	movs	r3, #215	; 0xd7
 800d596:	e048      	b.n	800d62a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800d598:	7aba      	ldrb	r2, [r7, #10]
 800d59a:	7afb      	ldrb	r3, [r7, #11]
 800d59c:	4619      	mov	r1, r3
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff ff82 	bl	800d4a8 <_ZN3USB14getEpInfoEntryEhh>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800d5b2:	23db      	movs	r3, #219	; 0xdb
 800d5b4:	e039      	b.n	800d62a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	789b      	ldrb	r3, [r3, #2]
 800d5bc:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b0f      	cmp	r3, #15
 800d5c4:	bf28      	it	cs
 800d5c6:	230f      	movcs	r3, #15
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	4093      	lsls	r3, r2
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800d5e2:	7afb      	ldrb	r3, [r7, #11]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	21e0      	movs	r1, #224	; 0xe0
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7f3 fe8b 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800d5ee:	21d8      	movs	r1, #216	; 0xd8
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7f3 fed9 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	799b      	ldrb	r3, [r3, #6]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d009      	beq.n	800d616 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800d608:	7cfb      	ldrb	r3, [r7, #19]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	f043 0302 	orr.w	r3, r3, #2
 800d612:	b2db      	uxtb	r3, r3
 800d614:	e003      	b.n	800d61e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800d616:	7cfb      	ldrb	r3, [r7, #19]
 800d618:	f023 0306 	bic.w	r3, r3, #6
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	461a      	mov	r2, r3
 800d620:	21d8      	movs	r1, #216	; 0xd8
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f7f3 fe6e 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3718      	adds	r7, #24
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800d632:	b590      	push	{r4, r7, lr}
 800d634:	b08b      	sub	sp, #44	; 0x2c
 800d636:	af02      	add	r7, sp, #8
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	4608      	mov	r0, r1
 800d63c:	4611      	mov	r1, r2
 800d63e:	461a      	mov	r2, r3
 800d640:	4603      	mov	r3, r0
 800d642:	70fb      	strb	r3, [r7, #3]
 800d644:	460b      	mov	r3, r1
 800d646:	70bb      	strb	r3, [r7, #2]
 800d648:	4613      	mov	r3, r2
 800d64a:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800d64c:	2300      	movs	r3, #0
 800d64e:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800d658:	f107 000c 	add.w	r0, r7, #12
 800d65c:	78ba      	ldrb	r2, [r7, #2]
 800d65e:	78f9      	ldrb	r1, [r7, #3]
 800d660:	f107 030a 	add.w	r3, r7, #10
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	4603      	mov	r3, r0
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff ff7a 	bl	800d562 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800d66e:	4603      	mov	r3, r0
 800d670:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800d672:	7ffb      	ldrb	r3, [r7, #31]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800d678:	7ffb      	ldrb	r3, [r7, #31]
 800d67a:	e0ae      	b.n	800d7da <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800d67c:	787b      	ldrb	r3, [r7, #1]
 800d67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfcc      	ite	gt
 800d686:	2301      	movgt	r3, #1
 800d688:	2300      	movle	r3, #0
 800d68a:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800d68c:	787b      	ldrb	r3, [r7, #1]
 800d68e:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800d690:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d694:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800d696:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d69a:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800d69c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6a0:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800d6a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6a4:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800d6a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d6aa:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800d6ac:	f107 0310 	add.w	r3, r7, #16
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	2120      	movs	r1, #32
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f001 f943 	bl	800e940 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800d6ba:	897b      	ldrh	r3, [r7, #10]
 800d6bc:	78ba      	ldrb	r2, [r7, #2]
 800d6be:	2110      	movs	r1, #16
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fb01 	bl	800dcc8 <_ZN3USB11dispatchPktEhht>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800d6ca:	7ffb      	ldrb	r3, [r7, #31]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800d6d0:	7ffb      	ldrb	r3, [r7, #31]
 800d6d2:	e082      	b.n	800d7da <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800d6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d072      	beq.n	800d7c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800d6da:	7efb      	ldrb	r3, [r7, #27]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d057      	beq.n	800d790 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800d6e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d6e4:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	7893      	ldrb	r3, [r2, #2]
 800d6ea:	f043 0302 	orr.w	r3, r3, #2
 800d6ee:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800d6f0:	8bbb      	ldrh	r3, [r7, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d05f      	beq.n	800d7b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800d6f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d6fa:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800d6fc:	68f9      	ldr	r1, [r7, #12]
 800d6fe:	897a      	ldrh	r2, [r7, #10]
 800d700:	f107 0008 	add.w	r0, r7, #8
 800d704:	2300      	movs	r3, #0
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	4603      	mov	r3, r0
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f8a6 	bl	800d860 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800d714:	4603      	mov	r3, r0
 800d716:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800d718:	7ffb      	ldrb	r3, [r7, #31]
 800d71a:	2b06      	cmp	r3, #6
 800d71c:	d114      	bne.n	800d748 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800d71e:	21f8      	movs	r1, #248	; 0xf8
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7f3 fe41 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d726:	4603      	mov	r3, r0
 800d728:	f003 0320 	and.w	r3, r3, #32
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bf0c      	ite	eq
 800d730:	2301      	moveq	r3, #1
 800d732:	2300      	movne	r3, #0
 800d734:	b2db      	uxtb	r3, r3
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	b2d9      	uxtb	r1, r3
 800d73e:	7893      	ldrb	r3, [r2, #2]
 800d740:	f361 0341 	bfi	r3, r1, #1, #1
 800d744:	7093      	strb	r3, [r2, #2]
 800d746:	e7d3      	b.n	800d6f0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800d748:	7ffb      	ldrb	r3, [r7, #31]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800d74e:	7ffb      	ldrb	r3, [r7, #31]
 800d750:	e043      	b.n	800d7da <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800d752:	7ffb      	ldrb	r3, [r7, #31]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d111      	bne.n	800d77c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800d758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00e      	beq.n	800d77c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800d75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681c      	ldr	r4, [r3, #0]
 800d764:	8939      	ldrh	r1, [r7, #8]
 800d766:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d76a:	8bbb      	ldrh	r3, [r7, #28]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	b29b      	uxth	r3, r3
 800d770:	833b      	strh	r3, [r7, #24]
 800d772:	f107 0318 	add.w	r3, r7, #24
 800d776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d778:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d77a:	47a0      	blx	r4

                                left -= read;
 800d77c:	893b      	ldrh	r3, [r7, #8]
 800d77e:	8bba      	ldrh	r2, [r7, #28]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800d784:	893b      	ldrh	r3, [r7, #8]
 800d786:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d812      	bhi.n	800d7b4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800d78e:	e7af      	b.n	800d6f0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	7893      	ldrb	r3, [r2, #2]
 800d794:	f043 0301 	orr.w	r3, r3, #1
 800d798:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800d79a:	68f9      	ldr	r1, [r7, #12]
 800d79c:	897a      	ldrh	r2, [r7, #10]
 800d79e:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800d7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f957 	bl	800da5c <_ZN3USB11OutTransferEP6EpInfottPh>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	e000      	b.n	800d7b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800d7b4:	bf00      	nop
                }
                if(rcode) //return error
 800d7b6:	7ffb      	ldrb	r3, [r7, #31]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800d7bc:	7ffb      	ldrb	r3, [r7, #31]
 800d7be:	e00c      	b.n	800d7da <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800d7c0:	7efb      	ldrb	r3, [r7, #27]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d001      	beq.n	800d7ca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800d7c6:	21a0      	movs	r1, #160	; 0xa0
 800d7c8:	e000      	b.n	800d7cc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800d7ca:	2180      	movs	r1, #128	; 0x80
 800d7cc:	897b      	ldrh	r3, [r7, #10]
 800d7ce:	78ba      	ldrb	r2, [r7, #2]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fa79 	bl	800dcc8 <_ZN3USB11dispatchPktEhht>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	bf00      	nop
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3724      	adds	r7, #36	; 0x24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}

0800d7e2 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b08a      	sub	sp, #40	; 0x28
 800d7e6:	af02      	add	r7, sp, #8
 800d7e8:	60f8      	str	r0, [r7, #12]
 800d7ea:	607b      	str	r3, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	72fb      	strb	r3, [r7, #11]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800d7fc:	f107 0018 	add.w	r0, r7, #24
 800d800:	7aba      	ldrb	r2, [r7, #10]
 800d802:	7af9      	ldrb	r1, [r7, #11]
 800d804:	f107 0316 	add.w	r3, r7, #22
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	4603      	mov	r3, r0
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f7ff fea8 	bl	800d562 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800d812:	4603      	mov	r3, r0
 800d814:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800d816:	7ffb      	ldrb	r3, [r7, #31]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d010      	beq.n	800d83e <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800d81c:	7ffb      	ldrb	r3, [r7, #31]
 800d81e:	2181      	movs	r1, #129	; 0x81
 800d820:	4618      	mov	r0, r3
 800d822:	f001 f8bb 	bl	800e99c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800d826:	7afb      	ldrb	r3, [r7, #11]
 800d828:	2181      	movs	r1, #129	; 0x81
 800d82a:	4618      	mov	r0, r3
 800d82c:	f001 f8b6 	bl	800e99c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800d830:	7abb      	ldrb	r3, [r7, #10]
 800d832:	2181      	movs	r1, #129	; 0x81
 800d834:	4618      	mov	r0, r3
 800d836:	f001 f8b1 	bl	800e99c <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800d83a:	7ffb      	ldrb	r3, [r7, #31]
 800d83c:	e00c      	b.n	800d858 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800d83e:	69b9      	ldr	r1, [r7, #24]
 800d840:	8afa      	ldrh	r2, [r7, #22]
 800d842:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 f806 	bl	800d860 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800d854:	4603      	mov	r3, r0
 800d856:	bf00      	nop
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3720      	adds	r7, #32
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	4613      	mov	r3, r2
 800d86e:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2200      	movs	r2, #0
 800d884:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	789b      	ldrb	r3, [r3, #2]
 800d88a:	f003 0302 	and.w	r3, r3, #2
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800d894:	2320      	movs	r3, #32
 800d896:	e000      	b.n	800d89a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800d898:	2310      	movs	r3, #16
 800d89a:	461a      	mov	r2, r3
 800d89c:	21e8      	movs	r1, #232	; 0xe8
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7f3 fd30 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	781a      	ldrb	r2, [r3, #0]
 800d8a8:	88fb      	ldrh	r3, [r7, #6]
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 fa0b 	bl	800dcc8 <_ZN3USB11dispatchPktEhht>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	2b06      	cmp	r3, #6
 800d8ba:	d123      	bne.n	800d904 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800d8bc:	21f8      	movs	r1, #248	; 0xf8
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7f3 fd72 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f003 0310 	and.w	r3, r3, #16
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	bf0c      	ite	eq
 800d8ce:	2301      	moveq	r3, #1
 800d8d0:	2300      	movne	r3, #0
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	b2d9      	uxtb	r1, r3
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	7893      	ldrb	r3, [r2, #2]
 800d8de:	f361 0341 	bfi	r3, r1, #1, #1
 800d8e2:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	789b      	ldrb	r3, [r3, #2]
 800d8e8:	f003 0302 	and.w	r3, r3, #2
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800d8f2:	2320      	movs	r3, #32
 800d8f4:	e000      	b.n	800d8f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800d8f6:	2310      	movs	r3, #16
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	21e8      	movs	r1, #232	; 0xe8
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f7f3 fd01 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800d902:	e072      	b.n	800d9ea <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800d904:	7dfb      	ldrb	r3, [r7, #23]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d170      	bne.n	800d9ec <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800d90a:	21c8      	movs	r1, #200	; 0xc8
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7f3 fd4b 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d912:	4603      	mov	r3, r0
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	bf0c      	ite	eq
 800d91c:	2301      	moveq	r3, #1
 800d91e:	2300      	movne	r3, #0
 800d920:	b2db      	uxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d002      	beq.n	800d92c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800d926:	23f0      	movs	r3, #240	; 0xf0
 800d928:	75fb      	strb	r3, [r7, #23]
                        break;
 800d92a:	e060      	b.n	800d9ee <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800d92c:	2130      	movs	r1, #48	; 0x30
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7f3 fd3a 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d934:	4603      	mov	r3, r0
 800d936:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800d938:	7dba      	ldrb	r2, [r7, #22]
 800d93a:	8a7b      	ldrh	r3, [r7, #18]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	dd01      	ble.n	800d944 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800d940:	8a7b      	ldrh	r3, [r7, #18]
 800d942:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	8a7a      	ldrh	r2, [r7, #18]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	b29b      	uxth	r3, r3
 800d952:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800d954:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	da01      	bge.n	800d960 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800d960:	7dba      	ldrb	r2, [r7, #22]
 800d962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d966:	4293      	cmp	r3, r2
 800d968:	bfa8      	it	ge
 800d96a:	4613      	movge	r3, r2
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	2108      	movs	r1, #8
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f001 f81e 	bl	800e9b4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800d978:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800d97a:	2204      	movs	r2, #4
 800d97c:	21c8      	movs	r1, #200	; 0xc8
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7f3 fcc0 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	881a      	ldrh	r2, [r3, #0]
 800d988:	7dbb      	ldrb	r3, [r7, #22]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4413      	add	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800d994:	7dba      	ldrb	r2, [r7, #22]
 800d996:	7c7b      	ldrb	r3, [r7, #17]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d304      	bcc.n	800d9a6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	8a7a      	ldrh	r2, [r7, #18]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d813      	bhi.n	800d9ce <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800d9a6:	21f8      	movs	r1, #248	; 0xf8
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f7f3 fcfd 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	f003 0310 	and.w	r3, r3, #16
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	e000      	b.n	800d9be <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800d9bc:	2100      	movs	r1, #0
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	7893      	ldrb	r3, [r2, #2]
 800d9c2:	f361 0341 	bfi	r3, r1, #1, #1
 800d9c6:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	75fb      	strb	r3, [r7, #23]
                        break;
 800d9cc:	e00f      	b.n	800d9ee <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800d9ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f43f af66 	beq.w	800d8a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800d9d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9e0:	fb02 f303 	mul.w	r3, r2, r3
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f3 ff67 	bl	80018b8 <HAL_Delay>
        } //while( 1 )
 800d9ea:	e75b      	b.n	800d8a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800d9ec:	bf00      	nop
        return ( rcode);
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	af02      	add	r7, sp, #8
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	4608      	mov	r0, r1
 800da02:	4611      	mov	r1, r2
 800da04:	461a      	mov	r2, r3
 800da06:	4603      	mov	r3, r0
 800da08:	70fb      	strb	r3, [r7, #3]
 800da0a:	460b      	mov	r3, r1
 800da0c:	70bb      	strb	r3, [r7, #2]
 800da0e:	4613      	mov	r3, r2
 800da10:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800da12:	2300      	movs	r3, #0
 800da14:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800da1a:	f107 0010 	add.w	r0, r7, #16
 800da1e:	78ba      	ldrb	r2, [r7, #2]
 800da20:	78f9      	ldrb	r1, [r7, #3]
 800da22:	f107 030e 	add.w	r3, r7, #14
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	4603      	mov	r3, r0
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fd99 	bl	800d562 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800da30:	4603      	mov	r3, r0
 800da32:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	e00a      	b.n	800da54 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800da3e:	6939      	ldr	r1, [r7, #16]
 800da40:	89fa      	ldrh	r2, [r7, #14]
 800da42:	8838      	ldrh	r0, [r7, #0]
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	4603      	mov	r3, r0
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f806 	bl	800da5c <_ZN3USB11OutTransferEP6EpInfottPh>
 800da50:	4603      	mov	r3, r0
 800da52:	bf00      	nop
}
 800da54:	4618      	mov	r0, r3
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08a      	sub	sp, #40	; 0x28
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	4611      	mov	r1, r2
 800da68:	461a      	mov	r2, r3
 800da6a:	460b      	mov	r3, r1
 800da6c:	80fb      	strh	r3, [r7, #6]
 800da6e:	4613      	mov	r3, r2
 800da70:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800da72:	2300      	movs	r3, #0
 800da74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800da7c:	88bb      	ldrh	r3, [r7, #4]
 800da7e:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	785b      	ldrb	r3, [r3, #1]
 800da84:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800da86:	7efb      	ldrb	r3, [r7, #27]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800da8c:	7efb      	ldrb	r3, [r7, #27]
 800da8e:	2b40      	cmp	r3, #64	; 0x40
 800da90:	d901      	bls.n	800da96 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800da92:	23da      	movs	r3, #218	; 0xda
 800da94:	e111      	b.n	800dcba <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800da96:	f7f3 ff03 	bl	80018a0 <HAL_GetTick>
 800da9a:	4603      	mov	r3, r0
 800da9c:	4a89      	ldr	r2, [pc, #548]	; (800dcc4 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800da9e:	fba2 2303 	umull	r2, r3, r2, r3
 800daa2:	099b      	lsrs	r3, r3, #6
 800daa4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800daa8:	3308      	adds	r3, #8
 800daaa:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	789b      	ldrb	r3, [r3, #2]
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800daba:	2380      	movs	r3, #128	; 0x80
 800dabc:	e000      	b.n	800dac0 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800dabe:	2340      	movs	r3, #64	; 0x40
 800dac0:	461a      	mov	r2, r3
 800dac2:	21e8      	movs	r1, #232	; 0xe8
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f7f3 fc1d 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800daca:	8bbb      	ldrh	r3, [r7, #28]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 80de 	beq.w	800dc8e <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800dad8:	2300      	movs	r3, #0
 800dada:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800dadc:	7efb      	ldrb	r3, [r7, #27]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	8bba      	ldrh	r2, [r7, #28]
 800dae2:	4293      	cmp	r3, r2
 800dae4:	bf28      	it	cs
 800dae6:	4613      	movcs	r3, r2
 800dae8:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800daea:	8a7b      	ldrh	r3, [r7, #18]
 800daec:	b2da      	uxtb	r2, r3
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	2110      	movs	r1, #16
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 ff24 	bl	800e940 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800daf8:	8a7b      	ldrh	r3, [r7, #18]
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	461a      	mov	r2, r3
 800dafe:	2138      	movs	r1, #56	; 0x38
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7f3 fbff 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f043 0320 	orr.w	r3, r3, #32
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	461a      	mov	r2, r3
 800db12:	21f0      	movs	r1, #240	; 0xf0
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7f3 fbf5 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800db1a:	21c8      	movs	r1, #200	; 0xc8
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7f3 fc43 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800db22:	4603      	mov	r3, r0
 800db24:	b25b      	sxtb	r3, r3
 800db26:	43db      	mvns	r3, r3
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	09db      	lsrs	r3, r3, #7
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d000      	beq.n	800db34 <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800db32:	e7f2      	b.n	800db1a <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800db34:	2280      	movs	r2, #128	; 0x80
 800db36:	21c8      	movs	r1, #200	; 0xc8
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7f3 fbe3 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800db3e:	21f8      	movs	r1, #248	; 0xf8
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7f3 fc31 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800db46:	4603      	mov	r3, r0
 800db48:	f003 030f 	and.w	r3, r3, #15
 800db4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800db50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00c      	beq.n	800db72 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800db58:	f7f3 fea2 	bl	80018a0 <HAL_GetTick>
 800db5c:	4603      	mov	r3, r0
 800db5e:	4a59      	ldr	r2, [pc, #356]	; (800dcc4 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800db60:	fba2 2303 	umull	r2, r3, r2, r3
 800db64:	099a      	lsrs	r2, r3, #6
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	da01      	bge.n	800db72 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800db6e:	2301      	movs	r3, #1
 800db70:	e000      	b.n	800db74 <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800db72:	2300      	movs	r3, #0
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 8081 	beq.w	800dc7c <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800db7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db7e:	2b0e      	cmp	r3, #14
 800db80:	d012      	beq.n	800dba8 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800db82:	2b0e      	cmp	r3, #14
 800db84:	f300 8085 	bgt.w	800dc92 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800db88:	2b04      	cmp	r3, #4
 800db8a:	d002      	beq.n	800db92 <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800db8c:	2b06      	cmp	r3, #6
 800db8e:	d015      	beq.n	800dbbc <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800db90:	e07f      	b.n	800dc92 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800db92:	8bfb      	ldrh	r3, [r7, #30]
 800db94:	3301      	adds	r3, #1
 800db96:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d032      	beq.n	800dc04 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800db9e:	8bfa      	ldrh	r2, [r7, #30]
 800dba0:	88fb      	ldrh	r3, [r7, #6]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d12e      	bne.n	800dc04 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800dba6:	e075      	b.n	800dc94 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800dba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbac:	3301      	adds	r3, #1
 800dbae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800dbb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	d126      	bne.n	800dc08 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800dbba:	e06b      	b.n	800dc94 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800dbbc:	21f8      	movs	r1, #248	; 0xf8
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7f3 fbf2 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f003 0320 	and.w	r3, r3, #32
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bf0c      	ite	eq
 800dbce:	2301      	moveq	r3, #1
 800dbd0:	2300      	movne	r3, #0
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	b2d9      	uxtb	r1, r3
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	7893      	ldrb	r3, [r2, #2]
 800dbde:	f361 0300 	bfi	r3, r1, #0, #1
 800dbe2:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	789b      	ldrb	r3, [r3, #2]
 800dbe8:	f003 0301 	and.w	r3, r3, #1
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800dbf2:	2380      	movs	r3, #128	; 0x80
 800dbf4:	e000      	b.n	800dbf8 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	21e8      	movs	r1, #232	; 0xe8
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f7f3 fb81 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800dc02:	e002      	b.n	800dc0a <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800dc04:	bf00      	nop
 800dc06:	e000      	b.n	800dc0a <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800dc08:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	2138      	movs	r1, #56	; 0x38
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7f3 fb78 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	2110      	movs	r1, #16
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f7f3 fb71 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800dc22:	8a7b      	ldrh	r3, [r7, #18]
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	461a      	mov	r2, r3
 800dc28:	2138      	movs	r1, #56	; 0x38
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7f3 fb6a 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	f043 0320 	orr.w	r3, r3, #32
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	21f0      	movs	r1, #240	; 0xf0
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7f3 fb60 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800dc44:	21c8      	movs	r1, #200	; 0xc8
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7f3 fbae 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	b25b      	sxtb	r3, r3
 800dc50:	43db      	mvns	r3, r3
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	09db      	lsrs	r3, r3, #7
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d000      	beq.n	800dc5e <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800dc5c:	e7f2      	b.n	800dc44 <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800dc5e:	2280      	movs	r2, #128	; 0x80
 800dc60:	21c8      	movs	r1, #200	; 0xc8
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7f3 fb4e 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800dc68:	21f8      	movs	r1, #248	; 0xf8
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7f3 fb9c 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f003 030f 	and.w	r3, r3, #15
 800dc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800dc7a:	e769      	b.n	800db50 <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800dc7c:	8bba      	ldrh	r2, [r7, #28]
 800dc7e:	8a7b      	ldrh	r3, [r7, #18]
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800dc84:	8a7b      	ldrh	r3, [r7, #18]
 800dc86:	6a3a      	ldr	r2, [r7, #32]
 800dc88:	4413      	add	r3, r2
 800dc8a:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800dc8c:	e71d      	b.n	800daca <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800dc8e:	bf00      	nop
 800dc90:	e000      	b.n	800dc94 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800dc92:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800dc94:	21f8      	movs	r1, #248	; 0xf8
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7f3 fb86 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f003 0320 	and.w	r3, r3, #32
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800dca6:	2101      	movs	r1, #1
 800dca8:	e000      	b.n	800dcac <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800dcaa:	2100      	movs	r1, #0
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	7893      	ldrb	r3, [r2, #2]
 800dcb0:	f361 0300 	bfi	r3, r1, #0, #1
 800dcb4:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800dcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3728      	adds	r7, #40	; 0x28
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	10624dd3 	.word	0x10624dd3

0800dcc8 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	70fb      	strb	r3, [r7, #3]
 800dcda:	460b      	mov	r3, r1
 800dcdc:	70bb      	strb	r3, [r7, #2]
 800dcde:	4613      	mov	r3, r2
 800dce0:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800dce2:	f7f3 fddd 	bl	80018a0 <HAL_GetTick>
 800dce6:	4603      	mov	r3, r0
 800dce8:	4a38      	ldr	r2, [pc, #224]	; (800ddcc <_ZN3USB11dispatchPktEhht+0x104>)
 800dcea:	fba2 2303 	umull	r2, r3, r2, r3
 800dcee:	099b      	lsrs	r3, r3, #6
 800dcf0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800dd04:	f7f3 fdcc 	bl	80018a0 <HAL_GetTick>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	4a30      	ldr	r2, [pc, #192]	; (800ddcc <_ZN3USB11dispatchPktEhht+0x104>)
 800dd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd10:	099a      	lsrs	r2, r3, #6
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	0fdb      	lsrs	r3, r3, #31
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d050      	beq.n	800ddc0 <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800dd1e:	78fa      	ldrb	r2, [r7, #3]
 800dd20:	78bb      	ldrb	r3, [r7, #2]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	461a      	mov	r2, r3
 800dd28:	21f0      	movs	r1, #240	; 0xf0
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7f3 faea 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800dd30:	23ff      	movs	r3, #255	; 0xff
 800dd32:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800dd34:	f7f3 fdb4 	bl	80018a0 <HAL_GetTick>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4a24      	ldr	r2, [pc, #144]	; (800ddcc <_ZN3USB11dispatchPktEhht+0x104>)
 800dd3c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd40:	099a      	lsrs	r2, r3, #6
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	0fdb      	lsrs	r3, r3, #31
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d010      	beq.n	800dd70 <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800dd4e:	21c8      	movs	r1, #200	; 0xc8
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7f3 fb29 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800dd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dae8      	bge.n	800dd34 <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800dd62:	2280      	movs	r2, #128	; 0x80
 800dd64:	21c8      	movs	r1, #200	; 0xc8
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7f3 facc 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800dd70:	21f8      	movs	r1, #248	; 0xf8
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7f3 fb18 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	f003 030f 	and.w	r3, r3, #15
 800dd7e:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800dd80:	7dfb      	ldrb	r3, [r7, #23]
 800dd82:	2b04      	cmp	r3, #4
 800dd84:	d002      	beq.n	800dd8c <_ZN3USB11dispatchPktEhht+0xc4>
 800dd86:	2b0e      	cmp	r3, #14
 800dd88:	d00c      	beq.n	800dda4 <_ZN3USB11dispatchPktEhht+0xdc>
 800dd8a:	e013      	b.n	800ddb4 <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800dd8c:	8abb      	ldrh	r3, [r7, #20]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800dd92:	883b      	ldrh	r3, [r7, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00f      	beq.n	800ddb8 <_ZN3USB11dispatchPktEhht+0xf0>
 800dd98:	8aba      	ldrh	r2, [r7, #20]
 800dd9a:	883b      	ldrh	r3, [r7, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d10b      	bne.n	800ddb8 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	e00e      	b.n	800ddc2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800dda4:	7dbb      	ldrb	r3, [r7, #22]
 800dda6:	3301      	adds	r3, #1
 800dda8:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800ddaa:	7dbb      	ldrb	r3, [r7, #22]
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d105      	bne.n	800ddbc <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	e006      	b.n	800ddc2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
 800ddb6:	e004      	b.n	800ddc2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800ddb8:	bf00      	nop
 800ddba:	e7a3      	b.n	800dd04 <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800ddbc:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800ddbe:	e7a1      	b.n	800dd04 <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	10624dd3 	.word	0x10624dd3

0800ddd0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fe17 	bl	800ea10 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fe2c 	bl	800ea40 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800dde8:	4603      	mov	r3, r0
 800ddea:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800ddec:	7b3b      	ldrb	r3, [r7, #12]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d832      	bhi.n	800de58 <_ZN3USB4TaskEv+0x88>
 800ddf2:	a201      	add	r2, pc, #4	; (adr r2, 800ddf8 <_ZN3USB4TaskEv+0x28>)
 800ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf8:	0800de15 	.word	0x0800de15
 800ddfc:	0800de09 	.word	0x0800de09
 800de00:	0800de31 	.word	0x0800de31
 800de04:	0800de2d 	.word	0x0800de2d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800de08:	4bc7      	ldr	r3, [pc, #796]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de0a:	2213      	movs	r2, #19
 800de0c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800de0e:	2300      	movs	r3, #0
 800de10:	73fb      	strb	r3, [r7, #15]
                        break;
 800de12:	e021      	b.n	800de58 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800de14:	4bc4      	ldr	r3, [pc, #784]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de1c:	2b10      	cmp	r3, #16
 800de1e:	d002      	beq.n	800de26 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800de20:	4bc1      	ldr	r3, [pc, #772]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de22:	2211      	movs	r2, #17
 800de24:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800de26:	2300      	movs	r3, #0
 800de28:	73fb      	strb	r3, [r7, #15]
                        break;
 800de2a:	e015      	b.n	800de58 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800de2c:	2301      	movs	r3, #1
 800de2e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800de30:	4bbd      	ldr	r3, [pc, #756]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de38:	2b10      	cmp	r3, #16
 800de3a:	d10c      	bne.n	800de56 <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800de3c:	f7f3 fd30 	bl	80018a0 <HAL_GetTick>
 800de40:	4603      	mov	r3, r0
 800de42:	4aba      	ldr	r2, [pc, #744]	; (800e12c <_ZN3USB4TaskEv+0x35c>)
 800de44:	fba2 2303 	umull	r2, r3, r2, r3
 800de48:	099b      	lsrs	r3, r3, #6
 800de4a:	33c8      	adds	r3, #200	; 0xc8
 800de4c:	4ab8      	ldr	r2, [pc, #736]	; (800e130 <_ZN3USB4TaskEv+0x360>)
 800de4e:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800de50:	4bb5      	ldr	r3, [pc, #724]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de52:	2220      	movs	r2, #32
 800de54:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800de56:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800de58:	2300      	movs	r3, #0
 800de5a:	73bb      	strb	r3, [r7, #14]
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b0f      	cmp	r3, #15
 800de60:	d81b      	bhi.n	800de9a <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800de62:	7bba      	ldrb	r2, [r7, #14]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	321e      	adds	r2, #30
 800de68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d010      	beq.n	800de92 <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800de70:	7bba      	ldrb	r2, [r7, #14]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	321e      	adds	r2, #30
 800de76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de7a:	7bba      	ldrb	r2, [r7, #14]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	321e      	adds	r2, #30
 800de80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	330c      	adds	r3, #12
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4608      	mov	r0, r1
 800de8c:	4798      	blx	r3
 800de8e:	4603      	mov	r3, r0
 800de90:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	3301      	adds	r3, #1
 800de96:	73bb      	strb	r3, [r7, #14]
 800de98:	e7e0      	b.n	800de5c <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800de9a:	4ba3      	ldr	r3, [pc, #652]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	2ba0      	cmp	r3, #160	; 0xa0
 800dea0:	f000 812f 	beq.w	800e102 <_ZN3USB4TaskEv+0x332>
 800dea4:	2ba0      	cmp	r3, #160	; 0xa0
 800dea6:	f300 813b 	bgt.w	800e120 <_ZN3USB4TaskEv+0x350>
 800deaa:	2b90      	cmp	r3, #144	; 0x90
 800deac:	f000 812b 	beq.w	800e106 <_ZN3USB4TaskEv+0x336>
 800deb0:	2b90      	cmp	r3, #144	; 0x90
 800deb2:	f300 8135 	bgt.w	800e120 <_ZN3USB4TaskEv+0x350>
 800deb6:	2b80      	cmp	r3, #128	; 0x80
 800deb8:	f000 810a 	beq.w	800e0d0 <_ZN3USB4TaskEv+0x300>
 800debc:	2b80      	cmp	r3, #128	; 0x80
 800debe:	f300 812f 	bgt.w	800e120 <_ZN3USB4TaskEv+0x350>
 800dec2:	2b51      	cmp	r3, #81	; 0x51
 800dec4:	f000 80f2 	beq.w	800e0ac <_ZN3USB4TaskEv+0x2dc>
 800dec8:	2b51      	cmp	r3, #81	; 0x51
 800deca:	f300 8129 	bgt.w	800e120 <_ZN3USB4TaskEv+0x350>
 800dece:	2b40      	cmp	r3, #64	; 0x40
 800ded0:	dc6a      	bgt.n	800dfa8 <_ZN3USB4TaskEv+0x1d8>
 800ded2:	2b11      	cmp	r3, #17
 800ded4:	f2c0 8124 	blt.w	800e120 <_ZN3USB4TaskEv+0x350>
 800ded8:	3b11      	subs	r3, #17
 800deda:	2b2f      	cmp	r3, #47	; 0x2f
 800dedc:	f200 8120 	bhi.w	800e120 <_ZN3USB4TaskEv+0x350>
 800dee0:	a201      	add	r2, pc, #4	; (adr r2, 800dee8 <_ZN3USB4TaskEv+0x118>)
 800dee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee6:	bf00      	nop
 800dee8:	0800dfaf 	.word	0x0800dfaf
 800deec:	0800e10b 	.word	0x0800e10b
 800def0:	0800e10b 	.word	0x0800e10b
 800def4:	0800e121 	.word	0x0800e121
 800def8:	0800e121 	.word	0x0800e121
 800defc:	0800e121 	.word	0x0800e121
 800df00:	0800e121 	.word	0x0800e121
 800df04:	0800e121 	.word	0x0800e121
 800df08:	0800e121 	.word	0x0800e121
 800df0c:	0800e121 	.word	0x0800e121
 800df10:	0800e121 	.word	0x0800e121
 800df14:	0800e121 	.word	0x0800e121
 800df18:	0800e121 	.word	0x0800e121
 800df1c:	0800e121 	.word	0x0800e121
 800df20:	0800e121 	.word	0x0800e121
 800df24:	0800dfff 	.word	0x0800dfff
 800df28:	0800e121 	.word	0x0800e121
 800df2c:	0800e121 	.word	0x0800e121
 800df30:	0800e121 	.word	0x0800e121
 800df34:	0800e121 	.word	0x0800e121
 800df38:	0800e121 	.word	0x0800e121
 800df3c:	0800e121 	.word	0x0800e121
 800df40:	0800e121 	.word	0x0800e121
 800df44:	0800e121 	.word	0x0800e121
 800df48:	0800e121 	.word	0x0800e121
 800df4c:	0800e121 	.word	0x0800e121
 800df50:	0800e121 	.word	0x0800e121
 800df54:	0800e121 	.word	0x0800e121
 800df58:	0800e121 	.word	0x0800e121
 800df5c:	0800e121 	.word	0x0800e121
 800df60:	0800e121 	.word	0x0800e121
 800df64:	0800e023 	.word	0x0800e023
 800df68:	0800e121 	.word	0x0800e121
 800df6c:	0800e121 	.word	0x0800e121
 800df70:	0800e121 	.word	0x0800e121
 800df74:	0800e121 	.word	0x0800e121
 800df78:	0800e121 	.word	0x0800e121
 800df7c:	0800e121 	.word	0x0800e121
 800df80:	0800e121 	.word	0x0800e121
 800df84:	0800e121 	.word	0x0800e121
 800df88:	0800e121 	.word	0x0800e121
 800df8c:	0800e121 	.word	0x0800e121
 800df90:	0800e121 	.word	0x0800e121
 800df94:	0800e121 	.word	0x0800e121
 800df98:	0800e121 	.word	0x0800e121
 800df9c:	0800e121 	.word	0x0800e121
 800dfa0:	0800e121 	.word	0x0800e121
 800dfa4:	0800e035 	.word	0x0800e035
 800dfa8:	2b50      	cmp	r3, #80	; 0x50
 800dfaa:	d063      	beq.n	800e074 <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800dfac:	e0b8      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        init();
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff fa6c 	bl	800d48c <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	737b      	strb	r3, [r7, #13]
 800dfb8:	7b7b      	ldrb	r3, [r7, #13]
 800dfba:	2b0f      	cmp	r3, #15
 800dfbc:	d81b      	bhi.n	800dff6 <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800dfbe:	7b7a      	ldrb	r2, [r7, #13]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	321e      	adds	r2, #30
 800dfc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d010      	beq.n	800dfee <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800dfcc:	7b7a      	ldrb	r2, [r7, #13]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	321e      	adds	r2, #30
 800dfd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfd6:	7b7a      	ldrb	r2, [r7, #13]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	321e      	adds	r2, #30
 800dfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3308      	adds	r3, #8
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	4798      	blx	r3
 800dfea:	4603      	mov	r3, r0
 800dfec:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800dfee:	7b7b      	ldrb	r3, [r7, #13]
 800dff0:	3301      	adds	r3, #1
 800dff2:	737b      	strb	r3, [r7, #13]
 800dff4:	e7e0      	b.n	800dfb8 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800dff6:	4b4c      	ldr	r3, [pc, #304]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800dff8:	2212      	movs	r2, #18
 800dffa:	701a      	strb	r2, [r3, #0]
                        break;
 800dffc:	e090      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800dffe:	f7f3 fc4f 	bl	80018a0 <HAL_GetTick>
 800e002:	4603      	mov	r3, r0
 800e004:	4a49      	ldr	r2, [pc, #292]	; (800e12c <_ZN3USB4TaskEv+0x35c>)
 800e006:	fba2 2303 	umull	r2, r3, r2, r3
 800e00a:	099a      	lsrs	r2, r3, #6
 800e00c:	4b48      	ldr	r3, [pc, #288]	; (800e130 <_ZN3USB4TaskEv+0x360>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	43db      	mvns	r3, r3
 800e014:	0fdb      	lsrs	r3, r3, #31
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d078      	beq.n	800e10e <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e01c:	4b42      	ldr	r3, [pc, #264]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e01e:	2230      	movs	r2, #48	; 0x30
 800e020:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e022:	2201      	movs	r2, #1
 800e024:	21e8      	movs	r1, #232	; 0xe8
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7f3 f96c 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e02c:	4b3e      	ldr	r3, [pc, #248]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e02e:	2240      	movs	r2, #64	; 0x40
 800e030:	701a      	strb	r2, [r3, #0]
                        break;
 800e032:	e075      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e034:	21e8      	movs	r1, #232	; 0xe8
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7f3 f9b6 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e03c:	4603      	mov	r3, r0
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	bf0c      	ite	eq
 800e046:	2301      	moveq	r3, #1
 800e048:	2300      	movne	r3, #0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d060      	beq.n	800e112 <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e050:	21d8      	movs	r1, #216	; 0xd8
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7f3 f9a8 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e058:	4603      	mov	r3, r0
 800e05a:	f043 0308 	orr.w	r3, r3, #8
 800e05e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e060:	7b3b      	ldrb	r3, [r7, #12]
 800e062:	461a      	mov	r2, r3
 800e064:	21d8      	movs	r1, #216	; 0xd8
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7f3 f94c 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e06c:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e06e:	2250      	movs	r2, #80	; 0x50
 800e070:	701a      	strb	r2, [r3, #0]
                        break;
 800e072:	e04e      	b.n	800e112 <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e074:	21c8      	movs	r1, #200	; 0xc8
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7f3 f996 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e07c:	4603      	mov	r3, r0
 800e07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e082:	2b00      	cmp	r3, #0
 800e084:	bf14      	ite	ne
 800e086:	2301      	movne	r3, #1
 800e088:	2300      	moveq	r3, #0
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d042      	beq.n	800e116 <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e090:	4b25      	ldr	r3, [pc, #148]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e092:	2251      	movs	r2, #81	; 0x51
 800e094:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e096:	f7f3 fc03 	bl	80018a0 <HAL_GetTick>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4a23      	ldr	r2, [pc, #140]	; (800e12c <_ZN3USB4TaskEv+0x35c>)
 800e09e:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a2:	099b      	lsrs	r3, r3, #6
 800e0a4:	3314      	adds	r3, #20
 800e0a6:	4a22      	ldr	r2, [pc, #136]	; (800e130 <_ZN3USB4TaskEv+0x360>)
 800e0a8:	6013      	str	r3, [r2, #0]
                        break;
 800e0aa:	e034      	b.n	800e116 <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e0ac:	f7f3 fbf8 	bl	80018a0 <HAL_GetTick>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	4a1e      	ldr	r2, [pc, #120]	; (800e12c <_ZN3USB4TaskEv+0x35c>)
 800e0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b8:	099a      	lsrs	r2, r3, #6
 800e0ba:	4b1d      	ldr	r3, [pc, #116]	; (800e130 <_ZN3USB4TaskEv+0x360>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	0fdb      	lsrs	r3, r3, #31
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d027      	beq.n	800e11a <_ZN3USB4TaskEv+0x34a>
 800e0ca:	4b17      	ldr	r3, [pc, #92]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e0cc:	2280      	movs	r2, #128	; 0x80
 800e0ce:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f928 	bl	800e32c <_ZN3USB11ConfiguringEhhb>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e0e0:	7afb      	ldrb	r3, [r7, #11]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d009      	beq.n	800e0fa <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e0e6:	7afb      	ldrb	r3, [r7, #11]
 800e0e8:	2bd2      	cmp	r3, #210	; 0xd2
 800e0ea:	d018      	beq.n	800e11e <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800e0ec:	4a11      	ldr	r2, [pc, #68]	; (800e134 <_ZN3USB4TaskEv+0x364>)
 800e0ee:	7afb      	ldrb	r3, [r7, #11]
 800e0f0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e0f2:	4b0d      	ldr	r3, [pc, #52]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e0f4:	22a0      	movs	r2, #160	; 0xa0
 800e0f6:	701a      	strb	r2, [r3, #0]
                        break;
 800e0f8:	e011      	b.n	800e11e <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800e0fa:	4b0b      	ldr	r3, [pc, #44]	; (800e128 <_ZN3USB4TaskEv+0x358>)
 800e0fc:	2290      	movs	r2, #144	; 0x90
 800e0fe:	701a      	strb	r2, [r3, #0]
                        break;
 800e100:	e00d      	b.n	800e11e <_ZN3USB4TaskEv+0x34e>
                        break;
 800e102:	bf00      	nop
 800e104:	e00c      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        break;
 800e106:	bf00      	nop
 800e108:	e00a      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        break;
 800e10a:	bf00      	nop
 800e10c:	e008      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e10e:	bf00      	nop
 800e110:	e006      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        break;
 800e112:	bf00      	nop
 800e114:	e004      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        break;
 800e116:	bf00      	nop
 800e118:	e002      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e11a:	bf00      	nop
 800e11c:	e000      	b.n	800e120 <_ZN3USB4TaskEv+0x350>
                        break;
 800e11e:	bf00      	nop
}
 800e120:	bf00      	nop
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	20000625 	.word	0x20000625
 800e12c:	10624dd3 	.word	0x10624dd3
 800e130:	20000628 	.word	0x20000628
 800e134:	20000624 	.word	0x20000624

0800e138 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	4608      	mov	r0, r1
 800e142:	4611      	mov	r1, r2
 800e144:	461a      	mov	r2, r3
 800e146:	4603      	mov	r3, r0
 800e148:	70fb      	strb	r3, [r7, #3]
 800e14a:	460b      	mov	r3, r1
 800e14c:	70bb      	strb	r3, [r7, #2]
 800e14e:	4613      	mov	r3, r2
 800e150:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e152:	2300      	movs	r3, #0
 800e154:	617b      	str	r3, [r7, #20]
 800e156:	2300      	movs	r3, #0
 800e158:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2100      	movs	r1, #0
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 fbc8 	bl	800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e164:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e16c:	23d6      	movs	r3, #214	; 0xd6
 800e16e:	e03a      	b.n	800e1e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e178:	23d7      	movs	r3, #215	; 0xd7
 800e17a:	e034      	b.n	800e1e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	787a      	ldrb	r2, [r7, #1]
 800e180:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	78bb      	ldrb	r3, [r7, #2]
 800e186:	78f9      	ldrb	r1, [r7, #3]
 800e188:	2200      	movs	r2, #0
 800e18a:	f000 fc67 	bl	800ea5c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d101      	bne.n	800e19c <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e198:	23d4      	movs	r3, #212	; 0xd4
 800e19a:	e024      	b.n	800e1e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7bfa      	ldrb	r2, [r7, #15]
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f000 fba6 	bl	800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e1a8:	6138      	str	r0, [r7, #16]

        if(!p)
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d101      	bne.n	800e1b4 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e1b0:	23d6      	movs	r3, #214	; 0xd6
 800e1b2:	e018      	b.n	800e1e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	787a      	ldrb	r2, [r7, #1]
 800e1b8:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fae9 	bl	800e798 <_ZN3USB7setAddrEhhh>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800e1ca:	7bbb      	ldrb	r3, [r7, #14]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d009      	beq.n	800e1e4 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	7bfa      	ldrb	r2, [r7, #15]
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 fcd8 	bl	800eb8c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	e000      	b.n	800e1e6 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800e1e4:	2300      	movs	r3, #0
};
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
	...

0800e1f0 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800e1f0:	b590      	push	{r4, r7, lr}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	4608      	mov	r0, r1
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	4603      	mov	r3, r0
 800e200:	70fb      	strb	r3, [r7, #3]
 800e202:	460b      	mov	r3, r1
 800e204:	70bb      	strb	r3, [r7, #2]
 800e206:	4613      	mov	r3, r2
 800e208:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800e20e:	78fa      	ldrb	r2, [r7, #3]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	321e      	adds	r2, #30
 800e214:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e218:	78fa      	ldrb	r2, [r7, #3]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	321e      	adds	r2, #30
 800e21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3304      	adds	r3, #4
 800e226:	681c      	ldr	r4, [r3, #0]
 800e228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e22c:	787a      	ldrb	r2, [r7, #1]
 800e22e:	78b9      	ldrb	r1, [r7, #2]
 800e230:	47a0      	blx	r4
 800e232:	4603      	mov	r3, r0
 800e234:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800e236:	7bbb      	ldrb	r3, [r7, #14]
 800e238:	2be0      	cmp	r3, #224	; 0xe0
 800e23a:	d11c      	bne.n	800e276 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800e23c:	78bb      	ldrb	r3, [r7, #2]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d108      	bne.n	800e254 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e242:	2201      	movs	r2, #1
 800e244:	21e8      	movs	r1, #232	; 0xe8
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7f3 f85c 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e24c:	4835      	ldr	r0, [pc, #212]	; (800e324 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e24e:	f7f3 fb33 	bl	80018b8 <HAL_Delay>
 800e252:	e022      	b.n	800e29a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e254:	78ba      	ldrb	r2, [r7, #2]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	321e      	adds	r2, #30
 800e25a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e25e:	78ba      	ldrb	r2, [r7, #2]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	321e      	adds	r2, #30
 800e264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3314      	adds	r3, #20
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	787a      	ldrb	r2, [r7, #1]
 800e270:	4611      	mov	r1, r2
 800e272:	4798      	blx	r3
 800e274:	e011      	b.n	800e29a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e276:	7bbb      	ldrb	r3, [r7, #14]
 800e278:	2b0d      	cmp	r3, #13
 800e27a:	d109      	bne.n	800e290 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d806      	bhi.n	800e290 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800e282:	4829      	ldr	r0, [pc, #164]	; (800e328 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e284:	f7f3 fb18 	bl	80018b8 <HAL_Delay>
                retries++;
 800e288:	7bfb      	ldrb	r3, [r7, #15]
 800e28a:	3301      	adds	r3, #1
 800e28c:	73fb      	strb	r3, [r7, #15]
                goto again;
 800e28e:	e7be      	b.n	800e20e <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800e290:	7bbb      	ldrb	r3, [r7, #14]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800e296:	7bbb      	ldrb	r3, [r7, #14]
 800e298:	e03f      	b.n	800e31a <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	321e      	adds	r2, #30
 800e2a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e2a4:	78fa      	ldrb	r2, [r7, #3]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	321e      	adds	r2, #30
 800e2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	681c      	ldr	r4, [r3, #0]
 800e2b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2b6:	787a      	ldrb	r2, [r7, #1]
 800e2b8:	78b9      	ldrb	r1, [r7, #2]
 800e2ba:	47a0      	blx	r4
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b0d      	cmp	r3, #13
 800e2c4:	d109      	bne.n	800e2da <_ZN3USB13AttemptConfigEhhhb+0xea>
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d806      	bhi.n	800e2da <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800e2cc:	4816      	ldr	r0, [pc, #88]	; (800e328 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e2ce:	f7f3 faf3 	bl	80018b8 <HAL_Delay>
                retries++;
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
                goto again;
 800e2d8:	e799      	b.n	800e20e <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d01b      	beq.n	800e318 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800e2e0:	78bb      	ldrb	r3, [r7, #2]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d108      	bne.n	800e2f8 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	21e8      	movs	r1, #232	; 0xe8
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7f3 f80a 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e2f0:	480c      	ldr	r0, [pc, #48]	; (800e324 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e2f2:	f7f3 fae1 	bl	80018b8 <HAL_Delay>
 800e2f6:	e00f      	b.n	800e318 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e2f8:	78ba      	ldrb	r2, [r7, #2]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	321e      	adds	r2, #30
 800e2fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e302:	78ba      	ldrb	r2, [r7, #2]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	321e      	adds	r2, #30
 800e308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3314      	adds	r3, #20
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	787a      	ldrb	r2, [r7, #1]
 800e314:	4611      	mov	r1, r2
 800e316:	4798      	blx	r3
                }
        }
        return rcode;
 800e318:	7bbb      	ldrb	r3, [r7, #14]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd90      	pop	{r4, r7, pc}
 800e322:	bf00      	nop
 800e324:	00018e70 	.word	0x00018e70
 800e328:	000186a0 	.word	0x000186a0

0800e32c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b090      	sub	sp, #64	; 0x40
 800e330:	af02      	add	r7, sp, #8
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	4608      	mov	r0, r1
 800e336:	4611      	mov	r1, r2
 800e338:	461a      	mov	r2, r3
 800e33a:	4603      	mov	r3, r0
 800e33c:	70fb      	strb	r3, [r7, #3]
 800e33e:	460b      	mov	r3, r1
 800e340:	70bb      	strb	r3, [r7, #2]
 800e342:	4613      	mov	r3, r2
 800e344:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800e34c:	f107 030c 	add.w	r3, r7, #12
 800e350:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800e352:	2300      	movs	r3, #0
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800e356:	2300      	movs	r3, #0
 800e358:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800e35e:	2308      	movs	r3, #8
 800e360:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800e362:	7abb      	ldrb	r3, [r7, #10]
 800e364:	f36f 0300 	bfc	r3, #0, #1
 800e368:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800e36a:	7abb      	ldrb	r3, [r7, #10]
 800e36c:	f36f 0341 	bfc	r3, #1, #1
 800e370:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800e372:	7abb      	ldrb	r3, [r7, #10]
 800e374:	220f      	movs	r2, #15
 800e376:	f362 0387 	bfi	r3, r2, #2, #6
 800e37a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7fa fcbb 	bl	8008cf8 <_ZN3USB14GetAddressPoolEv>
 800e382:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2100      	movs	r1, #0
 800e38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e38e:	4798      	blx	r3
 800e390:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e398:	23d6      	movs	r3, #214	; 0xd6
 800e39a:	e15c      	b.n	800e656 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800e3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a4:	f107 0208 	add.w	r2, r7, #8
 800e3a8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	787a      	ldrb	r2, [r7, #1]
 800e3ae:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800e3b0:	f107 030c 	add.w	r3, r7, #12
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	2312      	movs	r3, #18
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f94e 	bl	800e65e <_ZN3USB11getDevDescrEhhtPh>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3cc:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800e3ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800e3d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3da:	e13c      	b.n	800e656 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3de:	7a1a      	ldrb	r2, [r3, #8]
 800e3e0:	7a5b      	ldrb	r3, [r3, #9]
 800e3e2:	021b      	lsls	r3, r3, #8
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	7a9a      	ldrb	r2, [r3, #10]
 800e3ec:	7adb      	ldrb	r3, [r3, #11]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f6:	791b      	ldrb	r3, [r3, #4]
 800e3f8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	795b      	ldrb	r3, [r3, #5]
 800e3fe:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800e400:	2300      	movs	r3, #0
 800e402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e406:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e40a:	2b0f      	cmp	r3, #15
 800e40c:	f200 8081 	bhi.w	800e512 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800e410:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	321e      	adds	r2, #30
 800e418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d06e      	beq.n	800e4fe <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800e420:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	321e      	adds	r2, #30
 800e428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e42c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	321e      	adds	r2, #30
 800e434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3310      	adds	r3, #16
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4608      	mov	r0, r1
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d157      	bne.n	800e502 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800e452:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	321e      	adds	r2, #30
 800e45a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e45e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	321e      	adds	r2, #30
 800e466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3320      	adds	r3, #32
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	7fba      	ldrb	r2, [r7, #30]
 800e472:	4611      	mov	r1, r2
 800e474:	4798      	blx	r3
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d02b      	beq.n	800e4d4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800e47c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	321e      	adds	r2, #30
 800e484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e488:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	321e      	adds	r2, #30
 800e490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3318      	adds	r3, #24
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	8c3a      	ldrh	r2, [r7, #32]
 800e49c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e49e:	4798      	blx	r3
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d114      	bne.n	800e4d0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800e4a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	321e      	adds	r2, #30
 800e4ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e4b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	321e      	adds	r2, #30
 800e4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	331c      	adds	r3, #28
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	7ffa      	ldrb	r2, [r7, #31]
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	4798      	blx	r3
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e000      	b.n	800e4d6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d014      	beq.n	800e504 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800e4da:	78b8      	ldrb	r0, [r7, #2]
 800e4dc:	78fa      	ldrb	r2, [r7, #3]
 800e4de:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800e4e2:	787b      	ldrb	r3, [r7, #1]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff fe81 	bl	800e1f0 <_ZN3USB13AttemptConfigEhhhb>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800e4f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e4f8:	2bd1      	cmp	r3, #209	; 0xd1
 800e4fa:	d109      	bne.n	800e510 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800e4fc:	e002      	b.n	800e504 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800e502:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800e504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e508:	3301      	adds	r3, #1
 800e50a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e50e:	e77a      	b.n	800e406 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800e510:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800e512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d802      	bhi.n	800e520 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800e51a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e51e:	e09a      	b.n	800e656 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800e520:	2300      	movs	r3, #0
 800e522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e52a:	2b0f      	cmp	r3, #15
 800e52c:	f200 8088 	bhi.w	800e640 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800e530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	321e      	adds	r2, #30
 800e538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d074      	beq.n	800e62a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800e540:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	321e      	adds	r2, #30
 800e548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e54c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	321e      	adds	r2, #30
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3310      	adds	r3, #16
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4608      	mov	r0, r1
 800e560:	4798      	blx	r3
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	bf14      	ite	ne
 800e568:	2301      	movne	r3, #1
 800e56a:	2300      	moveq	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d15d      	bne.n	800e62e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800e572:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	321e      	adds	r2, #30
 800e57a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e57e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	321e      	adds	r2, #30
 800e586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3320      	adds	r3, #32
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	7fba      	ldrb	r2, [r7, #30]
 800e592:	4611      	mov	r1, r2
 800e594:	4798      	blx	r3
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d02b      	beq.n	800e5f4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800e59c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	321e      	adds	r2, #30
 800e5a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e5a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	321e      	adds	r2, #30
 800e5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3318      	adds	r3, #24
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	8c3a      	ldrh	r2, [r7, #32]
 800e5bc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e5be:	4798      	blx	r3
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d114      	bne.n	800e5f0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800e5c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	321e      	adds	r2, #30
 800e5ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e5d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	321e      	adds	r2, #30
 800e5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	331c      	adds	r3, #28
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	7ffa      	ldrb	r2, [r7, #31]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4798      	blx	r3
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e000      	b.n	800e5f6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d11b      	bne.n	800e632 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800e5fa:	78b8      	ldrb	r0, [r7, #2]
 800e5fc:	78fa      	ldrb	r2, [r7, #3]
 800e5fe:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800e602:	787b      	ldrb	r3, [r7, #1]
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	4603      	mov	r3, r0
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7ff fdf1 	bl	800e1f0 <_ZN3USB13AttemptConfigEhhhb>
 800e60e:	4603      	mov	r3, r0
 800e610:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800e614:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e618:	2bd1      	cmp	r3, #209	; 0xd1
 800e61a:	d00b      	beq.n	800e634 <_ZN3USB11ConfiguringEhhb+0x308>
 800e61c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e620:	2bd9      	cmp	r3, #217	; 0xd9
 800e622:	d007      	beq.n	800e634 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800e624:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e628:	e015      	b.n	800e656 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800e62a:	bf00      	nop
 800e62c:	e002      	b.n	800e634 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800e62e:	bf00      	nop
 800e630:	e000      	b.n	800e634 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800e632:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800e634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e638:	3301      	adds	r3, #1
 800e63a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e63e:	e772      	b.n	800e526 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800e640:	787b      	ldrb	r3, [r7, #1]
 800e642:	78ba      	ldrb	r2, [r7, #2]
 800e644:	78f9      	ldrb	r1, [r7, #3]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fd76 	bl	800e138 <_ZN3USB17DefaultAddressingEhhb>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800e652:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800e656:	4618      	mov	r0, r3
 800e658:	3738      	adds	r7, #56	; 0x38
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800e65e:	b580      	push	{r7, lr}
 800e660:	b08a      	sub	sp, #40	; 0x28
 800e662:	af08      	add	r7, sp, #32
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	4608      	mov	r0, r1
 800e668:	4611      	mov	r1, r2
 800e66a:	461a      	mov	r2, r3
 800e66c:	4603      	mov	r3, r0
 800e66e:	70fb      	strb	r3, [r7, #3]
 800e670:	460b      	mov	r3, r1
 800e672:	70bb      	strb	r3, [r7, #2]
 800e674:	4613      	mov	r3, r2
 800e676:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800e678:	78ba      	ldrb	r2, [r7, #2]
 800e67a:	78f9      	ldrb	r1, [r7, #3]
 800e67c:	2300      	movs	r3, #0
 800e67e:	9307      	str	r3, [sp, #28]
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	9306      	str	r3, [sp, #24]
 800e684:	883b      	ldrh	r3, [r7, #0]
 800e686:	9305      	str	r3, [sp, #20]
 800e688:	883b      	ldrh	r3, [r7, #0]
 800e68a:	9304      	str	r3, [sp, #16]
 800e68c:	2300      	movs	r3, #0
 800e68e:	9303      	str	r3, [sp, #12]
 800e690:	2301      	movs	r3, #1
 800e692:	9302      	str	r3, [sp, #8]
 800e694:	2300      	movs	r3, #0
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	2306      	movs	r3, #6
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	2380      	movs	r3, #128	; 0x80
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7fe ffc7 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800e6a4:	4603      	mov	r3, r0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b08a      	sub	sp, #40	; 0x28
 800e6b2:	af08      	add	r7, sp, #32
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	4608      	mov	r0, r1
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4603      	mov	r3, r0
 800e6be:	70fb      	strb	r3, [r7, #3]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	70bb      	strb	r3, [r7, #2]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800e6c8:	78ba      	ldrb	r2, [r7, #2]
 800e6ca:	78f9      	ldrb	r1, [r7, #3]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	9307      	str	r3, [sp, #28]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	9306      	str	r3, [sp, #24]
 800e6d4:	883b      	ldrh	r3, [r7, #0]
 800e6d6:	9305      	str	r3, [sp, #20]
 800e6d8:	883b      	ldrh	r3, [r7, #0]
 800e6da:	9304      	str	r3, [sp, #16]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9303      	str	r3, [sp, #12]
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	9302      	str	r3, [sp, #8]
 800e6e4:	7c3b      	ldrb	r3, [r7, #16]
 800e6e6:	9301      	str	r3, [sp, #4]
 800e6e8:	2306      	movs	r3, #6
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	2380      	movs	r3, #128	; 0x80
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7fe ff9f 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800e6f4:	4603      	mov	r3, r0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b09e      	sub	sp, #120	; 0x78
 800e702:	af08      	add	r7, sp, #32
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	4608      	mov	r0, r1
 800e708:	4611      	mov	r1, r2
 800e70a:	461a      	mov	r2, r3
 800e70c:	4603      	mov	r3, r0
 800e70e:	70fb      	strb	r3, [r7, #3]
 800e710:	460b      	mov	r3, r1
 800e712:	70bb      	strb	r3, [r7, #2]
 800e714:	4613      	mov	r3, r2
 800e716:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800e718:	2340      	movs	r3, #64	; 0x40
 800e71a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800e71e:	f107 030c 	add.w	r3, r7, #12
 800e722:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800e724:	78ba      	ldrb	r2, [r7, #2]
 800e726:	78f9      	ldrb	r1, [r7, #3]
 800e728:	f107 030c 	add.w	r3, r7, #12
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	787b      	ldrb	r3, [r7, #1]
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	2309      	movs	r3, #9
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff ffba 	bl	800e6ae <_ZN3USB12getConfDescrEhhthPh>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800e740:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800e748:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e74c:	e020      	b.n	800e790 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800e74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e750:	789a      	ldrb	r2, [r3, #2]
 800e752:	78db      	ldrb	r3, [r3, #3]
 800e754:	021b      	lsls	r3, r3, #8
 800e756:	4313      	orrs	r3, r2
 800e758:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800e75c:	78ba      	ldrb	r2, [r7, #2]
 800e75e:	78f9      	ldrb	r1, [r7, #3]
 800e760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e762:	9307      	str	r3, [sp, #28]
 800e764:	f107 030c 	add.w	r3, r7, #12
 800e768:	9306      	str	r3, [sp, #24]
 800e76a:	2340      	movs	r3, #64	; 0x40
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	2300      	movs	r3, #0
 800e776:	9303      	str	r3, [sp, #12]
 800e778:	2302      	movs	r3, #2
 800e77a:	9302      	str	r3, [sp, #8]
 800e77c:	787b      	ldrb	r3, [r7, #1]
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	2306      	movs	r3, #6
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	2380      	movs	r3, #128	; 0x80
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7fe ff53 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800e78c:	4603      	mov	r3, r0
 800e78e:	bf00      	nop
}
 800e790:	4618      	mov	r0, r3
 800e792:	3758      	adds	r7, #88	; 0x58
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08c      	sub	sp, #48	; 0x30
 800e79c:	af08      	add	r7, sp, #32
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	4608      	mov	r0, r1
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	70fb      	strb	r3, [r7, #3]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70bb      	strb	r3, [r7, #2]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800e7b2:	78ba      	ldrb	r2, [r7, #2]
 800e7b4:	78f9      	ldrb	r1, [r7, #3]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	9307      	str	r3, [sp, #28]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9306      	str	r3, [sp, #24]
 800e7be:	2300      	movs	r3, #0
 800e7c0:	9305      	str	r3, [sp, #20]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9304      	str	r3, [sp, #16]
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	9303      	str	r3, [sp, #12]
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	9302      	str	r3, [sp, #8]
 800e7ce:	787b      	ldrb	r3, [r7, #1]
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	2305      	movs	r3, #5
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7fe ff2a 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800e7e2:	4804      	ldr	r0, [pc, #16]	; (800e7f4 <_ZN3USB7setAddrEhhh+0x5c>)
 800e7e4:	f7f3 f868 	bl	80018b8 <HAL_Delay>
        return rcode;
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	000493e0 	.word	0x000493e0

0800e7f8 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08a      	sub	sp, #40	; 0x28
 800e7fc:	af08      	add	r7, sp, #32
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	4608      	mov	r0, r1
 800e802:	4611      	mov	r1, r2
 800e804:	461a      	mov	r2, r3
 800e806:	4603      	mov	r3, r0
 800e808:	70fb      	strb	r3, [r7, #3]
 800e80a:	460b      	mov	r3, r1
 800e80c:	70bb      	strb	r3, [r7, #2]
 800e80e:	4613      	mov	r3, r2
 800e810:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800e812:	78ba      	ldrb	r2, [r7, #2]
 800e814:	78f9      	ldrb	r1, [r7, #3]
 800e816:	2300      	movs	r3, #0
 800e818:	9307      	str	r3, [sp, #28]
 800e81a:	2300      	movs	r3, #0
 800e81c:	9306      	str	r3, [sp, #24]
 800e81e:	2300      	movs	r3, #0
 800e820:	9305      	str	r3, [sp, #20]
 800e822:	2300      	movs	r3, #0
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	2300      	movs	r3, #0
 800e828:	9303      	str	r3, [sp, #12]
 800e82a:	2300      	movs	r3, #0
 800e82c:	9302      	str	r3, [sp, #8]
 800e82e:	787b      	ldrb	r3, [r7, #1]
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	2309      	movs	r3, #9
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	2300      	movs	r3, #0
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7fe fefa 	bl	800d632 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800e83e:	4603      	mov	r3, r0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
};
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4618      	mov	r0, r3
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
	...

0800e860 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	4a04      	ldr	r2, [pc, #16]	; (800e87c <_ZN11AddressPoolC1Ev+0x1c>)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4618      	mov	r0, r3
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	0800f29c 	.word	0x0800f29c

0800e880 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff ffe8 	bl	800e860 <_ZN11AddressPoolC1Ev>
 800e890:	4a17      	ldr	r2, [pc, #92]	; (800e8f0 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800e89c:	2100      	movs	r1, #0
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f990 	bl	800ebc4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	1d1a      	adds	r2, r3, #4
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2208      	movs	r2, #8
 800e8bc:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	7993      	ldrb	r3, [r2, #6]
 800e8c2:	f36f 0300 	bfc	r3, #0, #1
 800e8c6:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	7993      	ldrb	r3, [r2, #6]
 800e8cc:	f36f 0341 	bfc	r3, #1, #1
 800e8d0:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	7993      	ldrb	r3, [r2, #6]
 800e8d6:	210f      	movs	r1, #15
 800e8d8:	f361 0387 	bfi	r3, r1, #2, #6
 800e8dc:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f9a1 	bl	800ec26 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0800f288 	.word	0x0800f288

0800e8f4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800e900:	78fb      	ldrb	r3, [r7, #3]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d102      	bne.n	800e90c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3308      	adds	r3, #8
 800e90a:	e014      	b.n	800e936 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f9a1 	bl	800ec58 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800e916:	4603      	mov	r3, r0
 800e918:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800e91a:	7bfb      	ldrb	r3, [r7, #15]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d008      	beq.n	800e932 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f103 0108 	add.w	r1, r3, #8
 800e926:	7bfa      	ldrb	r2, [r7, #15]
 800e928:	4613      	mov	r3, r2
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	1a9b      	subs	r3, r3, r2
 800e92e:	440b      	add	r3, r1
 800e930:	e000      	b.n	800e934 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800e932:	2300      	movs	r3, #0
 800e934:	bf00      	nop
        };
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	607b      	str	r3, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	72fb      	strb	r3, [r7, #11]
 800e94e:	4613      	mov	r3, r2
 800e950:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800e952:	f7f1 fef9 	bl	8000748 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800e956:	7afb      	ldrb	r3, [r7, #11]
 800e958:	f043 0302 	orr.w	r3, r3, #2
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800e960:	f107 0117 	add.w	r1, r7, #23
 800e964:	f04f 33ff 	mov.w	r3, #4294967295
 800e968:	2201      	movs	r2, #1
 800e96a:	480b      	ldr	r0, [pc, #44]	; (800e998 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800e96c:	f7f5 fd8f 	bl	800448e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800e970:	7abb      	ldrb	r3, [r7, #10]
 800e972:	b29a      	uxth	r2, r3
 800e974:	f04f 33ff 	mov.w	r3, #4294967295
 800e978:	6879      	ldr	r1, [r7, #4]
 800e97a:	4807      	ldr	r0, [pc, #28]	; (800e998 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800e97c:	f7f5 fd87 	bl	800448e <HAL_SPI_Transmit>
        data_p += nbytes;
 800e980:	7abb      	ldrb	r3, [r7, #10]
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	4413      	add	r3, r2
 800e986:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800e988:	f7f1 fed2 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800e98c:	687b      	ldr	r3, [r7, #4]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	200002bc 	.word	0x200002bc

0800e99c <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	6039      	str	r1, [r7, #0]
 800e9a6:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	607b      	str	r3, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	72fb      	strb	r3, [r7, #11]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800e9c6:	f7f1 febf 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800e9ca:	f107 010b 	add.w	r1, r7, #11
 800e9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	480d      	ldr	r0, [pc, #52]	; (800ea0c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800e9d6:	f7f5 fd5a 	bl	800448e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800e9da:	7abb      	ldrb	r3, [r7, #10]
 800e9dc:	461a      	mov	r2, r3
 800e9de:	2100      	movs	r1, #0
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 fa91 	bl	800ef08 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800e9e6:	7abb      	ldrb	r3, [r7, #10]
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	4806      	ldr	r0, [pc, #24]	; (800ea0c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800e9f2:	f7f5 fe88 	bl	8004706 <HAL_SPI_Receive>
        data_p += nbytes;
 800e9f6:	7abb      	ldrb	r3, [r7, #10]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800e9fe:	f7f1 fe97 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800ea02:	687b      	ldr	r3, [r7, #4]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	200002bc 	.word	0x200002bc

0800ea10 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800ea1c:	f7fe fd0e 	bl	800d43c <_ZN2P95IsSetEv>
 800ea20:	4603      	mov	r3, r0
 800ea22:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800ea24:	7bbb      	ldrb	r3, [r7, #14]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d104      	bne.n	800ea34 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f937 	bl	800ec9e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
                return vbusState;
 800ea48:	4b03      	ldr	r3, [pc, #12]	; (800ea58 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800ea4a:	781b      	ldrb	r3, [r3, #0]
        };
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	2000060d 	.word	0x2000060d

0800ea5c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	4608      	mov	r0, r1
 800ea66:	4611      	mov	r1, r2
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	70fb      	strb	r3, [r7, #3]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	70bb      	strb	r3, [r7, #2]
 800ea72:	4613      	mov	r3, r2
 800ea74:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800ea76:	78fb      	ldrb	r3, [r7, #3]
 800ea78:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800ea7a:	7b3b      	ldrb	r3, [r7, #12]
 800ea7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d102      	bne.n	800ea8c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800ea86:	787b      	ldrb	r3, [r7, #1]
 800ea88:	2b07      	cmp	r3, #7
 800ea8a:	d901      	bls.n	800ea90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e079      	b.n	800eb84 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800ea90:	78bb      	ldrb	r3, [r7, #2]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d005      	beq.n	800eaa2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	79db      	ldrb	r3, [r3, #7]
 800ea9a:	2b07      	cmp	r3, #7
 800ea9c:	d101      	bne.n	800eaa2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e070      	b.n	800eb84 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f8d7 	bl	800ec58 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	e065      	b.n	800eb84 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800eab8:	7b3b      	ldrb	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d124      	bne.n	800eb08 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800eabe:	78bb      	ldrb	r3, [r7, #2]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00f      	beq.n	800eae4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800eac4:	7bfa      	ldrb	r2, [r7, #15]
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4613      	mov	r3, r2
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	1a9b      	subs	r3, r3, r2
 800eace:	440b      	add	r3, r1
 800ead0:	330c      	adds	r3, #12
 800ead2:	2241      	movs	r2, #65	; 0x41
 800ead4:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	79db      	ldrb	r3, [r3, #7]
 800eada:	3301      	adds	r3, #1
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	71da      	strb	r2, [r3, #7]
 800eae2:	e008      	b.n	800eaf6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800eae4:	7bfa      	ldrb	r2, [r7, #15]
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	4613      	mov	r3, r2
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	440b      	add	r3, r1
 800eaf0:	330c      	adds	r3, #12
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800eaf6:	7bfa      	ldrb	r2, [r7, #15]
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	4613      	mov	r3, r2
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	440b      	add	r3, r1
 800eb02:	330c      	adds	r3, #12
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	e03d      	b.n	800eb84 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800eb08:	2300      	movs	r3, #0
 800eb0a:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800eb0c:	7b3b      	ldrb	r3, [r7, #12]
 800eb0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	7a3b      	ldrb	r3, [r7, #8]
 800eb16:	f362 03c5 	bfi	r3, r2, #3, #3
 800eb1a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800eb1c:	78bb      	ldrb	r3, [r7, #2]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d013      	beq.n	800eb4a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800eb22:	7a3b      	ldrb	r3, [r7, #8]
 800eb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb28:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	79db      	ldrb	r3, [r3, #7]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	71da      	strb	r2, [r3, #7]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	79db      	ldrb	r3, [r3, #7]
 800eb3a:	f003 0307 	and.w	r3, r3, #7
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	7a3b      	ldrb	r3, [r7, #8]
 800eb42:	f362 0302 	bfi	r3, r2, #0, #3
 800eb46:	723b      	strb	r3, [r7, #8]
 800eb48:	e00b      	b.n	800eb62 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800eb4a:	7a3b      	ldrb	r3, [r7, #8]
 800eb4c:	f36f 1386 	bfc	r3, #6, #1
 800eb50:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800eb52:	787b      	ldrb	r3, [r7, #1]
 800eb54:	f003 0307 	and.w	r3, r3, #7
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	7a3b      	ldrb	r3, [r7, #8]
 800eb5c:	f362 0302 	bfi	r3, r2, #0, #3
 800eb60:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800eb62:	7bfa      	ldrb	r2, [r7, #15]
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	4613      	mov	r3, r2
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	1a9b      	subs	r3, r3, r2
 800eb6c:	440b      	add	r3, r1
 800eb6e:	330c      	adds	r3, #12
 800eb70:	7a3a      	ldrb	r2, [r7, #8]
 800eb72:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800eb74:	7bfa      	ldrb	r2, [r7, #15]
 800eb76:	6879      	ldr	r1, [r7, #4]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	440b      	add	r3, r1
 800eb80:	330c      	adds	r3, #12
 800eb82:	781b      	ldrb	r3, [r3, #0]
        };
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800eb98:	78fb      	ldrb	r3, [r7, #3]
 800eb9a:	2b41      	cmp	r3, #65	; 0x41
 800eb9c:	d103      	bne.n	800eba6 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f841 	bl	800ec26 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800eba4:	e00b      	b.n	800ebbe <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800eba6:	78fb      	ldrb	r3, [r7, #3]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f854 	bl	800ec58 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800ebb4:	7bfb      	ldrb	r3, [r7, #15]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f893 	bl	800ece4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800ebd0:	78fa      	ldrb	r2, [r7, #3]
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	1a9b      	subs	r3, r3, r2
 800ebda:	440b      	add	r3, r1
 800ebdc:	330c      	adds	r3, #12
 800ebde:	2200      	movs	r2, #0
 800ebe0:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800ebe2:	78fa      	ldrb	r2, [r7, #3]
 800ebe4:	6879      	ldr	r1, [r7, #4]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	00db      	lsls	r3, r3, #3
 800ebea:	1a9b      	subs	r3, r3, r2
 800ebec:	440b      	add	r3, r1
 800ebee:	330d      	adds	r3, #13
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	1a9b      	subs	r3, r3, r2
 800ebfe:	440b      	add	r3, r1
 800ec00:	330e      	adds	r3, #14
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800ec06:	78fa      	ldrb	r2, [r7, #3]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	1d19      	adds	r1, r3, #4
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	4403      	add	r3, r0
 800ec16:	3308      	adds	r3, #8
 800ec18:	6019      	str	r1, [r3, #0]
        };
 800ec1a:	bf00      	nop
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800ec2e:	2301      	movs	r3, #1
 800ec30:	73fb      	strb	r3, [r7, #15]
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	2b0f      	cmp	r3, #15
 800ec36:	d808      	bhi.n	800ec4a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7ff ffc1 	bl	800ebc4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800ec42:	7bfb      	ldrb	r3, [r7, #15]
 800ec44:	3301      	adds	r3, #1
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	e7f3      	b.n	800ec32 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	71da      	strb	r2, [r3, #7]
        };
 800ec50:	bf00      	nop
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	460b      	mov	r3, r1
 800ec62:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800ec64:	2301      	movs	r3, #1
 800ec66:	73fb      	strb	r3, [r7, #15]
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
 800ec6a:	2b0f      	cmp	r3, #15
 800ec6c:	d810      	bhi.n	800ec90 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800ec6e:	7bfa      	ldrb	r2, [r7, #15]
 800ec70:	6879      	ldr	r1, [r7, #4]
 800ec72:	4613      	mov	r3, r2
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	1a9b      	subs	r3, r3, r2
 800ec78:	440b      	add	r3, r1
 800ec7a:	330c      	adds	r3, #12
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d101      	bne.n	800ec88 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800ec84:	7bfb      	ldrb	r3, [r7, #15]
 800ec86:	e004      	b.n	800ec92 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	73fb      	strb	r3, [r7, #15]
 800ec8e:	e7eb      	b.n	800ec68 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800ec90:	2300      	movs	r3, #0
        };
 800ec92:	4618      	mov	r0, r3
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b084      	sub	sp, #16
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800eca6:	2300      	movs	r3, #0
 800eca8:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800ecaa:	21c8      	movs	r1, #200	; 0xc8
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f7f2 fb7b 	bl	80013a8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800ecb6:	7bbb      	ldrb	r3, [r7, #14]
 800ecb8:	f003 0320 	and.w	r3, r3, #32
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f2 fb93 	bl	80013ec <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	f043 0320 	orr.w	r3, r3, #32
 800eccc:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	21c8      	movs	r1, #200	; 0xc8
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7f2 fb15 	bl	8001304 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800ecda:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d03a      	beq.n	800ed6c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800ecf6:	78fa      	ldrb	r2, [r7, #3]
 800ecf8:	6879      	ldr	r1, [r7, #4]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	00db      	lsls	r3, r3, #3
 800ecfe:	1a9b      	subs	r3, r3, r2
 800ed00:	440b      	add	r3, r1
 800ed02:	330c      	adds	r3, #12
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800ed08:	7b3b      	ldrb	r3, [r7, #12]
 800ed0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d025      	beq.n	800ed60 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800ed14:	2301      	movs	r3, #1
 800ed16:	73fb      	strb	r3, [r7, #15]
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	7b39      	ldrb	r1, [r7, #12]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 f828 	bl	800ed74 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73fb      	strb	r3, [r7, #15]
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	bf14      	ite	ne
 800ed2e:	2301      	movne	r3, #1
 800ed30:	2300      	moveq	r3, #0
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d005      	beq.n	800ed44 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff ffd1 	bl	800ece4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800ed42:	e7e9      	b.n	800ed18 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	79db      	ldrb	r3, [r3, #7]
 800ed48:	7b3a      	ldrb	r2, [r7, #12]
 800ed4a:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d105      	bne.n	800ed60 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	79db      	ldrb	r3, [r3, #7]
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800ed60:	78fb      	ldrb	r3, [r7, #3]
 800ed62:	4619      	mov	r1, r3
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff ff2d 	bl	800ebc4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800ed6a:	e000      	b.n	800ed6e <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800ed6c:	bf00      	nop
        }
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	7039      	strb	r1, [r7, #0]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800ed82:	78fb      	ldrb	r3, [r7, #3]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800ed88:	78fb      	ldrb	r3, [r7, #3]
 800ed8a:	2b0f      	cmp	r3, #15
 800ed8c:	d801      	bhi.n	800ed92 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800ed8e:	78fb      	ldrb	r3, [r7, #3]
 800ed90:	e000      	b.n	800ed94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800ed92:	2301      	movs	r3, #1
 800ed94:	73fb      	strb	r3, [r7, #15]
 800ed96:	7bfb      	ldrb	r3, [r7, #15]
 800ed98:	2b0f      	cmp	r3, #15
 800ed9a:	d816      	bhi.n	800edca <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800ed9c:	7bfa      	ldrb	r2, [r7, #15]
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	4613      	mov	r3, r2
 800eda2:	00db      	lsls	r3, r3, #3
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	440b      	add	r3, r1
 800eda8:	3308      	adds	r3, #8
 800edaa:	791b      	ldrb	r3, [r3, #4]
 800edac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800edb0:	b2da      	uxtb	r2, r3
 800edb2:	783b      	ldrb	r3, [r7, #0]
 800edb4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	429a      	cmp	r2, r3
 800edbc:	d101      	bne.n	800edc2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
 800edc0:	e004      	b.n	800edcc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
 800edc4:	3301      	adds	r3, #1
 800edc6:	73fb      	strb	r3, [r7, #15]
 800edc8:	e7e5      	b.n	800ed96 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800edca:	2300      	movs	r3, #0
        };
 800edcc:	4618      	mov	r0, r3
 800edce:	3714      	adds	r7, #20
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800edec:	2300      	movs	r3, #0
 800edee:	e031      	b.n	800ee54 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	791b      	ldrb	r3, [r3, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d022      	beq.n	800ee3e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	881b      	ldrh	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d01e      	beq.n	800ee3e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68f9      	ldr	r1, [r7, #12]
 800ee0a:	7949      	ldrb	r1, [r1, #5]
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	68f9      	ldr	r1, [r7, #12]
 800ee10:	7909      	ldrb	r1, [r1, #4]
 800ee12:	1a41      	subs	r1, r0, r1
 800ee14:	440b      	add	r3, r1
 800ee16:	7812      	ldrb	r2, [r2, #0]
 800ee18:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	791b      	ldrb	r3, [r3, #4]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	711a      	strb	r2, [r3, #4]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	801a      	strh	r2, [r3, #0]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	1c5a      	adds	r2, r3, #1
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	e7d8      	b.n	800edf0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	791b      	ldrb	r3, [r3, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e004      	b.n	800ee54 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	795a      	ldrb	r2, [r3, #5]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	711a      	strb	r2, [r3, #4]
        return true;
 800ee52:	2301      	movs	r3, #1
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <__cxa_pure_virtual>:
 800ee60:	b508      	push	{r3, lr}
 800ee62:	f000 f80d 	bl	800ee80 <_ZSt9terminatev>

0800ee66 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee66:	b508      	push	{r3, lr}
 800ee68:	4780      	blx	r0
 800ee6a:	f000 f80e 	bl	800ee8a <abort>
	...

0800ee70 <_ZSt13get_terminatev>:
 800ee70:	4b02      	ldr	r3, [pc, #8]	; (800ee7c <_ZSt13get_terminatev+0xc>)
 800ee72:	6818      	ldr	r0, [r3, #0]
 800ee74:	f3bf 8f5b 	dmb	ish
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20000174 	.word	0x20000174

0800ee80 <_ZSt9terminatev>:
 800ee80:	b508      	push	{r3, lr}
 800ee82:	f7ff fff5 	bl	800ee70 <_ZSt13get_terminatev>
 800ee86:	f7ff ffee 	bl	800ee66 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee8a <abort>:
 800ee8a:	b508      	push	{r3, lr}
 800ee8c:	2006      	movs	r0, #6
 800ee8e:	f000 f86b 	bl	800ef68 <raise>
 800ee92:	2001      	movs	r0, #1
 800ee94:	f7f2 fc54 	bl	8001740 <_exit>

0800ee98 <__errno>:
 800ee98:	4b01      	ldr	r3, [pc, #4]	; (800eea0 <__errno+0x8>)
 800ee9a:	6818      	ldr	r0, [r3, #0]
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	20000178 	.word	0x20000178

0800eea4 <__libc_init_array>:
 800eea4:	b570      	push	{r4, r5, r6, lr}
 800eea6:	4d0d      	ldr	r5, [pc, #52]	; (800eedc <__libc_init_array+0x38>)
 800eea8:	4c0d      	ldr	r4, [pc, #52]	; (800eee0 <__libc_init_array+0x3c>)
 800eeaa:	1b64      	subs	r4, r4, r5
 800eeac:	10a4      	asrs	r4, r4, #2
 800eeae:	2600      	movs	r6, #0
 800eeb0:	42a6      	cmp	r6, r4
 800eeb2:	d109      	bne.n	800eec8 <__libc_init_array+0x24>
 800eeb4:	4d0b      	ldr	r5, [pc, #44]	; (800eee4 <__libc_init_array+0x40>)
 800eeb6:	4c0c      	ldr	r4, [pc, #48]	; (800eee8 <__libc_init_array+0x44>)
 800eeb8:	f000 f884 	bl	800efc4 <_init>
 800eebc:	1b64      	subs	r4, r4, r5
 800eebe:	10a4      	asrs	r4, r4, #2
 800eec0:	2600      	movs	r6, #0
 800eec2:	42a6      	cmp	r6, r4
 800eec4:	d105      	bne.n	800eed2 <__libc_init_array+0x2e>
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eecc:	4798      	blx	r3
 800eece:	3601      	adds	r6, #1
 800eed0:	e7ee      	b.n	800eeb0 <__libc_init_array+0xc>
 800eed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed6:	4798      	blx	r3
 800eed8:	3601      	adds	r6, #1
 800eeda:	e7f2      	b.n	800eec2 <__libc_init_array+0x1e>
 800eedc:	0800f310 	.word	0x0800f310
 800eee0:	0800f310 	.word	0x0800f310
 800eee4:	0800f310 	.word	0x0800f310
 800eee8:	0800f318 	.word	0x0800f318

0800eeec <memcpy>:
 800eeec:	440a      	add	r2, r1
 800eeee:	4291      	cmp	r1, r2
 800eef0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eef4:	d100      	bne.n	800eef8 <memcpy+0xc>
 800eef6:	4770      	bx	lr
 800eef8:	b510      	push	{r4, lr}
 800eefa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eefe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef02:	4291      	cmp	r1, r2
 800ef04:	d1f9      	bne.n	800eefa <memcpy+0xe>
 800ef06:	bd10      	pop	{r4, pc}

0800ef08 <memset>:
 800ef08:	4402      	add	r2, r0
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d100      	bne.n	800ef12 <memset+0xa>
 800ef10:	4770      	bx	lr
 800ef12:	f803 1b01 	strb.w	r1, [r3], #1
 800ef16:	e7f9      	b.n	800ef0c <memset+0x4>

0800ef18 <_raise_r>:
 800ef18:	291f      	cmp	r1, #31
 800ef1a:	b538      	push	{r3, r4, r5, lr}
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	d904      	bls.n	800ef2c <_raise_r+0x14>
 800ef22:	2316      	movs	r3, #22
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef2e:	b112      	cbz	r2, 800ef36 <_raise_r+0x1e>
 800ef30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef34:	b94b      	cbnz	r3, 800ef4a <_raise_r+0x32>
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 f830 	bl	800ef9c <_getpid_r>
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	4601      	mov	r1, r0
 800ef40:	4620      	mov	r0, r4
 800ef42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef46:	f000 b817 	b.w	800ef78 <_kill_r>
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d00a      	beq.n	800ef64 <_raise_r+0x4c>
 800ef4e:	1c59      	adds	r1, r3, #1
 800ef50:	d103      	bne.n	800ef5a <_raise_r+0x42>
 800ef52:	2316      	movs	r3, #22
 800ef54:	6003      	str	r3, [r0, #0]
 800ef56:	2001      	movs	r0, #1
 800ef58:	e7e7      	b.n	800ef2a <_raise_r+0x12>
 800ef5a:	2400      	movs	r4, #0
 800ef5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef60:	4628      	mov	r0, r5
 800ef62:	4798      	blx	r3
 800ef64:	2000      	movs	r0, #0
 800ef66:	e7e0      	b.n	800ef2a <_raise_r+0x12>

0800ef68 <raise>:
 800ef68:	4b02      	ldr	r3, [pc, #8]	; (800ef74 <raise+0xc>)
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	f7ff bfd3 	b.w	800ef18 <_raise_r>
 800ef72:	bf00      	nop
 800ef74:	20000178 	.word	0x20000178

0800ef78 <_kill_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_kill_r+0x20>)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4608      	mov	r0, r1
 800ef82:	4611      	mov	r1, r2
 800ef84:	602b      	str	r3, [r5, #0]
 800ef86:	f7f2 fbcb 	bl	8001720 <_kill>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d102      	bne.n	800ef94 <_kill_r+0x1c>
 800ef8e:	682b      	ldr	r3, [r5, #0]
 800ef90:	b103      	cbz	r3, 800ef94 <_kill_r+0x1c>
 800ef92:	6023      	str	r3, [r4, #0]
 800ef94:	bd38      	pop	{r3, r4, r5, pc}
 800ef96:	bf00      	nop
 800ef98:	20000f08 	.word	0x20000f08

0800ef9c <_getpid_r>:
 800ef9c:	f7f2 bbb8 	b.w	8001710 <_getpid>

0800efa0 <strncmp>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	b16a      	cbz	r2, 800efc0 <strncmp+0x20>
 800efa4:	3901      	subs	r1, #1
 800efa6:	1884      	adds	r4, r0, r2
 800efa8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800efac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d103      	bne.n	800efbc <strncmp+0x1c>
 800efb4:	42a0      	cmp	r0, r4
 800efb6:	d001      	beq.n	800efbc <strncmp+0x1c>
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1f5      	bne.n	800efa8 <strncmp+0x8>
 800efbc:	1a98      	subs	r0, r3, r2
 800efbe:	bd10      	pop	{r4, pc}
 800efc0:	4610      	mov	r0, r2
 800efc2:	e7fc      	b.n	800efbe <strncmp+0x1e>

0800efc4 <_init>:
 800efc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc6:	bf00      	nop
 800efc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efca:	bc08      	pop	{r3}
 800efcc:	469e      	mov	lr, r3
 800efce:	4770      	bx	lr

0800efd0 <_fini>:
 800efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd2:	bf00      	nop
 800efd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd6:	bc08      	pop	{r3}
 800efd8:	469e      	mov	lr, r3
 800efda:	4770      	bx	lr
