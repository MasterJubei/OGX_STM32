
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f708  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800f8cc  0800f8cc  0001f8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc50  0800fc50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc50  0800fc50  0001fc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc58  0800fc58  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc58  0800fc58  0001fc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc60  0800fc60  0001fc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fc64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  200001dc  0800fe40  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f58  0800fe40  00020f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005003b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e8f  00000000  00000000  00070247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000770d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00078dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc0e  00000000  00000000  0007a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a2f  00000000  00000000  000a6586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafc1  00000000  00000000  000c9fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f8c  00000000  00000000  001b4fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f8b4 	.word	0x0800f8b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800f8b4 	.word	0x0800f8b4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78fa      	ldrb	r2, [r7, #3]
 80005dc:	4611      	mov	r1, r2
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f805 	bl	800060c <_ZN5Print5printEli>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <_ZN5Print5printEli+0x26>
    return write(n);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e029      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d11d      	bne.n	8000674 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da12      	bge.n	8000664 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800063e:	212d      	movs	r1, #45	; 0x2d
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffc1 	bl	80005c8 <_ZN5Print5printEc>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
      n = -n;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	425b      	negs	r3, r3
 800064e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	220a      	movs	r2, #10
 8000654:	4619      	mov	r1, r3
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f819 	bl	800068e <_ZN5Print11printNumberEmh>
 800065c:	4602      	mov	r2, r0
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	e010      	b.n	8000686 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	220a      	movs	r2, #10
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f80f 	bl	800068e <_ZN5Print11printNumberEmh>
 8000670:	4603      	mov	r3, r0
 8000672:	e008      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f806 	bl	800068e <_ZN5Print11printNumberEmh>
 8000682:	4603      	mov	r3, r0
 8000684:	bf00      	nop
  }
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b090      	sub	sp, #64	; 0x40
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	4613      	mov	r3, r2
 800069a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	3320      	adds	r3, #32
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d801      	bhi.n	80006b4 <_ZN5Print11printNumberEmh+0x26>
 80006b0:	230a      	movs	r3, #10
 80006b2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79f9      	ldrb	r1, [r7, #7]
 80006cc:	fb11 f303 	smulbb	r3, r1, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d804      	bhi.n	80006ea <_ZN5Print11printNumberEmh+0x5c>
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	e003      	b.n	80006f2 <_ZN5Print11printNumberEmh+0x64>
 80006ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ee:	3337      	adds	r3, #55	; 0x37
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f4:	3a01      	subs	r2, #1
 80006f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fa:	7013      	strb	r3, [r2, #0]
  } while(n);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d000      	beq.n	8000704 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000702:	e7d7      	b.n	80006b4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff00 	bl	800050c <_ZN5Print5writeEPKc>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2201      	movs	r2, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	4798      	blx	r3
 8000732:	4603      	mov	r3, r0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	f005 f87c 	bl	8005856 <HAL_UART_Transmit>
	return size;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6918      	ldr	r0, [r3, #16]
 8000774:	f107 010f 	add.w	r1, r7, #15
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2201      	movs	r2, #1
 800077e:	f005 f8fc 	bl	800597a <HAL_UART_Receive>
	return data;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return -1;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <_ZN5PrintC1Ev+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	0800fa28 	.word	0x0800fa28

080007f8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffe4 	bl	80007d0 <_ZN5PrintC1Ev>
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_ZN6StreamC1Ev+0x28>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800faa0 	.word	0x0800faa0

08000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffe1 	bl	80007f8 <_ZN6StreamC1Ev>
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	611a      	str	r2, [r3, #16]
	};
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800fa38 	.word	0x0800fa38

08000850 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	4903      	ldr	r1, [pc, #12]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <_ZN2P910SetDirReadEv+0x28>)
 800086a:	f001 fb4b 	bl	8001f04 <HAL_GPIO_Init>
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001f8 	.word	0x200001f8
 8000878:	40020800 	.word	0x40020800

0800087c <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <_ZN3P103SetEv+0x14>)
 8000886:	f001 fce9 	bl	800225c <HAL_GPIO_WritePin>
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400

08000894 <_ZN3P105ClearEv>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <_ZN3P105ClearEv+0x14>)
 800089e:	f001 fcdd 	bl	800225c <HAL_GPIO_WritePin>
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020400 	.word	0x40020400

080008ac <_ZN3P1011SetDirWriteEv>:
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b2:	2240      	movs	r2, #64	; 0x40
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	4902      	ldr	r1, [pc, #8]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008cc:	f001 fb1a 	bl	8001f04 <HAL_GPIO_Init>
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	40020400 	.word	0x40020400

080008dc <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2206      	movs	r2, #6
 80008f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffde 	bl	80008dc <_ZN3BTD11pairWithHIDEv>
        };
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3
                OnInitBTHID();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	331c      	adds	r3, #28
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	4798      	blx	r3
        };
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	460b      	mov	r3, r1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	72fb      	strb	r3, [r7, #11]
                return;
 8000960:	bf00      	nop
        }
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <_ZN9PS4ParserC1Ev+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
                Reset();
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f00d f944 	bl	800dc08 <_ZN9PS4Parser5ResetEv>
        };
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800fa94 	.word	0x0800fa94

08000990 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
 800099c:	4613      	mov	r3, r2
 800099e:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 80009a0:	78ba      	ldrb	r2, [r7, #2]
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	0098      	lsls	r0, r3, #2
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	3320      	adds	r3, #32
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
        };
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f81c 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d105      	bne.n	8000a06 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f80a 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a04:	e004      	b.n	8000a10 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f804 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
 8000a24:	4613      	mov	r3, r2
 8000a26:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	78ba      	ldrb	r2, [r7, #2]
 8000a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	78ba      	ldrb	r2, [r7, #2]
 8000a72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	787a      	ldrb	r2, [r7, #1]
 8000a7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	141b      	asrs	r3, r3, #16
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffcd 	bl	8000a4c <_ZN9PS4Parser6setLedEhhh>
        };
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	f00b fea4 	bl	800c820 <_ZN5BTHIDC1EP3BTDbPKc>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3378      	adds	r3, #120	; 0x78
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff45 	bl	800096c <_ZN9PS4ParserC1Ev>
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3378      	adds	r3, #120	; 0x78
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00d f888 	bl	800dc08 <_ZN9PS4Parser5ResetEv>
        };
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800fa58 	.word	0x0800fa58
 8000b08:	0800fa88 	.word	0x0800fa88

08000b0c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3378      	adds	r3, #120	; 0x78
 8000b36:	7af9      	ldrb	r1, [r7, #11]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c ff9f 	bl	800da7e <_ZN9PS4Parser5ParseEhPh>
        };
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00d f857 	bl	800dc08 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f855 	bl	8000c0a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3378      	adds	r3, #120	; 0x78
 8000b6c:	21ff      	movs	r1, #255	; 0xff
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8f 	bl	8000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3378      	adds	r3, #120	; 0x78
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00d f83d 	bl	800dc08 <_ZN9PS4Parser5ResetEv>
        };
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b096      	sub	sp, #88	; 0x58
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	224f      	movs	r2, #79	; 0x4f
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00e fe25 	bl	800f7f8 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bae:	2352      	movs	r3, #82	; 0x52
 8000bb0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000bb2:	2311      	movs	r3, #17
 8000bb4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	799b      	ldrb	r3, [r3, #6]
 8000be6:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	224f      	movs	r2, #79	; 0x4f
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f81a 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c04:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c08:	e7c5      	b.n	8000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c0a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c12:	2343      	movs	r3, #67	; 0x43
 8000c14:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c16:	2302      	movs	r3, #2
 8000c18:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f804 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6898      	ldr	r0, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	8999      	ldrh	r1, [r3, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	7d9b      	ldrb	r3, [r3, #22]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	7dd2      	ldrb	r2, [r2, #23]
 8000c4e:	79fc      	ldrb	r4, [r7, #7]
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f00a fe7a 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 ff87 	bl	8001b7c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 fabd 	bl	80011ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 fbfd 	bl	8001470 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c76:	f000 fbcd 	bl	8001414 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c7a:	f000 fb8f 	bl	800139c <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c7e:	f007 ff9d 	bl	8008bbc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c82:	f000 fb61 	bl	8001348 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c86:	4abb      	ldr	r2, [pc, #748]	; (8000f74 <main+0x310>)
 8000c88:	4bbb      	ldr	r3, [pc, #748]	; (8000f78 <main+0x314>)
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2358      	movs	r3, #88	; 0x58
 8000c90:	461a      	mov	r2, r3
 8000c92:	f00e fda3 	bl	800f7dc <memcpy>
  UART_Handle = huart2;
 8000c96:	4ab9      	ldr	r2, [pc, #740]	; (8000f7c <main+0x318>)
 8000c98:	4bb9      	ldr	r3, [pc, #740]	; (8000f80 <main+0x31c>)
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2344      	movs	r3, #68	; 0x44
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f00e fd9b 	bl	800f7dc <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	70bb      	strb	r3, [r7, #2]
  gameHID.JoyY = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	70fb      	strb	r3, [r7, #3]
  gameHID.Joy2X = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	713b      	strb	r3, [r7, #4]
  gameHID.Joy2Y = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	717b      	strb	r3, [r7, #5]
  gameHID.Joy_LT = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	703b      	strb	r3, [r7, #0]
  gameHID.Joy_RT = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	707b      	strb	r3, [r7, #1]

  uint8_t LeftHatX_val;
  uint8_t LeftHatY_val;
  uint8_t RightHatX_val;
  uint8_t RightHatY_val;
  uint32_t cpu_freq = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]

  uint16_t timer_val = 0 ;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	81fb      	strh	r3, [r7, #14]
  uint16_t timer_val2 = 0 ;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81bb      	strh	r3, [r7, #12]

  HAL_TIM_Base_Start_IT(&htim14);
 8000cca:	48ae      	ldr	r0, [pc, #696]	; (8000f84 <main+0x320>)
 8000ccc:	f004 fb22 	bl	8005314 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cd0:	49ad      	ldr	r1, [pc, #692]	; (8000f88 <main+0x324>)
 8000cd2:	48ae      	ldr	r0, [pc, #696]	; (8000f8c <main+0x328>)
 8000cd4:	f7ff fc5c 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000cd8:	f002 fd76 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4aac      	ldr	r2, [pc, #688]	; (8000f90 <main+0x32c>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	0c9b      	lsrs	r3, r3, #18
 8000ce6:	613b      	str	r3, [r7, #16]
  Serial.print((int)cpu_freq);
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	220a      	movs	r2, #10
 8000cec:	4619      	mov	r1, r3
 8000cee:	48a7      	ldr	r0, [pc, #668]	; (8000f8c <main+0x328>)
 8000cf0:	f7ff fc7c 	bl	80005ec <_ZN5Print5printEii>
  Serial.print("MHz");
 8000cf4:	49a7      	ldr	r1, [pc, #668]	; (8000f94 <main+0x330>)
 8000cf6:	48a5      	ldr	r0, [pc, #660]	; (8000f8c <main+0x328>)
 8000cf8:	f7ff fc58 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000cfc:	49a6      	ldr	r1, [pc, #664]	; (8000f98 <main+0x334>)
 8000cfe:	48a3      	ldr	r0, [pc, #652]	; (8000f8c <main+0x328>)
 8000d00:	f7ff fc54 	bl	80005ac <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d04:	4b9f      	ldr	r3, [pc, #636]	; (8000f84 <main+0x320>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	81fb      	strh	r3, [r7, #14]
  HAL_Delay(500000); //500ms
 8000d0c:	48a3      	ldr	r0, [pc, #652]	; (8000f9c <main+0x338>)
 8000d0e:	f000 ffa7 	bl	8001c60 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d12:	4b9c      	ldr	r3, [pc, #624]	; (8000f84 <main+0x320>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	81bb      	strh	r3, [r7, #12]
  Serial.print("\r\nTime Elapsed is: ");
 8000d20:	499f      	ldr	r1, [pc, #636]	; (8000fa0 <main+0x33c>)
 8000d22:	489a      	ldr	r0, [pc, #616]	; (8000f8c <main+0x328>)
 8000d24:	f7ff fc42 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000d28:	89bb      	ldrh	r3, [r7, #12]
 8000d2a:	4a9e      	ldr	r2, [pc, #632]	; (8000fa4 <main+0x340>)
 8000d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	220a      	movs	r2, #10
 8000d36:	4619      	mov	r1, r3
 8000d38:	4894      	ldr	r0, [pc, #592]	; (8000f8c <main+0x328>)
 8000d3a:	f7ff fc57 	bl	80005ec <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d3e:	499a      	ldr	r1, [pc, #616]	; (8000fa8 <main+0x344>)
 8000d40:	4892      	ldr	r0, [pc, #584]	; (8000f8c <main+0x328>)
 8000d42:	f7ff fc33 	bl	80005ac <_ZN5Print5printEPKc>


  if (Usb.Init() == -1) {
 8000d46:	4899      	ldr	r0, [pc, #612]	; (8000fac <main+0x348>)
 8000d48:	f000 fc27 	bl	800159a <_ZN8MAX3421eI3P102P9E4InitEv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d004      	beq.n	8000d68 <main+0x104>
  		Serial.print(F("\r\nOSC did not start"));
 8000d5e:	4994      	ldr	r1, [pc, #592]	; (8000fb0 <main+0x34c>)
 8000d60:	488a      	ldr	r0, [pc, #552]	; (8000f8c <main+0x328>)
 8000d62:	f7ff fc15 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000d66:	e7fe      	b.n	8000d66 <main+0x102>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000d68:	4992      	ldr	r1, [pc, #584]	; (8000fb4 <main+0x350>)
 8000d6a:	4888      	ldr	r0, [pc, #544]	; (8000f8c <main+0x328>)
 8000d6c:	f7ff fc10 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000d70:	488e      	ldr	r0, [pc, #568]	; (8000fac <main+0x348>)
 8000d72:	f00d fca5 	bl	800e6c0 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000d76:	463b      	mov	r3, r7
 8000d78:	2208      	movs	r2, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	488e      	ldr	r0, [pc, #568]	; (8000fb8 <main+0x354>)
 8000d7e:	f006 fd2d 	bl	80077dc <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000d82:	488e      	ldr	r0, [pc, #568]	; (8000fbc <main+0x358>)
 8000d84:	f7ff fec2 	bl	8000b0c <_ZN5PS4BT9connectedEv>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 81f8 	beq.w	8001180 <main+0x51c>
			ps4_connected = 1;
 8000d90:	4b8b      	ldr	r3, [pc, #556]	; (8000fc0 <main+0x35c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000d96:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <main+0x320>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f06f 0201 	mvn.w	r2, #1
 8000d9e:	611a      	str	r2, [r3, #16]


			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4888      	ldr	r0, [pc, #544]	; (8000fc4 <main+0x360>)
 8000da4:	f00c fe5b 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000da8:	4603      	mov	r3, r0
 8000daa:	72fb      	strb	r3, [r7, #11]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000dac:	2101      	movs	r1, #1
 8000dae:	4885      	ldr	r0, [pc, #532]	; (8000fc4 <main+0x360>)
 8000db0:	f00c fe55 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000db4:	4603      	mov	r3, r0
 8000db6:	72bb      	strb	r3, [r7, #10]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000db8:	2102      	movs	r1, #2
 8000dba:	4882      	ldr	r0, [pc, #520]	; (8000fc4 <main+0x360>)
 8000dbc:	f00c fe4f 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	727b      	strb	r3, [r7, #9]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	487f      	ldr	r0, [pc, #508]	; (8000fc4 <main+0x360>)
 8000dc8:	f00c fe49 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	723b      	strb	r3, [r7, #8]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	2b89      	cmp	r3, #137	; 0x89
 8000dd4:	d814      	bhi.n	8000e00 <main+0x19c>
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	2b74      	cmp	r3, #116	; 0x74
 8000dda:	d911      	bls.n	8000e00 <main+0x19c>
 8000ddc:	7abb      	ldrb	r3, [r7, #10]
 8000dde:	2b89      	cmp	r3, #137	; 0x89
 8000de0:	d80e      	bhi.n	8000e00 <main+0x19c>
 8000de2:	7abb      	ldrb	r3, [r7, #10]
 8000de4:	2b74      	cmp	r3, #116	; 0x74
 8000de6:	d90b      	bls.n	8000e00 <main+0x19c>
 8000de8:	7a7b      	ldrb	r3, [r7, #9]
 8000dea:	2b89      	cmp	r3, #137	; 0x89
 8000dec:	d808      	bhi.n	8000e00 <main+0x19c>
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
 8000df0:	2b74      	cmp	r3, #116	; 0x74
 8000df2:	d905      	bls.n	8000e00 <main+0x19c>
 8000df4:	7a3b      	ldrb	r3, [r7, #8]
 8000df6:	2b89      	cmp	r3, #137	; 0x89
 8000df8:	d802      	bhi.n	8000e00 <main+0x19c>
 8000dfa:	7a3b      	ldrb	r3, [r7, #8]
 8000dfc:	2b74      	cmp	r3, #116	; 0x74
 8000dfe:	d824      	bhi.n	8000e4a <main+0x1e6>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000e00:	2100      	movs	r1, #0
 8000e02:	4870      	ldr	r0, [pc, #448]	; (8000fc4 <main+0x360>)
 8000e04:	f00c fe2b 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	3b80      	subs	r3, #128	; 0x80
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000e12:	2101      	movs	r1, #1
 8000e14:	486b      	ldr	r0, [pc, #428]	; (8000fc4 <main+0x360>)
 8000e16:	f00c fe22 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	3b80      	subs	r3, #128	; 0x80
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000e24:	2102      	movs	r1, #2
 8000e26:	4867      	ldr	r0, [pc, #412]	; (8000fc4 <main+0x360>)
 8000e28:	f00c fe19 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	3b80      	subs	r3, #128	; 0x80
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000e36:	2103      	movs	r1, #3
 8000e38:	4862      	ldr	r0, [pc, #392]	; (8000fc4 <main+0x360>)
 8000e3a:	f00c fe10 	bl	800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	3b80      	subs	r3, #128	; 0x80
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	717b      	strb	r3, [r7, #5]
 8000e48:	e007      	b.n	8000e5a <main+0x1f6>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	717b      	strb	r3, [r7, #5]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	4859      	ldr	r0, [pc, #356]	; (8000fc4 <main+0x360>)
 8000e5e:	f00c fde5 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e62:	4603      	mov	r3, r0
 8000e64:	3b80      	subs	r3, #128	; 0x80
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	703b      	strb	r3, [r7, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000e6c:	2109      	movs	r1, #9
 8000e6e:	4855      	ldr	r0, [pc, #340]	; (8000fc4 <main+0x360>)
 8000e70:	f00c fddc 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e74:	4603      	mov	r3, r0
 8000e76:	3b80      	subs	r3, #128	; 0x80
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	707b      	strb	r3, [r7, #1]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4850      	ldr	r0, [pc, #320]	; (8000fc4 <main+0x360>)
 8000e82:	f00c fdd3 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <main+0x364>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d108      	bne.n	8000ea4 <main+0x240>
 8000e92:	2109      	movs	r1, #9
 8000e94:	484b      	ldr	r0, [pc, #300]	; (8000fc4 <main+0x360>)
 8000e96:	f00c fdc9 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <main+0x368>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4847      	ldr	r0, [pc, #284]	; (8000fc4 <main+0x360>)
 8000ea8:	f00c fdc0 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <main+0x364>)
 8000eb2:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000eb4:	2109      	movs	r1, #9
 8000eb6:	4843      	ldr	r0, [pc, #268]	; (8000fc4 <main+0x360>)
 8000eb8:	f00c fdb8 	bl	800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <main+0x368>)
 8000ec2:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	483f      	ldr	r0, [pc, #252]	; (8000fc4 <main+0x360>)
 8000ec8:	f00c fd70 	bl	800d9ac <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <main+0x278>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	e14a      	b.n	8001172 <main+0x50e>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000edc:	210c      	movs	r1, #12
 8000ede:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <main+0x360>)
 8000ee0:	f00c fd3c 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <main+0x290>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	e003      	b.n	8000efc <main+0x298>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f36f 0300 	bfc	r3, #0, #1
 8000efa:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000efc:	210d      	movs	r1, #13
 8000efe:	4831      	ldr	r0, [pc, #196]	; (8000fc4 <main+0x360>)
 8000f00:	f00c fd2c 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <main+0x2b0>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	e003      	b.n	8000f1c <main+0x2b8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	f36f 13c7 	bfc	r3, #7, #1
 8000f1a:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000f1c:	210e      	movs	r1, #14
 8000f1e:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <main+0x360>)
 8000f20:	f00c fd1c 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <main+0x2d0>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	71bb      	strb	r3, [r7, #6]
 8000f32:	e003      	b.n	8000f3c <main+0x2d8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	f36f 1386 	bfc	r3, #6, #1
 8000f3a:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <main+0x360>)
 8000f40:	f00c fd0c 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <main+0x2f0>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e003      	b.n	8000f5c <main+0x2f8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f36f 0341 	bfc	r3, #1, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(UP)) {
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <main+0x360>)
 8000f60:	f00c fcfc 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d032      	beq.n	8000fd0 <main+0x36c>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e031      	b.n	8000fd8 <main+0x374>
 8000f74:	20000304 	.word	0x20000304
 8000f78:	20000220 	.word	0x20000220
 8000f7c:	2000035c 	.word	0x2000035c
 8000f80:	20000278 	.word	0x20000278
 8000f84:	200002bc 	.word	0x200002bc
 8000f88:	0800f8cc 	.word	0x0800f8cc
 8000f8c:	200003a0 	.word	0x200003a0
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	0800f8e4 	.word	0x0800f8e4
 8000f98:	0800f8e8 	.word	0x0800f8e8
 8000f9c:	0007a120 	.word	0x0007a120
 8000fa0:	0800f8f0 	.word	0x0800f8f0
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	0800f904 	.word	0x0800f904
 8000fac:	200003b4 	.word	0x200003b4
 8000fb0:	0800f908 	.word	0x0800f908
 8000fb4:	0800f91c 	.word	0x0800f91c
 8000fb8:	2000067c 	.word	0x2000067c
 8000fbc:	20000588 	.word	0x20000588
 8000fc0:	20000656 	.word	0x20000656
 8000fc4:	20000600 	.word	0x20000600
 8000fc8:	20000652 	.word	0x20000652
 8000fcc:	20000653 	.word	0x20000653
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f36f 0382 	bfc	r3, #2, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000fd8:	2101      	movs	r1, #1
 8000fda:	487b      	ldr	r0, [pc, #492]	; (80011c8 <main+0x564>)
 8000fdc:	f00c fcbe 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <main+0x38c>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e003      	b.n	8000ff8 <main+0x394>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f36f 03c3 	bfc	r3, #3, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4873      	ldr	r0, [pc, #460]	; (80011c8 <main+0x564>)
 8000ffc:	f00c fcae 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <main+0x3ac>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e003      	b.n	8001018 <main+0x3b4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f36f 1345 	bfc	r3, #5, #1
 8001016:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(LEFT)) {
 8001018:	2103      	movs	r1, #3
 800101a:	486b      	ldr	r0, [pc, #428]	; (80011c8 <main+0x564>)
 800101c:	f00c fc9e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <main+0x3cc>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e003      	b.n	8001038 <main+0x3d4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f36f 1304 	bfc	r3, #4, #1
 8001036:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(L1)) {
 8001038:	210a      	movs	r1, #10
 800103a:	4863      	ldr	r0, [pc, #396]	; (80011c8 <main+0x564>)
 800103c:	f00c fc8e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <main+0x3ec>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	71bb      	strb	r3, [r7, #6]
 800104e:	e003      	b.n	8001058 <main+0x3f4>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	f36f 1345 	bfc	r3, #5, #1
 8001056:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(L3)) {
 8001058:	2106      	movs	r1, #6
 800105a:	485b      	ldr	r0, [pc, #364]	; (80011c8 <main+0x564>)
 800105c:	f00c fc7e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <main+0x40c>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e003      	b.n	8001078 <main+0x414>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f36f 1386 	bfc	r3, #6, #1
 8001076:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(R1)) {
 8001078:	210b      	movs	r1, #11
 800107a:	4853      	ldr	r0, [pc, #332]	; (80011c8 <main+0x564>)
 800107c:	f00c fc6e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <main+0x42c>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	71bb      	strb	r3, [r7, #6]
 800108e:	e003      	b.n	8001098 <main+0x434>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	f36f 1304 	bfc	r3, #4, #1
 8001096:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(R3)) {
 8001098:	2107      	movs	r1, #7
 800109a:	484b      	ldr	r0, [pc, #300]	; (80011c8 <main+0x564>)
 800109c:	f00c fc5e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <main+0x44c>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	e003      	b.n	80010b8 <main+0x454>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f36f 13c7 	bfc	r3, #7, #1
 80010b6:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(SHARE)) {
 80010b8:	2104      	movs	r1, #4
 80010ba:	4843      	ldr	r0, [pc, #268]	; (80011c8 <main+0x564>)
 80010bc:	f00c fc4e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <main+0x46c>
					gameHID.ps4ButtonsTag.button_share = 1;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	e003      	b.n	80010d8 <main+0x474>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	f36f 03c3 	bfc	r3, #3, #1
 80010d6:	71bb      	strb	r3, [r7, #6]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 80010d8:	2105      	movs	r1, #5
 80010da:	483b      	ldr	r0, [pc, #236]	; (80011c8 <main+0x564>)
 80010dc:	f00c fc3e 	bl	800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <main+0x49a>
					gameHID.ps4ButtonsTag.button_start = 1;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <main+0x568>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <main+0x568>)
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e003      	b.n	8001106 <main+0x4a2>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	f36f 0382 	bfc	r3, #2, #1
 8001104:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 8001106:	2111      	movs	r1, #17
 8001108:	482f      	ldr	r0, [pc, #188]	; (80011c8 <main+0x564>)
 800110a:	f00c fc4f 	bl	800d9ac <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <main+0x4be>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <main+0x56c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <main+0x56c>)
 8001120:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <main+0x56c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d023      	beq.n	8001172 <main+0x50e>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	4826      	ldr	r0, [pc, #152]	; (80011c8 <main+0x564>)
 8001130:	f7ff fc2e 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d107      	bne.n	800114a <main+0x4e6>
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	4822      	ldr	r0, [pc, #136]	; (80011c8 <main+0x564>)
 8001140:	f7ff fc26 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <main+0x4ea>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <main+0x4ec>
 800114e:	2300      	movs	r3, #0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00e      	beq.n	8001172 <main+0x50e>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001154:	2300      	movs	r3, #0
 8001156:	75fb      	strb	r3, [r7, #23]
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d809      	bhi.n	8001172 <main+0x50e>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	4818      	ldr	r0, [pc, #96]	; (80011c8 <main+0x564>)
 8001166:	f7ff fc13 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	3301      	adds	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	e7f2      	b.n	8001158 <main+0x4f4>
							//Serial.print(F("\t"));
						}
					}
				}
			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001172:	463b      	mov	r3, r7
 8001174:	2208      	movs	r2, #8
 8001176:	4619      	mov	r1, r3
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <main+0x570>)
 800117a:	f006 fb2f 	bl	80077dc <USBD_HID_SendReport>
 800117e:	e5f7      	b.n	8000d70 <main+0x10c>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <main+0x574>)
 8001186:	f001 f851 	bl	800222c <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d011      	beq.n	80011be <main+0x55a>
		    if (!buttonPressed) {
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <main+0x578>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	f083 0301 	eor.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <main+0x552>
		    	Serial.print(F("\r\nButton Pressed"));
 80011a8:	490d      	ldr	r1, [pc, #52]	; (80011e0 <main+0x57c>)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <main+0x580>)
 80011ac:	f7ff f9f0 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <main+0x584>)
 80011b2:	f7ff fba8 	bl	8000906 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <main+0x578>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e5d8      	b.n	8000d70 <main+0x10c>
		} else
		    buttonPressed = false;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <main+0x578>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  }
 80011c4:	e5d4      	b.n	8000d70 <main+0x10c>
 80011c6:	bf00      	nop
 80011c8:	20000600 	.word	0x20000600
 80011cc:	20000650 	.word	0x20000650
 80011d0:	20000651 	.word	0x20000651
 80011d4:	2000067c 	.word	0x2000067c
 80011d8:	40020800 	.word	0x40020800
 80011dc:	20000654 	.word	0x20000654
 80011e0:	0800f93c 	.word	0x0800f93c
 80011e4:	200003a0 	.word	0x200003a0
 80011e8:	20000588 	.word	0x20000588

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ac      	sub	sp, #176	; 0xb0
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00e fafc 	bl	800f7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	225c      	movs	r2, #92	; 0x5c
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00e faed 	bl	800f7f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <SystemClock_Config+0x150>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a45      	ldr	r2, [pc, #276]	; (800133c <SystemClock_Config+0x150>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <SystemClock_Config+0x150>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <SystemClock_Config+0x154>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <SystemClock_Config+0x154>)
 8001244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <SystemClock_Config+0x154>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001256:	2301      	movs	r3, #1
 8001258:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001276:	23a8      	movs	r3, #168	; 0xa8
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001282:	2307      	movs	r3, #7
 8001284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ffa8 	bl	80041e8 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012a8:	f000 f972 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012c8:	2105      	movs	r1, #5
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 f996 	bl	80035fc <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012e0:	f000 f956 	bl	8001590 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012ea:	2300      	movs	r3, #0
 80012ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fa9c 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001308:	f000 f942 	bl	8001590 <Error_Handler>
  }

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 800130c:	f002 fa5c 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8001310:	4603      	mov	r3, r0
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <SystemClock_Config+0x158>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fdc9 	bl	8001eb2 <HAL_SYSTICK_Config>
	//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() /   1680000); // NOTE: Edited, so it increments every us

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001320:	2004      	movs	r0, #4
 8001322:	f000 fdd3 	bl	8001ecc <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	f000 fd96 	bl	8001e5e <HAL_NVIC_SetPriority>

}
 8001332:	bf00      	nop
 8001334:	37b0      	adds	r7, #176	; 0xb0
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000
 8001344:	431bde83 	.word	0x431bde83

08001348 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_ZL13MX_TIM14_Initv+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 8001354:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001358:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 8001362:	f242 720f 	movw	r2, #9999	; 0x270f
 8001366:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <_ZL13MX_TIM14_Initv+0x4c>)
 8001376:	f003 ff7d 	bl	8005274 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 800138a:	f000 f901 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002bc 	.word	0x200002bc
 8001398:	40002000 	.word	0x40002000

0800139c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <_ZL12MX_SPI1_Initv+0x74>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013d0:	2218      	movs	r2, #24
 80013d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013e8:	220a      	movs	r2, #10
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <_ZL12MX_SPI1_Initv+0x70>)
 80013ee:	f003 f999 	bl	8004724 <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001402:	f000 f8c5 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000220 	.word	0x20000220
 8001410:	40013000 	.word	0x40013000

08001414 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <_ZL19MX_USART2_UART_Initv+0x58>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800144c:	f004 f9b6 	bl	80057bc <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001460:	f000 f896 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000278 	.word	0x20000278
 800146c:	40004400 	.word	0x40004400

08001470 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <_ZL12MX_GPIO_Initv+0xa8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <_ZL12MX_GPIO_Initv+0xac>)
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <_ZL12MX_GPIO_Initv+0xb0>)
 800150c:	f000 fcfa 	bl	8001f04 <HAL_GPIO_Init>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	10210000 	.word	0x10210000
 8001520:	40020800 	.word	0x40020800

08001524 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

	if(htim == &htim14) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d11d      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x4c>
		//Serial.print("\r\nTesting");
		if(!rumble_once && ps4_connected) {
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x38>
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <HAL_TIM_PeriodElapsedCallback+0x38>
			Serial.print("\r\nPS4 Controller Connected");
 8001544:	490f      	ldr	r1, [pc, #60]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001546:	4810      	ldr	r0, [pc, #64]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001548:	f7ff f830 	bl	80005ac <_ZN5Print5printEPKc>
			PS4.setRumbleOn(RumbleLow);
 800154c:	2120      	movs	r1, #32
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001550:	f7ff fa4a 	bl	80009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
			rumble_once = 2;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
		else if(rumble_once == 2) {
			PS4.setRumbleOff();
			rumble_once = 1;
		}
	}
}
 800155a:	e009      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x4c>
		else if(rumble_once == 2) {
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d105      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x4c>
			PS4.setRumbleOff();
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001566:	f7ff fa32 	bl	80009ce <_ZN9PS4Parser12setRumbleOffEv>
			rumble_once = 1;
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200002bc 	.word	0x200002bc
 800157c:	20000655 	.word	0x20000655
 8001580:	20000656 	.word	0x20000656
 8001584:	0800f950 	.word	0x0800f950
 8001588:	200003a0 	.word	0x200003a0
 800158c:	20000600 	.word	0x20000600

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>

0800159a <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80015a2:	f7ff f983 	bl	80008ac <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80015a6:	f7ff f969 	bl	800087c <_ZN3P103SetEv>
        spi::init();
 80015aa:	f000 f845 	bl	8001638 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80015ae:	f7ff f94f 	bl	8000850 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80015b2:	2218      	movs	r2, #24
 80015b4:	2188      	movs	r1, #136	; 0x88
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f846 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f865 	bl	800168c <_ZN8MAX3421eI3P102P9E5resetEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e02b      	b.n	8001630 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80015d8:	22c1      	movs	r2, #193	; 0xc1
 80015da:	21d8      	movs	r1, #216	; 0xd8
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f833 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80015e2:	2260      	movs	r2, #96	; 0x60
 80015e4:	21d0      	movs	r1, #208	; 0xd0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f82e 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80015ec:	2204      	movs	r2, #4
 80015ee:	21e8      	movs	r1, #232	; 0xe8
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f829 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80015f6:	21e8      	movs	r1, #232	; 0xe8
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f877 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80015fe:	4603      	mov	r3, r0
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d000      	beq.n	8001614 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001612:	e7f0      	b.n	80015f6 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f88b 	bl	8001730 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 800161a:	2220      	movs	r2, #32
 800161c:	21c8      	movs	r1, #200	; 0xc8
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f812 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001624:	2201      	movs	r2, #1
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f80d 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
        }
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
 8001654:	4613      	mov	r3, r2
 8001656:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001658:	f7ff f91c 	bl	8000894 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 800166a:	f107 010c 	add.w	r1, r7, #12
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	2202      	movs	r2, #2
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001676:	f003 f8de 	bl	8004836 <HAL_SPI_Transmit>
        SPI_SS::Set();
 800167a:	f7ff f8ff 	bl	800087c <_ZN3P103SetEv>
        return;
 800167e:	bf00      	nop
};
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000304 	.word	0x20000304

0800168c <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001698:	2220      	movs	r2, #32
 800169a:	2178      	movs	r1, #120	; 0x78
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ffd3 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2178      	movs	r1, #120	; 0x78
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffce 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	3301      	adds	r3, #1
 80016b0:	81fb      	strh	r3, [r7, #14]
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00f      	beq.n	80016e2 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 80016c2:	2168      	movs	r1, #104	; 0x68
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f811 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d100      	bne.n	80016e0 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80016de:	e7e5      	b.n	80016ac <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80016e0:	bf00      	nop
        return ( i);
 80016e2:	89fb      	ldrh	r3, [r7, #14]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80016f8:	f7ff f8cc 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80016fc:	1cf9      	adds	r1, r7, #3
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	2201      	movs	r2, #1
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001706:	f003 f896 	bl	8004836 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800170e:	f107 010f 	add.w	r1, r7, #15
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	2201      	movs	r2, #1
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800171a:	f003 f9c8 	bl	8004aae <HAL_SPI_Receive>
        SPI_SS::Set();
 800171e:	f7ff f8ad 	bl	800087c <_ZN3P103SetEv>
        return (rv);
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000304 	.word	0x20000304

08001730 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001738:	21f8      	movs	r1, #248	; 0xf8
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffd6 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174a:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2bc0      	cmp	r3, #192	; 0xc0
 8001750:	d04a      	beq.n	80017e8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001752:	2bc0      	cmp	r3, #192	; 0xc0
 8001754:	dc55      	bgt.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d006      	beq.n	8001768 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	dc51      	bgt.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d046      	beq.n	80017f0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	d020      	beq.n	80017a8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001766:	e04c      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001768:	21d8      	movs	r1, #216	; 0xd8
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffbe 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001784:	22c9      	movs	r2, #201	; 0xc9
 8001786:	21d8      	movs	r1, #216	; 0xd8
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff5d 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001790:	2202      	movs	r2, #2
 8001792:	701a      	strb	r2, [r3, #0]
                        break;
 8001794:	e035      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001796:	22cb      	movs	r2, #203	; 0xcb
 8001798:	21d8      	movs	r1, #216	; 0xd8
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff54 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017a2:	2203      	movs	r2, #3
 80017a4:	701a      	strb	r2, [r3, #0]
                        break;
 80017a6:	e02c      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80017a8:	21d8      	movs	r1, #216	; 0xd8
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff9e 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80017c4:	22cb      	movs	r2, #203	; 0xcb
 80017c6:	21d8      	movs	r1, #216	; 0xd8
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff3d 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017d0:	2203      	movs	r2, #3
 80017d2:	701a      	strb	r2, [r3, #0]
                        break;
 80017d4:	e015      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80017d6:	22c9      	movs	r2, #201	; 0xc9
 80017d8:	21d8      	movs	r1, #216	; 0xd8
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff34 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
                        break;
 80017e6:	e00c      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
                        break;
 80017ee:	e008      	b.n	8001802 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80017f0:	22d1      	movs	r2, #209	; 0xd1
 80017f2:	21d8      	movs	r1, #216	; 0xd8
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff27 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
                        break;
 8001800:	bf00      	nop
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000657 	.word	0x20000657

08001810 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d115      	bne.n	800184c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d110      	bne.n	800184c <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800182e:	f7fe fff9 	bl	8000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001834:	f00c fa86 	bl	800dd44 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001838:	4908      	ldr	r1, [pc, #32]	; (800185c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800183c:	f008 f864 	bl	8009908 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001842:	2200      	movs	r2, #0
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001848:	f7ff f938 	bl	8000abc <_ZN5PS4BTC1EP3BTDbPKc>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000278 	.word	0x20000278
 8001858:	200003a0 	.word	0x200003a0
 800185c:	200003b4 	.word	0x200003b4
 8001860:	20000470 	.word	0x20000470
 8001864:	0800f96c 	.word	0x0800f96c
 8001868:	20000588 	.word	0x20000588

0800186c <_GLOBAL__sub_I_hspi1>:
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
 8001870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff ffcb 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_MspInit+0x4c>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_MspInit+0x4c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ba:	2007      	movs	r0, #7
 80018bc:	f000 fac4 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0x84>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12b      	bne.n	8001946 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001926:	23e0      	movs	r3, #224	; 0xe0
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001936:	2305      	movs	r3, #5
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0x8c>)
 8001942:	f000 fadf 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013000 	.word	0x40013000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d115      	bne.n	800199a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	202d      	movs	r0, #45	; 0x2d
 8001990:	f000 fa65 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001994:	202d      	movs	r0, #45	; 0x2d
 8001996:	f000 fa7e 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40002000 	.word	0x40002000
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a06:	230c      	movs	r3, #12
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a16:	2307      	movs	r3, #7
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_MspInit+0x8c>)
 8001a22:	f000 fa6f 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004400 	.word	0x40004400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a88:	f000 f8ca 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a96:	f003 fcad 	bl	80053f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002bc 	.word	0x200002bc

08001aa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <OTG_FS_IRQHandler+0x10>)
 8001aaa:	f000 fd47 	bl	800253c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000b4c 	.word	0x20000b4c

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad2:	f00d fe59 	bl	800f788 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
	return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001afa:	e7fe      	b.n	8001afa <_exit+0x12>

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SystemInit+0x28>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <SystemInit+0x28>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SystemInit+0x28>)
 8001b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b16:	609a      	str	r2, [r3, #8]
#endif
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b2e:	e003      	b.n	8001b38 <LoopCopyDataInit>

08001b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b36:	3104      	adds	r1, #4

08001b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b40:	d3f6      	bcc.n	8001b30 <CopyDataInit>
  ldr  r2, =_sbss
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b44:	e002      	b.n	8001b4c <LoopFillZerobss>

08001b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b48:	f842 3b04 	str.w	r3, [r2], #4

08001b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b50:	d3f9      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b52:	f7ff ffd3 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f00d fe1d 	bl	800f794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7ff f883 	bl	8000c64 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b64:	0800fc64 	.word	0x0800fc64
  ldr  r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b6c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001b70:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001b74:	20000f58 	.word	0x20000f58

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f94f 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fe64 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f967 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000678 	.word	0x20000678

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000678 	.word	0x20000678

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d106      	bne.n	8001ee8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001ee6:	e005      	b.n	8001ef4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e165      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8154 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80ae 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_GPIO_Init+0x300>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_GPIO_Init+0x300>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_GPIO_Init+0x300>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_GPIO_Init+0x304>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	; (800220c <HAL_GPIO_Init+0x308>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d025      	beq.n	800211e <HAL_GPIO_Init+0x21a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_GPIO_Init+0x30c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <HAL_GPIO_Init+0x216>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_GPIO_Init+0x310>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x212>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_GPIO_Init+0x314>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x20e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_GPIO_Init+0x318>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x20a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4a      	ldr	r2, [pc, #296]	; (8002220 <HAL_GPIO_Init+0x31c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x206>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a49      	ldr	r2, [pc, #292]	; (8002224 <HAL_GPIO_Init+0x320>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x202>
 8002102:	2306      	movs	r3, #6
 8002104:	e00c      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 8002106:	2307      	movs	r3, #7
 8002108:	e00a      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 800210a:	2305      	movs	r3, #5
 800210c:	e008      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 800210e:	2304      	movs	r3, #4
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 8002112:	2303      	movs	r3, #3
 8002114:	e004      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 8002116:	2302      	movs	r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x21c>
 800211e:	2300      	movs	r3, #0
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f002 0203 	and.w	r2, r2, #3
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	4093      	lsls	r3, r2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002130:	4935      	ldr	r1, [pc, #212]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002162:	4a31      	ldr	r2, [pc, #196]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_GPIO_Init+0x324>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_GPIO_Init+0x324>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f67f ae96 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40021400 	.word	0x40021400
 8002224:	40021800 	.word	0x40021800
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e001      	b.n	800224e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	b08f      	sub	sp, #60	; 0x3c
 8002292:	af0a      	add	r7, sp, #40	; 0x28
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e116      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f006 fdc6 	bl	8008e4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 ff15 	bl	800610e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	687e      	ldr	r6, [r7, #4]
 80022ec:	466d      	mov	r5, sp
 80022ee:	f106 0410 	add.w	r4, r6, #16
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002302:	1d33      	adds	r3, r6, #4
 8002304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f003 fdec 	bl	8005ee4 <USB_CoreInit>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0d7      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f003 ff03 	bl	8006130 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e04a      	b.n	80023c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	333d      	adds	r3, #61	; 0x3d
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	b298      	uxth	r0, r3
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3342      	adds	r3, #66	; 0x42
 800236c:	4602      	mov	r2, r0
 800236e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3348      	adds	r3, #72	; 0x48
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3af      	bcc.n	8002330 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e044      	b.n	8002460 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d3b5      	bcc.n	80023d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	687e      	ldr	r6, [r7, #4]
 8002472:	466d      	mov	r5, sp
 8002474:	f106 0410 	add.w	r4, r6, #16
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002484:	e885 0003 	stmia.w	r5, {r0, r1}
 8002488:	1d33      	adds	r3, r6, #4
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f003 fe79 	bl	8006184 <USB_DevInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e014      	b.n	80024ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f001 f879 	bl	80035b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 feb4 	bl	8007234 <USB_DevDisconnect>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Start+0x1c>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e020      	b.n	8002534 <HAL_PCD_Start+0x5e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d109      	bne.n	8002516 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fde6 	bl	80060ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f004 fe64 	bl	80071f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08d      	sub	sp, #52	; 0x34
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 ff22 	bl	800739c <USB_GetMode>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 83ca 	bne.w	8002cf4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fe86 	bl	8007276 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 83c0 	beq.w	8002cf2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fe7d 	bl	8007276 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d107      	bne.n	8002596 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f002 0202 	and.w	r2, r2, #2
 8002594:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fe6b 	bl	8007276 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d161      	bne.n	800266e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0210 	bic.w	r2, r2, #16
 80025b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	0c5b      	lsrs	r3, r3, #17
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d124      	bne.n	8002630 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d035      	beq.n	800265e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6a38      	ldr	r0, [r7, #32]
 8002606:	f004 fcd1 	bl	8006fac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002616:	441a      	add	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002628:	441a      	add	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	619a      	str	r2, [r3, #24]
 800262e:	e016      	b.n	800265e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	0c5b      	lsrs	r3, r3, #17
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	2b06      	cmp	r3, #6
 800263a:	d110      	bne.n	800265e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002642:	2208      	movs	r2, #8
 8002644:	4619      	mov	r1, r3
 8002646:	6a38      	ldr	r0, [r7, #32]
 8002648:	f004 fcb0 	bl	8006fac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002658:	441a      	add	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0210 	orr.w	r2, r2, #16
 800266c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fdff 	bl	8007276 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002682:	d16e      	bne.n	8002762 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fe05 	bl	800729c <USB_ReadDevAllOutEpInterrupt>
 8002692:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002694:	e062      	b.n	800275c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d057      	beq.n	8002750 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fe2a 	bl	8007304 <USB_ReadDevOutEPInterrupt>
 80026b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	461a      	mov	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fdc5 	bl	8003260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00c      	beq.n	80026fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	2308      	movs	r3, #8
 80026f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 febf 	bl	8003478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	461a      	mov	r2, r3
 8002712:	2310      	movs	r3, #16
 8002714:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	2320      	movs	r3, #32
 8002730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3301      	adds	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d199      	bne.n	8002696 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fd85 	bl	8007276 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002776:	f040 80c0 	bne.w	80028fa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fda6 	bl	80072d0 <USB_ReadDevAllInEpInterrupt>
 8002784:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800278a:	e0b2      	b.n	80028f2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a7 	beq.w	80028e6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 fdcc 	bl	8007340 <USB_ReadDevInEPInterrupt>
 80027a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d057      	beq.n	8002864 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69f9      	ldr	r1, [r7, #28]
 80027d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d4:	4013      	ands	r3, r2
 80027d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e4:	461a      	mov	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d132      	bne.n	8002858 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3348      	adds	r3, #72	; 0x48
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4403      	add	r3, r0
 8002812:	3344      	adds	r3, #68	; 0x44
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4419      	add	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	3348      	adds	r3, #72	; 0x48
 8002828:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d113      	bne.n	8002858 <HAL_PCD_IRQHandler+0x31c>
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3350      	adds	r3, #80	; 0x50
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002850:	461a      	mov	r2, r3
 8002852:	2101      	movs	r1, #1
 8002854:	f004 fdd4 	bl	8007400 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f006 fb75 	bl	8008f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	461a      	mov	r2, r3
 800287c:	2308      	movs	r3, #8
 800287e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	461a      	mov	r2, r3
 8002898:	2310      	movs	r3, #16
 800289a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b2:	461a      	mov	r2, r3
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ce:	461a      	mov	r2, r3
 80028d0:	2302      	movs	r3, #2
 80028d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fc30 	bl	8003146 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	3301      	adds	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f af49 	bne.w	800278c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fcb9 	bl	8007276 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800290a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800290e:	d122      	bne.n	8002956 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f006 fd45 	bl	80093c8 <HAL_PCDEx_LPM_Callback>
 800293e:	e002      	b.n	8002946 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f006 fb7b 	bl	800903c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fc8b 	bl	8007276 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800296a:	d112      	bne.n	8002992 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d102      	bne.n	8002982 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f006 fb37 	bl	8008ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002990:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fc6d 	bl	8007276 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d121      	bne.n	80029ec <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80029b6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d111      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	f003 020f 	and.w	r2, r3, #15
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029dc:	2101      	movs	r1, #1
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 fcf2 	bl	80093c8 <HAL_PCDEx_LPM_Callback>
 80029e4:	e002      	b.n	80029ec <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f006 fb02 	bl	8008ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fc40 	bl	8007276 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	f040 80c7 	bne.w	8002b92 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fd0e 	bl	8006440 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	e056      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4e:	0151      	lsls	r1, r2, #5
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	440a      	add	r2, r1
 8002a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a5c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6e:	0151      	lsls	r1, r2, #5
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	440a      	add	r2, r1
 8002a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa2:	0151      	lsls	r1, r2, #5
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3a3      	bcc.n	8002a2a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002af4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0e:	f043 030b 	orr.w	r3, r3, #11
 8002b12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b24:	f043 030b 	orr.w	r3, r3, #11
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	e015      	b.n	8002b58 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b52:	f043 030b 	orr.w	r3, r3, #11
 8002b56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f004 fc3f 	bl	8007400 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fb6d 	bl	8007276 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	d124      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 fc03 	bl	80073b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fca3 	bl	8006502 <USB_GetDevSpeed>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	f000 fdfe 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f003 f9e6 	bl	8005fa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f006 f9de 	bl	8008f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 fb3d 	bl	8007276 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d10a      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f006 f9bb 	bl	8008f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f002 0208 	and.w	r2, r2, #8
 8002c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fb28 	bl	8007276 <USB_ReadInterrupts>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c30:	d10f      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f006 fa1d 	bl	800907c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fb0d 	bl	8007276 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c66:	d10f      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f006 f9f0 	bl	8009058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 faf2 	bl	8007276 <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f006 f9fe 	bl	80090a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 fadc 	bl	8007276 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d115      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f006 f9ee 	bl	80090bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	e000      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002cf2:	bf00      	nop
    }
  }
}
 8002cf4:	3734      	adds	r7, #52	; 0x34
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}

08002cfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_PCD_SetAddress+0x1a>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e013      	b.n	8002d3c <HAL_PCD_SetAddress+0x42>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f004 fa3a 	bl	80071a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	70fb      	strb	r3, [r7, #3]
 8002d56:	460b      	mov	r3, r1
 8002d58:	803b      	strh	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da0f      	bge.n	8002d8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 020f 	and.w	r2, r3, #15
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	705a      	strb	r2, [r3, #1]
 8002d88:	e00f      	b.n	8002daa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002db6:	883a      	ldrh	r2, [r7, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	78ba      	ldrb	r2, [r7, #2]
 8002dc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dd4:	78bb      	ldrb	r3, [r7, #2]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d102      	bne.n	8002de0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_PCD_EP_Open+0xaa>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e00e      	b.n	8002e0c <HAL_PCD_EP_Open+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fba5 	bl	800654c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	da0f      	bge.n	8002e48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	3338      	adds	r3, #56	; 0x38
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	705a      	strb	r2, [r3, #1]
 8002e46:	e00f      	b.n	8002e68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_PCD_EP_Close+0x6e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e00e      	b.n	8002ea0 <HAL_PCD_EP_Close+0x8c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fbe3 	bl	800665c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	3304      	adds	r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	7afb      	ldrb	r3, [r7, #11]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	f003 febe 	bl	8006c9c <USB_EP0StartXfer>
 8002f20:	e008      	b.n	8002f34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6979      	ldr	r1, [r7, #20]
 8002f30:	f003 fc70 	bl	8006814 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	3338      	adds	r3, #56	; 0x38
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7e:	7afb      	ldrb	r3, [r7, #11]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f98:	7afb      	ldrb	r3, [r7, #11]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	f003 fe74 	bl	8006c9c <USB_EP0StartXfer>
 8002fb4:	e008      	b.n	8002fc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6979      	ldr	r1, [r7, #20]
 8002fc4:	f003 fc26 	bl	8006814 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d901      	bls.n	8002ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e050      	b.n	8003092 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0f      	bge.n	8003018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	3338      	adds	r3, #56	; 0x38
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	705a      	strb	r2, [r3, #1]
 8003016:	e00d      	b.n	8003034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_EP_SetStall+0x82>
 8003050:	2302      	movs	r3, #2
 8003052:	e01e      	b.n	8003092 <HAL_PCD_EP_SetStall+0xc0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 ffcb 	bl	8006ffe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003082:	461a      	mov	r2, r3
 8003084:	f004 f9bc 	bl	8007400 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d901      	bls.n	80030b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e042      	b.n	800313e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	da0f      	bge.n	80030e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 020f 	and.w	r2, r3, #15
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3338      	adds	r3, #56	; 0x38
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	705a      	strb	r2, [r3, #1]
 80030de:	e00f      	b.n	8003100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_PCD_EP_ClrStall+0x86>
 800311c:	2302      	movs	r3, #2
 800311e:	e00e      	b.n	800313e <HAL_PCD_EP_ClrStall+0xa4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 ffd3 	bl	80070da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b08a      	sub	sp, #40	; 0x28
 800314a:	af02      	add	r7, sp, #8
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3338      	adds	r3, #56	; 0x38
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d901      	bls.n	800317e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06c      	b.n	8003258 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	429a      	cmp	r2, r3
 8003192:	d902      	bls.n	800319a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3303      	adds	r3, #3
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a2:	e02b      	b.n	80031fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d902      	bls.n	80031c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	3303      	adds	r3, #3
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68d9      	ldr	r1, [r3, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f003 feaf 	bl	8006f42 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	441a      	add	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	b29b      	uxth	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	429a      	cmp	r2, r3
 8003210:	d809      	bhi.n	8003226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321a:	429a      	cmp	r2, r3
 800321c:	d203      	bcs.n	8003226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1be      	bne.n	80031a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	429a      	cmp	r2, r3
 8003230:	d811      	bhi.n	8003256 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	43db      	mvns	r3, r3
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003252:	4013      	ands	r3, r2
 8003254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	3304      	adds	r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 80a0 	bne.w	80033d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d015      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a72      	ldr	r2, [pc, #456]	; (8003470 <PCD_EP_OutXfrComplete_int+0x210>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f240 80dd 	bls.w	8003466 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80d7 	beq.w	8003466 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e0cb      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e4:	461a      	mov	r2, r3
 80032e6:	2320      	movs	r3, #32
 80032e8:	6093      	str	r3, [r2, #8]
 80032ea:	e0bc      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 80b7 	bne.w	8003466 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <PCD_EP_OutXfrComplete_int+0x210>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d90f      	bls.n	8003320 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	461a      	mov	r2, r3
 8003318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331c:	6093      	str	r3, [r2, #8]
 800331e:	e0a2      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003332:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	440b      	add	r3, r1
 800333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003346:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4403      	add	r3, r0
 8003356:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800335a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4419      	add	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003398:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d114      	bne.n	80033ca <PCD_EP_OutXfrComplete_int+0x16a>
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d108      	bne.n	80033ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033c2:	461a      	mov	r2, r3
 80033c4:	2101      	movs	r1, #1
 80033c6:	f004 f81b 	bl	8007400 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f005 fda1 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
 80033d6:	e046      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <PCD_EP_OutXfrComplete_int+0x214>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d124      	bne.n	800342a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fc:	6093      	str	r3, [r2, #8]
 80033fe:	e032      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2320      	movs	r3, #32
 800341a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f005 fd78 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
 8003428:	e01d      	b.n	8003466 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d114      	bne.n	800345a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003452:	461a      	mov	r2, r3
 8003454:	2100      	movs	r1, #0
 8003456:	f003 ffd3 	bl	8007400 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f005 fd59 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	4f54300a 	.word	0x4f54300a
 8003474:	4f54310a 	.word	0x4f54310a

08003478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	333c      	adds	r3, #60	; 0x3c
 8003490:	3304      	adds	r3, #4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <PCD_EP_OutSetupPacket_int+0x88>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d90e      	bls.n	80034cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f005 fd11 	bl	8008ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <PCD_EP_OutSetupPacket_int+0x88>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d90c      	bls.n	80034f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ec:	461a      	mov	r2, r3
 80034ee:	2101      	movs	r1, #1
 80034f0:	f003 ff86 	bl	8007400 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	4f54300a 	.word	0x4f54300a

08003504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
 8003510:	4613      	mov	r3, r2
 8003512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003522:	883b      	ldrh	r3, [r7, #0]
 8003524:	0419      	lsls	r1, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	430a      	orrs	r2, r1
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
 8003530:	e028      	b.n	8003584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4413      	add	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e00d      	b.n	8003562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	3340      	adds	r3, #64	; 0x40
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4413      	add	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	3301      	adds	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	3b01      	subs	r3, #1
 8003568:	429a      	cmp	r2, r3
 800356a:	d3ec      	bcc.n	8003546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800356c:	883b      	ldrh	r3, [r7, #0]
 800356e:	0418      	lsls	r0, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	3b01      	subs	r3, #1
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4302      	orrs	r2, r0
 800357c:	3340      	adds	r3, #64	; 0x40
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	f043 0303 	orr.w	r3, r3, #3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cc      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90c      	bls.n	8003638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d119      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e067      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4934      	ldr	r1, [pc, #208]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe faac 	bl	8001c48 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe faa8 	bl	8001c48 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d20c      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003782:	f000 fb7f 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fa0c 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	0800fab8 	.word	0x0800fab8
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	0800fac8 	.word	0x0800fac8

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	0800fac8 	.word	0x0800fac8

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	496c      	ldr	r1, [pc, #432]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003886:	2301      	movs	r3, #1
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003896:	4b64      	ldr	r3, [pc, #400]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	4960      	ldr	r1, [pc, #384]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4955      	ldr	r1, [pc, #340]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e2:	d101      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80038e4:	2301      	movs	r3, #1
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80038f0:	2301      	movs	r3, #1
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003900:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	4946      	ldr	r1, [pc, #280]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d101      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 808a 	beq.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800395a:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003966:	f7fe f96f 	bl	8001c48 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe f96b 	bl	8001c48 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e278      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003994:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d028      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039aa:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d114      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe f939 	bl	8001c48 <HAL_GetTick>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe f935 	bl	8001c48 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e240      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ee      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a08:	d114      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	4902      	ldr	r1, [pc, #8]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]
 8003a24:	e00c      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	42470e40 	.word	0x42470e40
 8003a34:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a49      	ldr	r2, [pc, #292]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3e:	6093      	str	r3, [r2, #8]
 8003a40:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	4944      	ldr	r1, [pc, #272]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	4937      	ldr	r1, [pc, #220]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	492e      	ldr	r1, [pc, #184]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d011      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	4926      	ldr	r1, [pc, #152]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad6:	d101      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	491a      	ldr	r1, [pc, #104]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d011      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	4911      	ldr	r1, [pc, #68]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b28:	d101      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d005      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	f040 80ff 	bne.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b46:	f7fe f87f 	bl	8001c48 <HAL_GetTick>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4c:	e00e      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b4e:	f7fe f87b 	bl	8001c48 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d907      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e188      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	424711e0 	.word	0x424711e0
 8003b68:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ea      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d028      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d124      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ba0:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb8:	0e1b      	lsrs	r3, r3, #24
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4961      	ldr	r1, [pc, #388]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d035      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d130      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c16:	4b54      	ldr	r3, [pc, #336]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c28:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	019b      	lsls	r3, r3, #6
 8003c40:	431a      	orrs	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	071b      	lsls	r3, r3, #28
 8003c58:	4943      	ldr	r1, [pc, #268]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c66:	f023 021f 	bic.w	r2, r3, #31
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	493d      	ldr	r1, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d029      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d124      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	0f1b      	lsrs	r3, r3, #28
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	019b      	lsls	r3, r3, #6
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	071b      	lsls	r3, r3, #28
 8003cd0:	4925      	ldr	r1, [pc, #148]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4917      	ldr	r1, [pc, #92]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fd ff96 	bl	8001c48 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d20:	f7fd ff92 	bl	8001c48 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e09f      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 8095 	bne.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fd ff7c 	bl	8001c48 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d52:	e00f      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d54:	f7fd ff78 	bl	8001c48 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d908      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e085      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470068 	.word	0x42470068
 8003d70:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d80:	d0e8      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02b      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d127      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003daa:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	4928      	ldr	r1, [pc, #160]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003de0:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	3b01      	subs	r3, #1
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	4922      	ldr	r1, [pc, #136]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0e:	d118      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	0e1b      	lsrs	r3, r3, #24
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	4910      	ldr	r1, [pc, #64]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fd fefe 	bl	8001c48 <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e50:	f7fd fefa 	bl	8001c48 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e007      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6e:	d1ef      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3730      	adds	r7, #48	; 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	42470070 	.word	0x42470070

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea0:	4bce      	ldr	r3, [pc, #824]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	f200 818d 	bhi.w	80041c8 <HAL_RCC_GetSysClockFreq+0x344>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <HAL_RCC_GetSysClockFreq+0x30>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	080041c9 	.word	0x080041c9
 8003ebc:	080041c9 	.word	0x080041c9
 8003ec0:	080041c9 	.word	0x080041c9
 8003ec4:	08003eef 	.word	0x08003eef
 8003ec8:	080041c9 	.word	0x080041c9
 8003ecc:	080041c9 	.word	0x080041c9
 8003ed0:	080041c9 	.word	0x080041c9
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	080041c9 	.word	0x080041c9
 8003edc:	080041c9 	.word	0x080041c9
 8003ee0:	080041c9 	.word	0x080041c9
 8003ee4:	08004069 	.word	0x08004069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4bbd      	ldr	r3, [pc, #756]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eea:	61bb      	str	r3, [r7, #24]
       break;
 8003eec:	e16f      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4bbd      	ldr	r3, [pc, #756]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x360>)
 8003ef0:	61bb      	str	r3, [r7, #24]
      break;
 8003ef2:	e16c      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4bb9      	ldr	r3, [pc, #740]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4bb7      	ldr	r3, [pc, #732]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d053      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4bb4      	ldr	r3, [pc, #720]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	461a      	mov	r2, r3
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	ea02 0400 	and.w	r4, r2, r0
 8003f22:	603c      	str	r4, [r7, #0]
 8003f24:	400b      	ands	r3, r1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	014b      	lsls	r3, r1, #5
 8003f3a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f3e:	0142      	lsls	r2, r0, #5
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	4623      	mov	r3, r4
 8003f46:	1ac0      	subs	r0, r0, r3
 8003f48:	462b      	mov	r3, r5
 8003f4a:	eb61 0103 	sbc.w	r1, r1, r3
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	018b      	lsls	r3, r1, #6
 8003f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f5c:	0182      	lsls	r2, r0, #6
 8003f5e:	1a12      	subs	r2, r2, r0
 8003f60:	eb63 0301 	sbc.w	r3, r3, r1
 8003f64:	f04f 0000 	mov.w	r0, #0
 8003f68:	f04f 0100 	mov.w	r1, #0
 8003f6c:	00d9      	lsls	r1, r3, #3
 8003f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f72:	00d0      	lsls	r0, r2, #3
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4621      	mov	r1, r4
 8003f7a:	1852      	adds	r2, r2, r1
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	eb43 0101 	adc.w	r1, r3, r1
 8003f82:	460b      	mov	r3, r1
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0259      	lsls	r1, r3, #9
 8003f8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f92:	0250      	lsls	r0, r2, #9
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	f7fc f936 	bl	8000214 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e04c      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb2:	4b8a      	ldr	r3, [pc, #552]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	ea02 0a00 	and.w	sl, r2, r0
 8003fca:	ea03 0b01 	and.w	fp, r3, r1
 8003fce:	4650      	mov	r0, sl
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	014b      	lsls	r3, r1, #5
 8003fdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fe0:	0142      	lsls	r2, r0, #5
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	ebb0 000a 	subs.w	r0, r0, sl
 8003fea:	eb61 010b 	sbc.w	r1, r1, fp
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	018b      	lsls	r3, r1, #6
 8003ff8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ffc:	0182      	lsls	r2, r0, #6
 8003ffe:	1a12      	subs	r2, r2, r0
 8004000:	eb63 0301 	sbc.w	r3, r3, r1
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	00d9      	lsls	r1, r3, #3
 800400e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004012:	00d0      	lsls	r0, r2, #3
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	eb12 020a 	adds.w	r2, r2, sl
 800401c:	eb43 030b 	adc.w	r3, r3, fp
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	0299      	lsls	r1, r3, #10
 800402a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800402e:	0290      	lsls	r0, r2, #10
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	461a      	mov	r2, r3
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f7fc f8e8 	bl	8000214 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404c:	4b63      	ldr	r3, [pc, #396]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	61bb      	str	r3, [r7, #24]
      break;
 8004066:	e0b2      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b5a      	ldr	r3, [pc, #360]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04d      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	ea02 0800 	and.w	r8, r2, r0
 8004096:	ea03 0901 	and.w	r9, r3, r1
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	014b      	lsls	r3, r1, #5
 80040a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040ac:	0142      	lsls	r2, r0, #5
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	ebb0 0008 	subs.w	r0, r0, r8
 80040b6:	eb61 0109 	sbc.w	r1, r1, r9
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040c8:	0182      	lsls	r2, r0, #6
 80040ca:	1a12      	subs	r2, r2, r0
 80040cc:	eb63 0301 	sbc.w	r3, r3, r1
 80040d0:	f04f 0000 	mov.w	r0, #0
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	00d9      	lsls	r1, r3, #3
 80040da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040de:	00d0      	lsls	r0, r2, #3
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	eb12 0208 	adds.w	r2, r2, r8
 80040e8:	eb43 0309 	adc.w	r3, r3, r9
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0259      	lsls	r1, r3, #9
 80040f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040fa:	0250      	lsls	r0, r2, #9
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	461a      	mov	r2, r3
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f7fc f882 	bl	8000214 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e04a      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	461a      	mov	r2, r3
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	ea02 0400 	and.w	r4, r2, r0
 8004132:	ea03 0501 	and.w	r5, r3, r1
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	014b      	lsls	r3, r1, #5
 8004144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004148:	0142      	lsls	r2, r0, #5
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	1b00      	subs	r0, r0, r4
 8004150:	eb61 0105 	sbc.w	r1, r1, r5
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	018b      	lsls	r3, r1, #6
 800415e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004162:	0182      	lsls	r2, r0, #6
 8004164:	1a12      	subs	r2, r2, r0
 8004166:	eb63 0301 	sbc.w	r3, r3, r1
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	00d9      	lsls	r1, r3, #3
 8004174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004178:	00d0      	lsls	r0, r2, #3
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	1912      	adds	r2, r2, r4
 8004180:	eb45 0303 	adc.w	r3, r5, r3
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f04f 0100 	mov.w	r1, #0
 800418c:	0299      	lsls	r1, r3, #10
 800418e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004192:	0290      	lsls	r0, r2, #10
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	461a      	mov	r2, r3
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	f7fc f836 	bl	8000214 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_RCC_GetSysClockFreq+0x358>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	0f1b      	lsrs	r3, r3, #28
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	61bb      	str	r3, [r7, #24]
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041ca:	61bb      	str	r3, [r7, #24]
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	69bb      	ldr	r3, [r7, #24]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200

080041e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e28d      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8083 	beq.w	800430e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004208:	4b94      	ldr	r3, [pc, #592]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b04      	cmp	r3, #4
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800421c:	2b08      	cmp	r3, #8
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004220:	4b8e      	ldr	r3, [pc, #568]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422c:	d00c      	beq.n	8004248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422e:	4b8b      	ldr	r3, [pc, #556]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d112      	bne.n	8004260 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004246:	d10b      	bne.n	8004260 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	4b84      	ldr	r3, [pc, #528]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05b      	beq.n	800430c <HAL_RCC_OscConfig+0x124>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d157      	bne.n	800430c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e25a      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x90>
 800426a:	4b7c      	ldr	r3, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7b      	ldr	r2, [pc, #492]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xcc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0xb4>
 8004282:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a75      	ldr	r2, [pc, #468]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a72      	ldr	r2, [pc, #456]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xcc>
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a6e      	ldr	r2, [pc, #440]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6b      	ldr	r2, [pc, #428]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fcc4 	bl	8001c48 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fd fcc0 	bl	8001c48 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e21f      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b61      	ldr	r3, [pc, #388]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xdc>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fcb0 	bl	8001c48 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fd fcac 	bl	8001c48 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e20b      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x104>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d06f      	beq.n	80043fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800431a:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004326:	4b4d      	ldr	r3, [pc, #308]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x186>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e1d3      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4937      	ldr	r1, [pc, #220]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	e03a      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCC_OscConfig+0x278>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fc59 	bl	8001c48 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fc55 	bl	8001c48 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1b4      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4925      	ldr	r1, [pc, #148]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x278>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fc38 	bl	8001c48 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fd fc34 	bl	8001c48 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e193      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d036      	beq.n	8004474 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCC_OscConfig+0x27c>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fd fc18 	bl	8001c48 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441c:	f7fd fc14 	bl	8001c48 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e173      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x234>
 800443a:	e01b      	b.n	8004474 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_OscConfig+0x27c>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fd fc01 	bl	8001c48 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	e00e      	b.n	8004468 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444a:	f7fd fbfd 	bl	8001c48 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d907      	bls.n	8004468 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e15c      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
 800445c:	40023800 	.word	0x40023800
 8004460:	42470000 	.word	0x42470000
 8004464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	4b8a      	ldr	r3, [pc, #552]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ea      	bne.n	800444a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8097 	beq.w	80045b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004486:	4b83      	ldr	r3, [pc, #524]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b7f      	ldr	r3, [pc, #508]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a7e      	ldr	r2, [pc, #504]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b7c      	ldr	r3, [pc, #496]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b79      	ldr	r3, [pc, #484]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b76      	ldr	r3, [pc, #472]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a75      	ldr	r2, [pc, #468]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7fd fbbd 	bl	8001c48 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fd fbb9 	bl	8001c48 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e118      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x31e>
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a65      	ldr	r2, [pc, #404]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x358>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x340>
 800450e:	4b61      	ldr	r3, [pc, #388]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a60      	ldr	r2, [pc, #384]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x358>
 8004528:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a59      	ldr	r2, [pc, #356]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a56      	ldr	r2, [pc, #344]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fb7e 	bl	8001c48 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd fb7a 	bl	8001c48 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0d7      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ee      	beq.n	8004550 <HAL_RCC_OscConfig+0x368>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fd fb68 	bl	8001c48 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fd fb64 	bl	8001c48 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0c1      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ee      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80ad 	beq.w	8004714 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d060      	beq.n	8004688 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d145      	bne.n	800465a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b33      	ldr	r3, [pc, #204]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fb38 	bl	8001c48 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd fb34 	bl	8001c48 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e093      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	491b      	ldr	r1, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fb09 	bl	8001c48 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fb05 	bl	8001c48 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e064      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x452>
 8004658:	e05c      	b.n	8004714 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fd faf2 	bl	8001c48 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fd faee 	bl	8001c48 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04d      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x480>
 8004686:	e045      	b.n	8004714 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e040      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
 8004694:	40023800 	.word	0x40023800
 8004698:	40007000 	.word	0x40007000
 800469c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a0:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_OscConfig+0x538>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d030      	beq.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d129      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d122      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d8:	4293      	cmp	r3, r2
 80046da:	d119      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10f      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07b      	b.n	800482e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d108      	bne.n	8004750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004746:	d009      	beq.n	800475c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	61da      	str	r2, [r3, #28]
 800474e:	e005      	b.n	800475c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd f8a8 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0104 	and.w	r1, r3, #4
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f003 0210 	and.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b088      	sub	sp, #32
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_SPI_Transmit+0x22>
 8004854:	2302      	movs	r3, #2
 8004856:	e126      	b.n	8004aa6 <HAL_SPI_Transmit+0x270>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004860:	f7fd f9f2 	bl	8001c48 <HAL_GetTick>
 8004864:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800487a:	e10b      	b.n	8004a94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_SPI_Transmit+0x52>
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800488c:	e102      	b.n	8004a94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2203      	movs	r2, #3
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d4:	d10f      	bne.n	80048f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d007      	beq.n	8004914 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d14b      	bne.n	80049b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_SPI_Transmit+0xf6>
 8004926:	8afb      	ldrh	r3, [r7, #22]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d13e      	bne.n	80049aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004950:	e02b      	b.n	80049aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d112      	bne.n	8004986 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	86da      	strh	r2, [r3, #54]	; 0x36
 8004984:	e011      	b.n	80049aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004986:	f7fd f95f 	bl	8001c48 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d803      	bhi.n	800499e <HAL_SPI_Transmit+0x168>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_Transmit+0x16e>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049a8:	e074      	b.n	8004a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ce      	bne.n	8004952 <HAL_SPI_Transmit+0x11c>
 80049b4:	e04c      	b.n	8004a50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Transmit+0x18e>
 80049be:	8afb      	ldrh	r3, [r7, #22]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d140      	bne.n	8004a46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ea:	e02c      	b.n	8004a46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d113      	bne.n	8004a22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a20:	e011      	b.n	8004a46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a22:	f7fd f911 	bl	8001c48 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d803      	bhi.n	8004a3a <HAL_SPI_Transmit+0x204>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_Transmit+0x20a>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a44:	e026      	b.n	8004a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1cd      	bne.n	80049ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fbcb 	bl	80051f0 <SPI_EndRxTxTransaction>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e000      	b.n	8004a94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b088      	sub	sp, #32
 8004ab2:	af02      	add	r7, sp, #8
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d112      	bne.n	8004af2 <HAL_SPI_Receive+0x44>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10e      	bne.n	8004af2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f8f1 	bl	8004cd0 <HAL_SPI_TransmitReceive>
 8004aee:	4603      	mov	r3, r0
 8004af0:	e0ea      	b.n	8004cc8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SPI_Receive+0x52>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0e3      	b.n	8004cc8 <HAL_SPI_Receive+0x21a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b08:	f7fd f89e 	bl	8001c48 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d002      	beq.n	8004b20 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b1e:	e0ca      	b.n	8004cb6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Receive+0x7e>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b30:	e0c1      	b.n	8004cb6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2204      	movs	r2, #4
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b78:	d10f      	bne.n	8004b9a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d007      	beq.n	8004bb8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d162      	bne.n	8004c86 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bc0:	e02e      	b.n	8004c20 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f103 020c 	add.w	r2, r3, #12
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bfa:	e011      	b.n	8004c20 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfc:	f7fd f824 	bl	8001c48 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_Receive+0x166>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x16c>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d102      	bne.n	8004c20 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c1e:	e04a      	b.n	8004cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1cb      	bne.n	8004bc2 <HAL_SPI_Receive+0x114>
 8004c2a:	e031      	b.n	8004c90 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d113      	bne.n	8004c62 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	b292      	uxth	r2, r2
 8004c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c60:	e011      	b.n	8004c86 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fc fff1 	bl	8001c48 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Receive+0x1cc>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Receive+0x1d2>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c84:	e017      	b.n	8004cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1cd      	bne.n	8004c2c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa45 	bl	8005124 <SPI_EndRxTransaction>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
 8004cb2:	e000      	b.n	8004cb6 <HAL_SPI_Receive+0x208>
  }

error :
 8004cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x26>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e18a      	b.n	800500c <HAL_SPI_TransmitReceive+0x33c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfe:	f7fc ffa3 	bl	8001c48 <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d00f      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x70>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d107      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x68>
 8004d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d003      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d3e:	e15b      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x82>
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d58:	e14e      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d003      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	887a      	ldrh	r2, [r7, #2]
 8004d96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d007      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d178      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x10a>
 8004dd4:	8b7b      	ldrh	r3, [r7, #26]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d166      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfe:	e053      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d11b      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x176>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d016      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x176>
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d113      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d119      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x1b8>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d014      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e88:	f7fc fede 	bl	8001c48 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d807      	bhi.n	8004ea8 <HAL_SPI_TransmitReceive+0x1d8>
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d003      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ea6:	e0a7      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1a6      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x130>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1a1      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x130>
 8004ebc:	e07c      	b.n	8004fb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x1fc>
 8004ec6:	8b7b      	ldrh	r3, [r7, #26]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d16b      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef2:	e057      	b.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d11c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x26c>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x26c>
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d114      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d119      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x2ae>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d014      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f7e:	f7fc fe63 	bl	8001c48 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d803      	bhi.n	8004f96 <HAL_SPI_TransmitReceive+0x2c6>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d102      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2cc>
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fa2:	e029      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1a2      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x224>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d19d      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f917 	bl	80051f0 <SPI_EndRxTxTransaction>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fd4:	e010      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	e000      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005024:	f7fc fe10 	bl	8001c48 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	4413      	add	r3, r2
 8005032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005034:	f7fc fe08 	bl	8001c48 <HAL_GetTick>
 8005038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	015b      	lsls	r3, r3, #5
 8005040:	0d1b      	lsrs	r3, r3, #20
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800504a:	e054      	b.n	80050f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d050      	beq.n	80050f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005054:	f7fc fdf8 	bl	8001c48 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	429a      	cmp	r2, r3
 8005062:	d902      	bls.n	800506a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d13d      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005082:	d111      	bne.n	80050a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508c:	d004      	beq.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005096:	d107      	bne.n	80050a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b0:	d10f      	bne.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e017      	b.n	8005116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d19b      	bne.n	800504c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000000 	.word	0x20000000

08005124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005138:	d111      	bne.n	800515e <SPI_EndRxTransaction+0x3a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005142:	d004      	beq.n	800514e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d107      	bne.n	800515e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d12a      	bne.n	80051be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d012      	beq.n	8005198 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff49 	bl	8005014 <SPI_WaitFlagStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02d      	beq.n	80051e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e026      	b.n	80051e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	2101      	movs	r1, #1
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff ff36 	bl	8005014 <SPI_WaitFlagStateUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01a      	beq.n	80051e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e013      	b.n	80051e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2101      	movs	r1, #1
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff ff23 	bl	8005014 <SPI_WaitFlagStateUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e000      	b.n	80051e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <SPI_EndRxTxTransaction+0x7c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <SPI_EndRxTxTransaction+0x80>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0d5b      	lsrs	r3, r3, #21
 8005208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521a:	d112      	bne.n	8005242 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2200      	movs	r2, #0
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff fef4 	bl	8005014 <SPI_WaitFlagStateUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3b01      	subs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d0f2      	beq.n	8005242 <SPI_EndRxTxTransaction+0x52>
 800525c:	e000      	b.n	8005260 <SPI_EndRxTxTransaction+0x70>
        break;
 800525e:	bf00      	nop
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000
 8005270:	165e9f81 	.word	0x165e9f81

08005274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e041      	b.n	800530a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc fb5e 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f000 f9ce 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d001      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04e      	b.n	80053ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d01d      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HAL_TIM_Base_Start_IT+0xc8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d010      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e007      	b.n	80053c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0202 	mvn.w	r2, #2
 8005420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8ee 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8e0 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8f1 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0204 	mvn.w	r2, #4
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f8c4 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8b6 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8c7 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0208 	mvn.w	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f89a 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f88c 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f89d 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f870 	bl	8005618 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f862 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f873 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0201 	mvn.w	r2, #1
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb ffd6 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f902 	bl	80057a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f838 	bl	8005640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0220 	mvn.w	r2, #32
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8cc 	bl	8005794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a40      	ldr	r2, [pc, #256]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3d      	ldr	r2, [pc, #244]	; (800576c <TIM_Base_SetConfig+0x118>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <TIM_Base_SetConfig+0x120>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3a      	ldr	r2, [pc, #232]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <TIM_Base_SetConfig+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d027      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2c      	ldr	r2, [pc, #176]	; (800576c <TIM_Base_SetConfig+0x118>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d023      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2b      	ldr	r2, [pc, #172]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <TIM_Base_SetConfig+0x120>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a29      	ldr	r2, [pc, #164]	; (8005778 <TIM_Base_SetConfig+0x124>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a28      	ldr	r2, [pc, #160]	; (800577c <TIM_Base_SetConfig+0x128>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <TIM_Base_SetConfig+0x12c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a26      	ldr	r2, [pc, #152]	; (8005784 <TIM_Base_SetConfig+0x130>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <TIM_Base_SetConfig+0x134>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <TIM_Base_SetConfig+0x138>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <TIM_Base_SetConfig+0x13c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40010400 	.word	0x40010400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40001800 	.word	0x40001800
 800578c:	40001c00 	.word	0x40001c00
 8005790:	40002000 	.word	0x40002000

08005794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e03f      	b.n	800584e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc f8e2 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f9a7 	bl	8005b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08a      	sub	sp, #40	; 0x28
 800585a:	af02      	add	r7, sp, #8
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b20      	cmp	r3, #32
 8005874:	d17c      	bne.n	8005970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_UART_Transmit+0x2c>
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e075      	b.n	8005972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x3e>
 8005890:	2302      	movs	r3, #2
 8005892:	e06e      	b.n	8005972 <HAL_UART_Transmit+0x11c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2221      	movs	r2, #33	; 0x21
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058aa:	f7fc f9cd 	bl	8001c48 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d108      	bne.n	80058d8 <HAL_UART_Transmit+0x82>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e003      	b.n	80058e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058e8:	e02a      	b.n	8005940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f8e2 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e036      	b.n	8005972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	3302      	adds	r3, #2
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	e007      	b.n	8005932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1cf      	bne.n	80058ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f8b2 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08a      	sub	sp, #40	; 0x28
 800597e:	af02      	add	r7, sp, #8
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	f040 808c 	bne.w	8005ab4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Receive+0x2e>
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e084      	b.n	8005ab6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Receive+0x40>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e07d      	b.n	8005ab6 <HAL_UART_Receive+0x13c>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2222      	movs	r2, #34	; 0x22
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d6:	f7fc f937 	bl	8001c48 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	88fa      	ldrh	r2, [r7, #6]
 80059e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d108      	bne.n	8005a04 <HAL_UART_Receive+0x8a>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e003      	b.n	8005a0c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a14:	e043      	b.n	8005a9e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2120      	movs	r1, #32
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f84c 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e042      	b.n	8005ab6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e01f      	b.n	8005a90 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a58:	d007      	beq.n	8005a6a <HAL_UART_Receive+0xf0>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_UART_Receive+0xfe>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e008      	b.n	8005a8a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1b6      	bne.n	8005a16 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	e02c      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d028      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0x30>
 8005ade:	f7fc f8b3 	bl	8001c48 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d21d      	bcs.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005afc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e00f      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d0c3      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	b09f      	sub	sp, #124	; 0x7c
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	68d9      	ldr	r1, [r3, #12]
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	ea40 0301 	orr.w	r3, r0, r1
 8005b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b98:	f021 010c 	bic.w	r1, r1, #12
 8005b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb2:	6999      	ldr	r1, [r3, #24]
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	ea40 0301 	orr.w	r3, r0, r1
 8005bbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4bc5      	ldr	r3, [pc, #788]	; (8005ed8 <UART_SetConfig+0x384>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d004      	beq.n	8005bd2 <UART_SetConfig+0x7e>
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4bc3      	ldr	r3, [pc, #780]	; (8005edc <UART_SetConfig+0x388>)
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d103      	bne.n	8005bda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd2:	f7fd fe19 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8005bd6:	6778      	str	r0, [r7, #116]	; 0x74
 8005bd8:	e002      	b.n	8005be0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bda:	f7fd fe01 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8005bde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be8:	f040 80b6 	bne.w	8005d58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bee:	461c      	mov	r4, r3
 8005bf0:	f04f 0500 	mov.w	r5, #0
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	6439      	str	r1, [r7, #64]	; 0x40
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c04:	1912      	adds	r2, r2, r4
 8005c06:	eb45 0303 	adc.w	r3, r5, r3
 8005c0a:	f04f 0000 	mov.w	r0, #0
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	00d9      	lsls	r1, r3, #3
 8005c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c18:	00d0      	lsls	r0, r2, #3
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	1911      	adds	r1, r2, r4
 8005c20:	6639      	str	r1, [r7, #96]	; 0x60
 8005c22:	416b      	adcs	r3, r5
 8005c24:	667b      	str	r3, [r7, #100]	; 0x64
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	1891      	adds	r1, r2, r2
 8005c32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c34:	415b      	adcs	r3, r3
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c40:	f7fa fae8 	bl	8000214 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4ba5      	ldr	r3, [pc, #660]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	011e      	lsls	r6, r3, #4
 8005c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c54:	461c      	mov	r4, r3
 8005c56:	f04f 0500 	mov.w	r5, #0
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	1891      	adds	r1, r2, r2
 8005c60:	6339      	str	r1, [r7, #48]	; 0x30
 8005c62:	415b      	adcs	r3, r3
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
 8005c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c6a:	1912      	adds	r2, r2, r4
 8005c6c:	eb45 0303 	adc.w	r3, r5, r3
 8005c70:	f04f 0000 	mov.w	r0, #0
 8005c74:	f04f 0100 	mov.w	r1, #0
 8005c78:	00d9      	lsls	r1, r3, #3
 8005c7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c7e:	00d0      	lsls	r0, r2, #3
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	1911      	adds	r1, r2, r4
 8005c86:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c88:	416b      	adcs	r3, r5
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	1891      	adds	r1, r2, r2
 8005c98:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c9a:	415b      	adcs	r3, r3
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ca2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ca6:	f7fa fab5 	bl	8000214 <__aeabi_uldivmod>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4b8c      	ldr	r3, [pc, #560]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2164      	movs	r1, #100	; 0x64
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a87      	ldr	r2, [pc, #540]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd0:	441e      	add	r6, r3
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	1894      	adds	r4, r2, r2
 8005ce0:	623c      	str	r4, [r7, #32]
 8005ce2:	415b      	adcs	r3, r3
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cea:	1812      	adds	r2, r2, r0
 8005cec:	eb41 0303 	adc.w	r3, r1, r3
 8005cf0:	f04f 0400 	mov.w	r4, #0
 8005cf4:	f04f 0500 	mov.w	r5, #0
 8005cf8:	00dd      	lsls	r5, r3, #3
 8005cfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cfe:	00d4      	lsls	r4, r2, #3
 8005d00:	4622      	mov	r2, r4
 8005d02:	462b      	mov	r3, r5
 8005d04:	1814      	adds	r4, r2, r0
 8005d06:	653c      	str	r4, [r7, #80]	; 0x50
 8005d08:	414b      	adcs	r3, r1
 8005d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	461a      	mov	r2, r3
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	61b9      	str	r1, [r7, #24]
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d26:	f7fa fa75 	bl	8000214 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4b6c      	ldr	r3, [pc, #432]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005d30:	fba3 1302 	umull	r1, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	2164      	movs	r1, #100	; 0x64
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	3332      	adds	r3, #50	; 0x32
 8005d42:	4a67      	ldr	r2, [pc, #412]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f003 0207 	and.w	r2, r3, #7
 8005d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4432      	add	r2, r6
 8005d54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d56:	e0b9      	b.n	8005ecc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5a:	461c      	mov	r4, r3
 8005d5c:	f04f 0500 	mov.w	r5, #0
 8005d60:	4622      	mov	r2, r4
 8005d62:	462b      	mov	r3, r5
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	6139      	str	r1, [r7, #16]
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d70:	1912      	adds	r2, r2, r4
 8005d72:	eb45 0303 	adc.w	r3, r5, r3
 8005d76:	f04f 0000 	mov.w	r0, #0
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	00d9      	lsls	r1, r3, #3
 8005d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d84:	00d0      	lsls	r0, r2, #3
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	eb12 0804 	adds.w	r8, r2, r4
 8005d8e:	eb43 0905 	adc.w	r9, r3, r5
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	008b      	lsls	r3, r1, #2
 8005da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005daa:	0082      	lsls	r2, r0, #2
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fa30 	bl	8000214 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b49      	ldr	r3, [pc, #292]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005dba:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	011e      	lsls	r6, r3, #4
 8005dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	1894      	adds	r4, r2, r2
 8005dd0:	60bc      	str	r4, [r7, #8]
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dda:	1812      	adds	r2, r2, r0
 8005ddc:	eb41 0303 	adc.w	r3, r1, r3
 8005de0:	f04f 0400 	mov.w	r4, #0
 8005de4:	f04f 0500 	mov.w	r5, #0
 8005de8:	00dd      	lsls	r5, r3, #3
 8005dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dee:	00d4      	lsls	r4, r2, #3
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	1814      	adds	r4, r2, r0
 8005df6:	64bc      	str	r4, [r7, #72]	; 0x48
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f04f 0100 	mov.w	r1, #0
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	008b      	lsls	r3, r1, #2
 8005e10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e14:	0082      	lsls	r2, r0, #2
 8005e16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e1a:	f7fa f9fb 	bl	8000214 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005e24:	fba3 1302 	umull	r1, r3, r3, r2
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	2164      	movs	r1, #100	; 0x64
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	3332      	adds	r3, #50	; 0x32
 8005e36:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e42:	441e      	add	r6, r3
 8005e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e46:	4618      	mov	r0, r3
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	1894      	adds	r4, r2, r2
 8005e52:	603c      	str	r4, [r7, #0]
 8005e54:	415b      	adcs	r3, r3
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5c:	1812      	adds	r2, r2, r0
 8005e5e:	eb41 0303 	adc.w	r3, r1, r3
 8005e62:	f04f 0400 	mov.w	r4, #0
 8005e66:	f04f 0500 	mov.w	r5, #0
 8005e6a:	00dd      	lsls	r5, r3, #3
 8005e6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e70:	00d4      	lsls	r4, r2, #3
 8005e72:	4622      	mov	r2, r4
 8005e74:	462b      	mov	r3, r5
 8005e76:	eb12 0a00 	adds.w	sl, r2, r0
 8005e7a:	eb43 0b01 	adc.w	fp, r3, r1
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f04f 0100 	mov.w	r1, #0
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	008b      	lsls	r3, r1, #2
 8005e92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e96:	0082      	lsls	r2, r0, #2
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	f7fa f9ba 	bl	8000214 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2164      	movs	r1, #100	; 0x64
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	3332      	adds	r3, #50	; 0x32
 8005eb8:	4a09      	ldr	r2, [pc, #36]	; (8005ee0 <UART_SetConfig+0x38c>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	f003 020f 	and.w	r2, r3, #15
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4432      	add	r2, r6
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	377c      	adds	r7, #124	; 0x7c
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	f107 001c 	add.w	r0, r7, #28
 8005ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d122      	bne.n	8005f42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d105      	bne.n	8005f36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fac0 	bl	80074bc <USB_CoreReset>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e01a      	b.n	8005f78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fab4 	bl	80074bc <USB_CoreReset>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
 8005f6a:	e005      	b.n	8005f78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10b      	bne.n	8005f96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f043 0206 	orr.w	r2, r3, #6
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa2:	b004      	add	sp, #16
 8005fa4:	4770      	bx	lr
	...

08005fa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d165      	bne.n	8006088 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a41      	ldr	r2, [pc, #260]	; (80060c4 <USB_SetTurnaroundTime+0x11c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0x2a>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a40      	ldr	r2, [pc, #256]	; (80060c8 <USB_SetTurnaroundTime+0x120>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d202      	bcs.n	8005fd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fcc:	230f      	movs	r3, #15
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e062      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <USB_SetTurnaroundTime+0x120>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d306      	bcc.n	8005fe8 <USB_SetTurnaroundTime+0x40>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <USB_SetTurnaroundTime+0x124>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d202      	bcs.n	8005fe8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fe2:	230e      	movs	r3, #14
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e057      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <USB_SetTurnaroundTime+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d306      	bcc.n	8005ffe <USB_SetTurnaroundTime+0x56>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <USB_SetTurnaroundTime+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ff8:	230d      	movs	r3, #13
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e04c      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <USB_SetTurnaroundTime+0x128>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0x6c>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a32      	ldr	r2, [pc, #200]	; (80060d4 <USB_SetTurnaroundTime+0x12c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d802      	bhi.n	8006014 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800600e:	230c      	movs	r3, #12
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e041      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <USB_SetTurnaroundTime+0x12c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0x82>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a2e      	ldr	r2, [pc, #184]	; (80060d8 <USB_SetTurnaroundTime+0x130>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d802      	bhi.n	800602a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006024:	230b      	movs	r3, #11
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e036      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <USB_SetTurnaroundTime+0x130>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d906      	bls.n	8006040 <USB_SetTurnaroundTime+0x98>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <USB_SetTurnaroundTime+0x134>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d802      	bhi.n	8006040 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800603a:	230a      	movs	r3, #10
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e02b      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a26      	ldr	r2, [pc, #152]	; (80060dc <USB_SetTurnaroundTime+0x134>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d906      	bls.n	8006056 <USB_SetTurnaroundTime+0xae>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <USB_SetTurnaroundTime+0x138>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d202      	bcs.n	8006056 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006050:	2309      	movs	r3, #9
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e020      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <USB_SetTurnaroundTime+0x138>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d306      	bcc.n	800606c <USB_SetTurnaroundTime+0xc4>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <USB_SetTurnaroundTime+0x13c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d802      	bhi.n	800606c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006066:	2308      	movs	r3, #8
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e015      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <USB_SetTurnaroundTime+0x13c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d906      	bls.n	8006082 <USB_SetTurnaroundTime+0xda>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <USB_SetTurnaroundTime+0x140>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d202      	bcs.n	8006082 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800607c:	2307      	movs	r3, #7
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e00a      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006082:	2306      	movs	r3, #6
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e007      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800608e:	2309      	movs	r3, #9
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e001      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006094:	2309      	movs	r3, #9
 8006096:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	00d8acbf 	.word	0x00d8acbf
 80060c8:	00e4e1c0 	.word	0x00e4e1c0
 80060cc:	00f42400 	.word	0x00f42400
 80060d0:	01067380 	.word	0x01067380
 80060d4:	011a499f 	.word	0x011a499f
 80060d8:	01312cff 	.word	0x01312cff
 80060dc:	014ca43f 	.word	0x014ca43f
 80060e0:	016e3600 	.word	0x016e3600
 80060e4:	01a6ab1f 	.word	0x01a6ab1f
 80060e8:	01e84800 	.word	0x01e84800

080060ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f043 0201 	orr.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d106      	bne.n	800615c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	e00b      	b.n	8006174 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e001      	b.n	8006174 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e003      	b.n	800617c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006174:	2032      	movs	r0, #50	; 0x32
 8006176:	f7fb fd73 	bl	8001c60 <HAL_Delay>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e009      	b.n	80061b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3340      	adds	r3, #64	; 0x40
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0e      	cmp	r3, #14
 80061bc:	d9f2      	bls.n	80061a4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11c      	bne.n	80061fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d2:	f043 0302 	orr.w	r3, r3, #2
 80061d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e005      	b.n	800620a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621c:	4619      	mov	r1, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	461a      	mov	r2, r3
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10c      	bne.n	800624a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006236:	2100      	movs	r1, #0
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f949 	bl	80064d0 <USB_SetDevSpeed>
 800623e:	e008      	b.n	8006252 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f944 	bl	80064d0 <USB_SetDevSpeed>
 8006248:	e003      	b.n	8006252 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800624a:	2103      	movs	r1, #3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f93f 	bl	80064d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006252:	2110      	movs	r1, #16
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8f3 	bl	8006440 <USB_FlushTxFifo>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f911 	bl	800648c <USB_FlushRxFifo>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e043      	b.n	8006326 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d118      	bne.n	80062e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e013      	b.n	80062fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e008      	b.n	80062fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	461a      	mov	r2, r3
 800631a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800631e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3301      	adds	r3, #1
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3b7      	bcc.n	800629e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e043      	b.n	80063bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634a:	d118      	bne.n	800637e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e008      	b.n	8006390 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d3b7      	bcc.n	8006334 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <USB_DevInit+0x2b8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006424:	f043 0304 	orr.w	r3, r3, #4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006438:	b004      	add	sp, #16
 800643a:	4770      	bx	lr
 800643c:	803c3800 	.word	0x803c3800

08006440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a09      	ldr	r2, [pc, #36]	; (8006488 <USB_FlushTxFifo+0x48>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d901      	bls.n	800646c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b20      	cmp	r3, #32
 8006476:	d0f0      	beq.n	800645a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	00030d40 	.word	0x00030d40

0800648c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2210      	movs	r2, #16
 800649c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <USB_FlushRxFifo+0x40>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e006      	b.n	80064be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d0f0      	beq.n	800649e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	00030d40 	.word	0x00030d40

080064d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b087      	sub	sp, #28
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0306 	and.w	r3, r3, #6
 800651a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
 8006526:	e00a      	b.n	800653e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d002      	beq.n	8006534 <USB_GetDevSpeed+0x32>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d102      	bne.n	800653a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006534:	2302      	movs	r3, #2
 8006536:	75fb      	strb	r3, [r7, #23]
 8006538:	e001      	b.n	800653e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800653a:	230f      	movs	r3, #15
 800653c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d13a      	bne.n	80065de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f303 	lsl.w	r3, r1, r3
 800657e:	b29b      	uxth	r3, r3
 8006580:	68f9      	ldr	r1, [r7, #12]
 8006582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006586:	4313      	orrs	r3, r2
 8006588:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d155      	bne.n	800664c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	78db      	ldrb	r3, [r3, #3]
 80065ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	059b      	lsls	r3, r3, #22
 80065c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065c4:	4313      	orrs	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e036      	b.n	800664c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	2101      	movs	r1, #1
 80065f0:	fa01 f303 	lsl.w	r3, r1, r3
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11a      	bne.n	800664c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	78db      	ldrb	r3, [r3, #3]
 8006630:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006632:	430b      	orrs	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d161      	bne.n	800673c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800668a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800668e:	d11f      	bne.n	80066d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	2101      	movs	r1, #1
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f0:	4013      	ands	r3, r2
 80066f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	b29b      	uxth	r3, r3
 800670c:	43db      	mvns	r3, r3
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006714:	4013      	ands	r3, r2
 8006716:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	0159      	lsls	r1, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	440b      	add	r3, r1
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	4619      	mov	r1, r3
 8006734:	4b35      	ldr	r3, [pc, #212]	; (800680c <USB_DeactivateEndpoint+0x1b0>)
 8006736:	4013      	ands	r3, r2
 8006738:	600b      	str	r3, [r1, #0]
 800673a:	e060      	b.n	80067fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006752:	d11f      	bne.n	8006794 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006772:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006792:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	2101      	movs	r1, #1
 80067a6:	fa01 f303 	lsl.w	r3, r1, r3
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	43db      	mvns	r3, r3
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b4:	4013      	ands	r3, r2
 80067b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f303 	lsl.w	r3, r1, r3
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	43db      	mvns	r3, r3
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d8:	4013      	ands	r3, r2
 80067da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0159      	lsls	r1, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	440b      	add	r3, r1
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	4619      	mov	r1, r3
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <USB_DeactivateEndpoint+0x1b4>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	ec337800 	.word	0xec337800
 8006810:	eff37800 	.word	0xeff37800

08006814 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	; 0x28
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	f040 815c 	bne.w	8006aee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d132      	bne.n	80068a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006858:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800685c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006860:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	440a      	add	r2, r1
 8006878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006880:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	440a      	add	r2, r1
 8006898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689c:	0cdb      	lsrs	r3, r3, #19
 800689e:	04db      	lsls	r3, r3, #19
 80068a0:	6113      	str	r3, [r2, #16]
 80068a2:	e074      	b.n	800698e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068be:	0cdb      	lsrs	r3, r3, #19
 80068c0:	04db      	lsls	r3, r3, #19
 80068c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6959      	ldr	r1, [r3, #20]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	440b      	add	r3, r1
 8006900:	1e59      	subs	r1, r3, #1
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	fbb1 f3f3 	udiv	r3, r1, r3
 800690a:	04d9      	lsls	r1, r3, #19
 800690c:	4b9d      	ldr	r3, [pc, #628]	; (8006b84 <USB_EPStartXfer+0x370>)
 800690e:	400b      	ands	r3, r1
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	0148      	lsls	r0, r1, #5
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	4401      	add	r1, r0
 8006918:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800691c:	4313      	orrs	r3, r2
 800691e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006936:	69b9      	ldr	r1, [r7, #24]
 8006938:	0148      	lsls	r0, r1, #5
 800693a:	69f9      	ldr	r1, [r7, #28]
 800693c:	4401      	add	r1, r0
 800693e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006942:	4313      	orrs	r3, r2
 8006944:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	78db      	ldrb	r3, [r3, #3]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d11f      	bne.n	800698e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006968:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800696c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800698c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d14b      	bne.n	8006a2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	461a      	mov	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	78db      	ldrb	r3, [r3, #3]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d128      	bne.n	8006a0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d110      	bne.n	80069ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e00f      	b.n	8006a0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e12f      	b.n	8006c8c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	78db      	ldrb	r3, [r3, #3]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d015      	beq.n	8006a80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8117 	beq.w	8006c8c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	2101      	movs	r1, #1
 8006a70:	fa01 f303 	lsl.w	r3, r1, r3
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	634b      	str	r3, [r1, #52]	; 0x34
 8006a7e:	e105      	b.n	8006c8c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d110      	bne.n	8006ab2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e00f      	b.n	8006ad2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	68d9      	ldr	r1, [r3, #12]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	b298      	uxth	r0, r3
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fa2b 	bl	8006f42 <USB_WritePacket>
 8006aec:	e0ce      	b.n	8006c8c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b08:	0cdb      	lsrs	r3, r3, #19
 8006b0a:	04db      	lsls	r3, r3, #19
 8006b0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d126      	bne.n	8006b88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	0148      	lsls	r0, r1, #5
 8006b54:	69f9      	ldr	r1, [r7, #28]
 8006b56:	4401      	add	r1, r0
 8006b58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b7e:	6113      	str	r3, [r2, #16]
 8006b80:	e036      	b.n	8006bf0 <USB_EPStartXfer+0x3dc>
 8006b82:	bf00      	nop
 8006b84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	8afb      	ldrh	r3, [r7, #22]
 8006bae:	04d9      	lsls	r1, r3, #19
 8006bb0:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <USB_EPStartXfer+0x484>)
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	0148      	lsls	r0, r1, #5
 8006bb8:	69f9      	ldr	r1, [r7, #28]
 8006bba:	4401      	add	r1, r0
 8006bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	8af9      	ldrh	r1, [r7, #22]
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	0148      	lsls	r0, r1, #5
 8006be4:	69f9      	ldr	r1, [r7, #28]
 8006be6:	4401      	add	r1, r0
 8006be8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bec:	4313      	orrs	r3, r2
 8006bee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d10d      	bne.n	8006c12 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	68d9      	ldr	r1, [r3, #12]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	460a      	mov	r2, r1
 8006c10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d128      	bne.n	8006c6c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d110      	bne.n	8006c4c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	e00f      	b.n	8006c6c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	1ff80000 	.word	0x1ff80000

08006c9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	f040 80cd 	bne.w	8006e58 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d132      	bne.n	8006d2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	0cdb      	lsrs	r3, r3, #19
 8006d26:	04db      	lsls	r3, r3, #19
 8006d28:	6113      	str	r3, [r2, #16]
 8006d2a:	e04e      	b.n	8006dca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	0cdb      	lsrs	r3, r3, #19
 8006d48:	04db      	lsls	r3, r3, #19
 8006d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	695a      	ldr	r2, [r3, #20]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d903      	bls.n	8006d84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	0148      	lsls	r0, r1, #5
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	4401      	add	r1, r0
 8006dc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d11e      	bne.n	8006e0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	461a      	mov	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e092      	b.n	8006f34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d07e      	beq.n	8006f34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	2101      	movs	r1, #1
 8006e48:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4c:	6979      	ldr	r1, [r7, #20]
 8006e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e52:	4313      	orrs	r3, r2
 8006e54:	634b      	str	r3, [r1, #52]	; 0x34
 8006e56:	e06d      	b.n	8006f34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e72:	0cdb      	lsrs	r3, r3, #19
 8006e74:	04db      	lsls	r3, r3, #19
 8006e76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e9a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee2:	6939      	ldr	r1, [r7, #16]
 8006ee4:	0148      	lsls	r0, r1, #5
 8006ee6:	6979      	ldr	r1, [r7, #20]
 8006ee8:	4401      	add	r1, r0
 8006eea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10d      	bne.n	8006f14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	68d9      	ldr	r1, [r3, #12]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	460a      	mov	r2, r1
 8006f12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b089      	sub	sp, #36	; 0x24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	461a      	mov	r2, r3
 8006f50:	460b      	mov	r3, r1
 8006f52:	71fb      	strb	r3, [r7, #7]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006f60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11a      	bne.n	8006f9e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f68:	88bb      	ldrh	r3, [r7, #4]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e00f      	b.n	8006f96 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	031a      	lsls	r2, r3, #12
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f82:	461a      	mov	r2, r3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	3301      	adds	r3, #1
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d3eb      	bcc.n	8006f76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3724      	adds	r7, #36	; 0x24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b089      	sub	sp, #36	; 0x24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	3303      	adds	r3, #3
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e00b      	b.n	8006fe8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d3ef      	bcc.n	8006fd0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3724      	adds	r7, #36	; 0x24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d12c      	bne.n	8007074 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	db12      	blt.n	8007052 <USB_EPSetStall+0x54>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007050:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e02b      	b.n	80070cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	db12      	blt.n	80070ac <USB_EPSetStall+0xae>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d128      	bne.n	8007148 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007114:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	78db      	ldrb	r3, [r3, #3]
 800711a:	2b03      	cmp	r3, #3
 800711c:	d003      	beq.n	8007126 <USB_EPClearStall+0x4c>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	78db      	ldrb	r3, [r3, #3]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d138      	bne.n	8007198 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e027      	b.n	8007198 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007166:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	78db      	ldrb	r3, [r3, #3]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d003      	beq.n	8007178 <USB_EPClearStall+0x9e>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d10f      	bne.n	8007198 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007196:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800720c:	f023 0303 	bic.w	r3, r3, #3
 8007210:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007220:	f023 0302 	bic.w	r3, r3, #2
 8007224:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007262:	f043 0302 	orr.w	r3, r3, #2
 8007266:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4013      	ands	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4013      	ands	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	0c1b      	lsrs	r3, r3, #16
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4013      	ands	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	b29b      	uxth	r3, r3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	4013      	ands	r3, r2
 8007330:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007332:	68bb      	ldr	r3, [r7, #8]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
 8007370:	01db      	lsls	r3, r3, #7
 8007372:	b2db      	uxtb	r3, r3
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4013      	ands	r3, r2
 800738c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800738e:	68bb      	ldr	r3, [r7, #8]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0301 	and.w	r3, r3, #1
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	460b      	mov	r3, r1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	333c      	adds	r3, #60	; 0x3c
 8007416:	3304      	adds	r3, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <USB_EP0_OutStart+0xb8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d90a      	bls.n	800743a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007434:	d101      	bne.n	800743a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e037      	b.n	80074aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	2300      	movs	r3, #0
 8007444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007468:	f043 0318 	orr.w	r3, r3, #24
 800746c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007480:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d10f      	bne.n	80074a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	4f54300a 	.word	0x4f54300a

080074bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a13      	ldr	r2, [pc, #76]	; (8007520 <USB_CoreReset+0x64>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e01b      	b.n	8007512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	daf2      	bge.n	80074c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f043 0201 	orr.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <USB_CoreReset+0x64>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e006      	b.n	8007512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d0f0      	beq.n	80074f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	00030d40 	.word	0x00030d40

08007524 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007530:	2010      	movs	r0, #16
 8007532:	f001 ff97 	bl	8009464 <USBD_static_malloc>
 8007536:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d105      	bne.n	800754a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007546:	2302      	movs	r3, #2
 8007548:	e01b      	b.n	8007582 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7c1b      	ldrb	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2207      	movs	r2, #7
 800755e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007560:	e002      	b.n	8007568 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	220a      	movs	r2, #10
 8007566:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007568:	2304      	movs	r3, #4
 800756a:	2203      	movs	r2, #3
 800756c:	2181      	movs	r1, #129	; 0x81
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fe19 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007596:	2181      	movs	r1, #129	; 0x81
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 fe2a 	bl	80091f2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 ff60 	bl	8009480 <USBD_static_free>
    pdev->pClassData = NULL;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0e8      	b.n	80077ca <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007600:	2b00      	cmp	r3, #0
 8007602:	d046      	beq.n	8007692 <USBD_HID_Setup+0xbe>
 8007604:	2b20      	cmp	r3, #32
 8007606:	f040 80d8 	bne.w	80077ba <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	3b02      	subs	r3, #2
 8007610:	2b09      	cmp	r3, #9
 8007612:	d836      	bhi.n	8007682 <USBD_HID_Setup+0xae>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <USBD_HID_Setup+0x48>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007673 	.word	0x08007673
 8007620:	08007653 	.word	0x08007653
 8007624:	08007683 	.word	0x08007683
 8007628:	08007683 	.word	0x08007683
 800762c:	08007683 	.word	0x08007683
 8007630:	08007683 	.word	0x08007683
 8007634:	08007683 	.word	0x08007683
 8007638:	08007683 	.word	0x08007683
 800763c:	08007661 	.word	0x08007661
 8007640:	08007645 	.word	0x08007645
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	885b      	ldrh	r3, [r3, #2]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	601a      	str	r2, [r3, #0]
          break;
 8007650:	e01e      	b.n	8007690 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fa4c 	bl	8008af6 <USBD_CtlSendData>
          break;
 800765e:	e017      	b.n	8007690 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	885b      	ldrh	r3, [r3, #2]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	605a      	str	r2, [r3, #4]
          break;
 8007670:	e00e      	b.n	8007690 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	2201      	movs	r2, #1
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fa3b 	bl	8008af6 <USBD_CtlSendData>
          break;
 8007680:	e006      	b.n	8007690 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f9c5 	bl	8008a14 <USBD_CtlError>
          ret = USBD_FAIL;
 800768a:	2303      	movs	r3, #3
 800768c:	75fb      	strb	r3, [r7, #23]
          break;
 800768e:	bf00      	nop
      }
      break;
 8007690:	e09a      	b.n	80077c8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b0b      	cmp	r3, #11
 8007698:	f200 8086 	bhi.w	80077a8 <USBD_HID_Setup+0x1d4>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <USBD_HID_Setup+0xd0>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076d5 	.word	0x080076d5
 80076a8:	080077b7 	.word	0x080077b7
 80076ac:	080077a9 	.word	0x080077a9
 80076b0:	080077a9 	.word	0x080077a9
 80076b4:	080077a9 	.word	0x080077a9
 80076b8:	080077a9 	.word	0x080077a9
 80076bc:	080076ff 	.word	0x080076ff
 80076c0:	080077a9 	.word	0x080077a9
 80076c4:	080077a9 	.word	0x080077a9
 80076c8:	080077a9 	.word	0x080077a9
 80076cc:	08007757 	.word	0x08007757
 80076d0:	08007781 	.word	0x08007781
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d107      	bne.n	80076f0 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076e0:	f107 030a 	add.w	r3, r7, #10
 80076e4:	2202      	movs	r2, #2
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fa04 	bl	8008af6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076ee:	e063      	b.n	80077b8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f98e 	bl	8008a14 <USBD_CtlError>
            ret = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	75fb      	strb	r3, [r7, #23]
          break;
 80076fc:	e05c      	b.n	80077b8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b22      	cmp	r3, #34	; 0x22
 8007708:	d108      	bne.n	800771c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	2b4a      	cmp	r3, #74	; 0x4a
 8007710:	bf28      	it	cs
 8007712:	234a      	movcs	r3, #74	; 0x4a
 8007714:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007716:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <USBD_HID_Setup+0x200>)
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e015      	b.n	8007748 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	885b      	ldrh	r3, [r3, #2]
 8007720:	0a1b      	lsrs	r3, r3, #8
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b21      	cmp	r3, #33	; 0x21
 8007726:	d108      	bne.n	800773a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007728:	4b2b      	ldr	r3, [pc, #172]	; (80077d8 <USBD_HID_Setup+0x204>)
 800772a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	88db      	ldrh	r3, [r3, #6]
 8007730:	2b09      	cmp	r3, #9
 8007732:	bf28      	it	cs
 8007734:	2309      	movcs	r3, #9
 8007736:	82bb      	strh	r3, [r7, #20]
 8007738:	e006      	b.n	8007748 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f969 	bl	8008a14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	75fb      	strb	r3, [r7, #23]
            break;
 8007746:	e037      	b.n	80077b8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007748:	8abb      	ldrh	r3, [r7, #20]
 800774a:	461a      	mov	r2, r3
 800774c:	6939      	ldr	r1, [r7, #16]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f9d1 	bl	8008af6 <USBD_CtlSendData>
          break;
 8007754:	e030      	b.n	80077b8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d107      	bne.n	8007772 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3308      	adds	r3, #8
 8007766:	2201      	movs	r2, #1
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f9c3 	bl	8008af6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007770:	e022      	b.n	80077b8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f94d 	bl	8008a14 <USBD_CtlError>
            ret = USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	75fb      	strb	r3, [r7, #23]
          break;
 800777e:	e01b      	b.n	80077b8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d106      	bne.n	800779a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007798:	e00e      	b.n	80077b8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 f939 	bl	8008a14 <USBD_CtlError>
            ret = USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
          break;
 80077a6:	e007      	b.n	80077b8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f932 	bl	8008a14 <USBD_CtlError>
          ret = USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	75fb      	strb	r3, [r7, #23]
          break;
 80077b4:	e000      	b.n	80077b8 <USBD_HID_Setup+0x1e4>
          break;
 80077b6:	bf00      	nop
      }
      break;
 80077b8:	e006      	b.n	80077c8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f929 	bl	8008a14 <USBD_CtlError>
      ret = USBD_FAIL;
 80077c2:	2303      	movs	r3, #3
 80077c4:	75fb      	strb	r3, [r7, #23]
      break;
 80077c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200000c8 	.word	0x200000c8
 80077d8:	200000b0 	.word	0x200000b0

080077dc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e013      	b.n	8007824 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d10c      	bne.n	8007822 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	7b1b      	ldrb	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2201      	movs	r2, #1
 8007814:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	2181      	movs	r1, #129	; 0x81
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f001 fd90 	bl	8009342 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800783a:	4b03      	ldr	r3, [pc, #12]	; (8007848 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	20000044 	.word	0x20000044

0800784c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2222      	movs	r2, #34	; 0x22
 8007858:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20000068 	.word	0x20000068

0800786c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2222      	movs	r2, #34	; 0x22
 8007878:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	2000008c 	.word	0x2000008c

0800788c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789e:	2200      	movs	r2, #0
 80078a0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	220a      	movs	r2, #10
 80078bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200000bc 	.word	0x200000bc

080078d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e01f      	b.n	8007928 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	79fa      	ldrb	r2, [r7, #7]
 800791a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f001 fbdb 	bl	80090d8 <USBD_LL_Init>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e016      	b.n	8007976 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	f107 020e 	add.w	r2, r7, #14
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	4602      	mov	r2, r0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fbf2 	bl	8009170 <USBD_LL_Start>
 800798c:	4603      	mov	r3, r0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	4611      	mov	r1, r2
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
  }

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 ffba 	bl	80089a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d01a      	beq.n	8007a86 <USBD_LL_SetupStage+0x72>
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d822      	bhi.n	8007a9a <USBD_LL_SetupStage+0x86>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <USBD_LL_SetupStage+0x4a>
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d00a      	beq.n	8007a72 <USBD_LL_SetupStage+0x5e>
 8007a5c:	e01d      	b.n	8007a9a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa62 	bl	8007f30 <USBD_StdDevReq>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a70:	e020      	b.n	8007ab4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fac6 	bl	800800c <USBD_StdItfReq>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
      break;
 8007a84:	e016      	b.n	8007ab4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fb05 	bl	800809e <USBD_StdEPReq>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
      break;
 8007a98:	e00c      	b.n	8007ab4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007aa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fbc1 	bl	8009230 <USBD_LL_StallEP>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab2:	bf00      	nop
  }

  return ret;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d138      	bne.n	8007b44 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ad8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d14a      	bne.n	8007b7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d913      	bls.n	8007b18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	1ad2      	subs	r2, r2, r3
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	4293      	cmp	r3, r2
 8007b08:	bf28      	it	cs
 8007b0a:	4613      	movcs	r3, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 f81c 	bl	8008b4e <USBD_CtlContinueRx>
 8007b16:	e030      	b.n	8007b7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d10b      	bne.n	8007b3c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 f817 	bl	8008b70 <USBD_CtlSendStatus>
 8007b42:	e01a      	b.n	8007b7a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d114      	bne.n	8007b7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	7afa      	ldrb	r2, [r7, #11]
 8007b66:	4611      	mov	r1, r2
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	4798      	blx	r3
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	e000      	b.n	8007b7c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d16b      	bne.n	8007c70 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3314      	adds	r3, #20
 8007b9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d156      	bne.n	8007c56 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d914      	bls.n	8007bde <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	1ad2      	subs	r2, r2, r3
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 ffae 	bl	8008b2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f001 fbd4 	bl	8009384 <USBD_LL_PrepareReceive>
 8007bdc:	e03b      	b.n	8007c56 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d11c      	bne.n	8007c24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d316      	bcc.n	8007c24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d20f      	bcs.n	8007c24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c04:	2200      	movs	r2, #0
 8007c06:	2100      	movs	r1, #0
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 ff8f 	bl	8008b2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f001 fbb1 	bl	8009384 <USBD_LL_PrepareReceive>
 8007c22:	e018      	b.n	8007c56 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d10b      	bne.n	8007c48 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c48:	2180      	movs	r1, #128	; 0x80
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f001 faf0 	bl	8009230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 ffa0 	bl	8008b96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d122      	bne.n	8007ca6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff fe98 	bl	8007996 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c6e:	e01a      	b.n	8007ca6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d114      	bne.n	8007ca6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	7afa      	ldrb	r2, [r7, #11]
 8007c92:	4611      	mov	r1, r2
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	4798      	blx	r3
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	e000      	b.n	8007ca8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e02f      	b.n	8007d44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00f      	beq.n	8007d0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6852      	ldr	r2, [r2, #4]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	4611      	mov	r1, r2
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d0e:	2340      	movs	r3, #64	; 0x40
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fa46 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2240      	movs	r2, #64	; 0x40
 8007d26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2180      	movs	r1, #128	; 0x80
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fa38 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2240      	movs	r2, #64	; 0x40
 8007d40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d106      	bne.n	8007dba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e012      	b.n	8007e04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d10b      	bne.n	8007e02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e014      	b.n	8007e50 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d10d      	bne.n	8007e4e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e014      	b.n	8007e9c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d10d      	bne.n	8007e9a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	4611      	mov	r1, r2
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6852      	ldr	r2, [r2, #4]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	3301      	adds	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f10:	8a3b      	ldrh	r3, [r7, #16]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	b21a      	sxth	r2, r3
 8007f16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b21b      	sxth	r3, r3
 8007f1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f20:	89fb      	ldrh	r3, [r7, #14]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d005      	beq.n	8007f56 <USBD_StdDevReq+0x26>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d853      	bhi.n	8007ff6 <USBD_StdDevReq+0xc6>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <USBD_StdDevReq+0x3a>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d14f      	bne.n	8007ff6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e04a      	b.n	8008000 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	2b09      	cmp	r3, #9
 8007f70:	d83b      	bhi.n	8007fea <USBD_StdDevReq+0xba>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <USBD_StdDevReq+0x48>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007fcd 	.word	0x08007fcd
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	08007feb 	.word	0x08007feb
 8007f84:	08007fd7 	.word	0x08007fd7
 8007f88:	08007feb 	.word	0x08007feb
 8007f8c:	08007fab 	.word	0x08007fab
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007feb 	.word	0x08007feb
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fb5 	.word	0x08007fb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9de 	bl	8008364 <USBD_GetDescriptor>
          break;
 8007fa8:	e024      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb6d 	bl	800868c <USBD_SetAddress>
          break;
 8007fb2:	e01f      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbac 	bl	8008714 <USBD_SetConfig>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8007fc0:	e018      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc4b 	bl	8008860 <USBD_GetConfig>
          break;
 8007fca:	e013      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc7c 	bl	80088cc <USBD_GetStatus>
          break;
 8007fd4:	e00e      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fcab 	bl	8008934 <USBD_SetFeature>
          break;
 8007fde:	e009      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fcba 	bl	800895c <USBD_ClrFeature>
          break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fd11 	bl	8008a14 <USBD_CtlError>
          break;
 8007ff2:	bf00      	nop
      }
      break;
 8007ff4:	e004      	b.n	8008000 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fd0b 	bl	8008a14 <USBD_CtlError>
      break;
 8007ffe:	bf00      	nop
  }

  return ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d005      	beq.n	8008032 <USBD_StdItfReq+0x26>
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d82f      	bhi.n	800808a <USBD_StdItfReq+0x7e>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <USBD_StdItfReq+0x26>
 800802e:	2b20      	cmp	r3, #32
 8008030:	d12b      	bne.n	800808a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	2b02      	cmp	r3, #2
 800803e:	d81d      	bhi.n	800807c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	889b      	ldrh	r3, [r3, #4]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d813      	bhi.n	8008072 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	88db      	ldrh	r3, [r3, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d110      	bne.n	8008086 <USBD_StdItfReq+0x7a>
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10d      	bne.n	8008086 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fd80 	bl	8008b70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008070:	e009      	b.n	8008086 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fccd 	bl	8008a14 <USBD_CtlError>
          break;
 800807a:	e004      	b.n	8008086 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fcc8 	bl	8008a14 <USBD_CtlError>
          break;
 8008084:	e000      	b.n	8008088 <USBD_StdItfReq+0x7c>
          break;
 8008086:	bf00      	nop
      }
      break;
 8008088:	e004      	b.n	8008094 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fcc1 	bl	8008a14 <USBD_CtlError>
      break;
 8008092:	bf00      	nop
  }

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	889b      	ldrh	r3, [r3, #4]
 80080b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d007      	beq.n	80080ce <USBD_StdEPReq+0x30>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	f200 8145 	bhi.w	800834e <USBD_StdEPReq+0x2b0>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00c      	beq.n	80080e2 <USBD_StdEPReq+0x44>
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	f040 8140 	bne.w	800834e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
      break;
 80080e0:	e13a      	b.n	8008358 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d007      	beq.n	80080fa <USBD_StdEPReq+0x5c>
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f300 8129 	bgt.w	8008342 <USBD_StdEPReq+0x2a4>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d07f      	beq.n	80081f4 <USBD_StdEPReq+0x156>
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d03c      	beq.n	8008172 <USBD_StdEPReq+0xd4>
 80080f8:	e123      	b.n	8008342 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d002      	beq.n	800810c <USBD_StdEPReq+0x6e>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d016      	beq.n	8008138 <USBD_StdEPReq+0x9a>
 800810a:	e02c      	b.n	8008166 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <USBD_StdEPReq+0x90>
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	d00a      	beq.n	800812e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 f887 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008122:	2180      	movs	r1, #128	; 0x80
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f883 	bl	8009230 <USBD_LL_StallEP>
 800812a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800812c:	e020      	b.n	8008170 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fc6f 	bl	8008a14 <USBD_CtlError>
              break;
 8008136:	e01b      	b.n	8008170 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	885b      	ldrh	r3, [r3, #2]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10e      	bne.n	800815e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <USBD_StdEPReq+0xc0>
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d008      	beq.n	800815e <USBD_StdEPReq+0xc0>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	88db      	ldrh	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f869 	bl	8009230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fd06 	bl	8008b70 <USBD_CtlSendStatus>

              break;
 8008164:	e004      	b.n	8008170 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc53 	bl	8008a14 <USBD_CtlError>
              break;
 800816e:	bf00      	nop
          }
          break;
 8008170:	e0ec      	b.n	800834c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d002      	beq.n	8008184 <USBD_StdEPReq+0xe6>
 800817e:	2b03      	cmp	r3, #3
 8008180:	d016      	beq.n	80081b0 <USBD_StdEPReq+0x112>
 8008182:	e030      	b.n	80081e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <USBD_StdEPReq+0x108>
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d00a      	beq.n	80081a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 f84b 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 f847 	bl	8009230 <USBD_LL_StallEP>
 80081a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a4:	e025      	b.n	80081f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fc33 	bl	8008a14 <USBD_CtlError>
              break;
 80081ae:	e020      	b.n	80081f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11b      	bne.n	80081f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 f851 	bl	800926e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fccf 	bl	8008b70 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fc13 	bl	8008a14 <USBD_CtlError>
              break;
 80081ee:	e000      	b.n	80081f2 <USBD_StdEPReq+0x154>
              break;
 80081f0:	bf00      	nop
          }
          break;
 80081f2:	e0ab      	b.n	800834c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d002      	beq.n	8008206 <USBD_StdEPReq+0x168>
 8008200:	2b03      	cmp	r3, #3
 8008202:	d032      	beq.n	800826a <USBD_StdEPReq+0x1cc>
 8008204:	e097      	b.n	8008336 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <USBD_StdEPReq+0x17e>
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d004      	beq.n	800821c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fbfd 	bl	8008a14 <USBD_CtlError>
                break;
 800821a:	e091      	b.n	8008340 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800821c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da0b      	bge.n	800823c <USBD_StdEPReq+0x19e>
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	3310      	adds	r3, #16
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	3304      	adds	r3, #4
 800823a:	e00b      	b.n	8008254 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	3304      	adds	r3, #4
 8008254:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2202      	movs	r2, #2
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc47 	bl	8008af6 <USBD_CtlSendData>
              break;
 8008268:	e06a      	b.n	8008340 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800826a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800826e:	2b00      	cmp	r3, #0
 8008270:	da11      	bge.n	8008296 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	f003 020f 	and.w	r2, r3, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3324      	adds	r3, #36	; 0x24
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d117      	bne.n	80082bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fbc0 	bl	8008a14 <USBD_CtlError>
                  break;
 8008294:	e054      	b.n	8008340 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	f003 020f 	and.w	r2, r3, #15
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fbad 	bl	8008a14 <USBD_CtlError>
                  break;
 80082ba:	e041      	b.n	8008340 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	da0b      	bge.n	80082dc <USBD_StdEPReq+0x23e>
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	3310      	adds	r3, #16
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4413      	add	r3, r2
 80082d8:	3304      	adds	r3, #4
 80082da:	e00b      	b.n	80082f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	3304      	adds	r3, #4
 80082f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <USBD_StdEPReq+0x264>
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b80      	cmp	r3, #128	; 0x80
 8008300:	d103      	bne.n	800830a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	e00e      	b.n	8008328 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 ffcc 	bl	80092ac <USBD_LL_IsStallEP>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e002      	b.n	8008328 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2202      	movs	r2, #2
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fbe1 	bl	8008af6 <USBD_CtlSendData>
              break;
 8008334:	e004      	b.n	8008340 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb6b 	bl	8008a14 <USBD_CtlError>
              break;
 800833e:	bf00      	nop
          }
          break;
 8008340:	e004      	b.n	800834c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fb65 	bl	8008a14 <USBD_CtlError>
          break;
 800834a:	bf00      	nop
      }
      break;
 800834c:	e004      	b.n	8008358 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fb5f 	bl	8008a14 <USBD_CtlError>
      break;
 8008356:	bf00      	nop
  }

  return ret;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	0a1b      	lsrs	r3, r3, #8
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	2b0e      	cmp	r3, #14
 8008386:	f200 8152 	bhi.w	800862e <USBD_GetDescriptor+0x2ca>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <USBD_GetDescriptor+0x2c>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	08008401 	.word	0x08008401
 8008394:	08008419 	.word	0x08008419
 8008398:	08008459 	.word	0x08008459
 800839c:	0800862f 	.word	0x0800862f
 80083a0:	0800862f 	.word	0x0800862f
 80083a4:	080085cf 	.word	0x080085cf
 80083a8:	080085fb 	.word	0x080085fb
 80083ac:	0800862f 	.word	0x0800862f
 80083b0:	0800862f 	.word	0x0800862f
 80083b4:	0800862f 	.word	0x0800862f
 80083b8:	0800862f 	.word	0x0800862f
 80083bc:	0800862f 	.word	0x0800862f
 80083c0:	0800862f 	.word	0x0800862f
 80083c4:	0800862f 	.word	0x0800862f
 80083c8:	080083cd 	.word	0x080083cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ee:	e126      	b.n	800863e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fb0e 	bl	8008a14 <USBD_CtlError>
        err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
      break;
 80083fe:	e11e      	b.n	800863e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
      break;
 8008416:	e112      	b.n	800863e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7c1b      	ldrb	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10d      	bne.n	800843c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	f107 0208 	add.w	r2, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	2202      	movs	r2, #2
 8008438:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800843a:	e100      	b.n	800863e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	f107 0208 	add.w	r2, r7, #8
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	2202      	movs	r2, #2
 8008454:	701a      	strb	r2, [r3, #0]
      break;
 8008456:	e0f2      	b.n	800863e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	885b      	ldrh	r3, [r3, #2]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b05      	cmp	r3, #5
 8008460:	f200 80ac 	bhi.w	80085bc <USBD_GetDescriptor+0x258>
 8008464:	a201      	add	r2, pc, #4	; (adr r2, 800846c <USBD_GetDescriptor+0x108>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	08008485 	.word	0x08008485
 8008470:	080084b9 	.word	0x080084b9
 8008474:	080084ed 	.word	0x080084ed
 8008478:	08008521 	.word	0x08008521
 800847c:	08008555 	.word	0x08008555
 8008480:	08008589 	.word	0x08008589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a6:	e091      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fab2 	bl	8008a14 <USBD_CtlError>
            err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
          break;
 80084b6:	e089      	b.n	80085cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084da:	e077      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa98 	bl	8008a14 <USBD_CtlError>
            err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ea:	e06f      	b.n	80085cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	7c12      	ldrb	r2, [r2, #16]
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850e:	e05d      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa7e 	bl	8008a14 <USBD_CtlError>
            err++;
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	3301      	adds	r3, #1
 800851c:	72fb      	strb	r3, [r7, #11]
          break;
 800851e:	e055      	b.n	80085cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008542:	e043      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa64 	bl	8008a14 <USBD_CtlError>
            err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
          break;
 8008552:	e03b      	b.n	80085cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	7c12      	ldrb	r2, [r2, #16]
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008576:	e029      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa4a 	bl	8008a14 <USBD_CtlError>
            err++;
 8008580:	7afb      	ldrb	r3, [r7, #11]
 8008582:	3301      	adds	r3, #1
 8008584:	72fb      	strb	r3, [r7, #11]
          break;
 8008586:	e021      	b.n	80085cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	7c12      	ldrb	r2, [r2, #16]
 80085a0:	f107 0108 	add.w	r1, r7, #8
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085aa:	e00f      	b.n	80085cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa30 	bl	8008a14 <USBD_CtlError>
            err++;
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	3301      	adds	r3, #1
 80085b8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ba:	e007      	b.n	80085cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa28 	bl	8008a14 <USBD_CtlError>
          err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80085ca:	bf00      	nop
      }
      break;
 80085cc:	e037      	b.n	800863e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7c1b      	ldrb	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	f107 0208 	add.w	r2, r7, #8
 80085e2:	4610      	mov	r0, r2
 80085e4:	4798      	blx	r3
 80085e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085e8:	e029      	b.n	800863e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa11 	bl	8008a14 <USBD_CtlError>
        err++;
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	3301      	adds	r3, #1
 80085f6:	72fb      	strb	r3, [r7, #11]
      break;
 80085f8:	e021      	b.n	800863e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7c1b      	ldrb	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10d      	bne.n	800861e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	f107 0208 	add.w	r2, r7, #8
 800860e:	4610      	mov	r0, r2
 8008610:	4798      	blx	r3
 8008612:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	2207      	movs	r2, #7
 800861a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800861c:	e00f      	b.n	800863e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f9f7 	bl	8008a14 <USBD_CtlError>
        err++;
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	3301      	adds	r3, #1
 800862a:	72fb      	strb	r3, [r7, #11]
      break;
 800862c:	e007      	b.n	800863e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f9ef 	bl	8008a14 <USBD_CtlError>
      err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	bf00      	nop
  }

  if (err != 0U)
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d11e      	bne.n	8008682 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	88db      	ldrh	r3, [r3, #6]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d016      	beq.n	800867a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88da      	ldrh	r2, [r3, #6]
 8008656:	893b      	ldrh	r3, [r7, #8]
 8008658:	4293      	cmp	r3, r2
 800865a:	bf28      	it	cs
 800865c:	4613      	movcs	r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008662:	893b      	ldrh	r3, [r7, #8]
 8008664:	461a      	mov	r2, r3
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa44 	bl	8008af6 <USBD_CtlSendData>
 800866e:	e009      	b.n	8008684 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9ce 	bl	8008a14 <USBD_CtlError>
 8008678:	e004      	b.n	8008684 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa78 	bl	8008b70 <USBD_CtlSendStatus>
 8008680:	e000      	b.n	8008684 <USBD_GetDescriptor+0x320>
    return;
 8008682:	bf00      	nop
  }
}
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d131      	bne.n	8008702 <USBD_SetAddress+0x76>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d12d      	bne.n	8008702 <USBD_SetAddress+0x76>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	2b7f      	cmp	r3, #127	; 0x7f
 80086ac:	d829      	bhi.n	8008702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	885b      	ldrh	r3, [r3, #2]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d104      	bne.n	80086d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f9a3 	bl	8008a14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ce:	e01d      	b.n	800870c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7bfa      	ldrb	r2, [r7, #15]
 80086d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fe11 	bl	8009304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa44 	bl	8008b70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	e009      	b.n	800870c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008700:	e004      	b.n	800870c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f985 	bl	8008a14 <USBD_CtlError>
  }
}
 800870a:	bf00      	nop
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	885b      	ldrh	r3, [r3, #2]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	4b4c      	ldr	r3, [pc, #304]	; (800885c <USBD_SetConfig+0x148>)
 800872a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800872c:	4b4b      	ldr	r3, [pc, #300]	; (800885c <USBD_SetConfig+0x148>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d905      	bls.n	8008740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f96c 	bl	8008a14 <USBD_CtlError>
    return USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e088      	b.n	8008852 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d002      	beq.n	8008752 <USBD_SetConfig+0x3e>
 800874c:	2b03      	cmp	r3, #3
 800874e:	d025      	beq.n	800879c <USBD_SetConfig+0x88>
 8008750:	e071      	b.n	8008836 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008752:	4b42      	ldr	r3, [pc, #264]	; (800885c <USBD_SetConfig+0x148>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01c      	beq.n	8008794 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800875a:	4b40      	ldr	r3, [pc, #256]	; (800885c <USBD_SetConfig+0x148>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008764:	4b3d      	ldr	r3, [pc, #244]	; (800885c <USBD_SetConfig+0x148>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff f91e 	bl	80079ac <USBD_SetClassConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f949 	bl	8008a14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008782:	e065      	b.n	8008850 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9f3 	bl	8008b70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2203      	movs	r2, #3
 800878e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008792:	e05d      	b.n	8008850 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9eb 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 800879a:	e059      	b.n	8008850 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800879c:	4b2f      	ldr	r3, [pc, #188]	; (800885c <USBD_SetConfig+0x148>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d112      	bne.n	80087ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087ac:	4b2b      	ldr	r3, [pc, #172]	; (800885c <USBD_SetConfig+0x148>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087b6:	4b29      	ldr	r3, [pc, #164]	; (800885c <USBD_SetConfig+0x148>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff f911 	bl	80079e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9d4 	bl	8008b70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087c8:	e042      	b.n	8008850 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <USBD_SetConfig+0x148>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d02a      	beq.n	800882e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff f8ff 	bl	80079e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <USBD_SetConfig+0x148>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087f0:	4b1a      	ldr	r3, [pc, #104]	; (800885c <USBD_SetConfig+0x148>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f8d8 	bl	80079ac <USBD_SetClassConfig>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00f      	beq.n	8008826 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f903 	bl	8008a14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff f8e4 	bl	80079e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008824:	e014      	b.n	8008850 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9a2 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 800882c:	e010      	b.n	8008850 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f99e 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 8008834:	e00c      	b.n	8008850 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f8eb 	bl	8008a14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800883e:	4b07      	ldr	r3, [pc, #28]	; (800885c <USBD_SetConfig+0x148>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff f8cd 	bl	80079e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800884a:	2303      	movs	r3, #3
 800884c:	73fb      	strb	r3, [r7, #15]
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000658 	.word	0x20000658

08008860 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88db      	ldrh	r3, [r3, #6]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d004      	beq.n	800887c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f8cd 	bl	8008a14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800887a:	e023      	b.n	80088c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	dc02      	bgt.n	800888e <USBD_GetConfig+0x2e>
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc03      	bgt.n	8008894 <USBD_GetConfig+0x34>
 800888c:	e015      	b.n	80088ba <USBD_GetConfig+0x5a>
 800888e:	2b03      	cmp	r3, #3
 8008890:	d00b      	beq.n	80088aa <USBD_GetConfig+0x4a>
 8008892:	e012      	b.n	80088ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3308      	adds	r3, #8
 800889e:	2201      	movs	r2, #1
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f927 	bl	8008af6 <USBD_CtlSendData>
        break;
 80088a8:	e00c      	b.n	80088c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3304      	adds	r3, #4
 80088ae:	2201      	movs	r2, #1
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f91f 	bl	8008af6 <USBD_CtlSendData>
        break;
 80088b8:	e004      	b.n	80088c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8a9 	bl	8008a14 <USBD_CtlError>
        break;
 80088c2:	bf00      	nop
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d81e      	bhi.n	8008922 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	88db      	ldrh	r3, [r3, #6]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d004      	beq.n	80088f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f890 	bl	8008a14 <USBD_CtlError>
        break;
 80088f4:	e01a      	b.n	800892c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f043 0202 	orr.w	r2, r3, #2
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	330c      	adds	r3, #12
 8008916:	2202      	movs	r2, #2
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f8eb 	bl	8008af6 <USBD_CtlSendData>
      break;
 8008920:	e004      	b.n	800892c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f875 	bl	8008a14 <USBD_CtlError>
      break;
 800892a:	bf00      	nop
  }
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d106      	bne.n	8008954 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f90e 	bl	8008b70 <USBD_CtlSendStatus>
  }
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896c:	b2db      	uxtb	r3, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	2b02      	cmp	r3, #2
 8008972:	d80b      	bhi.n	800898c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	885b      	ldrh	r3, [r3, #2]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d10c      	bne.n	8008996 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f8f3 	bl	8008b70 <USBD_CtlSendStatus>
      }
      break;
 800898a:	e004      	b.n	8008996 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f840 	bl	8008a14 <USBD_CtlError>
      break;
 8008994:	e000      	b.n	8008998 <USBD_ClrFeature+0x3c>
      break;
 8008996:	bf00      	nop
  }
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	781a      	ldrb	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fa91 	bl	8007ef2 <SWAPBYTE>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff fa84 	bl	8007ef2 <SWAPBYTE>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fa77 	bl	8007ef2 <SWAPBYTE>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	80da      	strh	r2, [r3, #6]
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a1e:	2180      	movs	r1, #128	; 0x80
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fc05 	bl	8009230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a26:	2100      	movs	r1, #0
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc01 	bl	8009230 <USBD_LL_StallEP>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d036      	beq.n	8008aba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a50:	6938      	ldr	r0, [r7, #16]
 8008a52:	f000 f836 	bl	8008ac2 <USBD_GetLen>
 8008a56:	4603      	mov	r3, r0
 8008a58:	3301      	adds	r3, #1
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	3301      	adds	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
 8008a82:	3301      	adds	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a86:	e013      	b.n	8008ab0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	3301      	adds	r3, #1
 8008a98:	613b      	str	r3, [r7, #16]
    idx++;
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	3301      	adds	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e7      	bne.n	8008a88 <USBD_GetString+0x52>
 8008ab8:	e000      	b.n	8008abc <USBD_GetString+0x86>
    return;
 8008aba:	bf00      	nop
  }
}
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ad2:	e005      	b.n	8008ae0 <USBD_GetLen+0x1e>
  {
    len++;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3301      	adds	r3, #1
 8008ade:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f5      	bne.n	8008ad4 <USBD_GetLen+0x12>
  }

  return len;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fc10 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fbff 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	2100      	movs	r1, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fc0f 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b80:	2300      	movs	r3, #0
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fbdb 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2205      	movs	r2, #5
 8008ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fbe9 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	490e      	ldr	r1, [pc, #56]	; (8008bfc <MX_USB_DEVICE_Init+0x40>)
 8008bc4:	480e      	ldr	r0, [pc, #56]	; (8008c00 <MX_USB_DEVICE_Init+0x44>)
 8008bc6:	f7fe fe83 	bl	80078d0 <USBD_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bd0:	f7f8 fcde 	bl	8001590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008bd4:	490b      	ldr	r1, [pc, #44]	; (8008c04 <MX_USB_DEVICE_Init+0x48>)
 8008bd6:	480a      	ldr	r0, [pc, #40]	; (8008c00 <MX_USB_DEVICE_Init+0x44>)
 8008bd8:	f7fe feaa 	bl	8007930 <USBD_RegisterClass>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008be2:	f7f8 fcd5 	bl	8001590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008be6:	4806      	ldr	r0, [pc, #24]	; (8008c00 <MX_USB_DEVICE_Init+0x44>)
 8008be8:	f7fe fec9 	bl	800797e <USBD_Start>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008bf2:	f7f8 fccd 	bl	8001590 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bf6:	bf00      	nop
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000114 	.word	0x20000114
 8008c00:	2000067c 	.word	0x2000067c
 8008c04:	2000000c 	.word	0x2000000c

08008c08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2212      	movs	r2, #18
 8008c18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c1a:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000134 	.word	0x20000134

08008c2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000154 	.word	0x20000154

08008c50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d105      	bne.n	8008c6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4907      	ldr	r1, [pc, #28]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c66:	4808      	ldr	r0, [pc, #32]	; (8008c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c68:	f7ff fee5 	bl	8008a36 <USBD_GetString>
 8008c6c:	e004      	b.n	8008c78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4904      	ldr	r1, [pc, #16]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c72:	4805      	ldr	r0, [pc, #20]	; (8008c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c74:	f7ff fedf 	bl	8008a36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	2000094c 	.word	0x2000094c
 8008c88:	0800f974 	.word	0x0800f974

08008c8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	4904      	ldr	r1, [pc, #16]	; (8008cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c9c:	4804      	ldr	r0, [pc, #16]	; (8008cb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c9e:	f7ff feca 	bl	8008a36 <USBD_GetString>
  return USBD_StrDesc;
 8008ca2:	4b02      	ldr	r3, [pc, #8]	; (8008cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	2000094c 	.word	0x2000094c
 8008cb0:	0800f98c 	.word	0x0800f98c

08008cb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	221a      	movs	r2, #26
 8008cc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cc6:	f000 f855 	bl	8008d74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cca:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000158 	.word	0x20000158

08008cd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cf0:	f7ff fea1 	bl	8008a36 <USBD_GetString>
 8008cf4:	e004      	b.n	8008d00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cfc:	f7ff fe9b 	bl	8008a36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000094c 	.word	0x2000094c
 8008d10:	0800f9a0 	.word	0x0800f9a0

08008d14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	4907      	ldr	r1, [pc, #28]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d2a:	4808      	ldr	r0, [pc, #32]	; (8008d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d2c:	f7ff fe83 	bl	8008a36 <USBD_GetString>
 8008d30:	e004      	b.n	8008d3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4904      	ldr	r1, [pc, #16]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d38:	f7ff fe7d 	bl	8008a36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	2000094c 	.word	0x2000094c
 8008d4c:	0800f9ac 	.word	0x0800f9ac

08008d50 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	220c      	movs	r2, #12
 8008d60:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20000148 	.word	0x20000148

08008d74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d7a:	4b0f      	ldr	r3, [pc, #60]	; (8008db8 <Get_SerialNum+0x44>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d80:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <Get_SerialNum+0x48>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <Get_SerialNum+0x4c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4413      	add	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d9a:	2208      	movs	r2, #8
 8008d9c:	4909      	ldr	r1, [pc, #36]	; (8008dc4 <Get_SerialNum+0x50>)
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f814 	bl	8008dcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008da4:	2204      	movs	r2, #4
 8008da6:	4908      	ldr	r1, [pc, #32]	; (8008dc8 <Get_SerialNum+0x54>)
 8008da8:	68b8      	ldr	r0, [r7, #8]
 8008daa:	f000 f80f 	bl	8008dcc <IntToUnicode>
  }
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	1fff7a10 	.word	0x1fff7a10
 8008dbc:	1fff7a14 	.word	0x1fff7a14
 8008dc0:	1fff7a18 	.word	0x1fff7a18
 8008dc4:	2000015a 	.word	0x2000015a
 8008dc8:	2000016a 	.word	0x2000016a

08008dcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
 8008de2:	e027      	b.n	8008e34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	0f1b      	lsrs	r3, r3, #28
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d80b      	bhi.n	8008e04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	0f1b      	lsrs	r3, r3, #28
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	4619      	mov	r1, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3230      	adds	r2, #48	; 0x30
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e00a      	b.n	8008e1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	440b      	add	r3, r1
 8008e14:	3237      	adds	r2, #55	; 0x37
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	3301      	adds	r3, #1
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4413      	add	r3, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	3301      	adds	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]
 8008e34:	7dfa      	ldrb	r2, [r7, #23]
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d3d3      	bcc.n	8008de4 <IntToUnicode+0x18>
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e6c:	d13a      	bne.n	8008ee4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e6e:	2300      	movs	r3, #0
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e78:	f043 0301 	orr.w	r3, r3, #1
 8008e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e90:	2302      	movs	r3, #2
 8008e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e9c:	230a      	movs	r3, #10
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea0:	f107 0314 	add.w	r3, r7, #20
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4812      	ldr	r0, [pc, #72]	; (8008ef0 <HAL_PCD_MspInit+0xa4>)
 8008ea8:	f7f9 f82c 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	4a0e      	ldr	r2, [pc, #56]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec8:	4b08      	ldr	r3, [pc, #32]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2043      	movs	r0, #67	; 0x43
 8008eda:	f7f8 ffc0 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ede:	2043      	movs	r0, #67	; 0x43
 8008ee0:	f7f8 ffd9 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3728      	adds	r7, #40	; 0x28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	40020000 	.word	0x40020000

08008ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe fd82 	bl	8007a14 <USBD_LL_SetupStage>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7fe fdbc 	bl	8007abe <USBD_LL_DataOutStage>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3348      	adds	r3, #72	; 0x48
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	4619      	mov	r1, r3
 8008f76:	f7fe fe05 	bl	8007b84 <USBD_LL_DataInStage>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe ff19 	bl	8007dc8 <USBD_LL_SOF>
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
 8008fb6:	e008      	b.n	8008fca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d102      	bne.n	8008fc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
 8008fc4:	e001      	b.n	8008fca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fc6:	f7f8 fae3 	bl	8001590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fd0:	7bfa      	ldrb	r2, [r7, #15]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe feb9 	bl	8007d4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fe65 	bl	8007cb0 <USBD_LL_Reset>
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe feb4 	bl	8007d6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <HAL_PCD_SuspendCallback+0x48>)
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	4a03      	ldr	r2, [pc, #12]	; (8009038 <HAL_PCD_SuspendCallback+0x48>)
 800902a:	f043 0306 	orr.w	r3, r3, #6
 800902e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	e000ed00 	.word	0xe000ed00

0800903c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fea4 	bl	8007d98 <USBD_LL_Resume>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fef2 	bl	8007e58 <USBD_LL_IsoOUTIncomplete>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe feba 	bl	8007e0c <USBD_LL_IsoINIncomplete>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fef8 	bl	8007ea4 <USBD_LL_DevConnected>
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fef5 	bl	8007eba <USBD_LL_DevDisconnected>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d13c      	bne.n	8009162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090e8:	4a20      	ldr	r2, [pc, #128]	; (800916c <USBD_LL_Init+0x94>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a1e      	ldr	r2, [pc, #120]	; (800916c <USBD_LL_Init+0x94>)
 80090f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090f8:	4b1c      	ldr	r3, [pc, #112]	; (800916c <USBD_LL_Init+0x94>)
 80090fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <USBD_LL_Init+0x94>)
 8009102:	2206      	movs	r2, #6
 8009104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009106:	4b19      	ldr	r3, [pc, #100]	; (800916c <USBD_LL_Init+0x94>)
 8009108:	2202      	movs	r2, #2
 800910a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800910c:	4b17      	ldr	r3, [pc, #92]	; (800916c <USBD_LL_Init+0x94>)
 800910e:	2200      	movs	r2, #0
 8009110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <USBD_LL_Init+0x94>)
 8009114:	2202      	movs	r2, #2
 8009116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <USBD_LL_Init+0x94>)
 800911a:	2200      	movs	r2, #0
 800911c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <USBD_LL_Init+0x94>)
 8009120:	2200      	movs	r2, #0
 8009122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009124:	4b11      	ldr	r3, [pc, #68]	; (800916c <USBD_LL_Init+0x94>)
 8009126:	2200      	movs	r2, #0
 8009128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <USBD_LL_Init+0x94>)
 800912c:	2200      	movs	r2, #0
 800912e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009130:	4b0e      	ldr	r3, [pc, #56]	; (800916c <USBD_LL_Init+0x94>)
 8009132:	2200      	movs	r2, #0
 8009134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009136:	480d      	ldr	r0, [pc, #52]	; (800916c <USBD_LL_Init+0x94>)
 8009138:	f7f9 f8a9 	bl	800228e <HAL_PCD_Init>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009142:	f7f8 fa25 	bl	8001590 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009146:	2180      	movs	r1, #128	; 0x80
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <USBD_LL_Init+0x94>)
 800914a:	f7fa fa22 	bl	8003592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800914e:	2240      	movs	r2, #64	; 0x40
 8009150:	2100      	movs	r1, #0
 8009152:	4806      	ldr	r0, [pc, #24]	; (800916c <USBD_LL_Init+0x94>)
 8009154:	f7fa f9d6 	bl	8003504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009158:	2280      	movs	r2, #128	; 0x80
 800915a:	2101      	movs	r1, #1
 800915c:	4803      	ldr	r0, [pc, #12]	; (800916c <USBD_LL_Init+0x94>)
 800915e:	f7fa f9d1 	bl	8003504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000b4c 	.word	0x20000b4c

08009170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009186:	4618      	mov	r0, r3
 8009188:	f7f9 f9a5 	bl	80024d6 <HAL_PCD_Start>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f97e 	bl	8009494 <USBD_Get_USB_Status>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919c:	7bbb      	ldrb	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	461a      	mov	r2, r3
 80091b4:	4603      	mov	r3, r0
 80091b6:	70fb      	strb	r3, [r7, #3]
 80091b8:	460b      	mov	r3, r1
 80091ba:	70bb      	strb	r3, [r7, #2]
 80091bc:	4613      	mov	r3, r2
 80091be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091ce:	78bb      	ldrb	r3, [r7, #2]
 80091d0:	883a      	ldrh	r2, [r7, #0]
 80091d2:	78f9      	ldrb	r1, [r7, #3]
 80091d4:	f7f9 fdb6 	bl	8002d44 <HAL_PCD_EP_Open>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f958 	bl	8009494 <USBD_Get_USB_Status>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7f9 fdff 	bl	8002e14 <HAL_PCD_EP_Close>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f939 	bl	8009494 <USBD_Get_USB_Status>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009226:	7bbb      	ldrb	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7f9 febf 	bl	8002fd2 <HAL_PCD_EP_SetStall>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f91a 	bl	8009494 <USBD_Get_USB_Status>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009264:	7bbb      	ldrb	r3, [r7, #14]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7f9 ff04 	bl	800309a <HAL_PCD_EP_ClrStall>
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f8fb 	bl	8009494 <USBD_Get_USB_Status>
 800929e:	4603      	mov	r3, r0
 80092a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da0b      	bge.n	80092e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	333e      	adds	r3, #62	; 0x3e
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	e00b      	b.n	80092f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	4613      	mov	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 fce9 	bl	8002cfa <HAL_PCD_SetAddress>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f8b0 	bl	8009494 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	460b      	mov	r3, r1
 8009350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009360:	7af9      	ldrb	r1, [r7, #11]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	f7f9 fdea 	bl	8002f3e <HAL_PCD_EP_Transmit>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f88f 	bl	8009494 <USBD_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800937a:	7dbb      	ldrb	r3, [r7, #22]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093a2:	7af9      	ldrb	r1, [r7, #11]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	f7f9 fd7e 	bl	8002ea8 <HAL_PCD_EP_Receive>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f86e 	bl	8009494 <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HAL_PCDEx_LPM_Callback+0x18>
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d01f      	beq.n	800941e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80093de:	e03b      	b.n	8009458 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80093e8:	f7f7 ff00 	bl	80011ec <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <HAL_PCDEx_LPM_Callback+0x98>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <HAL_PCDEx_LPM_Callback+0x98>)
 80093f2:	f023 0306 	bic.w	r3, r3, #6
 80093f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800940a:	f023 0301 	bic.w	r3, r3, #1
 800940e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fcbe 	bl	8007d98 <USBD_LL_Resume>
    break;
 800941c:	e01c      	b.n	8009458 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fc95 	bl	8007d6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <HAL_PCDEx_LPM_Callback+0x98>)
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	4a04      	ldr	r2, [pc, #16]	; (8009460 <HAL_PCDEx_LPM_Callback+0x98>)
 8009450:	f043 0306 	orr.w	r3, r3, #6
 8009454:	6113      	str	r3, [r2, #16]
    break;
 8009456:	bf00      	nop
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed00 	.word	0xe000ed00

08009464 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800946c:	4b03      	ldr	r3, [pc, #12]	; (800947c <USBD_static_malloc+0x18>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	2000065c 	.word	0x2000065c

08009480 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d817      	bhi.n	80094d8 <USBD_Get_USB_Status+0x44>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <USBD_Get_USB_Status+0x1c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c7 	.word	0x080094c7
 80094b8:	080094cd 	.word	0x080094cd
 80094bc:	080094d3 	.word	0x080094d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
    break;
 80094c4:	e00b      	b.n	80094de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ca:	e008      	b.n	80094de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094cc:	2301      	movs	r3, #1
 80094ce:	73fb      	strb	r3, [r7, #15]
    break;
 80094d0:	e005      	b.n	80094de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	73fb      	strb	r3, [r7, #15]
    break;
 80094d6:	e002      	b.n	80094de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	bf00      	nop
  }
  return usb_status;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	70fb      	strb	r3, [r7, #3]
 80094fe:	460b      	mov	r3, r1
 8009500:	70bb      	strb	r3, [r7, #2]
 8009502:	4613      	mov	r3, r2
 8009504:	707b      	strb	r3, [r7, #1]
                return 0;
 8009506:	2300      	movs	r3, #0
        }
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	461a      	mov	r2, r3
 8009522:	4603      	mov	r3, r0
 8009524:	70fb      	strb	r3, [r7, #3]
 8009526:	460b      	mov	r3, r1
 8009528:	70bb      	strb	r3, [r7, #2]
 800952a:	4613      	mov	r3, r2
 800952c:	707b      	strb	r3, [r7, #1]
                return 0;
 800952e:	2300      	movs	r3, #0
        }
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
                return 0;
 8009544:	2300      	movs	r3, #0
        }
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
                return 0;
 800955a:	2300      	movs	r3, #0
        }
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
                return 0;
 8009570:	2300      	movs	r3, #0
        }
 8009572:	4618      	mov	r0, r3
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
                return;
 800958a:	bf00      	nop
        } // Note used for hubs only!
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	807b      	strh	r3, [r7, #2]
 80095a2:	4613      	mov	r3, r2
 80095a4:	803b      	strh	r3, [r7, #0]
                return false;
 80095a6:	2300      	movs	r3, #0
        }
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
                return false;
 80095c0:	2300      	movs	r3, #0
        }
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
                return true;
 80095da:	2301      	movs	r3, #1
        }
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 80095f0:	687b      	ldr	r3, [r7, #4]
        };
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b0f      	cmp	r3, #15
 8009610:	d812      	bhi.n	8009638 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 8009612:	7bfa      	ldrb	r2, [r7, #15]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	321e      	adds	r2, #30
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d107      	bne.n	8009630 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 8009620:	7bfa      	ldrb	r2, [r7, #15]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	321e      	adds	r2, #30
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800962c:	2300      	movs	r3, #0
 800962e:	e004      	b.n	800963a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	3301      	adds	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
 8009636:	e7e9      	b.n	800960c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 8009638:	23d3      	movs	r3, #211	; 0xd3
        };
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	705a      	strb	r2, [r3, #1]
 800965a:	2200      	movs	r2, #0
 800965c:	709a      	strb	r2, [r3, #2]
 800965e:	2200      	movs	r2, #0
 8009660:	70da      	strb	r2, [r3, #3]
 8009662:	2200      	movs	r2, #0
 8009664:	711a      	strb	r2, [r3, #4]
        };
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	711a      	strb	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	715a      	strb	r2, [r3, #5]
        };
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	715a      	strb	r2, [r3, #5]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	795a      	ldrb	r2, [r3, #5]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	711a      	strb	r2, [r3, #4]
        };
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	711a      	strb	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	80da      	strh	r2, [r3, #6]
        };
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
                countDown = 0;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	80da      	strh	r2, [r3, #6]
        };
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	791b      	ldrb	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 8009730:	2b01      	cmp	r3, #1
 8009732:	d009      	beq.n	8009748 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 8009734:	e029      	b.n	800978a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	887a      	ldrh	r2, [r7, #2]
 800973a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	791b      	ldrb	r3, [r3, #4]
 8009740:	3301      	adds	r3, #1
 8009742:	b2da      	uxtb	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	88db      	ldrh	r3, [r3, #6]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d015      	beq.n	800977c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d011      	beq.n	800977c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	88db      	ldrh	r3, [r3, #6]
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	80da      	strh	r2, [r3, #6]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	e7e5      	b.n	8009748 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	88db      	ldrh	r3, [r3, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	88db      	ldrh	r3, [r3, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bf0c      	ite	eq
 8009792:	2301      	moveq	r3, #1
 8009794:	2300      	movne	r3, #0
 8009796:	b2db      	uxtb	r3, r3
        };
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	4608      	mov	r0, r1
 80097ae:	4611      	mov	r1, r2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	70fb      	strb	r3, [r7, #3]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70bb      	strb	r3, [r7, #2]
 80097ba:	4613      	mov	r3, r2
 80097bc:	707b      	strb	r3, [r7, #1]
        };
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	0800fb48 	.word	0x0800fb48

080097ec <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	4a04      	ldr	r2, [pc, #16]	; (8009808 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	0800fb30 	.word	0x0800fb30

0800980c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
                return bAddress;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	2be0      	cmp	r3, #224	; 0xe0
 8009850:	bf0c      	ite	eq
 8009852:	2301      	moveq	r3, #1
 8009854:	2300      	movne	r3, #0
 8009856:	b2db      	uxtb	r3, r3
        };
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	807b      	strh	r3, [r7, #2]
 8009870:	4613      	mov	r3, r2
 8009872:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 8009874:	887b      	ldrh	r3, [r7, #2]
 8009876:	f640 225c 	movw	r2, #2652	; 0xa5c
 800987a:	4293      	cmp	r3, r2
 800987c:	d104      	bne.n	8009888 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800987e:	883b      	ldrh	r3, [r7, #0]
 8009880:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009884:	4293      	cmp	r3, r2
 8009886:	d009      	beq.n	800989c <_ZN3BTD8VIDPIDOKEtt+0x38>
 8009888:	887b      	ldrh	r3, [r7, #2]
 800988a:	f240 520d 	movw	r2, #1293	; 0x50d
 800988e:	4293      	cmp	r3, r2
 8009890:	d106      	bne.n	80098a0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 8009892:	883b      	ldrh	r3, [r7, #0]
 8009894:	f240 625a 	movw	r2, #1626	; 0x65a
 8009898:	4293      	cmp	r3, r2
 800989a:	d101      	bne.n	80098a0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800989c:	2301      	movs	r3, #1
 800989e:	e02d      	b.n	80098fc <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d113      	bne.n	80098d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7d5b      	ldrb	r3, [r3, #21]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10f      	bne.n	80098d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7d9b      	ldrb	r3, [r3, #22]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10b      	bne.n	80098d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	7ddb      	ldrb	r3, [r3, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d107      	bne.n	80098d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7e1b      	ldrb	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7e5b      	ldrb	r3, [r3, #25]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d014      	beq.n	80098fa <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 80098d0:	887b      	ldrh	r3, [r7, #2]
 80098d2:	f240 524c 	movw	r2, #1356	; 0x54c
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d10f      	bne.n	80098fa <_ZN3BTD8VIDPIDOKEtt+0x96>
 80098da:	883b      	ldrh	r3, [r7, #0]
 80098dc:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 80098e0:	d009      	beq.n	80098f6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 80098e2:	883b      	ldrh	r3, [r7, #0]
 80098e4:	f240 422f 	movw	r2, #1071	; 0x42f
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d004      	beq.n	80098f6 <_ZN3BTD8VIDPIDOKEtt+0x92>
 80098ec:	883b      	ldrh	r3, [r7, #0]
 80098ee:	f240 32d5 	movw	r2, #981	; 0x3d5
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d101      	bne.n	80098fa <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 80098fa:	2300      	movs	r3, #0
        };
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff ff59 	bl	80097cc <_ZN15USBDeviceConfigC1Ev>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3304      	adds	r3, #4
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff ff64 	bl	80097ec <_ZN17UsbConfigXtracterC1Ev>
 8009924:	4a2b      	ldr	r2, [pc, #172]	; (80099d4 <_ZN3BTDC1EP3USB+0xcc>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	4a2b      	ldr	r2, [pc, #172]	; (80099d8 <_ZN3BTDC1EP3USB+0xd0>)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	64da      	str	r2, [r3, #76]	; 0x4c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	661a      	str	r2, [r3, #96]	; 0x60
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	2b03      	cmp	r3, #3
 8009994:	d80a      	bhi.n	80099ac <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	3318      	adds	r3, #24
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	2200      	movs	r2, #0
 80099a2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	3301      	adds	r3, #1
 80099a8:	73fb      	strb	r3, [r7, #15]
 80099aa:	e7f1      	b.n	8009990 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa83 	bl	8009eb8 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d006      	beq.n	80099c8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fe1b 	bl	80095fe <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	0800faf0 	.word	0x0800faf0
 80099d8:	0800fb24 	.word	0x0800fb24

080099dc <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b08f      	sub	sp, #60	; 0x3c
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	461a      	mov	r2, r3
 80099ea:	4603      	mov	r3, r0
 80099ec:	70fb      	strb	r3, [r7, #3]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70bb      	strb	r3, [r7, #2]
 80099f2:	4613      	mov	r3, r2
 80099f4:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 80099f6:	2312      	movs	r3, #18
 80099f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fa54 	bl	8009eb8 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fde7 	bl	80095e8 <_ZN3USB14GetAddressPoolEv>
 8009a1a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 8009a26:	23d9      	movs	r3, #217	; 0xd9
 8009a28:	e087      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2100      	movs	r1, #0
 8009a32:	69f8      	ldr	r0, [r7, #28]
 8009a34:	4798      	blx	r3
 8009a36:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009a3e:	23d6      	movs	r3, #214	; 0xd6
 8009a40:	e07b      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 8009a4a:	23d7      	movs	r3, #215	; 0xd7
 8009a4c:	e075      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	787a      	ldrb	r2, [r7, #1]
 8009a62:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	2312      	movs	r3, #18
 8009a70:	2200      	movs	r2, #0
 8009a72:	2100      	movs	r1, #0
 8009a74:	f005 fa6b 	bl	800ef4e <_ZN3USB11getDevDescrEhhtPh>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	6a3a      	ldr	r2, [r7, #32]
 8009a82:	601a      	str	r2, [r3, #0]

        if(rcode)
 8009a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d146      	bne.n	8009b1a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3304      	adds	r3, #4
 8009a92:	681c      	ldr	r4, [r3, #0]
 8009a94:	78bb      	ldrb	r3, [r7, #2]
 8009a96:	78f9      	ldrb	r1, [r7, #3]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	69f8      	ldr	r0, [r7, #28]
 8009a9c:	47a0      	blx	r4
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8009ab2:	23d4      	movs	r3, #212	; 0xd4
 8009ab4:	e041      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	791b      	ldrb	r3, [r3, #4]
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d017      	beq.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	79da      	ldrb	r2, [r3, #7]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	7c5a      	ldrb	r2, [r3, #17]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	891b      	ldrh	r3, [r3, #8]
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	895b      	ldrh	r3, [r3, #10]
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 8009aea:	23e0      	movs	r3, #224	; 0xe0
 8009aec:	e025      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 8009aee:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009afa:	2300      	movs	r3, #0
 8009afc:	2200      	movs	r2, #0
 8009afe:	f005 fac3 	bl	800f088 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009b02:	23d1      	movs	r3, #209	; 0xd1
 8009b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
        return rcode;
 8009b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b18:	e00f      	b.n	8009b3a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 8009b1a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 8009b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b20:	2b0d      	cmp	r3, #13
 8009b22:	d002      	beq.n	8009b2a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 8009b24:	23e1      	movs	r3, #225	; 0xe1
 8009b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	4798      	blx	r3
        return rcode;
 8009b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3734      	adds	r7, #52	; 0x34
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd90      	pop	{r4, r7, pc}
	...

08009b44 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b096      	sub	sp, #88	; 0x58
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	70fb      	strb	r3, [r7, #3]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70bb      	strb	r3, [r7, #2]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009b64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fd37 	bl	80095e8 <_ZN3USB14GetAddressPoolEv>
 8009b7a:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009b88:	4611      	mov	r1, r2
 8009b8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b8c:	4798      	blx	r3
 8009b8e:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 8009b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009b96:	23d6      	movs	r3, #214	; 0xd6
 8009b98:	e189      	b.n	8009eae <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 8009b9a:	48b8      	ldr	r0, [pc, #736]	; (8009e7c <_ZN3BTD4InitEhhb+0x338>)
 8009b9c:	f7f8 f860 	bl	8001c60 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009baa:	2200      	movs	r2, #0
 8009bac:	2100      	movs	r1, #0
 8009bae:	f005 fa6b 	bl	800f088 <_ZN3USB7setAddrEhhh>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 8009bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 8009bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 8009bc6:	e16a      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bca:	2200      	movs	r2, #0
 8009bcc:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009bda:	4611      	mov	r1, r2
 8009bdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009bde:	4798      	blx	r3
 8009be0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 8009be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009be8:	23d6      	movs	r3, #214	; 0xd6
 8009bea:	e160      	b.n	8009eae <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 8009bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bee:	787a      	ldrb	r2, [r7, #1]
 8009bf0:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3351      	adds	r3, #81	; 0x51
 8009c00:	2201      	movs	r2, #1
 8009c02:	f004 f8fe 	bl	800de02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 8009c0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8128 	bne.w	8009e66 <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009c1c:	f240 524c 	movw	r2, #1356	; 0x54c
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d177      	bne.n	8009d14 <_ZN3BTD4InitEhhb+0x1d0>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c2a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009c2e:	d00d      	beq.n	8009c4c <_ZN3BTD4InitEhhb+0x108>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c36:	f240 422f 	movw	r2, #1071	; 0x42f
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d006      	beq.n	8009c4c <_ZN3BTD4InitEhhb+0x108>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c44:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d163      	bne.n	8009d14 <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 8009c4c:	488c      	ldr	r0, [pc, #560]	; (8009e80 <_ZN3BTD4InitEhhb+0x33c>)
 8009c4e:	f7f8 f807 	bl	8001c60 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009c62:	2301      	movs	r3, #1
 8009c64:	f005 fa40 	bl	800f0e8 <_ZN3USB7setConfEhhh>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 80f9 	bne.w	8009e6a <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7d1b      	ldrb	r3, [r3, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d113      	bne.n	8009ca8 <_ZN3BTD4InitEhhb+0x164>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7d5b      	ldrb	r3, [r3, #21]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10f      	bne.n	8009ca8 <_ZN3BTD4InitEhhb+0x164>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7d9b      	ldrb	r3, [r3, #22]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10b      	bne.n	8009ca8 <_ZN3BTD4InitEhhb+0x164>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	7ddb      	ldrb	r3, [r3, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d107      	bne.n	8009ca8 <_ZN3BTD4InitEhhb+0x164>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7e1b      	ldrb	r3, [r3, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <_ZN3BTD4InitEhhb+0x164>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7e5b      	ldrb	r3, [r3, #25]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d019      	beq.n	8009cdc <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009cae:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009cb2:	d006      	beq.n	8009cc2 <_ZN3BTD4InitEhhb+0x17e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009cba:	f240 422f 	movw	r2, #1071	; 0x42f
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d106      	bne.n	8009cd0 <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3314      	adds	r3, #20
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f002 f8c3 	bl	800be54 <_ZN3BTD9setBdaddrEPh>
 8009cce:	e005      	b.n	8009cdc <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3314      	adds	r3, #20
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f002 f8fc 	bl	800bed4 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009cec:	2300      	movs	r3, #0
 8009cee:	f005 f9fb 	bl	800f0e8 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f005 f9c2 	bl	800f088 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009d10:	23d1      	movs	r3, #209	; 0xd1
 8009d12:	e0cc      	b.n	8009eae <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009d1a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d25e      	bcs.n	8009de4 <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009d2c:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d106      	bne.n	8009d42 <_ZN3BTD4InitEhhb+0x1fe>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009d3a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00d      	beq.n	8009d5e <_ZN3BTD4InitEhhb+0x21a>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009d48:	f240 520d 	movw	r2, #1293	; 0x50d
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d120      	bne.n	8009d92 <_ZN3BTD4InitEhhb+0x24e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009d56:	f240 625a 	movw	r2, #1626	; 0x65a
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d119      	bne.n	8009d92 <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4611      	mov	r1, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f002 f907 	bl	800bf7c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d78:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d7c:	f107 0308 	add.w	r3, r7, #8
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4613      	mov	r3, r2
 8009d84:	2200      	movs	r2, #0
 8009d86:	f005 f932 	bl	800efee <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009d90:	e018      	b.n	8009dc4 <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	f107 0308 	add.w	r3, r7, #8
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f002 f93b 	bl	800c018 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009dac:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009db0:	f107 0308 	add.w	r3, r7, #8
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	4613      	mov	r3, r2
 8009db8:	2200      	movs	r2, #0
 8009dba:	f005 f918 	bl	800efee <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d150      	bne.n	8009e6e <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d805      	bhi.n	8009de2 <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009dd6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009de0:	e79b      	b.n	8009d1a <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 8009de2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d94a      	bls.n	8009e84 <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3351      	adds	r3, #81	; 0x51
 8009e02:	f003 fffe 	bl	800de02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009e0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d12e      	bne.n	8009e72 <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e2a:	f005 f95d 	bl	800f0e8 <_ZN3USB7setConfEhhh>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009e34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d11c      	bne.n	8009e76 <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2264      	movs	r2, #100	; 0x64
 8009e40:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009e62:	2300      	movs	r3, #0
 8009e64:	e023      	b.n	8009eae <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 8009e66:	bf00      	nop
 8009e68:	e019      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009e6a:	bf00      	nop
 8009e6c:	e017      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 8009e6e:	bf00      	nop
 8009e70:	e015      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 8009e72:	bf00      	nop
 8009e74:	e013      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009e76:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009e78:	e011      	b.n	8009e9e <_ZN3BTD4InitEhhb+0x35a>
 8009e7a:	bf00      	nop
 8009e7c:	000493e0 	.word	0x000493e0
 8009e80:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 8009e84:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e90:	2300      	movs	r3, #0
 8009e92:	2200      	movs	r2, #0
 8009e94:	f005 f8f8 	bl	800f088 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009e98:	23d1      	movs	r3, #209	; 0xd1
 8009e9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
        return rcode;
 8009eaa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3750      	adds	r7, #80	; 0x50
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop

08009eb8 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d845      	bhi.n	8009f56 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009eca:	7bfa      	ldrb	r2, [r7, #15]
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3351      	adds	r3, #81	; 0x51
 8009ed8:	2200      	movs	r2, #0
 8009eda:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <_ZN3BTD10InitializeEv+0x2e>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e000      	b.n	8009ee8 <_ZN3BTD10InitializeEv+0x30>
 8009ee6:	2008      	movs	r0, #8
 8009ee8:	7bfa      	ldrb	r2, [r7, #15]
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	4613      	mov	r3, r2
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	4413      	add	r3, r2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	3352      	adds	r3, #82	; 0x52
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009efa:	7bfa      	ldrb	r2, [r7, #15]
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	4613      	mov	r3, r2
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4413      	add	r3, r2
 8009f04:	440b      	add	r3, r1
 8009f06:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f0a:	78d3      	ldrb	r3, [r2, #3]
 8009f0c:	f36f 0300 	bfc	r3, #0, #1
 8009f10:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009f12:	7bfa      	ldrb	r2, [r7, #15]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	4413      	add	r3, r2
 8009f1c:	440b      	add	r3, r1
 8009f1e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f22:	78d3      	ldrb	r3, [r2, #3]
 8009f24:	f36f 0341 	bfc	r3, #1, #1
 8009f28:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <_ZN3BTD10InitializeEv+0x7c>
 8009f30:	2101      	movs	r1, #1
 8009f32:	e000      	b.n	8009f36 <_ZN3BTD10InitializeEv+0x7e>
 8009f34:	210f      	movs	r1, #15
 8009f36:	7bfa      	ldrb	r2, [r7, #15]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	4413      	add	r3, r2
 8009f40:	4403      	add	r3, r0
 8009f42:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f46:	78d3      	ldrb	r3, [r2, #3]
 8009f48:	f361 0387 	bfi	r3, r1, #2, #6
 8009f4c:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	3301      	adds	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e7b6      	b.n	8009ec4 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d81c      	bhi.n	8009f9a <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	3318      	adds	r3, #24
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d010      	beq.n	8009f92 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	3318      	adds	r3, #24
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	6859      	ldr	r1, [r3, #4]
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	3318      	adds	r3, #24
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	3301      	adds	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
 8009f98:	e7df      	b.n	8009f5a <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009ff0:	bf00      	nop
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	461a      	mov	r2, r3
 800a006:	4603      	mov	r3, r0
 800a008:	70fb      	strb	r3, [r7, #3]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70bb      	strb	r3, [r7, #2]
 800a00e:	4613      	mov	r3, r2
 800a010:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800a012:	787b      	ldrb	r3, [r7, #1]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d15d      	bne.n	800a0d4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	78fa      	ldrb	r2, [r7, #3]
 800a01c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	78db      	ldrb	r3, [r3, #3]
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d114      	bne.n	800a056 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	789b      	ldrb	r3, [r3, #2]
 800a030:	b25b      	sxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	da0f      	bge.n	800a056 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800a036:	2301      	movs	r3, #1
 800a038:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800a03a:	7bfa      	ldrb	r2, [r7, #15]
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	4413      	add	r3, r2
 800a044:	440b      	add	r3, r1
 800a046:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a04a:	78d3      	ldrb	r3, [r2, #3]
 800a04c:	2101      	movs	r1, #1
 800a04e:	f361 0387 	bfi	r3, r1, #2, #6
 800a052:	70d3      	strb	r3, [r2, #3]
 800a054:	e00e      	b.n	800a074 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	78db      	ldrb	r3, [r3, #3]
 800a05a:	f003 0303 	and.w	r3, r3, #3
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d13a      	bne.n	800a0d8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	789b      	ldrb	r3, [r3, #2]
 800a066:	b25b      	sxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da01      	bge.n	800a070 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e000      	b.n	800a072 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800a070:	2303      	movs	r3, #3
 800a072:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	789b      	ldrb	r3, [r3, #2]
 800a078:	7bfa      	ldrb	r2, [r7, #15]
 800a07a:	f003 030f 	and.w	r3, r3, #15
 800a07e:	b2d8      	uxtb	r0, r3
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4613      	mov	r3, r2
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	4413      	add	r3, r2
 800a088:	440b      	add	r3, r1
 800a08a:	3351      	adds	r3, #81	; 0x51
 800a08c:	4602      	mov	r2, r0
 800a08e:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	889b      	ldrh	r3, [r3, #4]
 800a094:	b29b      	uxth	r3, r3
 800a096:	7bfa      	ldrb	r2, [r7, #15]
 800a098:	b2d8      	uxtb	r0, r3
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4613      	mov	r3, r2
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	4413      	add	r3, r2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3352      	adds	r3, #82	; 0x52
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	799b      	ldrb	r3, [r3, #6]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d204      	bcs.n	800a0c2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	799a      	ldrb	r2, [r3, #6]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800a0d2:	e002      	b.n	800a0da <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800a0d4:	bf00      	nop
 800a0d6:	e000      	b.n	800a0da <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800a0d8:	bf00      	nop
}
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800a0e4:	f1a0 0004 	sub.w	r0, r0, #4
 800a0e8:	f7ff bf86 	b.w	8009ff8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800a0ec <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff fedf 	bl	8009eb8 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fa72 	bl	80095e8 <_ZN3USB14GetAddressPoolEv>
 800a104:	4603      	mov	r3, r0
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	3208      	adds	r2, #8
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800a112:	4618      	mov	r0, r3
 800a114:	4790      	blx	r2
        return 0;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800a12e:	f083 0301 	eor.w	r3, r3, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <_ZN3BTD4PollEv+0x1c>
                return 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	e025      	b.n	800a188 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800a13c:	f7f7 fd84 	bl	8001c48 <HAL_GetTick>
 800a140:	4603      	mov	r3, r0
 800a142:	4a13      	ldr	r2, [pc, #76]	; (800a190 <_ZN3BTD4PollEv+0x70>)
 800a144:	fba2 2303 	umull	r2, r3, r2, r3
 800a148:	099a      	lsrs	r2, r3, #6
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	43db      	mvns	r3, r3
 800a152:	0fdb      	lsrs	r3, r3, #31
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d015      	beq.n	800a186 <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800a15a:	f7f7 fd75 	bl	8001c48 <HAL_GetTick>
 800a15e:	4603      	mov	r3, r0
 800a160:	4a0b      	ldr	r2, [pc, #44]	; (800a190 <_ZN3BTD4PollEv+0x70>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	099b      	lsrs	r3, r3, #6
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a16e:	441a      	add	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f80d 	bl	800a194 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fb24 	bl	800a7c8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fe4d 	bl	800ae20 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	10624dd3 	.word	0x10624dd3

0800a194 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800a194:	b5b0      	push	{r4, r5, r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3389      	adds	r3, #137	; 0x89
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a1ba:	f107 050c 	add.w	r5, r7, #12
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	f003 ff84 	bl	800e0d2 <_ZN3USB10inTransferEhhPtPhh>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <_ZN3BTD14HCI_event_taskEv+0x48>
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	f040 82f1 	bne.w	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	2b35      	cmp	r3, #53	; 0x35
 800a1e6:	f200 82ea 	bhi.w	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a3d1 	.word	0x0800a3d1
 800a1f4:	0800a431 	.word	0x0800a431
 800a1f8:	0800a589 	.word	0x0800a589
 800a1fc:	0800a673 	.word	0x0800a673
 800a200:	0800a5e5 	.word	0x0800a5e5
 800a204:	0800a731 	.word	0x0800a731
 800a208:	0800a617 	.word	0x0800a617
 800a20c:	0800a7a9 	.word	0x0800a7a9
 800a210:	0800a7a9 	.word	0x0800a7a9
 800a214:	0800a7bf 	.word	0x0800a7bf
 800a218:	0800a7bf 	.word	0x0800a7bf
 800a21c:	0800a7a9 	.word	0x0800a7a9
 800a220:	0800a7a9 	.word	0x0800a7a9
 800a224:	0800a2c9 	.word	0x0800a2c9
 800a228:	0800a7a9 	.word	0x0800a7a9
 800a22c:	0800a7bf 	.word	0x0800a7bf
 800a230:	0800a7bf 	.word	0x0800a7bf
 800a234:	0800a7a9 	.word	0x0800a7a9
 800a238:	0800a7a9 	.word	0x0800a7a9
 800a23c:	0800a7bf 	.word	0x0800a7bf
 800a240:	0800a7bf 	.word	0x0800a7bf
 800a244:	0800a6ff 	.word	0x0800a6ff
 800a248:	0800a729 	.word	0x0800a729
 800a24c:	0800a7a9 	.word	0x0800a7a9
 800a250:	0800a7a9 	.word	0x0800a7a9
 800a254:	0800a7a9 	.word	0x0800a7a9
 800a258:	0800a7a9 	.word	0x0800a7a9
 800a25c:	0800a7bf 	.word	0x0800a7bf
 800a260:	0800a7bf 	.word	0x0800a7bf
 800a264:	0800a7bf 	.word	0x0800a7bf
 800a268:	0800a7bf 	.word	0x0800a7bf
 800a26c:	0800a7a9 	.word	0x0800a7a9
 800a270:	0800a7bf 	.word	0x0800a7bf
 800a274:	0800a7bf 	.word	0x0800a7bf
 800a278:	0800a7bf 	.word	0x0800a7bf
 800a27c:	0800a7bf 	.word	0x0800a7bf
 800a280:	0800a7bf 	.word	0x0800a7bf
 800a284:	0800a7bf 	.word	0x0800a7bf
 800a288:	0800a7bf 	.word	0x0800a7bf
 800a28c:	0800a7bf 	.word	0x0800a7bf
 800a290:	0800a7bf 	.word	0x0800a7bf
 800a294:	0800a7bf 	.word	0x0800a7bf
 800a298:	0800a7bf 	.word	0x0800a7bf
 800a29c:	0800a7bf 	.word	0x0800a7bf
 800a2a0:	0800a7bf 	.word	0x0800a7bf
 800a2a4:	0800a7bf 	.word	0x0800a7bf
 800a2a8:	0800a7bf 	.word	0x0800a7bf
 800a2ac:	0800a7bf 	.word	0x0800a7bf
 800a2b0:	0800a799 	.word	0x0800a799
 800a2b4:	0800a7a9 	.word	0x0800a7a9
 800a2b8:	0800a7a1 	.word	0x0800a7a1
 800a2bc:	0800a7bf 	.word	0x0800a7bf
 800a2c0:	0800a7bf 	.word	0x0800a7bf
 800a2c4:	0800a7a9 	.word	0x0800a7a9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 826c 	bne.w	800a7ac <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2da:	f043 0301 	orr.w	r3, r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d114      	bne.n	800a31a <_ZN3BTD14HCI_event_taskEv+0x186>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2f6:	2b10      	cmp	r3, #16
 800a2f8:	d10f      	bne.n	800a31a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a318:	e059      	b.n	800a3ce <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a320:	2b04      	cmp	r3, #4
 800a322:	d12a      	bne.n	800a37a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a32a:	2b10      	cmp	r3, #16
 800a32c:	d125      	bne.n	800a37a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d114      	bne.n	800a366 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10f      	bne.n	800a366 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b00      	cmp	r3, #0
 800a352:	d004      	beq.n	800a35e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a35c:	e003      	b.n	800a366 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a36c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a370:	b29a      	uxth	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a378:	e029      	b.n	800a3ce <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a380:	2b09      	cmp	r3, #9
 800a382:	f040 8213 	bne.w	800a7ac <_ZN3BTD14HCI_event_taskEv+0x618>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	f040 820d 	bne.w	800a7ac <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a392:	2300      	movs	r3, #0
 800a394:	75fb      	strb	r3, [r7, #23]
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	2b05      	cmp	r3, #5
 800a39a:	d80e      	bhi.n	800a3ba <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	1d9a      	adds	r2, r3, #6
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	460a      	mov	r2, r1
 800a3b0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
 800a3b8:	e7ed      	b.n	800a396 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3c0:	f043 0320 	orr.w	r3, r3, #32
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a3cc:	e1ee      	b.n	800a7ac <_ZN3BTD14HCI_event_taskEv+0x618>
 800a3ce:	e1ed      	b.n	800a7ac <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d921      	bls.n	800a41e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d104      	bne.n	800a3ee <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d017      	beq.n	800a41e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	220a      	movs	r2, #10
 800a41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a424:	3301      	adds	r3, #1
 800a426:	b2da      	uxtb	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a42e:	e1c6      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 81ba 	beq.w	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a43c:	2300      	movs	r3, #0
 800a43e:	75bb      	strb	r3, [r7, #22]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a446:	7dba      	ldrb	r2, [r7, #22]
 800a448:	429a      	cmp	r2, r3
 800a44a:	f080 81b1 	bcs.w	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	b2da      	uxtb	r2, r3
 800a458:	7dbb      	ldrb	r3, [r7, #22]
 800a45a:	4619      	mov	r1, r3
 800a45c:	0049      	lsls	r1, r1, #1
 800a45e:	440b      	add	r3, r1
 800a460:	b2db      	uxtb	r3, r3
 800a462:	4413      	add	r3, r2
 800a464:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a466:	2300      	movs	r3, #0
 800a468:	757b      	strb	r3, [r7, #21]
 800a46a:	7d7b      	ldrb	r3, [r7, #21]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d811      	bhi.n	800a494 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a470:	7d7b      	ldrb	r3, [r7, #21]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	7bbb      	ldrb	r3, [r7, #14]
 800a476:	441a      	add	r2, r3
 800a478:	7d7b      	ldrb	r3, [r7, #21]
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	440a      	add	r2, r1
 800a47e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	4413      	add	r3, r2
 800a486:	460a      	mov	r2, r1
 800a488:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a48c:	7d7b      	ldrb	r3, [r7, #21]
 800a48e:	3301      	adds	r3, #1
 800a490:	757b      	strb	r3, [r7, #21]
 800a492:	e7ea      	b.n	800a46a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d038      	beq.n	800a510 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d133      	bne.n	800a510 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d12e      	bne.n	800a510 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a4b8:	f003 030c 	and.w	r3, r3, #12
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d027      	beq.n	800a510 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	753b      	strb	r3, [r7, #20]
 800a4cc:	7d3b      	ldrb	r3, [r7, #20]
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d814      	bhi.n	800a4fc <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a4d2:	7d3b      	ldrb	r3, [r7, #20]
 800a4d4:	1cd9      	adds	r1, r3, #3
 800a4d6:	7dba      	ldrb	r2, [r7, #22]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	005b      	lsls	r3, r3, #1
 800a4dc:	4413      	add	r3, r2
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	18ca      	adds	r2, r1, r3
 800a4e2:	7d3b      	ldrb	r3, [r7, #20]
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	460a      	mov	r2, r1
 800a4f2:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a4f4:	7d3b      	ldrb	r3, [r7, #20]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	753b      	strb	r3, [r7, #20]
 800a4fa:	e7e7      	b.n	800a4cc <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a50e:	e03a      	b.n	800a586 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a516:	2b00      	cmp	r3, #0
 800a518:	d031      	beq.n	800a57e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	2b05      	cmp	r3, #5
 800a526:	d12a      	bne.n	800a57e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a52e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d023      	beq.n	800a57e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a536:	2300      	movs	r3, #0
 800a538:	74fb      	strb	r3, [r7, #19]
 800a53a:	7cfb      	ldrb	r3, [r7, #19]
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	d814      	bhi.n	800a56a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a540:	7cfb      	ldrb	r3, [r7, #19]
 800a542:	1cd9      	adds	r1, r3, #3
 800a544:	7dba      	ldrb	r2, [r7, #22]
 800a546:	4613      	mov	r3, r2
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4413      	add	r3, r2
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	18ca      	adds	r2, r1, r3
 800a550:	7cfb      	ldrb	r3, [r7, #19]
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	440a      	add	r2, r1
 800a556:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	460a      	mov	r2, r1
 800a560:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a562:	7cfb      	ldrb	r3, [r7, #19]
 800a564:	3301      	adds	r3, #1
 800a566:	74fb      	strb	r3, [r7, #19]
 800a568:	e7e7      	b.n	800a53a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a574:	b29a      	uxth	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a57c:	e003      	b.n	800a586 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a57e:	7dbb      	ldrb	r3, [r7, #22]
 800a580:	3301      	adds	r3, #1
 800a582:	75bb      	strb	r3, [r7, #22]
 800a584:	e75c      	b.n	800a440 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a586:	e113      	b.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a58e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d11a      	bne.n	800a5da <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a5aa:	b21a      	sxth	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	b21b      	sxth	r3, r3
 800a5b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	b21b      	sxth	r3, r3
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5cc:	f043 0302 	orr.w	r3, r3, #2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a5d8:	e0f1      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2206      	movs	r2, #6
 800a5de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a5e2:	e0ec      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f040 80e2 	bne.w	800a7b4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5f6:	f043 0304 	orr.w	r3, r3, #4
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a608:	f023 0302 	bic.w	r3, r3, #2
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a614:	e0ce      	b.n	800a7b4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f040 80cb 	bne.w	800a7b8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a622:	2300      	movs	r3, #0
 800a624:	74bb      	strb	r3, [r7, #18]
 800a626:	7cbb      	ldrb	r3, [r7, #18]
 800a628:	2b1d      	cmp	r3, #29
 800a62a:	d818      	bhi.n	800a65e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a62c:	7cbb      	ldrb	r3, [r7, #18]
 800a62e:	f103 0209 	add.w	r2, r3, #9
 800a632:	7cbb      	ldrb	r3, [r7, #18]
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	440a      	add	r2, r1
 800a638:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	460a      	mov	r2, r1
 800a642:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a646:	7cbb      	ldrb	r3, [r7, #18]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a654:	7cbb      	ldrb	r3, [r7, #18]
 800a656:	3301      	adds	r3, #1
 800a658:	74bb      	strb	r3, [r7, #18]
 800a65a:	e7e4      	b.n	800a626 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a65c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a670:	e0a2      	b.n	800a7b8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a672:	2300      	movs	r3, #0
 800a674:	747b      	strb	r3, [r7, #17]
 800a676:	7c7b      	ldrb	r3, [r7, #17]
 800a678:	2b05      	cmp	r3, #5
 800a67a:	d80e      	bhi.n	800a69a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a67c:	7c7b      	ldrb	r3, [r7, #17]
 800a67e:	1c9a      	adds	r2, r3, #2
 800a680:	7c7b      	ldrb	r3, [r7, #17]
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	440a      	add	r2, r1
 800a686:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	460a      	mov	r2, r1
 800a690:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a692:	7c7b      	ldrb	r3, [r7, #17]
 800a694:	3301      	adds	r3, #1
 800a696:	747b      	strb	r3, [r7, #17]
 800a698:	e7ed      	b.n	800a676 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a69a:	2300      	movs	r3, #0
 800a69c:	743b      	strb	r3, [r7, #16]
 800a69e:	7c3b      	ldrb	r3, [r7, #16]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d810      	bhi.n	800a6c6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a6a4:	7c3b      	ldrb	r3, [r7, #16]
 800a6a6:	f103 0208 	add.w	r2, r3, #8
 800a6aa:	7c3b      	ldrb	r3, [r7, #16]
 800a6ac:	6879      	ldr	r1, [r7, #4]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	460a      	mov	r2, r1
 800a6ba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a6be:	7c3b      	ldrb	r3, [r7, #16]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	743b      	strb	r3, [r7, #16]
 800a6c4:	e7eb      	b.n	800a69e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	d10a      	bne.n	800a6ea <_ZN3BTD14HCI_event_taskEv+0x556>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a6da:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6f0:	f043 0310 	orr.w	r3, r3, #16
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a6fc:	e05f      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 feec 	bl	800b4e6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a70e:	e056      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d003      	beq.n	800a720 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fee4 	bl	800b4e6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a71e:	e04e      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 ff93 	bl	800b64c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a726:	e04a      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 ffca 	bl	800b6c2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a72e:	e046      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a736:	2b00      	cmp	r3, #0
 800a738:	d123      	bne.n	800a782 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00c      	beq.n	800a75e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a74a:	f083 0301 	eor.w	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a75c:	e02e      	b.n	800a7bc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a764:	2b00      	cmp	r3, #0
 800a766:	d029      	beq.n	800a7bc <_ZN3BTD14HCI_event_taskEv+0x628>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a76e:	f083 0301 	eor.w	r3, r3, #1
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d021      	beq.n	800a7bc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a780:	e01c      	b.n	800a7bc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8b5b      	ldrh	r3, [r3, #26]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f001 f882 	bl	800b892 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2210      	movs	r2, #16
 800a792:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a796:	e011      	b.n	800a7bc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 ffcd 	bl	800b738 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a79e:	e00e      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f810 	bl	800b7c6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a7a6:	e00a      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a7a8:	bf00      	nop
 800a7aa:	e008      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7ac:	bf00      	nop
 800a7ae:	e006      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7b0:	bf00      	nop
 800a7b2:	e004      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7b4:	bf00      	nop
 800a7b6:	e002      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7b8:	bf00      	nop
 800a7ba:	e000      	b.n	800a7be <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7bc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7c6:	bf00      	nop

0800a7c8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7d6:	2b13      	cmp	r3, #19
 800a7d8:	f200 82ef 	bhi.w	800adba <_ZN3BTD8HCI_taskEv+0x5f2>
 800a7dc:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <_ZN3BTD8HCI_taskEv+0x1c>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a835 	.word	0x0800a835
 800a7e8:	0800a86f 	.word	0x0800a86f
 800a7ec:	0800a8f5 	.word	0x0800a8f5
 800a7f0:	0800a915 	.word	0x0800a915
 800a7f4:	0800a935 	.word	0x0800a935
 800a7f8:	0800a989 	.word	0x0800a989
 800a7fc:	0800aa2f 	.word	0x0800aa2f
 800a800:	0800aa5d 	.word	0x0800aa5d
 800a804:	0800aa97 	.word	0x0800aa97
 800a808:	0800aabf 	.word	0x0800aabf
 800a80c:	0800aaf5 	.word	0x0800aaf5
 800a810:	0800ab53 	.word	0x0800ab53
 800a814:	0800ab91 	.word	0x0800ab91
 800a818:	0800acb7 	.word	0x0800acb7
 800a81c:	0800adbb 	.word	0x0800adbb
 800a820:	0800acfd 	.word	0x0800acfd
 800a824:	0800ad2b 	.word	0x0800ad2b
 800a828:	0800a9bf 	.word	0x0800a9bf
 800a82c:	0800a9f5 	.word	0x0800a9f5
 800a830:	0800aa15 	.word	0x0800aa15
                case HCI_INIT_STATE:
                        hci_counter++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a83a:	3301      	adds	r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a850:	429a      	cmp	r2, r3
 800a852:	f240 82b4 	bls.w	800adbe <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb7d 	bl	800af56 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a86c:	e2a7      	b.n	800adbe <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a874:	3301      	adds	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2202      	movs	r2, #2
 800a898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 f830 	bl	800b902 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a8a2:	e28e      	b.n	800adc2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	f240 8286 	bls.w	800adc2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8bc:	461a      	mov	r2, r3
 800a8be:	0092      	lsls	r2, r2, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8d6:	d904      	bls.n	800a8e2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8de:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a8f2:	e266      	b.n	800adc2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8261 	beq.w	800adc6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2203      	movs	r2, #3
 800a908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fb72 	bl	800aff6 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a912:	e258      	b.n	800adc6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 8253 	beq.w	800adca <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fb8a 	bl	800b03e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2204      	movs	r2, #4
 800a92e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a932:	e24a      	b.n	800adca <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 8245 	beq.w	800adce <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fc5d 	bl	800b212 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2205      	movs	r2, #5
 800a95c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a960:	e235      	b.n	800adce <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a96c:	2100      	movs	r1, #0
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fb89 	bl	800b086 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2211      	movs	r2, #17
 800a978:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a97c:	e227      	b.n	800adce <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2206      	movs	r2, #6
 800a982:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a986:	e222      	b.n	800adce <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 821d 	beq.w	800add2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d008      	beq.n	800a9b4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fb6e 	bl	800b086 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2211      	movs	r2, #17
 800a9ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a9b2:	e20e      	b.n	800add2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2206      	movs	r2, #6
 800a9b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9bc:	e209      	b.n	800add2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8204 	beq.w	800add6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d008      	beq.n	800a9ea <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a9d8:	2101      	movs	r1, #1
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fc9d 	bl	800b31a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2212      	movs	r2, #18
 800a9e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a9e8:	e1f5      	b.n	800add6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2206      	movs	r2, #6
 800a9ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9f2:	e1f0      	b.n	800add6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 81eb 	beq.w	800adda <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fc4d 	bl	800b2a4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2213      	movs	r2, #19
 800aa0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa12:	e1e2      	b.n	800adda <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 81dd 	beq.w	800adde <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2206      	movs	r2, #6
 800aa28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa2c:	e1d7      	b.n	800adde <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <_ZN3BTD8HCI_taskEv+0x27a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d007      	beq.n	800aa52 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fc8f 	bl	800b366 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2207      	movs	r2, #7
 800aa4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800aa50:	e1d8      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	220a      	movs	r2, #10
 800aa56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa5a:	e1d3      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 81bb 	beq.w	800ade2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fcb2 	bl	800b3d6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fb74 	bl	800b16a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	220c      	movs	r2, #12
 800aa86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800aa8a:	e1aa      	b.n	800ade2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2208      	movs	r2, #8
 800aa90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa94:	e1a5      	b.n	800ade2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 81a0 	beq.w	800ade6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fcac 	bl	800b40c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2209      	movs	r2, #9
 800aab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aabc:	e193      	b.n	800ade6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 818e 	beq.w	800adea <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d007      	beq.n	800aaec <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fead 	bl	800b83c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	220a      	movs	r2, #10
 800aae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800aaea:	e17e      	b.n	800adea <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fc8d 	bl	800b40c <_ZN3BTD11hci_connectEv>
                        break;
 800aaf2:	e17a      	b.n	800adea <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aafa:	f083 0301 	eor.w	r3, r3, #1
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 8174 	beq.w	800adee <_ZN3BTD8HCI_taskEv+0x626>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab0c:	f083 0301 	eor.w	r3, r3, #1
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 816b 	beq.w	800adee <_ZN3BTD8HCI_taskEv+0x626>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab1e:	f083 0301 	eor.w	r3, r3, #1
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8162 	beq.w	800adee <_ZN3BTD8HCI_taskEv+0x626>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab30:	f083 0301 	eor.w	r3, r3, #1
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 8159 	beq.w	800adee <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fa29 	bl	800af94 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	220b      	movs	r2, #11
 800ab4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ab50:	e14d      	b.n	800adee <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 faff 	bl	800b16a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	220c      	movs	r2, #12
 800ab70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ab74:	e13d      	b.n	800adf2 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 8136 	beq.w	800adf2 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2210      	movs	r2, #16
 800ab8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ab8e:	e130      	b.n	800adf2 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 812b 	beq.w	800adf6 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3322      	adds	r3, #34	; 0x22
 800aba4:	2208      	movs	r2, #8
 800aba6:	4999      	ldr	r1, [pc, #612]	; (800ae0c <_ZN3BTD8HCI_taskEv+0x644>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f004 fe71 	bl	800f890 <strncmp>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d147      	bne.n	800ac44 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3322      	adds	r3, #34	; 0x22
 800abd8:	2216      	movs	r2, #22
 800abda:	498d      	ldr	r1, [pc, #564]	; (800ae10 <_ZN3BTD8HCI_taskEv+0x648>)
 800abdc:	4618      	mov	r0, r3
 800abde:	f004 fe57 	bl	800f890 <strncmp>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abf0:	e028      	b.n	800ac44 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3322      	adds	r3, #34	; 0x22
 800abf6:	2216      	movs	r2, #22
 800abf8:	4986      	ldr	r1, [pc, #536]	; (800ae14 <_ZN3BTD8HCI_taskEv+0x64c>)
 800abfa:	4618      	mov	r0, r3
 800abfc:	f004 fe48 	bl	800f890 <strncmp>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d110      	bne.n	800ac28 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac26:	e00d      	b.n	800ac44 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3322      	adds	r3, #34	; 0x22
 800ac2c:	2213      	movs	r2, #19
 800ac2e:	497a      	ldr	r1, [pc, #488]	; (800ae18 <_ZN3BTD8HCI_taskEv+0x650>)
 800ac30:	4618      	mov	r0, r3
 800ac32:	f004 fe2d 	bl	800f890 <strncmp>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d103      	bne.n	800ac44 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d117      	bne.n	800ac7e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ac54:	2b25      	cmp	r3, #37	; 0x25
 800ac56:	d112      	bne.n	800ac7e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	d10d      	bne.n	800ac7e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3322      	adds	r3, #34	; 0x22
 800ac66:	2213      	movs	r2, #19
 800ac68:	496c      	ldr	r1, [pc, #432]	; (800ae1c <_ZN3BTD8HCI_taskEv+0x654>)
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f004 fe10 	bl	800f890 <strncmp>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d103      	bne.n	800ac7e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d104      	bne.n	800ac92 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <_ZN3BTD8HCI_taskEv+0x4de>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2208      	movs	r2, #8
 800aca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800aca4:	e0a7      	b.n	800adf6 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa17 	bl	800b0da <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	220d      	movs	r2, #13
 800acb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800acb4:	e09f      	b.n	800adf6 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 809a 	beq.w	800adfa <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	220f      	movs	r2, #15
 800acf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800acfa:	e07e      	b.n	800adfa <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ad02:	3301      	adds	r3, #1
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ad12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad16:	d972      	bls.n	800adfe <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	220a      	movs	r2, #10
 800ad24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ad28:	e069      	b.n	800adfe <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d064      	beq.n	800ae02 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3389      	adds	r3, #137	; 0x89
 800ad44:	2240      	movs	r2, #64	; 0x40
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f004 fd55 	bl	800f7f8 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	33c9      	adds	r3, #201	; 0xc9
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	2100      	movs	r1, #0
 800ad56:	4618      	mov	r0, r3
 800ad58:	f004 fd4e 	bl	800f7f8 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	220a      	movs	r2, #10
 800adb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800adb8:	e023      	b.n	800ae02 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800adba:	bf00      	nop
 800adbc:	e022      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adbe:	bf00      	nop
 800adc0:	e020      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adc2:	bf00      	nop
 800adc4:	e01e      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adc6:	bf00      	nop
 800adc8:	e01c      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adca:	bf00      	nop
 800adcc:	e01a      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adce:	bf00      	nop
 800add0:	e018      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800add2:	bf00      	nop
 800add4:	e016      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800add6:	bf00      	nop
 800add8:	e014      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adda:	bf00      	nop
 800addc:	e012      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adde:	bf00      	nop
 800ade0:	e010      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ade2:	bf00      	nop
 800ade4:	e00e      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ade6:	bf00      	nop
 800ade8:	e00c      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adea:	bf00      	nop
 800adec:	e00a      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adee:	bf00      	nop
 800adf0:	e008      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adf2:	bf00      	nop
 800adf4:	e006      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adf6:	bf00      	nop
 800adf8:	e004      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adfa:	bf00      	nop
 800adfc:	e002      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adfe:	bf00      	nop
 800ae00:	e000      	b.n	800ae04 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ae02:	bf00      	nop
        }
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0800f9bc 	.word	0x0800f9bc
 800ae10:	0800f9c8 	.word	0x0800f9c8
 800ae14:	0800f9e0 	.word	0x0800f9e0
 800ae18:	0800f9f8 	.word	0x0800f9f8
 800ae1c:	0800fa0c 	.word	0x0800fa0c

0800ae20 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ae28:	2340      	movs	r3, #64	; 0x40
 800ae2a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	33c9      	adds	r3, #201	; 0xc9
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ae46:	f107 050a 	add.w	r5, r7, #10
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	462b      	mov	r3, r5
 800ae50:	4622      	mov	r2, r4
 800ae52:	f003 f93e 	bl	800e0d2 <_ZN3USB10inTransferEhhPtPhh>
 800ae56:	4603      	mov	r3, r0
 800ae58:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ae5a:	7b7b      	ldrb	r3, [r7, #13]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d125      	bne.n	800aeac <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ae60:	897b      	ldrh	r3, [r7, #10]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d022      	beq.n	800aeac <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d81d      	bhi.n	800aeac <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	3318      	adds	r3, #24
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d011      	beq.n	800aea4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	3318      	adds	r3, #24
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	6858      	ldr	r0, [r3, #4]
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	3318      	adds	r3, #24
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	32c9      	adds	r2, #201	; 0xc9
 800aea0:	4611      	mov	r1, r2
 800aea2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	3301      	adds	r3, #1
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	e7de      	b.n	800ae6a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aeac:	2300      	movs	r3, #0
 800aeae:	73bb      	strb	r3, [r7, #14]
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d81c      	bhi.n	800aef0 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	3318      	adds	r3, #24
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d010      	beq.n	800aee8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	3318      	adds	r3, #24
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	6859      	ldr	r1, [r3, #4]
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	3318      	adds	r3, #24
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3304      	adds	r3, #4
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4608      	mov	r0, r1
 800aee6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	3301      	adds	r3, #1
 800aeec:	73bb      	strb	r3, [r7, #14]
 800aeee:	e7df      	b.n	800aeb0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bdb0      	pop	{r4, r5, r7, pc}

0800aef8 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08c      	sub	sp, #48	; 0x30
 800aefc:	af08      	add	r7, sp, #32
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af0c:	f023 0301 	bic.w	r3, r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800af28:	2300      	movs	r3, #0
 800af2a:	9307      	str	r3, [sp, #28]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	9306      	str	r3, [sp, #24]
 800af30:	88fb      	ldrh	r3, [r7, #6]
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	9304      	str	r3, [sp, #16]
 800af38:	2300      	movs	r3, #0
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	2300      	movs	r3, #0
 800af3e:	9302      	str	r3, [sp, #8]
 800af40:	2300      	movs	r3, #0
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	2300      	movs	r3, #0
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	2320      	movs	r3, #32
 800af4a:	f002 ffea 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2203      	movs	r2, #3
 800af6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	220c      	movs	r2, #12
 800af72:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3389      	adds	r3, #137	; 0x89
 800af82:	2203      	movs	r2, #3
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff ffb6 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800afa2:	f023 0310 	bic.w	r3, r3, #16
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	221a      	movs	r2, #26
 800afb2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	220c      	movs	r2, #12
 800afba:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2203      	movs	r2, #3
 800afd2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800afd6:	e003      	b.n	800afe0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3389      	adds	r3, #137	; 0x89
 800afe4:	2204      	movs	r2, #4
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff ff85 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b004:	f023 0320 	bic.w	r3, r3, #32
 800b008:	b29a      	uxth	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2209      	movs	r2, #9
 800b014:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2210      	movs	r2, #16
 800b01c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3389      	adds	r3, #137	; 0x89
 800b02c:	2203      	movs	r2, #3
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff ff61 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b04c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b050:	b29a      	uxth	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2210      	movs	r2, #16
 800b064:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3389      	adds	r3, #137	; 0x89
 800b074:	2203      	movs	r2, #3
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff3d 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2210      	movs	r2, #16
 800b0b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	78fa      	ldrb	r2, [r7, #3]
 800b0c0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3389      	adds	r3, #137	; 0x89
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff13 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b0e8:	f023 0302 	bic.w	r3, r3, #2
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2209      	movs	r2, #9
 800b0f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2204      	movs	r2, #4
 800b100:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2207      	movs	r2, #7
 800b108:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7f1a      	ldrb	r2, [r3, #28]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7f5a      	ldrb	r2, [r3, #29]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7f9a      	ldrb	r2, [r3, #30]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	7fda      	ldrb	r2, [r3, #31]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3389      	adds	r3, #137	; 0x89
 800b158:	220a      	movs	r2, #10
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff fecb 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b178:	f023 0308 	bic.w	r3, r3, #8
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2219      	movs	r2, #25
 800b188:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2204      	movs	r2, #4
 800b190:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	220a      	movs	r2, #10
 800b198:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	7f1a      	ldrb	r2, [r3, #28]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7f5a      	ldrb	r2, [r3, #29]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	7f9a      	ldrb	r2, [r3, #30]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7fda      	ldrb	r2, [r3, #31]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3389      	adds	r3, #137	; 0x89
 800b200:	220d      	movs	r2, #13
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff fe77 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800b212:	b590      	push	{r4, r7, lr}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2213      	movs	r2, #19
 800b220:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	220c      	movs	r2, #12
 800b228:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800b22c:	6838      	ldr	r0, [r7, #0]
 800b22e:	f7f4 ffe9 	bl	8000204 <strlen>
 800b232:	4603      	mov	r3, r0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	3301      	adds	r3, #1
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]
 800b244:	7bfc      	ldrb	r4, [r7, #15]
 800b246:	6838      	ldr	r0, [r7, #0]
 800b248:	f7f4 ffdc 	bl	8000204 <strlen>
 800b24c:	4603      	mov	r3, r0
 800b24e:	429c      	cmp	r4, r3
 800b250:	d20e      	bcs.n	800b270 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	441a      	add	r2, r3
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	3303      	adds	r3, #3
 800b25c:	7811      	ldrb	r1, [r2, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	460a      	mov	r2, r1
 800b264:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	3301      	adds	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
 800b26e:	e7e9      	b.n	800b244 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	3303      	adds	r3, #3
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	4413      	add	r3, r2
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800b284:	6838      	ldr	r0, [r7, #0]
 800b286:	f7f4 ffbd 	bl	8000204 <strlen>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3304      	adds	r3, #4
 800b290:	b29b      	uxth	r3, r3
 800b292:	461a      	mov	r2, r3
 800b294:	4621      	mov	r1, r4
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fe2e 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd90      	pop	{r4, r7, pc}

0800b2a4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	220c      	movs	r2, #12
 800b2b8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	22ff      	movs	r2, #255	; 0xff
 800b2c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	22ff      	movs	r2, #255	; 0xff
 800b2d0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	22ff      	movs	r2, #255	; 0xff
 800b2d8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	22ff      	movs	r2, #255	; 0xff
 800b2e0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	22ff      	movs	r2, #255	; 0xff
 800b2e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	221f      	movs	r2, #31
 800b2f0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	22ff      	movs	r2, #255	; 0xff
 800b2f8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3389      	adds	r3, #137	; 0x89
 800b308:	220b      	movs	r2, #11
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff fdf3 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2256      	movs	r2, #86	; 0x56
 800b32a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	220c      	movs	r2, #12
 800b332:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800b344:	2201      	movs	r2, #1
 800b346:	e000      	b.n	800b34a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b348:	2200      	movs	r2, #0
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3389      	adds	r3, #137	; 0x89
 800b354:	2204      	movs	r2, #4
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fdcd 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b378:	b29a      	uxth	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2204      	movs	r2, #4
 800b38c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2205      	movs	r2, #5
 800b394:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2233      	movs	r2, #51	; 0x33
 800b39c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	228b      	movs	r2, #139	; 0x8b
 800b3a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	229e      	movs	r2, #158	; 0x9e
 800b3ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2230      	movs	r2, #48	; 0x30
 800b3b4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	220a      	movs	r2, #10
 800b3bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3389      	adds	r3, #137	; 0x89
 800b3c4:	2208      	movs	r2, #8
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff fd95 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b3ce:	bf00      	nop
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2204      	movs	r2, #4
 800b3ea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3389      	adds	r3, #137	; 0x89
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff fd7a 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	331c      	adds	r3, #28
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f804 	bl	800b428 <_ZN3BTD11hci_connectEPh>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b438:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2205      	movs	r2, #5
 800b448:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2204      	movs	r2, #4
 800b450:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	220d      	movs	r2, #13
 800b458:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781a      	ldrb	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	785a      	ldrb	r2, [r3, #1]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	789a      	ldrb	r2, [r3, #2]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	78da      	ldrb	r2, [r3, #3]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	791a      	ldrb	r2, [r3, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	795a      	ldrb	r2, [r3, #5]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2218      	movs	r2, #24
 800b49c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	22cc      	movs	r2, #204	; 0xcc
 800b4a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3389      	adds	r3, #137	; 0x89
 800b4d4:	2210      	movs	r2, #16
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7ff fd0d 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b4de:	bf00      	nop
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b4e6:	b590      	push	{r4, r7, lr}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	220d      	movs	r2, #13
 800b4f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2204      	movs	r2, #4
 800b4fa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2217      	movs	r2, #23
 800b502:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7f1a      	ldrb	r2, [r3, #28]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	7f5a      	ldrb	r2, [r3, #29]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	7f9a      	ldrb	r2, [r3, #30]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7fda      	ldrb	r2, [r3, #31]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d03f      	beq.n	800b5d0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2206      	movs	r2, #6
 800b554:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d013      	beq.n	800b58a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	2b05      	cmp	r3, #5
 800b56a:	d822      	bhi.n	800b5b2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b56c:	7bfa      	ldrb	r2, [r7, #15]
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	330a      	adds	r3, #10
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	440a      	add	r2, r1
 800b576:	7d11      	ldrb	r1, [r2, #20]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	4413      	add	r3, r2
 800b57c:	460a      	mov	r2, r1
 800b57e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	3301      	adds	r3, #1
 800b586:	73fb      	strb	r3, [r7, #15]
 800b588:	e7ed      	b.n	800b566 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	73bb      	strb	r3, [r7, #14]
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b05      	cmp	r3, #5
 800b592:	d80e      	bhi.n	800b5b2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b594:	7bba      	ldrb	r2, [r7, #14]
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	330a      	adds	r3, #10
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	440a      	add	r2, r1
 800b59e:	7f11      	ldrb	r1, [r2, #28]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	460a      	mov	r2, r1
 800b5a6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	73bb      	strb	r3, [r7, #14]
 800b5b0:	e7ed      	b.n	800b58e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b5b2:	2310      	movs	r3, #16
 800b5b4:	737b      	strb	r3, [r7, #13]
 800b5b6:	7b7b      	ldrb	r3, [r7, #13]
 800b5b8:	2b19      	cmp	r3, #25
 800b5ba:	d83c      	bhi.n	800b636 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b5bc:	7b7b      	ldrb	r3, [r7, #13]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b5c8:	7b7b      	ldrb	r3, [r7, #13]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	737b      	strb	r3, [r7, #13]
 800b5ce:	e7f2      	b.n	800b5b6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7f4 fe15 	bl	8000204 <strlen>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	733b      	strb	r3, [r7, #12]
 800b5e8:	7b3c      	ldrb	r4, [r7, #12]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f4 fe08 	bl	8000204 <strlen>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	d20f      	bcs.n	800b61a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	7b3b      	ldrb	r3, [r7, #12]
 800b600:	441a      	add	r2, r3
 800b602:	7b3b      	ldrb	r3, [r7, #12]
 800b604:	330a      	adds	r3, #10
 800b606:	7811      	ldrb	r1, [r2, #0]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	460a      	mov	r2, r1
 800b60e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b612:	7b3b      	ldrb	r3, [r7, #12]
 800b614:	3301      	adds	r3, #1
 800b616:	733b      	strb	r3, [r7, #12]
 800b618:	e7e6      	b.n	800b5e8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b61a:	7b3b      	ldrb	r3, [r7, #12]
 800b61c:	2b0f      	cmp	r3, #15
 800b61e:	d80a      	bhi.n	800b636 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b620:	7b3b      	ldrb	r3, [r7, #12]
 800b622:	330a      	adds	r3, #10
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4413      	add	r3, r2
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b62e:	7b3b      	ldrb	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	733b      	strb	r3, [r7, #12]
 800b634:	e7f1      	b.n	800b61a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3389      	adds	r3, #137	; 0x89
 800b63a:	221a      	movs	r2, #26
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fc5a 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}

0800b64c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	220e      	movs	r2, #14
 800b658:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2204      	movs	r2, #4
 800b660:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2206      	movs	r2, #6
 800b668:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7f1a      	ldrb	r2, [r3, #28]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7f5a      	ldrb	r2, [r3, #29]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7f9a      	ldrb	r2, [r3, #30]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7fda      	ldrb	r2, [r3, #31]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3389      	adds	r3, #137	; 0x89
 800b6b0:	2209      	movs	r2, #9
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fc1f 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	220c      	movs	r2, #12
 800b6ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2204      	movs	r2, #4
 800b6d6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2206      	movs	r2, #6
 800b6de:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7f1a      	ldrb	r2, [r3, #28]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	7f5a      	ldrb	r2, [r3, #29]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7f9a      	ldrb	r2, [r3, #30]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7fda      	ldrb	r2, [r3, #31]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3389      	adds	r3, #137	; 0x89
 800b726:	2209      	movs	r2, #9
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fbe4 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	222b      	movs	r2, #43	; 0x2b
 800b744:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2204      	movs	r2, #4
 800b74c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2209      	movs	r2, #9
 800b754:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	7f1a      	ldrb	r2, [r3, #28]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	7f5a      	ldrb	r2, [r3, #29]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7f9a      	ldrb	r2, [r3, #30]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	7fda      	ldrb	r2, [r3, #31]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2203      	movs	r2, #3
 800b79c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3389      	adds	r3, #137	; 0x89
 800b7b4:	220c      	movs	r2, #12
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fb9d 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	222c      	movs	r2, #44	; 0x2c
 800b7d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2204      	movs	r2, #4
 800b7da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2206      	movs	r2, #6
 800b7e2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	7f1a      	ldrb	r2, [r3, #28]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	7f5a      	ldrb	r2, [r3, #29]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	7f9a      	ldrb	r2, [r3, #30]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7fda      	ldrb	r2, [r3, #31]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3389      	adds	r3, #137	; 0x89
 800b82a:	2209      	movs	r2, #9
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7ff fb62 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2211      	movs	r2, #17
 800b848:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2204      	movs	r2, #4
 800b850:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8b5b      	ldrh	r3, [r3, #26]
 800b860:	b2da      	uxtb	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8b5b      	ldrh	r3, [r3, #26]
 800b86c:	121b      	asrs	r3, r3, #8
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f003 030f 	and.w	r3, r3, #15
 800b874:	b2da      	uxtb	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3389      	adds	r3, #137	; 0x89
 800b880:	2205      	movs	r2, #5
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fb37 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	460b      	mov	r3, r1
 800b89c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8a4:	f023 0304 	bic.w	r3, r3, #4
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2206      	movs	r2, #6
 800b8b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2203      	movs	r2, #3
 800b8c4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b8c8:	887b      	ldrh	r3, [r7, #2]
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b8d2:	887b      	ldrh	r3, [r7, #2]
 800b8d4:	121b      	asrs	r3, r3, #8
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 030f 	and.w	r3, r3, #15
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2213      	movs	r2, #19
 800b8e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3389      	adds	r3, #137	; 0x89
 800b8f0:	2206      	movs	r2, #6
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff faff 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2224      	movs	r2, #36	; 0x24
 800b90e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	220c      	movs	r2, #12
 800b916:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2203      	movs	r2, #3
 800b91e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2204      	movs	r2, #4
 800b926:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2208      	movs	r2, #8
 800b92e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3389      	adds	r3, #137	; 0x89
 800b93e:	2206      	movs	r2, #6
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fad8 	bl	800aef8 <_ZN3BTD11HCI_CommandEPht>
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b950:	b5b0      	push	{r4, r5, r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af02      	add	r7, sp, #8
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	461a      	mov	r2, r3
 800b95c:	460b      	mov	r3, r1
 800b95e:	817b      	strh	r3, [r7, #10]
 800b960:	4613      	mov	r3, r2
 800b962:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b964:	466b      	mov	r3, sp
 800b966:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b968:	7a7b      	ldrb	r3, [r7, #9]
 800b96a:	1ddc      	adds	r4, r3, #7
 800b96c:	61bc      	str	r4, [r7, #24]
 800b96e:	4623      	mov	r3, r4
 800b970:	3301      	adds	r3, #1
 800b972:	4618      	mov	r0, r3
 800b974:	f04f 0100 	mov.w	r1, #0
 800b978:	f04f 0200 	mov.w	r2, #0
 800b97c:	f04f 0300 	mov.w	r3, #0
 800b980:	00cb      	lsls	r3, r1, #3
 800b982:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b986:	00c2      	lsls	r2, r0, #3
 800b988:	4623      	mov	r3, r4
 800b98a:	3301      	adds	r3, #1
 800b98c:	4618      	mov	r0, r3
 800b98e:	f04f 0100 	mov.w	r1, #0
 800b992:	f04f 0200 	mov.w	r2, #0
 800b996:	f04f 0300 	mov.w	r3, #0
 800b99a:	00cb      	lsls	r3, r1, #3
 800b99c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b9a0:	00c2      	lsls	r2, r0, #3
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	3307      	adds	r3, #7
 800b9a8:	08db      	lsrs	r3, r3, #3
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	ebad 0d03 	sub.w	sp, sp, r3
 800b9b0:	ab02      	add	r3, sp, #8
 800b9b2:	3300      	adds	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b9b6:	897b      	ldrh	r3, [r7, #10]
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b9be:	897b      	ldrh	r3, [r7, #10]
 800b9c0:	121b      	asrs	r3, r3, #8
 800b9c2:	b25b      	sxtb	r3, r3
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	b25b      	sxtb	r3, r3
 800b9ca:	f043 0320 	orr.w	r3, r3, #32
 800b9ce:	b25b      	sxtb	r3, r3
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b9d6:	7a7b      	ldrb	r3, [r7, #9]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b9e0:	7a7b      	ldrb	r3, [r7, #9]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	121b      	asrs	r3, r3, #8
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	7a7a      	ldrb	r2, [r7, #9]
 800b9f0:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b9f2:	7a7b      	ldrb	r3, [r7, #9]
 800b9f4:	121b      	asrs	r3, r3, #8
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ba02:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800ba0a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	83fb      	strh	r3, [r7, #30]
 800ba10:	7a7b      	ldrb	r3, [r7, #9]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	8bfa      	ldrh	r2, [r7, #30]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d20b      	bcs.n	800ba32 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800ba1a:	8bfb      	ldrh	r3, [r7, #30]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	441a      	add	r2, r3
 800ba20:	8bfb      	ldrh	r3, [r7, #30]
 800ba22:	3308      	adds	r3, #8
 800ba24:	7811      	ldrb	r1, [r2, #0]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800ba2a:	8bfb      	ldrh	r3, [r7, #30]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	83fb      	strh	r3, [r7, #30]
 800ba30:	e7ee      	b.n	800ba10 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800ba42:	7a7b      	ldrb	r3, [r7, #9]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	3308      	adds	r3, #8
 800ba48:	b29c      	uxth	r4, r3
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	4623      	mov	r3, r4
 800ba50:	f002 fc4a 	bl	800e2e8 <_ZN3USB11outTransferEhhtPh>
 800ba54:	4603      	mov	r3, r0
 800ba56:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800ba58:	7cfb      	ldrb	r3, [r7, #19]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800ba5e:	4804      	ldr	r0, [pc, #16]	; (800ba70 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800ba60:	f7f6 f8fe 	bl	8001c60 <HAL_Delay>
 800ba64:	46ad      	mov	sp, r5
}
 800ba66:	bf00      	nop
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	000186a0 	.word	0x000186a0

0800ba74 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af02      	add	r7, sp, #8
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	607b      	str	r3, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	817b      	strh	r3, [r7, #10]
 800ba82:	4613      	mov	r3, r2
 800ba84:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2202      	movs	r2, #2
 800ba8a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	7a7a      	ldrb	r2, [r7, #9]
 800ba92:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2204      	movs	r2, #4
 800ba9a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800baa6:	8b3b      	ldrh	r3, [r7, #24]
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800bab0:	8b3b      	ldrh	r3, [r7, #24]
 800bab2:	121b      	asrs	r3, r3, #8
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	785a      	ldrb	r2, [r3, #1]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bad6:	8979      	ldrh	r1, [r7, #10]
 800bad8:	2300      	movs	r3, #0
 800bada:	9301      	str	r3, [sp, #4]
 800badc:	2301      	movs	r3, #1
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2308      	movs	r3, #8
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff ff34 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	817b      	strh	r3, [r7, #10]
 800bafe:	4613      	mov	r3, r2
 800bb00:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2203      	movs	r2, #3
 800bb06:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	7a7a      	ldrb	r2, [r7, #9]
 800bb0e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2208      	movs	r2, #8
 800bb16:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	781a      	ldrb	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	785a      	ldrb	r2, [r3, #1]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	781a      	ldrb	r2, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	785a      	ldrb	r2, [r3, #1]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	7f3a      	ldrb	r2, [r7, #28]
 800bb4e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bb70:	8979      	ldrh	r1, [r7, #10]
 800bb72:	2300      	movs	r3, #0
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	2301      	movs	r3, #1
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fee7 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb82:	bf00      	nop
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b086      	sub	sp, #24
 800bb8e:	af02      	add	r7, sp, #8
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	607b      	str	r3, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	817b      	strh	r3, [r7, #10]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2204      	movs	r2, #4
 800bba0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	7a7a      	ldrb	r2, [r7, #9]
 800bba8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2208      	movs	r2, #8
 800bbb0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	781a      	ldrb	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	785a      	ldrb	r2, [r3, #1]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2202      	movs	r2, #2
 800bbec:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	22ff      	movs	r2, #255	; 0xff
 800bbf4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	22ff      	movs	r2, #255	; 0xff
 800bbfc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bc06:	8979      	ldrh	r1, [r7, #10]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	230c      	movs	r3, #12
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7ff fe9c 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bc18:	bf00      	nop
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	607b      	str	r3, [r7, #4]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	817b      	strh	r3, [r7, #10]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2205      	movs	r2, #5
 800bc36:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	7a7a      	ldrb	r2, [r7, #9]
 800bc3e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	220a      	movs	r2, #10
 800bc46:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	781a      	ldrb	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	785a      	ldrb	r2, [r3, #1]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2202      	movs	r2, #2
 800bc92:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	22a0      	movs	r2, #160	; 0xa0
 800bc9a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2202      	movs	r2, #2
 800bca2:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bcac:	8979      	ldrh	r1, [r7, #10]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	230e      	movs	r3, #14
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7ff fe49 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af02      	add	r7, sp, #8
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	607b      	str	r3, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	817b      	strh	r3, [r7, #10]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2206      	movs	r2, #6
 800bcdc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7a7a      	ldrb	r2, [r7, #9]
 800bce4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2204      	movs	r2, #4
 800bcec:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	781a      	ldrb	r2, [r3, #0]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	785a      	ldrb	r2, [r3, #1]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	785a      	ldrb	r2, [r3, #1]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bd26:	8979      	ldrh	r1, [r7, #10]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	2308      	movs	r3, #8
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff fe0c 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	817b      	strh	r3, [r7, #10]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2207      	movs	r2, #7
 800bd56:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	7a7a      	ldrb	r2, [r7, #9]
 800bd5e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2204      	movs	r2, #4
 800bd66:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	781a      	ldrb	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	785a      	ldrb	r2, [r3, #1]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	785a      	ldrb	r2, [r3, #1]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bda0:	8979      	ldrh	r1, [r7, #10]
 800bda2:	2300      	movs	r3, #0
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	2301      	movs	r3, #1
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	2308      	movs	r3, #8
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff fdcf 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bdb2:	bf00      	nop
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af02      	add	r7, sp, #8
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	4608      	mov	r0, r1
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4603      	mov	r3, r0
 800bdca:	807b      	strh	r3, [r7, #2]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	707b      	strb	r3, [r7, #1]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	220b      	movs	r2, #11
 800bdd8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	787a      	ldrb	r2, [r7, #1]
 800bde0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2208      	movs	r2, #8
 800bde8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	783a      	ldrb	r2, [r7, #0]
 800bdf8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c3a      	ldrb	r2, [r7, #16]
 800be00:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f203 1209 	addw	r2, r3, #265	; 0x109
 800be3a:	8879      	ldrh	r1, [r7, #2]
 800be3c:	2300      	movs	r3, #0
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	2301      	movs	r3, #1
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	230c      	movs	r3, #12
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff fd82 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800be54:	b580      	push	{r7, lr}
 800be56:	b08e      	sub	sp, #56	; 0x38
 800be58:	af08      	add	r7, sp, #32
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800be5e:	2301      	movs	r3, #1
 800be60:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800be62:	2300      	movs	r3, #0
 800be64:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800be66:	2300      	movs	r3, #0
 800be68:	75fb      	strb	r3, [r7, #23]
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	2b05      	cmp	r3, #5
 800be6e:	d811      	bhi.n	800be94 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	f1c3 0305 	rsb	r3, r3, #5
 800be76:	461a      	mov	r2, r3
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	441a      	add	r2, r3
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	3302      	adds	r3, #2
 800be80:	7812      	ldrb	r2, [r2, #0]
 800be82:	f107 0118 	add.w	r1, r7, #24
 800be86:	440b      	add	r3, r1
 800be88:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	3301      	adds	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
 800be92:	e7ea      	b.n	800be6a <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bea4:	2300      	movs	r3, #0
 800bea6:	9307      	str	r3, [sp, #28]
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	9306      	str	r3, [sp, #24]
 800beae:	2308      	movs	r3, #8
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	2308      	movs	r3, #8
 800beb4:	9304      	str	r3, [sp, #16]
 800beb6:	2300      	movs	r3, #0
 800beb8:	9303      	str	r3, [sp, #12]
 800beba:	2303      	movs	r3, #3
 800bebc:	9302      	str	r3, [sp, #8]
 800bebe:	23f5      	movs	r3, #245	; 0xf5
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	2309      	movs	r3, #9
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	2321      	movs	r3, #33	; 0x21
 800bec8:	f002 f82b 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800becc:	bf00      	nop
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08e      	sub	sp, #56	; 0x38
 800bed8:	af08      	add	r7, sp, #32
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800bede:	2305      	movs	r3, #5
 800bee0:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800bee2:	2310      	movs	r3, #16
 800bee4:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800bee6:	2301      	movs	r3, #1
 800bee8:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800beea:	2302      	movs	r3, #2
 800beec:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800beee:	2312      	movs	r3, #18
 800bef0:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b05      	cmp	r3, #5
 800befa:	d80e      	bhi.n	800bf1a <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	441a      	add	r2, r3
 800bf02:	7dfb      	ldrb	r3, [r7, #23]
 800bf04:	3301      	adds	r3, #1
 800bf06:	7812      	ldrb	r2, [r2, #0]
 800bf08:	f107 0118 	add.w	r1, r7, #24
 800bf0c:	440b      	add	r3, r1
 800bf0e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	3301      	adds	r3, #1
 800bf16:	75fb      	strb	r3, [r7, #23]
 800bf18:	e7ed      	b.n	800bef6 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9307      	str	r3, [sp, #28]
 800bf2e:	f107 030c 	add.w	r3, r7, #12
 800bf32:	9306      	str	r3, [sp, #24]
 800bf34:	230b      	movs	r3, #11
 800bf36:	9305      	str	r3, [sp, #20]
 800bf38:	230b      	movs	r3, #11
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	2303      	movs	r3, #3
 800bf42:	9302      	str	r3, [sp, #8]
 800bf44:	2305      	movs	r3, #5
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	2309      	movs	r3, #9
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	2321      	movs	r3, #33	; 0x21
 800bf4e:	f001 ffe8 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bf52:	bf00      	nop
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	4a04      	ldr	r2, [pc, #16]	; (800bf78 <_ZN13USBReadParserC1Ev+0x1c>)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	0800fb3c 	.word	0x0800fb3c

0800bf7c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7ff ffe7 	bl	800bf5c <_ZN13USBReadParserC1Ev>
 800bf8e:	4a21      	ldr	r2, [pc, #132]	; (800c014 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	605a      	str	r2, [r3, #4]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fd fb51 	bl	8009646 <_ZN16MultiValueBufferC1Ev>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3310      	adds	r3, #16
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fd fb63 	bl	8009674 <_ZN20MultiByteValueParserC1Ev>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3318      	adds	r3, #24
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fd fb8a 	bl	80096cc <_ZN11ByteSkipperC1Ev>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f103 0220 	add.w	r2, r3, #32
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f103 0210 	add.w	r2, r3, #16
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3308      	adds	r3, #8
 800bfee:	4619      	mov	r1, r3
 800bff0:	4610      	mov	r0, r2
 800bff2:	f7fd fb53 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f103 0218 	add.w	r2, r3, #24
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3308      	adds	r3, #8
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fd fb76 	bl	80096f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	0800fae4 	.word	0x0800fae4

0800c018 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff ff99 	bl	800bf5c <_ZN13USBReadParserC1Ev>
 800c02a:	4a21      	ldr	r2, [pc, #132]	; (800c0b0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3308      	adds	r3, #8
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fd fb03 	bl	8009646 <_ZN16MultiValueBufferC1Ev>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3310      	adds	r3, #16
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fb15 	bl	8009674 <_ZN20MultiByteValueParserC1Ev>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3318      	adds	r3, #24
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fd fb3c 	bl	80096cc <_ZN11ByteSkipperC1Ev>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f103 0220 	add.w	r2, r3, #32
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f103 0210 	add.w	r2, r3, #16
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3308      	adds	r3, #8
 800c08a:	4619      	mov	r1, r3
 800c08c:	4610      	mov	r0, r2
 800c08e:	f7fd fb05 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f103 0218 	add.w	r2, r3, #24
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	3308      	adds	r3, #8
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fd fb28 	bl	80096f4 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0800fad8 	.word	0x0800fad8

0800c0b4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	607a      	str	r2, [r7, #4]
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c0c4:	897b      	ldrh	r3, [r7, #10]
 800c0c6:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800c0cc:	8afb      	ldrh	r3, [r7, #22]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00f      	beq.n	800c0f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c0d2:	f107 0216 	add.w	r2, r7, #22
 800c0d6:	f107 0310 	add.w	r3, r7, #16
 800c0da:	4619      	mov	r1, r3
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 f82d 	bl	800c13c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f083 0301 	eor.w	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d100      	bne.n	800c0f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c0ee:	e7ed      	b.n	800c0cc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c0f0:	bf00      	nop
}
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	607a      	str	r2, [r7, #4]
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	460b      	mov	r3, r1
 800c106:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c108:	897b      	ldrh	r3, [r7, #10]
 800c10a:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800c110:	8afb      	ldrh	r3, [r7, #22]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00f      	beq.n	800c136 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c116:	f107 0216 	add.w	r2, r7, #22
 800c11a:	f107 0310 	add.w	r3, r7, #16
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f981 	bl	800c428 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c126:	4603      	mov	r3, r0
 800c128:	f083 0301 	eor.w	r3, r3, #1
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d100      	bne.n	800c134 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c132:	e7ed      	b.n	800c110 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c134:	bf00      	nop
}
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c13e:	b089      	sub	sp, #36	; 0x24
 800c140:	af02      	add	r7, sp, #8
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3320      	adds	r3, #32
 800c14c:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3320      	adds	r3, #32
 800c152:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	f200 815e 	bhi.w	800c41c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c160:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c166:	bf00      	nop
 800c168:	0800c17d 	.word	0x0800c17d
 800c16c:	0800c19d 	.word	0x0800c19d
 800c170:	0800c1df 	.word	0x0800c1df
 800c174:	0800c1f3 	.word	0x0800c1f3
 800c178:	0800c2b7 	.word	0x0800c2b7
                case 0:
                        theBuffer.valueSize = 2;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2202      	movs	r2, #2
 800c180:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f103 0210 	add.w	r2, r3, #16
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3308      	adds	r3, #8
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7fd fa84 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3310      	adds	r3, #16
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f003 fa8f 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f083 0301 	eor.w	r3, r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e131      	b.n	800c41e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c1c0:	781a      	ldrb	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c1ce:	785a      	ldrb	r2, [r3, #1]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3320      	adds	r3, #32
 800c1e2:	1c9a      	adds	r2, r3, #2
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2203      	movs	r2, #3
 800c1ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c1f8:	3b02      	subs	r3, #2
 800c1fa:	2b1f      	cmp	r3, #31
 800c1fc:	d847      	bhi.n	800c28e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c1fe:	a201      	add	r2, pc, #4	; (adr r2, 800c204 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c204:	0800c28f 	.word	0x0800c28f
 800c208:	0800c28f 	.word	0x0800c28f
 800c20c:	0800c285 	.word	0x0800c285
 800c210:	0800c28f 	.word	0x0800c28f
 800c214:	0800c28f 	.word	0x0800c28f
 800c218:	0800c28f 	.word	0x0800c28f
 800c21c:	0800c28f 	.word	0x0800c28f
 800c220:	0800c28f 	.word	0x0800c28f
 800c224:	0800c28f 	.word	0x0800c28f
 800c228:	0800c28f 	.word	0x0800c28f
 800c22c:	0800c28f 	.word	0x0800c28f
 800c230:	0800c28f 	.word	0x0800c28f
 800c234:	0800c28f 	.word	0x0800c28f
 800c238:	0800c28f 	.word	0x0800c28f
 800c23c:	0800c28f 	.word	0x0800c28f
 800c240:	0800c28f 	.word	0x0800c28f
 800c244:	0800c28f 	.word	0x0800c28f
 800c248:	0800c28f 	.word	0x0800c28f
 800c24c:	0800c28f 	.word	0x0800c28f
 800c250:	0800c28f 	.word	0x0800c28f
 800c254:	0800c28f 	.word	0x0800c28f
 800c258:	0800c28f 	.word	0x0800c28f
 800c25c:	0800c28f 	.word	0x0800c28f
 800c260:	0800c28f 	.word	0x0800c28f
 800c264:	0800c28f 	.word	0x0800c28f
 800c268:	0800c28f 	.word	0x0800c28f
 800c26c:	0800c28f 	.word	0x0800c28f
 800c270:	0800c28f 	.word	0x0800c28f
 800c274:	0800c28f 	.word	0x0800c28f
 800c278:	0800c28f 	.word	0x0800c28f
 800c27c:	0800c28f 	.word	0x0800c28f
 800c280:	0800c28f 	.word	0x0800c28f
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c28c:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c294:	3b02      	subs	r3, #2
 800c296:	b2da      	uxtb	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f103 0210 	add.w	r2, r3, #16
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f7fd f9f7 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2204      	movs	r2, #4
 800c2b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c2bc:	2b05      	cmp	r3, #5
 800c2be:	d055      	beq.n	800c36c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	f300 8085 	bgt.w	800c3d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d002      	beq.n	800c2d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c2ca:	2b04      	cmp	r3, #4
 800c2cc:	d015      	beq.n	800c2fa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c2ce:	e07f      	b.n	800c3d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3310      	adds	r3, #16
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f003 f9f5 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f083 0301 	eor.w	r3, r3, #1
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e097      	b.n	800c41e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	795a      	ldrb	r2, [r3, #5]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c2f8:	e086      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3310      	adds	r3, #16
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	4618      	mov	r0, r3
 800c304:	f003 f9e0 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c308:	4603      	mov	r3, r0
 800c30a:	f083 0301 	eor.w	r3, r3, #1
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c314:	2300      	movs	r3, #0
 800c316:	e082      	b.n	800c41e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	795b      	ldrb	r3, [r3, #5]
 800c31c:	2be0      	cmp	r3, #224	; 0xe0
 800c31e:	d16c      	bne.n	800c3fa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	799b      	ldrb	r3, [r3, #6]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d16a      	bne.n	800c3fe <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d004      	beq.n	800c33c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	79db      	ldrb	r3, [r3, #7]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d104      	bne.n	800c344 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c33a:	e065      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	79db      	ldrb	r3, [r3, #7]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d15e      	bne.n	800c402 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	789a      	ldrb	r2, [r3, #2]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	78da      	ldrb	r2, [r3, #3]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	79da      	ldrb	r2, [r3, #7]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c36a:	e04d      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3310      	adds	r3, #16
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	4618      	mov	r0, r3
 800c376:	f003 f9a7 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f083 0301 	eor.w	r3, r3, #1
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c386:	2300      	movs	r3, #0
 800c388:	e049      	b.n	800c41e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c390:	2b00      	cmp	r3, #0
 800c392:	d038      	beq.n	800c406 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d034      	beq.n	800c406 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6858      	ldr	r0, [r3, #4]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681c      	ldr	r4, [r3, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	3220      	adds	r2, #32
 800c3c4:	9201      	str	r2, [sp, #4]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	4633      	mov	r3, r6
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	47a0      	blx	r4
                                        break;
 800c3ce:	e01a      	b.n	800c406 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f103 0018 	add.w	r0, r3, #24
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	3b02      	subs	r3, #2
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	68b9      	ldr	r1, [r7, #8]
 800c3e6:	f7fd f998 	bl	800971a <_ZN11ByteSkipper4SkipEPPhPtt>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f083 0301 	eor.w	r3, r3, #1
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e011      	b.n	800c41e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c3fa:	bf00      	nop
 800c3fc:	e004      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c3fe:	bf00      	nop
 800c400:	e002      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c402:	bf00      	nop
 800c404:	e000      	b.n	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c406:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f103 0220 	add.w	r2, r3, #32
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c41c:	2301      	movs	r3, #1
}
 800c41e:	4618      	mov	r0, r3
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c426:	bf00      	nop

0800c428 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c42a:	b089      	sub	sp, #36	; 0x24
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3320      	adds	r3, #32
 800c438:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3320      	adds	r3, #32
 800c43e:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c446:	2b04      	cmp	r3, #4
 800c448:	f200 815e 	bhi.w	800c708 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c44c:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c452:	bf00      	nop
 800c454:	0800c469 	.word	0x0800c469
 800c458:	0800c489 	.word	0x0800c489
 800c45c:	0800c4cb 	.word	0x0800c4cb
 800c460:	0800c4df 	.word	0x0800c4df
 800c464:	0800c5a3 	.word	0x0800c5a3
                        theBuffer.valueSize = 2;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2202      	movs	r2, #2
 800c46c:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f103 0210 	add.w	r2, r3, #16
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3308      	adds	r3, #8
 800c478:	4619      	mov	r1, r3
 800c47a:	4610      	mov	r0, r2
 800c47c:	f7fd f90e 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3310      	adds	r3, #16
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	4618      	mov	r0, r3
 800c492:	f003 f919 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c496:	4603      	mov	r3, r0
 800c498:	f083 0301 	eor.w	r3, r3, #1
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e131      	b.n	800c70a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c4ac:	781a      	ldrb	r2, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c4ba:	785a      	ldrb	r2, [r3, #1]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3320      	adds	r3, #32
 800c4ce:	1c9a      	adds	r2, r3, #2
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2203      	movs	r2, #3
 800c4da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c4e4:	3b02      	subs	r3, #2
 800c4e6:	2b1f      	cmp	r3, #31
 800c4e8:	d847      	bhi.n	800c57a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c4ea:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f0:	0800c57b 	.word	0x0800c57b
 800c4f4:	0800c57b 	.word	0x0800c57b
 800c4f8:	0800c571 	.word	0x0800c571
 800c4fc:	0800c57b 	.word	0x0800c57b
 800c500:	0800c57b 	.word	0x0800c57b
 800c504:	0800c57b 	.word	0x0800c57b
 800c508:	0800c57b 	.word	0x0800c57b
 800c50c:	0800c57b 	.word	0x0800c57b
 800c510:	0800c57b 	.word	0x0800c57b
 800c514:	0800c57b 	.word	0x0800c57b
 800c518:	0800c57b 	.word	0x0800c57b
 800c51c:	0800c57b 	.word	0x0800c57b
 800c520:	0800c57b 	.word	0x0800c57b
 800c524:	0800c57b 	.word	0x0800c57b
 800c528:	0800c57b 	.word	0x0800c57b
 800c52c:	0800c57b 	.word	0x0800c57b
 800c530:	0800c57b 	.word	0x0800c57b
 800c534:	0800c57b 	.word	0x0800c57b
 800c538:	0800c57b 	.word	0x0800c57b
 800c53c:	0800c57b 	.word	0x0800c57b
 800c540:	0800c57b 	.word	0x0800c57b
 800c544:	0800c57b 	.word	0x0800c57b
 800c548:	0800c57b 	.word	0x0800c57b
 800c54c:	0800c57b 	.word	0x0800c57b
 800c550:	0800c57b 	.word	0x0800c57b
 800c554:	0800c57b 	.word	0x0800c57b
 800c558:	0800c57b 	.word	0x0800c57b
 800c55c:	0800c57b 	.word	0x0800c57b
 800c560:	0800c57b 	.word	0x0800c57b
 800c564:	0800c57b 	.word	0x0800c57b
 800c568:	0800c57b 	.word	0x0800c57b
 800c56c:	0800c57b 	.word	0x0800c57b
                                        isGoodInterface = false;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c578:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c580:	3b02      	subs	r3, #2
 800c582:	b2da      	uxtb	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f103 0210 	add.w	r2, r3, #16
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3308      	adds	r3, #8
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7fd f881 	bl	800969c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2204      	movs	r2, #4
 800c59e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c5a8:	2b05      	cmp	r3, #5
 800c5aa:	d055      	beq.n	800c658 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	f300 8085 	bgt.w	800c6bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d002      	beq.n	800c5bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c5b6:	2b04      	cmp	r3, #4
 800c5b8:	d015      	beq.n	800c5e6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c5ba:	e07f      	b.n	800c6bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3310      	adds	r3, #16
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f003 f87f 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	f083 0301 	eor.w	r3, r3, #1
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	e097      	b.n	800c70a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	795a      	ldrb	r2, [r3, #5]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c5e4:	e086      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3310      	adds	r3, #16
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f003 f86a 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f083 0301 	eor.w	r3, r3, #1
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c600:	2300      	movs	r3, #0
 800c602:	e082      	b.n	800c70a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	795b      	ldrb	r3, [r3, #5]
 800c608:	2bff      	cmp	r3, #255	; 0xff
 800c60a:	d16c      	bne.n	800c6e6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	799b      	ldrb	r3, [r3, #6]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d16a      	bne.n	800c6ea <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	79db      	ldrb	r3, [r3, #7]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d104      	bne.n	800c630 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c626:	e065      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	79db      	ldrb	r3, [r3, #7]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d15e      	bne.n	800c6ee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	789a      	ldrb	r2, [r3, #2]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	78da      	ldrb	r2, [r3, #3]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	79da      	ldrb	r2, [r3, #7]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c656:	e04d      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3310      	adds	r3, #16
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	4618      	mov	r0, r3
 800c662:	f003 f831 	bl	800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c666:	4603      	mov	r3, r0
 800c668:	f083 0301 	eor.w	r3, r3, #1
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c672:	2300      	movs	r3, #0
 800c674:	e049      	b.n	800c70a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d038      	beq.n	800c6f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d034      	beq.n	800c6f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6858      	ldr	r0, [r3, #4]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681c      	ldr	r4, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	3220      	adds	r2, #32
 800c6b0:	9201      	str	r2, [sp, #4]
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	4633      	mov	r3, r6
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	47a0      	blx	r4
                                        break;
 800c6ba:	e01a      	b.n	800c6f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f103 0018 	add.w	r0, r3, #24
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	3b02      	subs	r3, #2
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	f7fd f822 	bl	800971a <_ZN11ByteSkipper4SkipEPPhPtt>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f083 0301 	eor.w	r3, r3, #1
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d008      	beq.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e011      	b.n	800c70a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c6e6:	bf00      	nop
 800c6e8:	e004      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c6ea:	bf00      	nop
 800c6ec:	e002      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c6ee:	bf00      	nop
 800c6f0:	e000      	b.n	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c6f2:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f103 0220 	add.w	r2, r3, #32
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c708:	2301      	movs	r3, #1
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	371c      	adds	r7, #28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c712:	bf00      	nop

0800c714 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
 800c722:	7bfb      	ldrb	r3, [r7, #15]
 800c724:	2b03      	cmp	r3, #3
 800c726:	d815      	bhi.n	800c754 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	3318      	adds	r3, #24
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d109      	bne.n	800c74c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	3318      	adds	r3, #24
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c74a:	e005      	b.n	800c758 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	3301      	adds	r3, #1
 800c750:	73fb      	strb	r3, [r7, #15]
 800c752:	e7e6      	b.n	800c722 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c754:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
 800c76e:	4a0a      	ldr	r2, [pc, #40]	; (800c798 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff ffc3 	bl	800c714 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	0800fba0 	.word	0x0800fba0

0800c79c <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	88fb      	ldrh	r3, [r7, #6]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d10b      	bne.n	800c7d0 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	88fb      	ldrh	r3, [r7, #6]
 800c7c2:	121b      	asrs	r3, r3, #8
 800c7c4:	f043 0320 	orr.w	r3, r3, #32
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d101      	bne.n	800c7d0 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e000      	b.n	800c7d2 <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c7d0:	2300      	movs	r3, #0
        }
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c7de:	b480      	push	{r7}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	607a      	str	r2, [r7, #4]
 800c7ea:	72fb      	strb	r3, [r7, #11]
                return;
 800c7ec:	bf00      	nop
        };
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
                return;
 800c800:	bf00      	nop
        };
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
                return;
 800c814:	bf00      	nop
        }
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff ff95 	bl	800c764 <_ZN16BluetoothServiceC1EP3BTD>
 800c83a:	4a1f      	ldr	r2, [pc, #124]	; (800c8b8 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c848:	2300      	movs	r3, #0
 800c84a:	75fb      	strb	r3, [r7, #23]
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d809      	bhi.n	800c866 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c852:	7dfa      	ldrb	r2, [r7, #23]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3208      	adds	r2, #8
 800c858:	2100      	movs	r1, #0
 800c85a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	3301      	adds	r3, #1
 800c862:	75fb      	strb	r3, [r7, #23]
 800c864:	e7f2      	b.n	800c84c <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	79fa      	ldrb	r2, [r7, #7]
 800c86c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2250      	movs	r2, #80	; 0x50
 800c87c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2270      	movs	r2, #112	; 0x70
 800c88c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2271      	movs	r2, #113	; 0x71
 800c89c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 f807 	bl	800c8bc <_ZN5BTHID5ResetEv>
}
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	0800fb74 	.word	0x0800fb74

0800c8bc <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
        connected = false;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	220a      	movs	r2, #10
 800c8e4:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	3320      	adds	r3, #32
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	4798      	blx	r3
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c902:	b590      	push	{r4, r7, lr}
 800c904:	b085      	sub	sp, #20
 800c906:	af02      	add	r7, sp, #8
 800c908:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c910:	2b00      	cmp	r3, #0
 800c912:	d014      	beq.n	800c93e <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6898      	ldr	r0, [r3, #8]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8999      	ldrh	r1, [r3, #12]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7d1b      	ldrb	r3, [r3, #20]
 800c920:	3301      	adds	r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	751a      	strb	r2, [r3, #20]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	7d1a      	ldrb	r2, [r3, #20]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f103 041b 	add.w	r4, r3, #27
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	336f      	adds	r3, #111	; 0x6f
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4623      	mov	r3, r4
 800c93a:	f7ff f9c4 	bl	800bcc6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6898      	ldr	r0, [r3, #8]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	8999      	ldrh	r1, [r3, #12]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7d1b      	ldrb	r3, [r3, #20]
 800c94a:	3301      	adds	r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	751a      	strb	r2, [r3, #20]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7d1a      	ldrb	r2, [r3, #20]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f103 0418 	add.w	r4, r3, #24
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	336d      	adds	r3, #109	; 0x6d
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4623      	mov	r3, r4
 800c964:	f7ff f9af 	bl	800bcc6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3308      	adds	r3, #8
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	220e      	movs	r2, #14
 800c978:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2209      	movs	r2, #9
 800c97e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	bd90      	pop	{r4, r7, pc}
	...

0800c98c <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b087      	sub	sp, #28
 800c990:	af02      	add	r7, sp, #8
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7d5b      	ldrb	r3, [r3, #21]
 800c99a:	f083 0301 	eor.w	r3, r3, #1
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d023      	beq.n	800c9ec <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d11e      	bne.n	800c9ec <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	330c      	adds	r3, #12
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	330d      	adds	r3, #13
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	021b      	lsls	r3, r3, #8
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d113      	bne.n	800c9ec <_ZN5BTHID7ACLDataEPh+0x60>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	7a9b      	ldrb	r3, [r3, #10]
 800c9ca:	f083 0301 	eor.w	r3, r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00b      	beq.n	800c9ec <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	8b5a      	ldrh	r2, [r3, #26]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	220a      	movs	r2, #10
 800c9ea:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	7a5b      	ldrb	r3, [r3, #9]
 800c9f2:	f083 0301 	eor.w	r3, r3, #1
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d03a      	beq.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d034      	beq.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7d5b      	ldrb	r3, [r3, #21]
 800ca0c:	f083 0301 	eor.w	r3, r3, #1
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d02d      	beq.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ca1c:	f083 0301 	eor.w	r3, r3, #1
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d025      	beq.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d120      	bne.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	330c      	adds	r3, #12
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	330d      	adds	r3, #13
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	4313      	orrs	r3, r2
 800ca42:	2b11      	cmp	r3, #17
 800ca44:	d115      	bne.n	800ca72 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	2201      	movs	r2, #1
 800ca56:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	8b5a      	ldrh	r2, [r3, #26]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	899b      	ldrh	r3, [r3, #12]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	f7ff fe8e 	bl	800c79c <_ZN16BluetoothService14checkHciHandleEPht>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 83dd 	beq.w	800d242 <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	3306      	adds	r3, #6
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	3307      	adds	r3, #7
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	021b      	lsls	r3, r3, #8
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	f040 829b 	bne.w	800cfd6 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	3308      	adds	r3, #8
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	f000 83c5 	beq.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	3308      	adds	r3, #8
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	f040 808d 	bne.w	800cbd2 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	3310      	adds	r3, #16
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	3311      	adds	r3, #17
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	021b      	lsls	r3, r3, #8
 800cac8:	4313      	orrs	r3, r2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f040 83b3 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	3312      	adds	r3, #18
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	3313      	adds	r3, #19
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	021b      	lsls	r3, r3, #8
 800cae0:	4313      	orrs	r3, r2
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f040 83a7 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	330e      	adds	r3, #14
 800caec:	781a      	ldrb	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d124      	bne.n	800cb42 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	330f      	adds	r3, #15
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d11c      	bne.n	800cb42 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	7a5a      	ldrb	r2, [r3, #9]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	7b1a      	ldrb	r2, [r3, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	7b5a      	ldrb	r2, [r3, #13]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7d1b      	ldrb	r3, [r3, #20]
 800cb24:	3301      	adds	r3, #1
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6898      	ldr	r0, [r3, #8]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	8999      	ldrh	r1, [r3, #12]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7d1a      	ldrb	r2, [r3, #20]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	331b      	adds	r3, #27
 800cb3c:	f7ff f825 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>
 800cb40:	e379      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	330e      	adds	r3, #14
 800cb46:	781a      	ldrb	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d11a      	bne.n	800cb88 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	330f      	adds	r3, #15
 800cb56:	781a      	ldrb	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d112      	bne.n	800cb88 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	7a5a      	ldrb	r2, [r3, #9]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	7b1a      	ldrb	r2, [r3, #12]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	7b5a      	ldrb	r2, [r3, #13]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	f043 0204 	orr.w	r2, r3, #4
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	611a      	str	r2, [r3, #16]
 800cb86:	e356      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	330e      	adds	r3, #14
 800cb8c:	781a      	ldrb	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb94:	429a      	cmp	r2, r3
 800cb96:	f040 834e 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	330f      	adds	r3, #15
 800cb9e:	781a      	ldrb	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cba6:	429a      	cmp	r2, r3
 800cba8:	f040 8345 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	7a5a      	ldrb	r2, [r3, #9]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	7b1a      	ldrb	r2, [r3, #12]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	7b5a      	ldrb	r2, [r3, #13]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	611a      	str	r2, [r3, #16]
 800cbd0:	e331      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d15a      	bne.n	800cc92 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	330c      	adds	r3, #12
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	330d      	adds	r3, #13
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	4313      	orrs	r3, r2
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d112      	bne.n	800cc18 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	7a5a      	ldrb	r2, [r3, #9]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	7b9a      	ldrb	r2, [r3, #14]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	7bda      	ldrb	r2, [r3, #15]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	611a      	str	r2, [r3, #16]
 800cc16:	e30e      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	330d      	adds	r3, #13
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	2b11      	cmp	r3, #17
 800cc2c:	d112      	bne.n	800cc54 <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	7a5a      	ldrb	r2, [r3, #9]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	7b9a      	ldrb	r2, [r3, #14]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	7bda      	ldrb	r2, [r3, #15]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f043 0201 	orr.w	r2, r3, #1
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	611a      	str	r2, [r3, #16]
 800cc52:	e2f0      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	330c      	adds	r3, #12
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	330d      	adds	r3, #13
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	021b      	lsls	r3, r3, #8
 800cc64:	4313      	orrs	r3, r2
 800cc66:	2b13      	cmp	r3, #19
 800cc68:	f040 82e5 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	7a5a      	ldrb	r2, [r3, #9]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	7b9a      	ldrb	r2, [r3, #14]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	7bda      	ldrb	r2, [r3, #15]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	f043 0210 	orr.w	r2, r3, #16
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	611a      	str	r2, [r3, #16]
 800cc90:	e2d1      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	3308      	adds	r3, #8
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b05      	cmp	r3, #5
 800cc9a:	d15e      	bne.n	800cd5a <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	3310      	adds	r3, #16
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	3311      	adds	r3, #17
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	4313      	orrs	r3, r2
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 82c1 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	330c      	adds	r3, #12
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d112      	bne.n	800ccea <_ZN5BTHID7ACLDataEPh+0x35e>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	330d      	adds	r3, #13
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d10a      	bne.n	800ccea <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	7a5a      	ldrb	r2, [r3, #9]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	611a      	str	r2, [r3, #16]
 800cce8:	e2a5      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	330c      	adds	r3, #12
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d112      	bne.n	800cd20 <_ZN5BTHID7ACLDataEPh+0x394>
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	330d      	adds	r3, #13
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d10a      	bne.n	800cd20 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	7a5a      	ldrb	r2, [r3, #9]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	f043 0202 	orr.w	r2, r3, #2
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	611a      	str	r2, [r3, #16]
 800cd1e:	e28a      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	330c      	adds	r3, #12
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	f040 8282 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	330d      	adds	r3, #13
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	f040 8279 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	7a5a      	ldrb	r2, [r3, #9]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	f043 0220 	orr.w	r2, r3, #32
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	611a      	str	r2, [r3, #16]
 800cd58:	e26d      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	d155      	bne.n	800ce10 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	330c      	adds	r3, #12
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d113      	bne.n	800cd9c <_ZN5BTHID7ACLDataEPh+0x410>
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	330d      	adds	r3, #13
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d10b      	bne.n	800cd9c <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6898      	ldr	r0, [r3, #8]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	8999      	ldrh	r1, [r3, #12]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	3309      	adds	r3, #9
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	331b      	adds	r3, #27
 800cd96:	f7fe ff43 	bl	800bc20 <_ZN3BTD21l2cap_config_responseEthPh>
 800cd9a:	e24c      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	330c      	adds	r3, #12
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d113      	bne.n	800cdd4 <_ZN5BTHID7ACLDataEPh+0x448>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	330d      	adds	r3, #13
 800cdb0:	781a      	ldrb	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d10b      	bne.n	800cdd4 <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6898      	ldr	r0, [r3, #8]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8999      	ldrh	r1, [r3, #12]
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	3309      	adds	r3, #9
 800cdc8:	781a      	ldrb	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3316      	adds	r3, #22
 800cdce:	f7fe ff27 	bl	800bc20 <_ZN3BTD21l2cap_config_responseEthPh>
 800cdd2:	e230      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	330c      	adds	r3, #12
 800cdd8:	781a      	ldrb	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cde0:	429a      	cmp	r2, r3
 800cde2:	f040 8228 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	330d      	adds	r3, #13
 800cdea:	781a      	ldrb	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	f040 821f 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6898      	ldr	r0, [r3, #8]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8999      	ldrh	r1, [r3, #12]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	3309      	adds	r3, #9
 800ce04:	781a      	ldrb	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3318      	adds	r3, #24
 800ce0a:	f7fe ff09 	bl	800bc20 <_ZN3BTD21l2cap_config_responseEthPh>
 800ce0e:	e212      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	3308      	adds	r3, #8
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b06      	cmp	r3, #6
 800ce18:	d170      	bne.n	800cefc <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	330c      	adds	r3, #12
 800ce1e:	781a      	ldrb	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d112      	bne.n	800ce50 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	330d      	adds	r3, #13
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d10a      	bne.n	800ce50 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	7a5a      	ldrb	r2, [r3, #9]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	611a      	str	r2, [r3, #16]
 800ce4e:	e1f2      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	330c      	adds	r3, #12
 800ce54:	781a      	ldrb	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d121      	bne.n	800cea4 <_ZN5BTHID7ACLDataEPh+0x518>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	330d      	adds	r3, #13
 800ce64:	781a      	ldrb	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d119      	bne.n	800cea4 <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	7a5a      	ldrb	r2, [r3, #9]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6898      	ldr	r0, [r3, #8]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	8999      	ldrh	r1, [r3, #12]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7d1a      	ldrb	r2, [r3, #20]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3316      	adds	r3, #22
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4623      	mov	r3, r4
 800ce92:	f7fe ff55 	bl	800bd40 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	4798      	blx	r3
 800cea2:	e1c8      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	330c      	adds	r3, #12
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	f040 81c0 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	330d      	adds	r3, #13
 800ceba:	781a      	ldrb	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cec2:	429a      	cmp	r2, r3
 800cec4:	f040 81b7 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	7a5a      	ldrb	r2, [r3, #9]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6898      	ldr	r0, [r3, #8]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	8999      	ldrh	r1, [r3, #12]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7d1a      	ldrb	r2, [r3, #20]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3318      	adds	r3, #24
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	4623      	mov	r3, r4
 800ceea:	f7fe ff29 	bl	800bd40 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3308      	adds	r3, #8
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	4798      	blx	r3
 800cefa:	e19c      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	3308      	adds	r3, #8
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b07      	cmp	r3, #7
 800cf04:	d14c      	bne.n	800cfa0 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	330c      	adds	r3, #12
 800cf0a:	781a      	ldrb	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7edb      	ldrb	r3, [r3, #27]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d111      	bne.n	800cf38 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	330d      	adds	r3, #13
 800cf18:	781a      	ldrb	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7f1b      	ldrb	r3, [r3, #28]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d10a      	bne.n	800cf38 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	7a5a      	ldrb	r2, [r3, #9]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	611a      	str	r2, [r3, #16]
 800cf36:	e17e      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	330c      	adds	r3, #12
 800cf3c:	781a      	ldrb	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	7d9b      	ldrb	r3, [r3, #22]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d111      	bne.n	800cf6a <_ZN5BTHID7ACLDataEPh+0x5de>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	330d      	adds	r3, #13
 800cf4a:	781a      	ldrb	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7ddb      	ldrb	r3, [r3, #23]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d10a      	bne.n	800cf6a <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	7a5a      	ldrb	r2, [r3, #9]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f043 0208 	orr.w	r2, r3, #8
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	611a      	str	r2, [r3, #16]
 800cf68:	e165      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	330c      	adds	r3, #12
 800cf6e:	781a      	ldrb	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7e1b      	ldrb	r3, [r3, #24]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	f040 815e 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	330d      	adds	r3, #13
 800cf7e:	781a      	ldrb	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7e5b      	ldrb	r3, [r3, #25]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	f040 8156 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	7a5a      	ldrb	r2, [r3, #9]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	611a      	str	r2, [r3, #16]
 800cf9e:	e14a      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b0a      	cmp	r3, #10
 800cfa8:	f040 8145 	bne.w	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	7a5a      	ldrb	r2, [r3, #9]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6898      	ldr	r0, [r3, #8]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	8999      	ldrh	r1, [r3, #12]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1a      	ldrb	r2, [r3, #20]
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	330c      	adds	r3, #12
 800cfc4:	781c      	ldrb	r4, [r3, #0]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	330d      	adds	r3, #13
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	4623      	mov	r3, r4
 800cfd0:	f7fe fef3 	bl	800bdba <_ZN3BTD26l2cap_information_responseEthhh>
 800cfd4:	e12f      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	3306      	adds	r3, #6
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	f040 8087 	bne.w	800d0f6 <_ZN5BTHID7ACLDataEPh+0x76a>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	3307      	adds	r3, #7
 800cfec:	781a      	ldrb	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d17e      	bne.n	800d0f6 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	3308      	adds	r3, #8
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d131      	bne.n	800d066 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2203      	movs	r2, #3
 800d006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	7a5a      	ldrb	r2, [r3, #9]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	7a9a      	ldrb	r2, [r3, #10]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2205      	movs	r2, #5
 800d02a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	3328      	adds	r3, #40	; 0x28
 800d05a:	220a      	movs	r2, #10
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fb7a 	bl	800d758 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d064:	e0e4      	b.n	800d230 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b04      	cmp	r3, #4
 800d06e:	d131      	bne.n	800d0d4 <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2205      	movs	r2, #5
 800d074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	7a5a      	ldrb	r2, [r3, #9]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	7a9a      	ldrb	r2, [r3, #10]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2205      	movs	r2, #5
 800d098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2235      	movs	r2, #53	; 0x35
 800d0b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3328      	adds	r3, #40	; 0x28
 800d0c8:	220a      	movs	r2, #10
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fb43 	bl	800d758 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d0d2:	e0ad      	b.n	800d230 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b06      	cmp	r3, #6
 800d0dc:	f040 80a8 	bne.w	800d230 <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	3309      	adds	r3, #9
 800d0e4:	7819      	ldrb	r1, [r3, #0]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	330a      	adds	r3, #10
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fb4c 	bl	800d78c <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d0f4:	e09c      	b.n	800d230 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	3306      	adds	r3, #6
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d102:	429a      	cmp	r2, r3
 800d104:	d166      	bne.n	800d1d4 <_ZN5BTHID7ACLDataEPh+0x848>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	3307      	adds	r3, #7
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d112:	429a      	cmp	r2, r3
 800d114:	d15e      	bne.n	800d1d4 <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2ba1      	cmp	r3, #161	; 0xa1
 800d11e:	f040 8089 	bne.w	800d234 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800d122:	f7f4 fd91 	bl	8001c48 <HAL_GetTick>
 800d126:	4603      	mov	r3, r0
 800d128:	4a48      	ldr	r2, [pc, #288]	; (800d24c <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800d12a:	fba2 2303 	umull	r2, r3, r2, r3
 800d12e:	099a      	lsrs	r2, r3, #6
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	3305      	adds	r3, #5
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	021b      	lsls	r3, r3, #8
 800d13c:	b21a      	sxth	r2, r3
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	3304      	adds	r3, #4
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	b21b      	sxth	r3, r3
 800d146:	4313      	orrs	r3, r2
 800d148:	b21b      	sxth	r3, r3
 800d14a:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3314      	adds	r3, #20
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	89fa      	ldrh	r2, [r7, #14]
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	3a01      	subs	r2, #1
 800d15a:	b2d1      	uxtb	r1, r2
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	3209      	adds	r2, #9
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	3309      	adds	r3, #9
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d002      	beq.n	800d174 <_ZN5BTHID7ACLDataEPh+0x7e8>
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d016      	beq.n	800d1a0 <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800d172:	e05f      	b.n	800d234 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d027      	beq.n	800d1cc <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a18      	ldr	r0, [r3, #32]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681c      	ldr	r4, [r3, #0]
 800d188:	89fb      	ldrh	r3, [r7, #14]
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	3b02      	subs	r3, #2
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	330a      	adds	r3, #10
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	4613      	mov	r3, r2
 800d198:	2200      	movs	r2, #0
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	47a0      	blx	r4
                                                break;
 800d19e:	e015      	b.n	800d1cc <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d013      	beq.n	800d1d0 <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681c      	ldr	r4, [r3, #0]
 800d1b4:	89fb      	ldrh	r3, [r7, #14]
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	3b02      	subs	r3, #2
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	330a      	adds	r3, #10
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	47a0      	blx	r4
                                                break;
 800d1ca:	e001      	b.n	800d1d0 <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800d1cc:	bf00      	nop
 800d1ce:	e031      	b.n	800d234 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800d1d0:	bf00      	nop
                        }
 800d1d2:	e02f      	b.n	800d234 <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	3306      	adds	r3, #6
 800d1d8:	781a      	ldrb	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d128      	bne.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	3307      	adds	r3, #7
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d120      	bne.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2ba3      	cmp	r3, #163	; 0xa3
 800d1fc:	d11b      	bne.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	3305      	adds	r3, #5
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	021b      	lsls	r3, r3, #8
 800d206:	b21a      	sxth	r2, r3
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	3304      	adds	r3, #4
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b21b      	sxth	r3, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	b21b      	sxth	r3, r3
 800d214:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3318      	adds	r3, #24
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	89ba      	ldrh	r2, [r7, #12]
 800d220:	b2d2      	uxtb	r2, r2
 800d222:	3a01      	subs	r2, #1
 800d224:	b2d1      	uxtb	r1, r2
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	3209      	adds	r2, #9
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	4798      	blx	r3
 800d22e:	e002      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d230:	bf00      	nop
 800d232:	e000      	b.n	800d236 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800d234:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f80a 	bl	800d250 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f8b9 	bl	800d3b4 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800d242:	bf00      	nop
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	bd90      	pop	{r4, r7, pc}
 800d24a:	bf00      	nop
 800d24c:	10624dd3 	.word	0x10624dd3

0800d250 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800d250:	b5b0      	push	{r4, r5, r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af02      	add	r7, sp, #8
 800d256:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7e9b      	ldrb	r3, [r3, #26]
 800d25c:	2b0e      	cmp	r3, #14
 800d25e:	f000 8086 	beq.w	800d36e <_ZN5BTHID8SDP_taskEv+0x11e>
 800d262:	2b0e      	cmp	r3, #14
 800d264:	f300 80a1 	bgt.w	800d3aa <_ZN5BTHID8SDP_taskEv+0x15a>
 800d268:	2b0a      	cmp	r3, #10
 800d26a:	d002      	beq.n	800d272 <_ZN5BTHID8SDP_taskEv+0x22>
 800d26c:	2b0b      	cmp	r3, #11
 800d26e:	d06a      	beq.n	800d346 <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800d270:	e09b      	b.n	800d3aa <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d043      	beq.n	800d306 <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6898      	ldr	r0, [r3, #8]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8999      	ldrh	r1, [r3, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7d1a      	ldrb	r2, [r3, #20]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	331b      	adds	r3, #27
 800d2a0:	2501      	movs	r5, #1
 800d2a2:	9501      	str	r5, [sp, #4]
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	4623      	mov	r3, r4
 800d2a8:	f7fe fc22 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d2ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2b0:	f7f4 fcd6 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6898      	ldr	r0, [r3, #8]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8999      	ldrh	r1, [r3, #12]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	7d1a      	ldrb	r2, [r3, #20]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	331b      	adds	r3, #27
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	9501      	str	r5, [sp, #4]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	f7fe fc0d 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7d1b      	ldrb	r3, [r3, #20]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d2e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2e6:	f7f4 fcbb 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6898      	ldr	r0, [r3, #8]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	8999      	ldrh	r1, [r3, #12]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7d1a      	ldrb	r2, [r3, #20]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	331b      	adds	r3, #27
 800d2fa:	f7fe fc46 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	220b      	movs	r2, #11
 800d302:	769a      	strb	r2, [r3, #26]
                        break;
 800d304:	e04c      	b.n	800d3a0 <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d046      	beq.n	800d3a0 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6898      	ldr	r0, [r3, #8]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	8999      	ldrh	r1, [r3, #12]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7d1a      	ldrb	r2, [r3, #20]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	331b      	adds	r3, #27
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	4623      	mov	r3, r4
 800d340:	f7fe fcfe 	bl	800bd40 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800d344:	e02c      	b.n	800d3a0 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d028      	beq.n	800d3a4 <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	220a      	movs	r2, #10
 800d36a:	769a      	strb	r2, [r3, #26]
                        break;
 800d36c:	e01a      	b.n	800d3a4 <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d376:	2b00      	cmp	r3, #0
 800d378:	d016      	beq.n	800d3a8 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689a      	ldr	r2, [r3, #8]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	899b      	ldrh	r3, [r3, #12]
 800d382:	4619      	mov	r1, r3
 800d384:	4610      	mov	r0, r2
 800d386:	f7fe fa84 	bl	800b892 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d390:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3308      	adds	r3, #8
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
                        break;
 800d39e:	e003      	b.n	800d3a8 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800d3a0:	bf00      	nop
 800d3a2:	e002      	b.n	800d3aa <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d3a4:	bf00      	nop
 800d3a6:	e000      	b.n	800d3aa <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d3a8:	bf00      	nop
}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d3b4 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d3b4:	b5b0      	push	{r4, r5, r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	2b08      	cmp	r3, #8
 800d3c6:	f200 812f 	bhi.w	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800d3ca:	a201      	add	r2, pc, #4	; (adr r2, 800d3d0 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d0:	0800d607 	.word	0x0800d607
 800d3d4:	0800d49f 	.word	0x0800d49f
 800d3d8:	0800d4d7 	.word	0x0800d4d7
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d5d3 	.word	0x0800d5d3
 800d3e4:	0800d413 	.word	0x0800d413
 800d3e8:	0800d521 	.word	0x0800d521
 800d3ec:	0800d557 	.word	0x0800d557
 800d3f0:	0800d593 	.word	0x0800d593
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 8104 	beq.w	800d60a <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f9fd 	bl	800d802 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2206      	movs	r2, #6
 800d40c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d410:	e0fb      	b.n	800d60a <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	f003 0310 	and.w	r3, r3, #16
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80f7 	beq.w	800d60e <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6898      	ldr	r0, [r3, #8]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	8999      	ldrh	r1, [r3, #12]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d1a      	ldrb	r2, [r3, #20]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3318      	adds	r3, #24
 800d436:	2501      	movs	r5, #1
 800d438:	9501      	str	r5, [sp, #4]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	4623      	mov	r3, r4
 800d43e:	f7fe fb57 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d446:	f7f4 fc0b 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6898      	ldr	r0, [r3, #8]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8999      	ldrh	r1, [r3, #12]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7d1a      	ldrb	r2, [r3, #20]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3318      	adds	r3, #24
 800d460:	2500      	movs	r5, #0
 800d462:	9501      	str	r5, [sp, #4]
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	4623      	mov	r3, r4
 800d468:	f7fe fb42 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	7d1b      	ldrb	r3, [r3, #20]
 800d470:	3301      	adds	r3, #1
 800d472:	b2da      	uxtb	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d47c:	f7f4 fbf0 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6898      	ldr	r0, [r3, #8]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	8999      	ldrh	r1, [r3, #12]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7d1a      	ldrb	r2, [r3, #20]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3318      	adds	r3, #24
 800d490:	f7fe fb7b 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2208      	movs	r2, #8
 800d498:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d49c:	e0b7      	b.n	800d60e <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	f003 0304 	and.w	r3, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 80b3 	beq.w	800d612 <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	7d1b      	ldrb	r3, [r3, #20]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6898      	ldr	r0, [r3, #8]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	8999      	ldrh	r1, [r3, #12]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7d1a      	ldrb	r2, [r3, #20]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3316      	adds	r3, #22
 800d4c8:	f7fe fb5f 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2203      	movs	r2, #3
 800d4d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d4d4:	e09d      	b.n	800d612 <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 8099 	beq.w	800d616 <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f98c 	bl	800d802 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d4ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d4ee:	f7f4 fbb7 	bl	8001c60 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	7d1b      	ldrb	r3, [r3, #20]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6898      	ldr	r0, [r3, #8]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	8999      	ldrh	r1, [r3, #12]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	7d1a      	ldrb	r2, [r3, #20]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	336d      	adds	r3, #109	; 0x6d
 800d50e:	2413      	movs	r4, #19
 800d510:	9400      	str	r4, [sp, #0]
 800d512:	f7fe faaf 	bl	800ba74 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2207      	movs	r2, #7
 800d51a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d51e:	e07a      	b.n	800d616 <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d076      	beq.n	800d61a <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7d1b      	ldrb	r3, [r3, #20]
 800d530:	3301      	adds	r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6898      	ldr	r0, [r3, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	8999      	ldrh	r1, [r3, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7d1a      	ldrb	r2, [r3, #20]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3318      	adds	r3, #24
 800d548:	f7fe fb1f 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2208      	movs	r2, #8
 800d550:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d554:	e061      	b.n	800d61a <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	f003 0320 	and.w	r3, r3, #32
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d05d      	beq.n	800d61e <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3310      	adds	r3, #16
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d590:	e045      	b.n	800d61e <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d041      	beq.n	800d622 <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7d1b      	ldrb	r3, [r3, #20]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6898      	ldr	r0, [r3, #8]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8999      	ldrh	r1, [r3, #12]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	7d1a      	ldrb	r2, [r3, #20]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f103 0416 	add.w	r4, r3, #22
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	336b      	adds	r3, #107	; 0x6b
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	f7fe fb7f 	bl	800bcc6 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2205      	movs	r2, #5
 800d5cc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d5d0:	e027      	b.n	800d622 <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	f003 0308 	and.w	r3, r3, #8
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d023      	beq.n	800d626 <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689a      	ldr	r2, [r3, #8]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	899b      	ldrh	r3, [r3, #12]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	f7fe f952 	bl	800b892 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f4:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d604:	e00f      	b.n	800d626 <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800d606:	bf00      	nop
 800d608:	e00e      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d60a:	bf00      	nop
 800d60c:	e00c      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d60e:	bf00      	nop
 800d610:	e00a      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d612:	bf00      	nop
 800d614:	e008      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d616:	bf00      	nop
 800d618:	e006      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d61a:	bf00      	nop
 800d61c:	e004      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d61e:	bf00      	nop
 800d620:	e002      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d622:	bf00      	nop
 800d624:	e000      	b.n	800d628 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d626:	bf00      	nop
        }
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bdb0      	pop	{r4, r5, r7, pc}

0800d630 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d630:	b5b0      	push	{r4, r5, r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af02      	add	r7, sp, #8
 800d636:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f040 8086 	bne.w	800d750 <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d03a      	beq.n	800d6c6 <_ZN5BTHID3RunEv+0x96>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	7a5b      	ldrb	r3, [r3, #9]
 800d656:	f083 0301 	eor.w	r3, r3, #1
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d032      	beq.n	800d6c6 <_ZN5BTHID3RunEv+0x96>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7d5b      	ldrb	r3, [r3, #21]
 800d664:	f083 0301 	eor.w	r3, r3, #1
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d02b      	beq.n	800d6c6 <_ZN5BTHID3RunEv+0x96>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d674:	f083 0301 	eor.w	r3, r3, #1
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d023      	beq.n	800d6c6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	2201      	movs	r2, #1
 800d684:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	8b5a      	ldrh	r2, [r3, #26]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6898      	ldr	r0, [r3, #8]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	8999      	ldrh	r1, [r3, #12]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7d1a      	ldrb	r2, [r3, #20]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	336b      	adds	r3, #107	; 0x6b
 800d6b4:	2411      	movs	r4, #17
 800d6b6:	9400      	str	r4, [sp, #0]
 800d6b8:	f7fe f9dc 	bl	800ba74 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d6c4:	e043      	b.n	800d74e <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d03d      	beq.n	800d74e <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6898      	ldr	r0, [r3, #8]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	8999      	ldrh	r1, [r3, #12]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7d1a      	ldrb	r2, [r3, #20]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3316      	adds	r3, #22
 800d6e8:	2501      	movs	r5, #1
 800d6ea:	9501      	str	r5, [sp, #4]
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	4623      	mov	r3, r4
 800d6f0:	f7fe f9fe 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d6f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d6f8:	f7f4 fab2 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6898      	ldr	r0, [r3, #8]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	8999      	ldrh	r1, [r3, #12]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7d1a      	ldrb	r2, [r3, #20]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3316      	adds	r3, #22
 800d712:	2500      	movs	r5, #0
 800d714:	9501      	str	r5, [sp, #4]
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	4623      	mov	r3, r4
 800d71a:	f7fe f9e9 	bl	800baf0 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	7d1b      	ldrb	r3, [r3, #20]
 800d722:	3301      	adds	r3, #1
 800d724:	b2da      	uxtb	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d72a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d72e:	f7f4 fa97 	bl	8001c60 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6898      	ldr	r0, [r3, #8]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	8999      	ldrh	r1, [r3, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	7d1a      	ldrb	r2, [r3, #20]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3316      	adds	r3, #22
 800d742:	f7fe fa22 	bl	800bb8a <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2204      	movs	r2, #4
 800d74a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d74e:	bf00      	nop
        }
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bdb0      	pop	{r4, r5, r7, pc}

0800d758 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	4613      	mov	r3, r2
 800d764:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6898      	ldr	r0, [r3, #8]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	8999      	ldrh	r1, [r3, #12]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	7edb      	ldrb	r3, [r3, #27]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	7f12      	ldrb	r2, [r2, #28]
 800d776:	79fc      	ldrb	r4, [r7, #7]
 800d778:	9201      	str	r2, [sp, #4]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	4623      	mov	r3, r4
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	f7fe f8e6 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d784:	bf00      	nop
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd90      	pop	{r4, r7, pc}

0800d78c <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	460b      	mov	r3, r1
 800d796:	70fb      	strb	r3, [r7, #3]
 800d798:	4613      	mov	r3, r2
 800d79a:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2207      	movs	r2, #7
 800d7a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	78ba      	ldrb	r2, [r7, #2]
 800d7b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2205      	movs	r2, #5
 800d7c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2235      	movs	r2, #53	; 0x35
 800d7d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3328      	adds	r3, #40	; 0x28
 800d7f0:	220a      	movs	r2, #10
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff ffaf 	bl	800d758 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d802:	b590      	push	{r4, r7, lr}
 800d804:	b087      	sub	sp, #28
 800d806:	af02      	add	r7, sp, #8
 800d808:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d810:	2b00      	cmp	r3, #0
 800d812:	d008      	beq.n	800d826 <_ZN5BTHID11setProtocolEv+0x24>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d003      	beq.n	800d826 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d82c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d830:	b2db      	uxtb	r3, r3
 800d832:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6898      	ldr	r0, [r3, #8]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	8999      	ldrh	r1, [r3, #12]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	7d9b      	ldrb	r3, [r3, #22]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	7dd2      	ldrb	r2, [r2, #23]
 800d844:	f107 040f 	add.w	r4, r7, #15
 800d848:	9201      	str	r2, [sp, #4]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	2301      	movs	r3, #1
 800d84e:	4622      	mov	r2, r4
 800d850:	f7fe f87e 	bl	800b950 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd90      	pop	{r4, r7, pc}

0800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d868:	78fb      	ldrb	r3, [r7, #3]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d86e      	bhi.n	800d94c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d86e:	a201      	add	r2, pc, #4	; (adr r2, 800d874 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d885 	.word	0x0800d885
 800d878:	0800d8b7 	.word	0x0800d8b7
 800d87c:	0800d8e9 	.word	0x0800d8e9
 800d880:	0800d91b 	.word	0x0800d91b
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	7a1b      	ldrb	r3, [r3, #8]
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b07      	cmp	r3, #7
 800d890:	d00d      	beq.n	800d8ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7a1b      	ldrb	r3, [r3, #8]
 800d896:	f003 030f 	and.w	r3, r3, #15
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d006      	beq.n	800d8ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7a1b      	ldrb	r3, [r3, #8]
 800d8a4:	f003 030f 	and.w	r3, r3, #15
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d101      	bne.n	800d8b2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e04d      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e04b      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	7a1b      	ldrb	r3, [r3, #8]
 800d8ba:	f003 030f 	and.w	r3, r3, #15
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d00d      	beq.n	800d8e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7a1b      	ldrb	r3, [r3, #8]
 800d8c8:	f003 030f 	and.w	r3, r3, #15
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d006      	beq.n	800d8e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7a1b      	ldrb	r3, [r3, #8]
 800d8d6:	f003 030f 	and.w	r3, r3, #15
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d101      	bne.n	800d8e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e034      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e032      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	7a1b      	ldrb	r3, [r3, #8]
 800d8ec:	f003 030f 	and.w	r3, r3, #15
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d00d      	beq.n	800d912 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	7a1b      	ldrb	r3, [r3, #8]
 800d8fa:	f003 030f 	and.w	r3, r3, #15
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b04      	cmp	r3, #4
 800d902:	d006      	beq.n	800d912 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	7a1b      	ldrb	r3, [r3, #8]
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b05      	cmp	r3, #5
 800d910:	d101      	bne.n	800d916 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d912:	2301      	movs	r3, #1
 800d914:	e01b      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d916:	2300      	movs	r3, #0
 800d918:	e019      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7a1b      	ldrb	r3, [r3, #8]
 800d91e:	f003 030f 	and.w	r3, r3, #15
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b05      	cmp	r3, #5
 800d926:	d00d      	beq.n	800d944 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	7a1b      	ldrb	r3, [r3, #8]
 800d92c:	f003 030f 	and.w	r3, r3, #15
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b06      	cmp	r3, #6
 800d934:	d006      	beq.n	800d944 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7a1b      	ldrb	r3, [r3, #8]
 800d93a:	f003 030f 	and.w	r3, r3, #15
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b07      	cmp	r3, #7
 800d942:	d101      	bne.n	800d948 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d944:	2301      	movs	r3, #1
 800d946:	e002      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d948:	2300      	movs	r3, #0
 800d94a:	e000      	b.n	800d94e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d94c:	2300      	movs	r3, #0
        }
}
 800d94e:	4618      	mov	r0, r3
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop

0800d95c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	460b      	mov	r3, r1
 800d966:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d968:	78fb      	ldrb	r3, [r7, #3]
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d806      	bhi.n	800d97c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d96e:	78fb      	ldrb	r3, [r7, #3]
 800d970:	4619      	mov	r1, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff ff72 	bl	800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d978:	4603      	mov	r3, r0
 800d97a:	e011      	b.n	800d9a0 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d984:	4619      	mov	r1, r3
 800d986:	78fb      	ldrb	r3, [r7, #3]
 800d988:	4a07      	ldr	r2, [pc, #28]	; (800d9a8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d98a:	4413      	add	r3, r2
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	fa21 f303 	lsr.w	r3, r1, r3
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	bf14      	ite	ne
 800d99a:	2301      	movne	r3, #1
 800d99c:	2300      	moveq	r3, #0
 800d99e:	b2db      	uxtb	r3, r3
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	0800fbb4 	.word	0x0800fbb4

0800d9ac <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	4a1b      	ldr	r2, [pc, #108]	; (800da28 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d9bc:	4413      	add	r3, r2
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	4093      	lsls	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d9ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9d2:	021b      	lsls	r3, r3, #8
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4013      	ands	r3, r2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	bf14      	ite	ne
 800d9e0:	2301      	movne	r3, #1
 800d9e2:	2300      	moveq	r3, #0
 800d9e4:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d9ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9f0:	021b      	lsls	r3, r3, #8
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	43db      	mvns	r3, r3
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	b2d1      	uxtb	r1, r2
 800da04:	2000      	movs	r0, #0
 800da06:	4301      	orrs	r1, r0
 800da08:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800da0c:	0a12      	lsrs	r2, r2, #8
 800da0e:	b292      	uxth	r2, r2
 800da10:	2100      	movs	r1, #0
 800da12:	430a      	orrs	r2, r1
 800da14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800da18:	7afb      	ldrb	r3, [r7, #11]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	0800fbb4 	.word	0x0800fbb4

0800da2c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800da38:	78fb      	ldrb	r3, [r7, #3]
 800da3a:	2b08      	cmp	r3, #8
 800da3c:	d102      	bne.n	800da44 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7adb      	ldrb	r3, [r3, #11]
 800da42:	e006      	b.n	800da52 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	2b09      	cmp	r3, #9
 800da48:	d102      	bne.n	800da50 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7b1b      	ldrb	r3, [r3, #12]
 800da4e:	e000      	b.n	800da52 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800da5e:	b480      	push	{r7}
 800da60:	b083      	sub	sp, #12
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	460b      	mov	r3, r1
 800da68:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800da6a:	78fb      	ldrb	r3, [r7, #3]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	4413      	add	r3, r2
 800da70:	791b      	ldrb	r3, [r3, #4]
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800da7e:	b580      	push	{r7, lr}
 800da80:	b086      	sub	sp, #24
 800da82:	af00      	add	r7, sp, #0
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	460b      	mov	r3, r1
 800da88:	607a      	str	r2, [r7, #4]
 800da8a:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800da8c:	7afb      	ldrb	r3, [r7, #11]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	f240 80a6 	bls.w	800dbe0 <_ZN9PS4Parser5ParseEhPh+0x162>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	f000 80a2 	beq.w	800dbe0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d10e      	bne.n	800dac2 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	1d18      	adds	r0, r3, #4
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	1c59      	adds	r1, r3, #1
 800daac:	7afb      	ldrb	r3, [r7, #11]
 800daae:	3b01      	subs	r3, #1
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b3c      	cmp	r3, #60	; 0x3c
 800dab4:	bf28      	it	cs
 800dab6:	233c      	movcs	r3, #60	; 0x3c
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	461a      	mov	r2, r3
 800dabc:	f001 fe8e 	bl	800f7dc <memcpy>
 800dac0:	e016      	b.n	800daf0 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b11      	cmp	r3, #17
 800dac8:	f040 8098 	bne.w	800dbfc <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800dacc:	7afb      	ldrb	r3, [r7, #11]
 800dace:	2b03      	cmp	r3, #3
 800dad0:	f240 8096 	bls.w	800dc00 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	1d18      	adds	r0, r3, #4
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	1cd9      	adds	r1, r3, #3
 800dadc:	7afb      	ldrb	r3, [r7, #11]
 800dade:	3b03      	subs	r3, #3
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b3c      	cmp	r3, #60	; 0x3c
 800dae4:	bf28      	it	cs
 800dae6:	233c      	movcs	r3, #60	; 0x3c
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	461a      	mov	r2, r3
 800daec:	f001 fe76 	bl	800f7dc <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800db00:	429a      	cmp	r2, r3
 800db02:	d06d      	beq.n	800dbe0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800db0c:	461a      	mov	r2, r3
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db12:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800db16:	43db      	mvns	r3, r3
 800db18:	4013      	ands	r3, r2
 800db1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	b2d1      	uxtb	r1, r2
 800db22:	2000      	movs	r0, #0
 800db24:	4301      	orrs	r1, r0
 800db26:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800db2a:	0a12      	lsrs	r2, r2, #8
 800db2c:	b292      	uxth	r2, r2
 800db2e:	2100      	movs	r1, #0
 800db30:	430a      	orrs	r2, r1
 800db32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800db42:	f361 0317 	bfi	r3, r1, #0, #24
 800db46:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800db48:	2300      	movs	r3, #0
 800db4a:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800db4c:	2100      	movs	r1, #0
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff fe84 	bl	800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d003      	beq.n	800db62 <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
 800db5c:	f043 0301 	orr.w	r3, r3, #1
 800db60:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800db62:	2101      	movs	r1, #1
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7ff fe79 	bl	800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d003      	beq.n	800db78 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	f043 0302 	orr.w	r3, r3, #2
 800db76:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800db78:	2102      	movs	r1, #2
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff fe6e 	bl	800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	f043 0304 	orr.w	r3, r3, #4
 800db8c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800db8e:	2103      	movs	r1, #3
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff fe63 	bl	800d85c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d003      	beq.n	800dba4 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800db9c:	7dfb      	ldrb	r3, [r7, #23]
 800db9e:	f043 0308 	orr.w	r3, r3, #8
 800dba2:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dbaa:	7dfa      	ldrb	r2, [r7, #23]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d017      	beq.n	800dbe0 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dbb6:	b25b      	sxtb	r3, r3
 800dbb8:	43db      	mvns	r3, r3
 800dbba:	b25a      	sxtb	r2, r3
 800dbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	b25b      	sxtb	r3, r3
 800dbc4:	f003 030f 	and.w	r3, r3, #15
 800dbc8:	b2d9      	uxtb	r1, r3
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dbd0:	f361 0303 	bfi	r3, r1, #0, #4
 800dbd4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	7dfa      	ldrb	r2, [r7, #23]
 800dbdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00b      	beq.n	800dc02 <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	3246      	adds	r2, #70	; 0x46
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	4798      	blx	r3
 800dbfa:	e002      	b.n	800dc02 <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800dbfc:	bf00      	nop
 800dbfe:	e000      	b.n	800dc02 <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800dc00:	bf00      	nop
}
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800dc10:	2300      	movs	r3, #0
 800dc12:	73fb      	strb	r3, [r7, #15]
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d808      	bhi.n	800dc2c <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	4413      	add	r3, r2
 800dc20:	227f      	movs	r2, #127	; 0x7f
 800dc22:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	3301      	adds	r3, #1
 800dc28:	73fb      	strb	r3, [r7, #15]
 800dc2a:	e7f3      	b.n	800dc14 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	6893      	ldr	r3, [r2, #8]
 800dc30:	f36f 0317 	bfc	r3, #0, #24
 800dc34:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800dc3a:	f36f 0317 	bfc	r3, #0, #24
 800dc3e:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d808      	bhi.n	800dc5c <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800dc4a:	7bfb      	ldrb	r3, [r7, #15]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	4413      	add	r3, r2
 800dc50:	2200      	movs	r2, #0
 800dc52:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	3301      	adds	r3, #1
 800dc58:	73fb      	strb	r3, [r7, #15]
 800dc5a:	e7f3      	b.n	800dc44 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d81b      	bhi.n	800dc9e <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dc66:	2300      	movs	r3, #0
 800dc68:	73bb      	strb	r3, [r7, #14]
 800dc6a:	7bbb      	ldrb	r3, [r7, #14]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d812      	bhi.n	800dc96 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800dc70:	7bfa      	ldrb	r2, [r7, #15]
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	0098      	lsls	r0, r3, #2
 800dc78:	4613      	mov	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4403      	add	r3, r0
 800dc80:	440b      	add	r3, r1
 800dc82:	f103 0220 	add.w	r2, r3, #32
 800dc86:	7993      	ldrb	r3, [r2, #6]
 800dc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc8c:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
 800dc90:	3301      	adds	r3, #1
 800dc92:	73bb      	strb	r3, [r7, #14]
 800dc94:	e7e9      	b.n	800dc6a <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	73fb      	strb	r3, [r7, #15]
 800dc9c:	e7e0      	b.n	800dc60 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	7a13      	ldrb	r3, [r2, #8]
 800dca2:	2108      	movs	r1, #8
 800dca4:	f361 0303 	bfi	r3, r1, #0, #4
 800dca8:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dcb0:	2108      	movs	r1, #8
 800dcb2:	f361 0303 	bfi	r3, r1, #0, #4
 800dcb6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dcc0:	f36f 0303 	bfc	r3, #0, #4
 800dcc4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800dd20:	bf00      	nop
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	2180      	movs	r1, #128	; 0x80
 800dd32:	4803      	ldr	r0, [pc, #12]	; (800dd40 <_ZN2P95IsSetEv+0x14>)
 800dd34:	f7f4 fa7a 	bl	800222c <HAL_GPIO_ReadPin>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	40020800 	.word	0x40020800

0800dd44 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f001 f9f3 	bl	800f138 <_ZN8MAX3421eI3P102P9EC1Ev>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f001 fa0b 	bl	800f170 <_ZN15AddressPoolImplILh16EEC1Ev>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800dd62:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <_ZN3USBC1Ev+0x34>)
 800dd64:	2211      	movs	r2, #17
 800dd66:	701a      	strb	r2, [r3, #0]
        init();
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f807 	bl	800dd7c <_ZN3USB4initEv>
}
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20000671 	.word	0x20000671

0800dd7c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
 800dda4:	4613      	mov	r3, r2
 800dda6:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	78fa      	ldrb	r2, [r7, #3]
 800ddac:	4611      	mov	r1, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f001 fa18 	bl	800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ddb4:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d003      	beq.n	800ddc4 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e018      	b.n	800ddfa <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800ddce:	2300      	movs	r3, #0
 800ddd0:	74fb      	strb	r3, [r7, #19]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	795b      	ldrb	r3, [r3, #5]
 800ddd6:	7cfa      	ldrb	r2, [r7, #19]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d20d      	bcs.n	800ddf8 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	78ba      	ldrb	r2, [r7, #2]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d101      	bne.n	800ddea <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	e007      	b.n	800ddfa <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	3303      	adds	r3, #3
 800ddee:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800ddf0:	7cfb      	ldrb	r3, [r7, #19]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	74fb      	strb	r3, [r7, #19]
 800ddf6:	e7ec      	b.n	800ddd2 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3718      	adds	r7, #24
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800de02:	b580      	push	{r7, lr}
 800de04:	b086      	sub	sp, #24
 800de06:	af00      	add	r7, sp, #0
 800de08:	60f8      	str	r0, [r7, #12]
 800de0a:	607b      	str	r3, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	72fb      	strb	r3, [r7, #11]
 800de10:	4613      	mov	r3, r2
 800de12:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800de1a:	23d8      	movs	r3, #216	; 0xd8
 800de1c:	e015      	b.n	800de4a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	7afa      	ldrb	r2, [r7, #11]
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f001 f9dd 	bl	800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800de2a:	6178      	str	r0, [r7, #20]

        if(!p)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d101      	bne.n	800de36 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de32:	23d6      	movs	r3, #214	; 0xd6
 800de34:	e009      	b.n	800de4a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	7afa      	ldrb	r2, [r7, #11]
 800de3a:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	7aba      	ldrb	r2, [r7, #10]
 800de46:	715a      	strb	r2, [r3, #5]

        return 0;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800de52:	b580      	push	{r7, lr}
 800de54:	b086      	sub	sp, #24
 800de56:	af00      	add	r7, sp, #0
 800de58:	60f8      	str	r0, [r7, #12]
 800de5a:	607b      	str	r3, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	72fb      	strb	r3, [r7, #11]
 800de60:	4613      	mov	r3, r2
 800de62:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	7afa      	ldrb	r2, [r7, #11]
 800de68:	4611      	mov	r1, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f001 f9ba 	bl	800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800de70:	6178      	str	r0, [r7, #20]

        if(!p)
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de78:	23d6      	movs	r3, #214	; 0xd6
 800de7a:	e04e      	b.n	800df1a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800de84:	23d7      	movs	r3, #215	; 0xd7
 800de86:	e048      	b.n	800df1a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800de88:	7aba      	ldrb	r2, [r7, #10]
 800de8a:	7afb      	ldrb	r3, [r7, #11]
 800de8c:	4619      	mov	r1, r3
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff ff82 	bl	800dd98 <_ZN3USB14getEpInfoEntryEhh>
 800de94:	4602      	mov	r2, r0
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800dea2:	23db      	movs	r3, #219	; 0xdb
 800dea4:	e039      	b.n	800df1a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	789b      	ldrb	r3, [r3, #2]
 800deac:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b0f      	cmp	r3, #15
 800deb4:	bf28      	it	cs
 800deb6:	230f      	movcs	r3, #15
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	461a      	mov	r2, r3
 800debc:	2301      	movs	r3, #1
 800debe:	4093      	lsls	r3, r2
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	3b01      	subs	r3, #1
 800decc:	b29a      	uxth	r2, r3
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	461a      	mov	r2, r3
 800ded6:	21e0      	movs	r1, #224	; 0xe0
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f7f3 fbb5 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800dede:	21d8      	movs	r1, #216	; 0xd8
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7f3 fc03 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dee6:	4603      	mov	r3, r0
 800dee8:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	799b      	ldrb	r3, [r3, #6]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d009      	beq.n	800df06 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800def8:	7cfb      	ldrb	r3, [r7, #19]
 800defa:	4313      	orrs	r3, r2
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f043 0302 	orr.w	r3, r3, #2
 800df02:	b2db      	uxtb	r3, r3
 800df04:	e003      	b.n	800df0e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800df06:	7cfb      	ldrb	r3, [r7, #19]
 800df08:	f023 0306 	bic.w	r3, r3, #6
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	461a      	mov	r2, r3
 800df10:	21d8      	movs	r1, #216	; 0xd8
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7f3 fb98 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3718      	adds	r7, #24
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800df22:	b590      	push	{r4, r7, lr}
 800df24:	b08b      	sub	sp, #44	; 0x2c
 800df26:	af02      	add	r7, sp, #8
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	4608      	mov	r0, r1
 800df2c:	4611      	mov	r1, r2
 800df2e:	461a      	mov	r2, r3
 800df30:	4603      	mov	r3, r0
 800df32:	70fb      	strb	r3, [r7, #3]
 800df34:	460b      	mov	r3, r1
 800df36:	70bb      	strb	r3, [r7, #2]
 800df38:	4613      	mov	r3, r2
 800df3a:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800df3c:	2300      	movs	r3, #0
 800df3e:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800df44:	2300      	movs	r3, #0
 800df46:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800df48:	f107 000c 	add.w	r0, r7, #12
 800df4c:	78ba      	ldrb	r2, [r7, #2]
 800df4e:	78f9      	ldrb	r1, [r7, #3]
 800df50:	f107 030a 	add.w	r3, r7, #10
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	4603      	mov	r3, r0
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff ff7a 	bl	800de52 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800df5e:	4603      	mov	r3, r0
 800df60:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800df62:	7ffb      	ldrb	r3, [r7, #31]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800df68:	7ffb      	ldrb	r3, [r7, #31]
 800df6a:	e0ae      	b.n	800e0ca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800df6c:	787b      	ldrb	r3, [r7, #1]
 800df6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df72:	2b00      	cmp	r3, #0
 800df74:	bfcc      	ite	gt
 800df76:	2301      	movgt	r3, #1
 800df78:	2300      	movle	r3, #0
 800df7a:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800df7c:	787b      	ldrb	r3, [r7, #1]
 800df7e:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800df80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800df84:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800df86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800df8a:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800df8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800df90:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800df92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df94:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800df96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df9a:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800df9c:	f107 0310 	add.w	r3, r7, #16
 800dfa0:	2208      	movs	r2, #8
 800dfa2:	2120      	movs	r1, #32
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f001 f943 	bl	800f230 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800dfaa:	897b      	ldrh	r3, [r7, #10]
 800dfac:	78ba      	ldrb	r2, [r7, #2]
 800dfae:	2110      	movs	r1, #16
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fb01 	bl	800e5b8 <_ZN3USB11dispatchPktEhht>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800dfba:	7ffb      	ldrb	r3, [r7, #31]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800dfc0:	7ffb      	ldrb	r3, [r7, #31]
 800dfc2:	e082      	b.n	800e0ca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800dfc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d072      	beq.n	800e0b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800dfca:	7efb      	ldrb	r3, [r7, #27]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d057      	beq.n	800e080 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800dfd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dfd4:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	7893      	ldrb	r3, [r2, #2]
 800dfda:	f043 0302 	orr.w	r3, r3, #2
 800dfde:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800dfe0:	8bbb      	ldrh	r3, [r7, #28]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d05f      	beq.n	800e0a6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800dfe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dfea:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800dfec:	68f9      	ldr	r1, [r7, #12]
 800dfee:	897a      	ldrh	r2, [r7, #10]
 800dff0:	f107 0008 	add.w	r0, r7, #8
 800dff4:	2300      	movs	r3, #0
 800dff6:	9301      	str	r3, [sp, #4]
 800dff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	4603      	mov	r3, r0
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f8a6 	bl	800e150 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800e004:	4603      	mov	r3, r0
 800e006:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800e008:	7ffb      	ldrb	r3, [r7, #31]
 800e00a:	2b06      	cmp	r3, #6
 800e00c:	d114      	bne.n	800e038 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e00e:	21f8      	movs	r1, #248	; 0xf8
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7f3 fb6b 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e016:	4603      	mov	r3, r0
 800e018:	f003 0320 	and.w	r3, r3, #32
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	bf0c      	ite	eq
 800e020:	2301      	moveq	r3, #1
 800e022:	2300      	movne	r3, #0
 800e024:	b2db      	uxtb	r3, r3
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	b2d9      	uxtb	r1, r3
 800e02e:	7893      	ldrb	r3, [r2, #2]
 800e030:	f361 0341 	bfi	r3, r1, #1, #1
 800e034:	7093      	strb	r3, [r2, #2]
 800e036:	e7d3      	b.n	800dfe0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800e038:	7ffb      	ldrb	r3, [r7, #31]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800e03e:	7ffb      	ldrb	r3, [r7, #31]
 800e040:	e043      	b.n	800e0ca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800e042:	7ffb      	ldrb	r3, [r7, #31]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d111      	bne.n	800e06c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800e048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00e      	beq.n	800e06c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800e04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681c      	ldr	r4, [r3, #0]
 800e054:	8939      	ldrh	r1, [r7, #8]
 800e056:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e05a:	8bbb      	ldrh	r3, [r7, #28]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	b29b      	uxth	r3, r3
 800e060:	833b      	strh	r3, [r7, #24]
 800e062:	f107 0318 	add.w	r3, r7, #24
 800e066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e068:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e06a:	47a0      	blx	r4

                                left -= read;
 800e06c:	893b      	ldrh	r3, [r7, #8]
 800e06e:	8bba      	ldrh	r2, [r7, #28]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800e074:	893b      	ldrh	r3, [r7, #8]
 800e076:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d812      	bhi.n	800e0a4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800e07e:	e7af      	b.n	800dfe0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	7893      	ldrb	r3, [r2, #2]
 800e084:	f043 0301 	orr.w	r3, r3, #1
 800e088:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800e08a:	68f9      	ldr	r1, [r7, #12]
 800e08c:	897a      	ldrh	r2, [r7, #10]
 800e08e:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800e092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	4603      	mov	r3, r0
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f957 	bl	800e34c <_ZN3USB11OutTransferEP6EpInfottPh>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	77fb      	strb	r3, [r7, #31]
 800e0a2:	e000      	b.n	800e0a6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800e0a4:	bf00      	nop
                }
                if(rcode) //return error
 800e0a6:	7ffb      	ldrb	r3, [r7, #31]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800e0ac:	7ffb      	ldrb	r3, [r7, #31]
 800e0ae:	e00c      	b.n	800e0ca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800e0b0:	7efb      	ldrb	r3, [r7, #27]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800e0b6:	21a0      	movs	r1, #160	; 0xa0
 800e0b8:	e000      	b.n	800e0bc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800e0ba:	2180      	movs	r1, #128	; 0x80
 800e0bc:	897b      	ldrh	r3, [r7, #10]
 800e0be:	78ba      	ldrb	r2, [r7, #2]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fa79 	bl	800e5b8 <_ZN3USB11dispatchPktEhht>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	bf00      	nop
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3724      	adds	r7, #36	; 0x24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}

0800e0d2 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b08a      	sub	sp, #40	; 0x28
 800e0d6:	af02      	add	r7, sp, #8
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	607b      	str	r3, [r7, #4]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	72fb      	strb	r3, [r7, #11]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e0ec:	f107 0018 	add.w	r0, r7, #24
 800e0f0:	7aba      	ldrb	r2, [r7, #10]
 800e0f2:	7af9      	ldrb	r1, [r7, #11]
 800e0f4:	f107 0316 	add.w	r3, r7, #22
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fea8 	bl	800de52 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e102:	4603      	mov	r3, r0
 800e104:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800e106:	7ffb      	ldrb	r3, [r7, #31]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d010      	beq.n	800e12e <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800e10c:	7ffb      	ldrb	r3, [r7, #31]
 800e10e:	2181      	movs	r1, #129	; 0x81
 800e110:	4618      	mov	r0, r3
 800e112:	f001 f8bb 	bl	800f28c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800e116:	7afb      	ldrb	r3, [r7, #11]
 800e118:	2181      	movs	r1, #129	; 0x81
 800e11a:	4618      	mov	r0, r3
 800e11c:	f001 f8b6 	bl	800f28c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800e120:	7abb      	ldrb	r3, [r7, #10]
 800e122:	2181      	movs	r1, #129	; 0x81
 800e124:	4618      	mov	r0, r3
 800e126:	f001 f8b1 	bl	800f28c <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800e12a:	7ffb      	ldrb	r3, [r7, #31]
 800e12c:	e00c      	b.n	800e148 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800e12e:	69b9      	ldr	r1, [r7, #24]
 800e130:	8afa      	ldrh	r2, [r7, #22]
 800e132:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 f806 	bl	800e150 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800e144:	4603      	mov	r3, r0
 800e146:	bf00      	nop
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	603b      	str	r3, [r7, #0]
 800e15c:	4613      	mov	r3, r2
 800e15e:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800e160:	2300      	movs	r3, #0
 800e162:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	785b      	ldrb	r3, [r3, #1]
 800e16e:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2200      	movs	r2, #0
 800e174:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	789b      	ldrb	r3, [r3, #2]
 800e17a:	f003 0302 	and.w	r3, r3, #2
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800e184:	2320      	movs	r3, #32
 800e186:	e000      	b.n	800e18a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800e188:	2310      	movs	r3, #16
 800e18a:	461a      	mov	r2, r3
 800e18c:	21e8      	movs	r1, #232	; 0xe8
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7f3 fa5a 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	2100      	movs	r1, #0
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 fa0b 	bl	800e5b8 <_ZN3USB11dispatchPktEhht>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
 800e1a8:	2b06      	cmp	r3, #6
 800e1aa:	d123      	bne.n	800e1f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800e1ac:	21f8      	movs	r1, #248	; 0xf8
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7f3 fa9c 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	f003 0310 	and.w	r3, r3, #16
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	bf0c      	ite	eq
 800e1be:	2301      	moveq	r3, #1
 800e1c0:	2300      	movne	r3, #0
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	b2d9      	uxtb	r1, r3
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	7893      	ldrb	r3, [r2, #2]
 800e1ce:	f361 0341 	bfi	r3, r1, #1, #1
 800e1d2:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	789b      	ldrb	r3, [r3, #2]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800e1e2:	2320      	movs	r3, #32
 800e1e4:	e000      	b.n	800e1e8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800e1e6:	2310      	movs	r3, #16
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	21e8      	movs	r1, #232	; 0xe8
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7f3 fa2b 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800e1f2:	e072      	b.n	800e2da <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d170      	bne.n	800e2dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800e1fa:	21c8      	movs	r1, #200	; 0xc8
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7f3 fa75 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e202:	4603      	mov	r3, r0
 800e204:	f003 0304 	and.w	r3, r3, #4
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bf0c      	ite	eq
 800e20c:	2301      	moveq	r3, #1
 800e20e:	2300      	movne	r3, #0
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800e216:	23f0      	movs	r3, #240	; 0xf0
 800e218:	75fb      	strb	r3, [r7, #23]
                        break;
 800e21a:	e060      	b.n	800e2de <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800e21c:	2130      	movs	r1, #48	; 0x30
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f7f3 fa64 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e224:	4603      	mov	r3, r0
 800e226:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800e228:	7dba      	ldrb	r2, [r7, #22]
 800e22a:	8a7b      	ldrh	r3, [r7, #18]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	dd01      	ble.n	800e234 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800e230:	8a7b      	ldrh	r3, [r7, #18]
 800e232:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	8a7a      	ldrh	r2, [r7, #18]
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	b29b      	uxth	r3, r3
 800e242:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800e244:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da01      	bge.n	800e250 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800e250:	7dba      	ldrb	r2, [r7, #22]
 800e252:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e256:	4293      	cmp	r3, r2
 800e258:	bfa8      	it	ge
 800e25a:	4613      	movge	r3, r2
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	2108      	movs	r1, #8
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f001 f81e 	bl	800f2a4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800e268:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800e26a:	2204      	movs	r2, #4
 800e26c:	21c8      	movs	r1, #200	; 0xc8
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f7f3 f9ea 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	881a      	ldrh	r2, [r3, #0]
 800e278:	7dbb      	ldrb	r3, [r7, #22]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	4413      	add	r3, r2
 800e27e:	b29a      	uxth	r2, r3
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800e284:	7dba      	ldrb	r2, [r7, #22]
 800e286:	7c7b      	ldrb	r3, [r7, #17]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d304      	bcc.n	800e296 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	8a7a      	ldrh	r2, [r7, #18]
 800e292:	429a      	cmp	r2, r3
 800e294:	d813      	bhi.n	800e2be <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800e296:	21f8      	movs	r1, #248	; 0xf8
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f7f3 fa27 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f003 0310 	and.w	r3, r3, #16
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	e000      	b.n	800e2ae <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	68ba      	ldr	r2, [r7, #8]
 800e2b0:	7893      	ldrb	r3, [r2, #2]
 800e2b2:	f361 0341 	bfi	r3, r1, #1, #1
 800e2b6:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	75fb      	strb	r3, [r7, #23]
                        break;
 800e2bc:	e00f      	b.n	800e2de <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800e2be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f43f af66 	beq.w	800e194 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800e2c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e2d0:	fb02 f303 	mul.w	r3, r2, r3
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7f3 fcc3 	bl	8001c60 <HAL_Delay>
        } //while( 1 )
 800e2da:	e75b      	b.n	800e194 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800e2dc:	bf00      	nop
        return ( rcode);
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af02      	add	r7, sp, #8
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	70fb      	strb	r3, [r7, #3]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	70bb      	strb	r3, [r7, #2]
 800e2fe:	4613      	mov	r3, r2
 800e300:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800e302:	2300      	movs	r3, #0
 800e304:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e30a:	f107 0010 	add.w	r0, r7, #16
 800e30e:	78ba      	ldrb	r2, [r7, #2]
 800e310:	78f9      	ldrb	r1, [r7, #3]
 800e312:	f107 030e 	add.w	r3, r7, #14
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	4603      	mov	r3, r0
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fd99 	bl	800de52 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e320:	4603      	mov	r3, r0
 800e322:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800e324:	7dfb      	ldrb	r3, [r7, #23]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	e00a      	b.n	800e344 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800e32e:	6939      	ldr	r1, [r7, #16]
 800e330:	89fa      	ldrh	r2, [r7, #14]
 800e332:	8838      	ldrh	r0, [r7, #0]
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	4603      	mov	r3, r0
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f806 	bl	800e34c <_ZN3USB11OutTransferEP6EpInfottPh>
 800e340:	4603      	mov	r3, r0
 800e342:	bf00      	nop
}
 800e344:	4618      	mov	r0, r3
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08a      	sub	sp, #40	; 0x28
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	4611      	mov	r1, r2
 800e358:	461a      	mov	r2, r3
 800e35a:	460b      	mov	r3, r1
 800e35c:	80fb      	strh	r3, [r7, #6]
 800e35e:	4613      	mov	r3, r2
 800e360:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e362:	2300      	movs	r3, #0
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36a:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e36c:	88bb      	ldrh	r3, [r7, #4]
 800e36e:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	785b      	ldrb	r3, [r3, #1]
 800e374:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e376:	7efb      	ldrb	r3, [r7, #27]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e37c:	7efb      	ldrb	r3, [r7, #27]
 800e37e:	2b40      	cmp	r3, #64	; 0x40
 800e380:	d901      	bls.n	800e386 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e382:	23da      	movs	r3, #218	; 0xda
 800e384:	e111      	b.n	800e5aa <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e386:	f7f3 fc5f 	bl	8001c48 <HAL_GetTick>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a89      	ldr	r2, [pc, #548]	; (800e5b4 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e38e:	fba2 2303 	umull	r2, r3, r2, r3
 800e392:	099b      	lsrs	r3, r3, #6
 800e394:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e398:	3308      	adds	r3, #8
 800e39a:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	789b      	ldrb	r3, [r3, #2]
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800e3aa:	2380      	movs	r3, #128	; 0x80
 800e3ac:	e000      	b.n	800e3b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800e3ae:	2340      	movs	r3, #64	; 0x40
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	21e8      	movs	r1, #232	; 0xe8
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f7f3 f947 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e3ba:	8bbb      	ldrh	r3, [r7, #28]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 80de 	beq.w	800e57e <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e3cc:	7efb      	ldrb	r3, [r7, #27]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	8bba      	ldrh	r2, [r7, #28]
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	bf28      	it	cs
 800e3d6:	4613      	movcs	r3, r2
 800e3d8:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e3da:	8a7b      	ldrh	r3, [r7, #18]
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	2110      	movs	r1, #16
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f000 ff24 	bl	800f230 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e3e8:	8a7b      	ldrh	r3, [r7, #18]
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	2138      	movs	r1, #56	; 0x38
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7f3 f929 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	f043 0320 	orr.w	r3, r3, #32
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	461a      	mov	r2, r3
 800e402:	21f0      	movs	r1, #240	; 0xf0
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f7f3 f91f 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e40a:	21c8      	movs	r1, #200	; 0xc8
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7f3 f96d 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e412:	4603      	mov	r3, r0
 800e414:	b25b      	sxtb	r3, r3
 800e416:	43db      	mvns	r3, r3
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	09db      	lsrs	r3, r3, #7
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d000      	beq.n	800e424 <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800e422:	e7f2      	b.n	800e40a <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e424:	2280      	movs	r2, #128	; 0x80
 800e426:	21c8      	movs	r1, #200	; 0xc8
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7f3 f90d 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e42e:	21f8      	movs	r1, #248	; 0xf8
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7f3 f95b 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e436:	4603      	mov	r3, r0
 800e438:	f003 030f 	and.w	r3, r3, #15
 800e43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00c      	beq.n	800e462 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e448:	f7f3 fbfe 	bl	8001c48 <HAL_GetTick>
 800e44c:	4603      	mov	r3, r0
 800e44e:	4a59      	ldr	r2, [pc, #356]	; (800e5b4 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e450:	fba2 2303 	umull	r2, r3, r2, r3
 800e454:	099a      	lsrs	r2, r3, #6
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da01      	bge.n	800e462 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800e462:	2300      	movs	r3, #0
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 8081 	beq.w	800e56c <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46e:	2b0e      	cmp	r3, #14
 800e470:	d012      	beq.n	800e498 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800e472:	2b0e      	cmp	r3, #14
 800e474:	f300 8085 	bgt.w	800e582 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d002      	beq.n	800e482 <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800e47c:	2b06      	cmp	r3, #6
 800e47e:	d015      	beq.n	800e4ac <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e480:	e07f      	b.n	800e582 <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800e482:	8bfb      	ldrh	r3, [r7, #30]
 800e484:	3301      	adds	r3, #1
 800e486:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e488:	88fb      	ldrh	r3, [r7, #6]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d032      	beq.n	800e4f4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800e48e:	8bfa      	ldrh	r2, [r7, #30]
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	429a      	cmp	r2, r3
 800e494:	d12e      	bne.n	800e4f4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800e496:	e075      	b.n	800e584 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800e498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e49c:	3301      	adds	r3, #1
 800e49e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e4a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d126      	bne.n	800e4f8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800e4aa:	e06b      	b.n	800e584 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e4ac:	21f8      	movs	r1, #248	; 0xf8
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7f3 f91c 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f003 0320 	and.w	r3, r3, #32
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	bf0c      	ite	eq
 800e4be:	2301      	moveq	r3, #1
 800e4c0:	2300      	movne	r3, #0
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f003 0301 	and.w	r3, r3, #1
 800e4c8:	b2d9      	uxtb	r1, r3
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	7893      	ldrb	r3, [r2, #2]
 800e4ce:	f361 0300 	bfi	r3, r1, #0, #1
 800e4d2:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	789b      	ldrb	r3, [r3, #2]
 800e4d8:	f003 0301 	and.w	r3, r3, #1
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800e4e2:	2380      	movs	r3, #128	; 0x80
 800e4e4:	e000      	b.n	800e4e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800e4e6:	2340      	movs	r3, #64	; 0x40
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	21e8      	movs	r1, #232	; 0xe8
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7f3 f8ab 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e4f2:	e002      	b.n	800e4fa <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e4f4:	bf00      	nop
 800e4f6:	e000      	b.n	800e4fa <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e4f8:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	2138      	movs	r1, #56	; 0x38
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7f3 f8a2 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	461a      	mov	r2, r3
 800e50a:	2110      	movs	r1, #16
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7f3 f89b 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e512:	8a7b      	ldrh	r3, [r7, #18]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	461a      	mov	r2, r3
 800e518:	2138      	movs	r1, #56	; 0x38
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f7f3 f894 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f043 0320 	orr.w	r3, r3, #32
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	461a      	mov	r2, r3
 800e52c:	21f0      	movs	r1, #240	; 0xf0
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f7f3 f88a 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e534:	21c8      	movs	r1, #200	; 0xc8
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7f3 f8d8 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e53c:	4603      	mov	r3, r0
 800e53e:	b25b      	sxtb	r3, r3
 800e540:	43db      	mvns	r3, r3
 800e542:	b2db      	uxtb	r3, r3
 800e544:	09db      	lsrs	r3, r3, #7
 800e546:	b2db      	uxtb	r3, r3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d000      	beq.n	800e54e <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800e54c:	e7f2      	b.n	800e534 <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e54e:	2280      	movs	r2, #128	; 0x80
 800e550:	21c8      	movs	r1, #200	; 0xc8
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f7f3 f878 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e558:	21f8      	movs	r1, #248	; 0xf8
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7f3 f8c6 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e560:	4603      	mov	r3, r0
 800e562:	f003 030f 	and.w	r3, r3, #15
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e56a:	e769      	b.n	800e440 <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e56c:	8bba      	ldrh	r2, [r7, #28]
 800e56e:	8a7b      	ldrh	r3, [r7, #18]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e574:	8a7b      	ldrh	r3, [r7, #18]
 800e576:	6a3a      	ldr	r2, [r7, #32]
 800e578:	4413      	add	r3, r2
 800e57a:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e57c:	e71d      	b.n	800e3ba <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800e57e:	bf00      	nop
 800e580:	e000      	b.n	800e584 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800e582:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e584:	21f8      	movs	r1, #248	; 0xf8
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f7f3 f8b0 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f003 0320 	and.w	r3, r3, #32
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800e596:	2101      	movs	r1, #1
 800e598:	e000      	b.n	800e59c <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800e59a:	2100      	movs	r1, #0
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	7893      	ldrb	r3, [r2, #2]
 800e5a0:	f361 0300 	bfi	r3, r1, #0, #1
 800e5a4:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3728      	adds	r7, #40	; 0x28
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	10624dd3 	.word	0x10624dd3

0800e5b8 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	70fb      	strb	r3, [r7, #3]
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	70bb      	strb	r3, [r7, #2]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e5d2:	f7f3 fb39 	bl	8001c48 <HAL_GetTick>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4a38      	ldr	r2, [pc, #224]	; (800e6bc <_ZN3USB11dispatchPktEhht+0x104>)
 800e5da:	fba2 2303 	umull	r2, r3, r2, r3
 800e5de:	099b      	lsrs	r3, r3, #6
 800e5e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e5e4:	3308      	adds	r3, #8
 800e5e6:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e5f4:	f7f3 fb28 	bl	8001c48 <HAL_GetTick>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	4a30      	ldr	r2, [pc, #192]	; (800e6bc <_ZN3USB11dispatchPktEhht+0x104>)
 800e5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e600:	099a      	lsrs	r2, r3, #6
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	0fdb      	lsrs	r3, r3, #31
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d050      	beq.n	800e6b0 <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e60e:	78fa      	ldrb	r2, [r7, #3]
 800e610:	78bb      	ldrb	r3, [r7, #2]
 800e612:	4313      	orrs	r3, r2
 800e614:	b2db      	uxtb	r3, r3
 800e616:	461a      	mov	r2, r3
 800e618:	21f0      	movs	r1, #240	; 0xf0
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7f3 f814 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e620:	23ff      	movs	r3, #255	; 0xff
 800e622:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e624:	f7f3 fb10 	bl	8001c48 <HAL_GetTick>
 800e628:	4603      	mov	r3, r0
 800e62a:	4a24      	ldr	r2, [pc, #144]	; (800e6bc <_ZN3USB11dispatchPktEhht+0x104>)
 800e62c:	fba2 2303 	umull	r2, r3, r2, r3
 800e630:	099a      	lsrs	r2, r3, #6
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	0fdb      	lsrs	r3, r3, #31
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d010      	beq.n	800e660 <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e63e:	21c8      	movs	r1, #200	; 0xc8
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7f3 f853 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e646:	4603      	mov	r3, r0
 800e648:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dae8      	bge.n	800e624 <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e652:	2280      	movs	r2, #128	; 0x80
 800e654:	21c8      	movs	r1, #200	; 0xc8
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7f2 fff6 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e65c:	2300      	movs	r3, #0
 800e65e:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e660:	21f8      	movs	r1, #248	; 0xf8
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7f3 f842 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e668:	4603      	mov	r3, r0
 800e66a:	f003 030f 	and.w	r3, r3, #15
 800e66e:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	2b04      	cmp	r3, #4
 800e674:	d002      	beq.n	800e67c <_ZN3USB11dispatchPktEhht+0xc4>
 800e676:	2b0e      	cmp	r3, #14
 800e678:	d00c      	beq.n	800e694 <_ZN3USB11dispatchPktEhht+0xdc>
 800e67a:	e013      	b.n	800e6a4 <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800e67c:	8abb      	ldrh	r3, [r7, #20]
 800e67e:	3301      	adds	r3, #1
 800e680:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e682:	883b      	ldrh	r3, [r7, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00f      	beq.n	800e6a8 <_ZN3USB11dispatchPktEhht+0xf0>
 800e688:	8aba      	ldrh	r2, [r7, #20]
 800e68a:	883b      	ldrh	r3, [r7, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d10b      	bne.n	800e6a8 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	e00e      	b.n	800e6b2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e694:	7dbb      	ldrb	r3, [r7, #22]
 800e696:	3301      	adds	r3, #1
 800e698:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e69a:	7dbb      	ldrb	r3, [r7, #22]
 800e69c:	2b03      	cmp	r3, #3
 800e69e:	d105      	bne.n	800e6ac <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800e6a0:	7dfb      	ldrb	r3, [r7, #23]
 800e6a2:	e006      	b.n	800e6b2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800e6a4:	7dfb      	ldrb	r3, [r7, #23]
 800e6a6:	e004      	b.n	800e6b2 <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800e6a8:	bf00      	nop
 800e6aa:	e7a3      	b.n	800e5f4 <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800e6ac:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e6ae:	e7a1      	b.n	800e5f4 <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	10624dd3 	.word	0x10624dd3

0800e6c0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fe17 	bl	800f300 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fe2c 	bl	800f330 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e6dc:	7b3b      	ldrb	r3, [r7, #12]
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	d832      	bhi.n	800e748 <_ZN3USB4TaskEv+0x88>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <_ZN3USB4TaskEv+0x28>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e705 	.word	0x0800e705
 800e6ec:	0800e6f9 	.word	0x0800e6f9
 800e6f0:	0800e721 	.word	0x0800e721
 800e6f4:	0800e71d 	.word	0x0800e71d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e6f8:	4bc7      	ldr	r3, [pc, #796]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e6fa:	2213      	movs	r2, #19
 800e6fc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e6fe:	2300      	movs	r3, #0
 800e700:	73fb      	strb	r3, [r7, #15]
                        break;
 800e702:	e021      	b.n	800e748 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e704:	4bc4      	ldr	r3, [pc, #784]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e70c:	2b10      	cmp	r3, #16
 800e70e:	d002      	beq.n	800e716 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e710:	4bc1      	ldr	r3, [pc, #772]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e712:	2211      	movs	r2, #17
 800e714:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]
                        break;
 800e71a:	e015      	b.n	800e748 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800e71c:	2301      	movs	r3, #1
 800e71e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e720:	4bbd      	ldr	r3, [pc, #756]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e728:	2b10      	cmp	r3, #16
 800e72a:	d10c      	bne.n	800e746 <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e72c:	f7f3 fa8c 	bl	8001c48 <HAL_GetTick>
 800e730:	4603      	mov	r3, r0
 800e732:	4aba      	ldr	r2, [pc, #744]	; (800ea1c <_ZN3USB4TaskEv+0x35c>)
 800e734:	fba2 2303 	umull	r2, r3, r2, r3
 800e738:	099b      	lsrs	r3, r3, #6
 800e73a:	33c8      	adds	r3, #200	; 0xc8
 800e73c:	4ab8      	ldr	r2, [pc, #736]	; (800ea20 <_ZN3USB4TaskEv+0x360>)
 800e73e:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e740:	4bb5      	ldr	r3, [pc, #724]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e742:	2220      	movs	r2, #32
 800e744:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e746:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e748:	2300      	movs	r3, #0
 800e74a:	73bb      	strb	r3, [r7, #14]
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	2b0f      	cmp	r3, #15
 800e750:	d81b      	bhi.n	800e78a <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800e752:	7bba      	ldrb	r2, [r7, #14]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	321e      	adds	r2, #30
 800e758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d010      	beq.n	800e782 <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800e760:	7bba      	ldrb	r2, [r7, #14]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	321e      	adds	r2, #30
 800e766:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e76a:	7bba      	ldrb	r2, [r7, #14]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	321e      	adds	r2, #30
 800e770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	330c      	adds	r3, #12
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4608      	mov	r0, r1
 800e77c:	4798      	blx	r3
 800e77e:	4603      	mov	r3, r0
 800e780:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e782:	7bbb      	ldrb	r3, [r7, #14]
 800e784:	3301      	adds	r3, #1
 800e786:	73bb      	strb	r3, [r7, #14]
 800e788:	e7e0      	b.n	800e74c <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800e78a:	4ba3      	ldr	r3, [pc, #652]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2ba0      	cmp	r3, #160	; 0xa0
 800e790:	f000 812f 	beq.w	800e9f2 <_ZN3USB4TaskEv+0x332>
 800e794:	2ba0      	cmp	r3, #160	; 0xa0
 800e796:	f300 813b 	bgt.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e79a:	2b90      	cmp	r3, #144	; 0x90
 800e79c:	f000 812b 	beq.w	800e9f6 <_ZN3USB4TaskEv+0x336>
 800e7a0:	2b90      	cmp	r3, #144	; 0x90
 800e7a2:	f300 8135 	bgt.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e7a6:	2b80      	cmp	r3, #128	; 0x80
 800e7a8:	f000 810a 	beq.w	800e9c0 <_ZN3USB4TaskEv+0x300>
 800e7ac:	2b80      	cmp	r3, #128	; 0x80
 800e7ae:	f300 812f 	bgt.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e7b2:	2b51      	cmp	r3, #81	; 0x51
 800e7b4:	f000 80f2 	beq.w	800e99c <_ZN3USB4TaskEv+0x2dc>
 800e7b8:	2b51      	cmp	r3, #81	; 0x51
 800e7ba:	f300 8129 	bgt.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e7be:	2b40      	cmp	r3, #64	; 0x40
 800e7c0:	dc6a      	bgt.n	800e898 <_ZN3USB4TaskEv+0x1d8>
 800e7c2:	2b11      	cmp	r3, #17
 800e7c4:	f2c0 8124 	blt.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e7c8:	3b11      	subs	r3, #17
 800e7ca:	2b2f      	cmp	r3, #47	; 0x2f
 800e7cc:	f200 8120 	bhi.w	800ea10 <_ZN3USB4TaskEv+0x350>
 800e7d0:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <_ZN3USB4TaskEv+0x118>)
 800e7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d6:	bf00      	nop
 800e7d8:	0800e89f 	.word	0x0800e89f
 800e7dc:	0800e9fb 	.word	0x0800e9fb
 800e7e0:	0800e9fb 	.word	0x0800e9fb
 800e7e4:	0800ea11 	.word	0x0800ea11
 800e7e8:	0800ea11 	.word	0x0800ea11
 800e7ec:	0800ea11 	.word	0x0800ea11
 800e7f0:	0800ea11 	.word	0x0800ea11
 800e7f4:	0800ea11 	.word	0x0800ea11
 800e7f8:	0800ea11 	.word	0x0800ea11
 800e7fc:	0800ea11 	.word	0x0800ea11
 800e800:	0800ea11 	.word	0x0800ea11
 800e804:	0800ea11 	.word	0x0800ea11
 800e808:	0800ea11 	.word	0x0800ea11
 800e80c:	0800ea11 	.word	0x0800ea11
 800e810:	0800ea11 	.word	0x0800ea11
 800e814:	0800e8ef 	.word	0x0800e8ef
 800e818:	0800ea11 	.word	0x0800ea11
 800e81c:	0800ea11 	.word	0x0800ea11
 800e820:	0800ea11 	.word	0x0800ea11
 800e824:	0800ea11 	.word	0x0800ea11
 800e828:	0800ea11 	.word	0x0800ea11
 800e82c:	0800ea11 	.word	0x0800ea11
 800e830:	0800ea11 	.word	0x0800ea11
 800e834:	0800ea11 	.word	0x0800ea11
 800e838:	0800ea11 	.word	0x0800ea11
 800e83c:	0800ea11 	.word	0x0800ea11
 800e840:	0800ea11 	.word	0x0800ea11
 800e844:	0800ea11 	.word	0x0800ea11
 800e848:	0800ea11 	.word	0x0800ea11
 800e84c:	0800ea11 	.word	0x0800ea11
 800e850:	0800ea11 	.word	0x0800ea11
 800e854:	0800e913 	.word	0x0800e913
 800e858:	0800ea11 	.word	0x0800ea11
 800e85c:	0800ea11 	.word	0x0800ea11
 800e860:	0800ea11 	.word	0x0800ea11
 800e864:	0800ea11 	.word	0x0800ea11
 800e868:	0800ea11 	.word	0x0800ea11
 800e86c:	0800ea11 	.word	0x0800ea11
 800e870:	0800ea11 	.word	0x0800ea11
 800e874:	0800ea11 	.word	0x0800ea11
 800e878:	0800ea11 	.word	0x0800ea11
 800e87c:	0800ea11 	.word	0x0800ea11
 800e880:	0800ea11 	.word	0x0800ea11
 800e884:	0800ea11 	.word	0x0800ea11
 800e888:	0800ea11 	.word	0x0800ea11
 800e88c:	0800ea11 	.word	0x0800ea11
 800e890:	0800ea11 	.word	0x0800ea11
 800e894:	0800e925 	.word	0x0800e925
 800e898:	2b50      	cmp	r3, #80	; 0x50
 800e89a:	d063      	beq.n	800e964 <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e89c:	e0b8      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        init();
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff fa6c 	bl	800dd7c <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	737b      	strb	r3, [r7, #13]
 800e8a8:	7b7b      	ldrb	r3, [r7, #13]
 800e8aa:	2b0f      	cmp	r3, #15
 800e8ac:	d81b      	bhi.n	800e8e6 <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800e8ae:	7b7a      	ldrb	r2, [r7, #13]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	321e      	adds	r2, #30
 800e8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d010      	beq.n	800e8de <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800e8bc:	7b7a      	ldrb	r2, [r7, #13]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	321e      	adds	r2, #30
 800e8c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8c6:	7b7a      	ldrb	r2, [r7, #13]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	321e      	adds	r2, #30
 800e8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3308      	adds	r3, #8
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4608      	mov	r0, r1
 800e8d8:	4798      	blx	r3
 800e8da:	4603      	mov	r3, r0
 800e8dc:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e8de:	7b7b      	ldrb	r3, [r7, #13]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	737b      	strb	r3, [r7, #13]
 800e8e4:	e7e0      	b.n	800e8a8 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e8e6:	4b4c      	ldr	r3, [pc, #304]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e8e8:	2212      	movs	r2, #18
 800e8ea:	701a      	strb	r2, [r3, #0]
                        break;
 800e8ec:	e090      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e8ee:	f7f3 f9ab 	bl	8001c48 <HAL_GetTick>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4a49      	ldr	r2, [pc, #292]	; (800ea1c <_ZN3USB4TaskEv+0x35c>)
 800e8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8fa:	099a      	lsrs	r2, r3, #6
 800e8fc:	4b48      	ldr	r3, [pc, #288]	; (800ea20 <_ZN3USB4TaskEv+0x360>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	43db      	mvns	r3, r3
 800e904:	0fdb      	lsrs	r3, r3, #31
 800e906:	b2db      	uxtb	r3, r3
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d078      	beq.n	800e9fe <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e90c:	4b42      	ldr	r3, [pc, #264]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e90e:	2230      	movs	r2, #48	; 0x30
 800e910:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e912:	2201      	movs	r2, #1
 800e914:	21e8      	movs	r1, #232	; 0xe8
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7f2 fe96 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e91c:	4b3e      	ldr	r3, [pc, #248]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e91e:	2240      	movs	r2, #64	; 0x40
 800e920:	701a      	strb	r2, [r3, #0]
                        break;
 800e922:	e075      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e924:	21e8      	movs	r1, #232	; 0xe8
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7f2 fee0 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e92c:	4603      	mov	r3, r0
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	bf0c      	ite	eq
 800e936:	2301      	moveq	r3, #1
 800e938:	2300      	movne	r3, #0
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d060      	beq.n	800ea02 <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e940:	21d8      	movs	r1, #216	; 0xd8
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7f2 fed2 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e948:	4603      	mov	r3, r0
 800e94a:	f043 0308 	orr.w	r3, r3, #8
 800e94e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e950:	7b3b      	ldrb	r3, [r7, #12]
 800e952:	461a      	mov	r2, r3
 800e954:	21d8      	movs	r1, #216	; 0xd8
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7f2 fe76 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e95c:	4b2e      	ldr	r3, [pc, #184]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e95e:	2250      	movs	r2, #80	; 0x50
 800e960:	701a      	strb	r2, [r3, #0]
                        break;
 800e962:	e04e      	b.n	800ea02 <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e964:	21c8      	movs	r1, #200	; 0xc8
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7f2 fec0 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e972:	2b00      	cmp	r3, #0
 800e974:	bf14      	ite	ne
 800e976:	2301      	movne	r3, #1
 800e978:	2300      	moveq	r3, #0
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d042      	beq.n	800ea06 <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e980:	4b25      	ldr	r3, [pc, #148]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e982:	2251      	movs	r2, #81	; 0x51
 800e984:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e986:	f7f3 f95f 	bl	8001c48 <HAL_GetTick>
 800e98a:	4603      	mov	r3, r0
 800e98c:	4a23      	ldr	r2, [pc, #140]	; (800ea1c <_ZN3USB4TaskEv+0x35c>)
 800e98e:	fba2 2303 	umull	r2, r3, r2, r3
 800e992:	099b      	lsrs	r3, r3, #6
 800e994:	3314      	adds	r3, #20
 800e996:	4a22      	ldr	r2, [pc, #136]	; (800ea20 <_ZN3USB4TaskEv+0x360>)
 800e998:	6013      	str	r3, [r2, #0]
                        break;
 800e99a:	e034      	b.n	800ea06 <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e99c:	f7f3 f954 	bl	8001c48 <HAL_GetTick>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	4a1e      	ldr	r2, [pc, #120]	; (800ea1c <_ZN3USB4TaskEv+0x35c>)
 800e9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a8:	099a      	lsrs	r2, r3, #6
 800e9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ea20 <_ZN3USB4TaskEv+0x360>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	43db      	mvns	r3, r3
 800e9b2:	0fdb      	lsrs	r3, r3, #31
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d027      	beq.n	800ea0a <_ZN3USB4TaskEv+0x34a>
 800e9ba:	4b17      	ldr	r3, [pc, #92]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e9bc:	2280      	movs	r2, #128	; 0x80
 800e9be:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e9c0:	7bfb      	ldrb	r3, [r7, #15]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f928 	bl	800ec1c <_ZN3USB11ConfiguringEhhb>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e9d0:	7afb      	ldrb	r3, [r7, #11]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d009      	beq.n	800e9ea <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e9d6:	7afb      	ldrb	r3, [r7, #11]
 800e9d8:	2bd2      	cmp	r3, #210	; 0xd2
 800e9da:	d018      	beq.n	800ea0e <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800e9dc:	4a11      	ldr	r2, [pc, #68]	; (800ea24 <_ZN3USB4TaskEv+0x364>)
 800e9de:	7afb      	ldrb	r3, [r7, #11]
 800e9e0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e9e4:	22a0      	movs	r2, #160	; 0xa0
 800e9e6:	701a      	strb	r2, [r3, #0]
                        break;
 800e9e8:	e011      	b.n	800ea0e <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800e9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ea18 <_ZN3USB4TaskEv+0x358>)
 800e9ec:	2290      	movs	r2, #144	; 0x90
 800e9ee:	701a      	strb	r2, [r3, #0]
                        break;
 800e9f0:	e00d      	b.n	800ea0e <_ZN3USB4TaskEv+0x34e>
                        break;
 800e9f2:	bf00      	nop
 800e9f4:	e00c      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        break;
 800e9f6:	bf00      	nop
 800e9f8:	e00a      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        break;
 800e9fa:	bf00      	nop
 800e9fc:	e008      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e9fe:	bf00      	nop
 800ea00:	e006      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        break;
 800ea02:	bf00      	nop
 800ea04:	e004      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        break;
 800ea06:	bf00      	nop
 800ea08:	e002      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800ea0a:	bf00      	nop
 800ea0c:	e000      	b.n	800ea10 <_ZN3USB4TaskEv+0x350>
                        break;
 800ea0e:	bf00      	nop
}
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	20000671 	.word	0x20000671
 800ea1c:	10624dd3 	.word	0x10624dd3
 800ea20:	20000674 	.word	0x20000674
 800ea24:	20000670 	.word	0x20000670

0800ea28 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b086      	sub	sp, #24
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	4608      	mov	r0, r1
 800ea32:	4611      	mov	r1, r2
 800ea34:	461a      	mov	r2, r3
 800ea36:	4603      	mov	r3, r0
 800ea38:	70fb      	strb	r3, [r7, #3]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	70bb      	strb	r3, [r7, #2]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	617b      	str	r3, [r7, #20]
 800ea46:	2300      	movs	r3, #0
 800ea48:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 fbc8 	bl	800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ea54:	6178      	str	r0, [r7, #20]

        if(!p0)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d101      	bne.n	800ea60 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ea5c:	23d6      	movs	r3, #214	; 0xd6
 800ea5e:	e03a      	b.n	800ead6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800ea68:	23d7      	movs	r3, #215	; 0xd7
 800ea6a:	e034      	b.n	800ead6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	787a      	ldrb	r2, [r7, #1]
 800ea70:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	78bb      	ldrb	r3, [r7, #2]
 800ea76:	78f9      	ldrb	r1, [r7, #3]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f000 fc67 	bl	800f34c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800ea88:	23d4      	movs	r3, #212	; 0xd4
 800ea8a:	e024      	b.n	800ead6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	7bfa      	ldrb	r2, [r7, #15]
 800ea90:	4611      	mov	r1, r2
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 fba6 	bl	800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ea98:	6138      	str	r0, [r7, #16]

        if(!p)
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800eaa0:	23d6      	movs	r3, #214	; 0xd6
 800eaa2:	e018      	b.n	800ead6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	787a      	ldrb	r2, [r7, #1]
 800eaa8:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800eaaa:	7bfb      	ldrb	r3, [r7, #15]
 800eaac:	2200      	movs	r2, #0
 800eaae:	2100      	movs	r1, #0
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 fae9 	bl	800f088 <_ZN3USB7setAddrEhhh>
 800eab6:	4603      	mov	r3, r0
 800eab8:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800eaba:	7bbb      	ldrb	r3, [r7, #14]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d009      	beq.n	800ead4 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7bfa      	ldrb	r2, [r7, #15]
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fcd8 	bl	800f47c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800eacc:	2300      	movs	r3, #0
 800eace:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800ead0:	7bbb      	ldrb	r3, [r7, #14]
 800ead2:	e000      	b.n	800ead6 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800ead4:	2300      	movs	r3, #0
};
 800ead6:	4618      	mov	r0, r3
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800eae0:	b590      	push	{r4, r7, lr}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	461a      	mov	r2, r3
 800eaee:	4603      	mov	r3, r0
 800eaf0:	70fb      	strb	r3, [r7, #3]
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	70bb      	strb	r3, [r7, #2]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800eafe:	78fa      	ldrb	r2, [r7, #3]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	321e      	adds	r2, #30
 800eb04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb08:	78fa      	ldrb	r2, [r7, #3]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	321e      	adds	r2, #30
 800eb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3304      	adds	r3, #4
 800eb16:	681c      	ldr	r4, [r3, #0]
 800eb18:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb1c:	787a      	ldrb	r2, [r7, #1]
 800eb1e:	78b9      	ldrb	r1, [r7, #2]
 800eb20:	47a0      	blx	r4
 800eb22:	4603      	mov	r3, r0
 800eb24:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800eb26:	7bbb      	ldrb	r3, [r7, #14]
 800eb28:	2be0      	cmp	r3, #224	; 0xe0
 800eb2a:	d11c      	bne.n	800eb66 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800eb2c:	78bb      	ldrb	r3, [r7, #2]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d108      	bne.n	800eb44 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800eb32:	2201      	movs	r2, #1
 800eb34:	21e8      	movs	r1, #232	; 0xe8
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7f2 fd86 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800eb3c:	4835      	ldr	r0, [pc, #212]	; (800ec14 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800eb3e:	f7f3 f88f 	bl	8001c60 <HAL_Delay>
 800eb42:	e022      	b.n	800eb8a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800eb44:	78ba      	ldrb	r2, [r7, #2]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	321e      	adds	r2, #30
 800eb4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb4e:	78ba      	ldrb	r2, [r7, #2]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	321e      	adds	r2, #30
 800eb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3314      	adds	r3, #20
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	787a      	ldrb	r2, [r7, #1]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4798      	blx	r3
 800eb64:	e011      	b.n	800eb8a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800eb66:	7bbb      	ldrb	r3, [r7, #14]
 800eb68:	2b0d      	cmp	r3, #13
 800eb6a:	d109      	bne.n	800eb80 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	2b02      	cmp	r3, #2
 800eb70:	d806      	bhi.n	800eb80 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800eb72:	4829      	ldr	r0, [pc, #164]	; (800ec18 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800eb74:	f7f3 f874 	bl	8001c60 <HAL_Delay>
                retries++;
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	73fb      	strb	r3, [r7, #15]
                goto again;
 800eb7e:	e7be      	b.n	800eafe <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800eb86:	7bbb      	ldrb	r3, [r7, #14]
 800eb88:	e03f      	b.n	800ec0a <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800eb8a:	78fa      	ldrb	r2, [r7, #3]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	321e      	adds	r2, #30
 800eb90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb94:	78fa      	ldrb	r2, [r7, #3]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	321e      	adds	r2, #30
 800eb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681c      	ldr	r4, [r3, #0]
 800eba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eba6:	787a      	ldrb	r2, [r7, #1]
 800eba8:	78b9      	ldrb	r1, [r7, #2]
 800ebaa:	47a0      	blx	r4
 800ebac:	4603      	mov	r3, r0
 800ebae:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	2b0d      	cmp	r3, #13
 800ebb4:	d109      	bne.n	800ebca <_ZN3USB13AttemptConfigEhhhb+0xea>
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d806      	bhi.n	800ebca <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800ebbc:	4816      	ldr	r0, [pc, #88]	; (800ec18 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800ebbe:	f7f3 f84f 	bl	8001c60 <HAL_Delay>
                retries++;
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ebc8:	e799      	b.n	800eafe <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d01b      	beq.n	800ec08 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800ebd0:	78bb      	ldrb	r3, [r7, #2]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d108      	bne.n	800ebe8 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	21e8      	movs	r1, #232	; 0xe8
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7f2 fd34 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800ebe0:	480c      	ldr	r0, [pc, #48]	; (800ec14 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800ebe2:	f7f3 f83d 	bl	8001c60 <HAL_Delay>
 800ebe6:	e00f      	b.n	800ec08 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800ebe8:	78ba      	ldrb	r2, [r7, #2]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	321e      	adds	r2, #30
 800ebee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ebf2:	78ba      	ldrb	r2, [r7, #2]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	321e      	adds	r2, #30
 800ebf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3314      	adds	r3, #20
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	787a      	ldrb	r2, [r7, #1]
 800ec04:	4611      	mov	r1, r2
 800ec06:	4798      	blx	r3
                }
        }
        return rcode;
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd90      	pop	{r4, r7, pc}
 800ec12:	bf00      	nop
 800ec14:	00018e70 	.word	0x00018e70
 800ec18:	000186a0 	.word	0x000186a0

0800ec1c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b090      	sub	sp, #64	; 0x40
 800ec20:	af02      	add	r7, sp, #8
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	4608      	mov	r0, r1
 800ec26:	4611      	mov	r1, r2
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	70fb      	strb	r3, [r7, #3]
 800ec2e:	460b      	mov	r3, r1
 800ec30:	70bb      	strb	r3, [r7, #2]
 800ec32:	4613      	mov	r3, r2
 800ec34:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800ec36:	2300      	movs	r3, #0
 800ec38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800ec3c:	f107 030c 	add.w	r3, r7, #12
 800ec40:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800ec42:	2300      	movs	r3, #0
 800ec44:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800ec4e:	2308      	movs	r3, #8
 800ec50:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800ec52:	7abb      	ldrb	r3, [r7, #10]
 800ec54:	f36f 0300 	bfc	r3, #0, #1
 800ec58:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800ec5a:	7abb      	ldrb	r3, [r7, #10]
 800ec5c:	f36f 0341 	bfc	r3, #1, #1
 800ec60:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800ec62:	7abb      	ldrb	r3, [r7, #10]
 800ec64:	220f      	movs	r2, #15
 800ec66:	f362 0387 	bfi	r3, r2, #2, #6
 800ec6a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7fa fcbb 	bl	80095e8 <_ZN3USB14GetAddressPoolEv>
 800ec72:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec7e:	4798      	blx	r3
 800ec80:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ec88:	23d6      	movs	r3, #214	; 0xd6
 800ec8a:	e15c      	b.n	800ef46 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	f107 0208 	add.w	r2, r7, #8
 800ec98:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	787a      	ldrb	r2, [r7, #1]
 800ec9e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800eca0:	f107 030c 	add.w	r3, r7, #12
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	2312      	movs	r3, #18
 800eca8:	2200      	movs	r2, #0
 800ecaa:	2100      	movs	r1, #0
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f94e 	bl	800ef4e <_ZN3USB11getDevDescrEhhtPh>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecbc:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800ecbe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800ecc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecca:	e13c      	b.n	800ef46 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	7a1a      	ldrb	r2, [r3, #8]
 800ecd0:	7a5b      	ldrb	r3, [r3, #9]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	7a9a      	ldrb	r2, [r3, #10]
 800ecdc:	7adb      	ldrb	r3, [r3, #11]
 800ecde:	021b      	lsls	r3, r3, #8
 800ece0:	4313      	orrs	r3, r2
 800ece2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece6:	791b      	ldrb	r3, [r3, #4]
 800ece8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	795b      	ldrb	r3, [r3, #5]
 800ecee:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ecf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecfa:	2b0f      	cmp	r3, #15
 800ecfc:	f200 8081 	bhi.w	800ee02 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ed00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	321e      	adds	r2, #30
 800ed08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d06e      	beq.n	800edee <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ed10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	321e      	adds	r2, #30
 800ed18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	321e      	adds	r2, #30
 800ed24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	3310      	adds	r3, #16
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4608      	mov	r0, r1
 800ed30:	4798      	blx	r3
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	bf14      	ite	ne
 800ed38:	2301      	movne	r3, #1
 800ed3a:	2300      	moveq	r3, #0
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d157      	bne.n	800edf2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800ed42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	321e      	adds	r2, #30
 800ed4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	321e      	adds	r2, #30
 800ed56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3320      	adds	r3, #32
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	7fba      	ldrb	r2, [r7, #30]
 800ed62:	4611      	mov	r1, r2
 800ed64:	4798      	blx	r3
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d02b      	beq.n	800edc4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ed6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	321e      	adds	r2, #30
 800ed74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	321e      	adds	r2, #30
 800ed80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3318      	adds	r3, #24
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	8c3a      	ldrh	r2, [r7, #32]
 800ed8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ed8e:	4798      	blx	r3
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d114      	bne.n	800edc0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ed96:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	321e      	adds	r2, #30
 800ed9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eda2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	321e      	adds	r2, #30
 800edaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	331c      	adds	r3, #28
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	7ffa      	ldrb	r2, [r7, #31]
 800edb6:	4611      	mov	r1, r2
 800edb8:	4798      	blx	r3
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800edc0:	2301      	movs	r3, #1
 800edc2:	e000      	b.n	800edc6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 800edc4:	2300      	movs	r3, #0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d014      	beq.n	800edf4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800edca:	78b8      	ldrb	r0, [r7, #2]
 800edcc:	78fa      	ldrb	r2, [r7, #3]
 800edce:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800edd2:	787b      	ldrb	r3, [r7, #1]
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	4603      	mov	r3, r0
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff fe81 	bl	800eae0 <_ZN3USB13AttemptConfigEhhhb>
 800edde:	4603      	mov	r3, r0
 800ede0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ede4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ede8:	2bd1      	cmp	r3, #209	; 0xd1
 800edea:	d109      	bne.n	800ee00 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800edec:	e002      	b.n	800edf4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800edee:	bf00      	nop
 800edf0:	e000      	b.n	800edf4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800edf2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800edf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edf8:	3301      	adds	r3, #1
 800edfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edfe:	e77a      	b.n	800ecf6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800ee00:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800ee02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee06:	2b0f      	cmp	r3, #15
 800ee08:	d802      	bhi.n	800ee10 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800ee0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee0e:	e09a      	b.n	800ef46 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ee10:	2300      	movs	r3, #0
 800ee12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee1a:	2b0f      	cmp	r3, #15
 800ee1c:	f200 8088 	bhi.w	800ef30 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800ee20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	321e      	adds	r2, #30
 800ee28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d074      	beq.n	800ef1a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ee30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	321e      	adds	r2, #30
 800ee38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	321e      	adds	r2, #30
 800ee44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3310      	adds	r3, #16
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4798      	blx	r3
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	bf14      	ite	ne
 800ee58:	2301      	movne	r3, #1
 800ee5a:	2300      	moveq	r3, #0
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d15d      	bne.n	800ef1e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ee62:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	321e      	adds	r2, #30
 800ee6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ee6e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	321e      	adds	r2, #30
 800ee76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3320      	adds	r3, #32
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	7fba      	ldrb	r2, [r7, #30]
 800ee82:	4611      	mov	r1, r2
 800ee84:	4798      	blx	r3
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d02b      	beq.n	800eee4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ee8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	321e      	adds	r2, #30
 800ee94:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ee98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	321e      	adds	r2, #30
 800eea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3318      	adds	r3, #24
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	8c3a      	ldrh	r2, [r7, #32]
 800eeac:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800eeae:	4798      	blx	r3
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d114      	bne.n	800eee0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800eeb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	321e      	adds	r2, #30
 800eebe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eec2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	321e      	adds	r2, #30
 800eeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	331c      	adds	r3, #28
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	7ffa      	ldrb	r2, [r7, #31]
 800eed6:	4611      	mov	r1, r2
 800eed8:	4798      	blx	r3
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800eee0:	2301      	movs	r3, #1
 800eee2:	e000      	b.n	800eee6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 800eee4:	2300      	movs	r3, #0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d11b      	bne.n	800ef22 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800eeea:	78b8      	ldrb	r0, [r7, #2]
 800eeec:	78fa      	ldrb	r2, [r7, #3]
 800eeee:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800eef2:	787b      	ldrb	r3, [r7, #1]
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	4603      	mov	r3, r0
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff fdf1 	bl	800eae0 <_ZN3USB13AttemptConfigEhhhb>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ef04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ef08:	2bd1      	cmp	r3, #209	; 0xd1
 800ef0a:	d00b      	beq.n	800ef24 <_ZN3USB11ConfiguringEhhb+0x308>
 800ef0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ef10:	2bd9      	cmp	r3, #217	; 0xd9
 800ef12:	d007      	beq.n	800ef24 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ef14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ef18:	e015      	b.n	800ef46 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ef1a:	bf00      	nop
 800ef1c:	e002      	b.n	800ef24 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ef1e:	bf00      	nop
 800ef20:	e000      	b.n	800ef24 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ef22:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ef24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef28:	3301      	adds	r3, #1
 800ef2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef2e:	e772      	b.n	800ee16 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ef30:	787b      	ldrb	r3, [r7, #1]
 800ef32:	78ba      	ldrb	r2, [r7, #2]
 800ef34:	78f9      	ldrb	r1, [r7, #3]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7ff fd76 	bl	800ea28 <_ZN3USB17DefaultAddressingEhhb>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800ef42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3738      	adds	r7, #56	; 0x38
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b08a      	sub	sp, #40	; 0x28
 800ef52:	af08      	add	r7, sp, #32
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	70fb      	strb	r3, [r7, #3]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70bb      	strb	r3, [r7, #2]
 800ef64:	4613      	mov	r3, r2
 800ef66:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ef68:	78ba      	ldrb	r2, [r7, #2]
 800ef6a:	78f9      	ldrb	r1, [r7, #3]
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	9306      	str	r3, [sp, #24]
 800ef74:	883b      	ldrh	r3, [r7, #0]
 800ef76:	9305      	str	r3, [sp, #20]
 800ef78:	883b      	ldrh	r3, [r7, #0]
 800ef7a:	9304      	str	r3, [sp, #16]
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9303      	str	r3, [sp, #12]
 800ef80:	2301      	movs	r3, #1
 800ef82:	9302      	str	r3, [sp, #8]
 800ef84:	2300      	movs	r3, #0
 800ef86:	9301      	str	r3, [sp, #4]
 800ef88:	2306      	movs	r3, #6
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	2380      	movs	r3, #128	; 0x80
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7fe ffc7 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef94:	4603      	mov	r3, r0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3708      	adds	r7, #8
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b08a      	sub	sp, #40	; 0x28
 800efa2:	af08      	add	r7, sp, #32
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	4608      	mov	r0, r1
 800efa8:	4611      	mov	r1, r2
 800efaa:	461a      	mov	r2, r3
 800efac:	4603      	mov	r3, r0
 800efae:	70fb      	strb	r3, [r7, #3]
 800efb0:	460b      	mov	r3, r1
 800efb2:	70bb      	strb	r3, [r7, #2]
 800efb4:	4613      	mov	r3, r2
 800efb6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800efb8:	78ba      	ldrb	r2, [r7, #2]
 800efba:	78f9      	ldrb	r1, [r7, #3]
 800efbc:	2300      	movs	r3, #0
 800efbe:	9307      	str	r3, [sp, #28]
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	9306      	str	r3, [sp, #24]
 800efc4:	883b      	ldrh	r3, [r7, #0]
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	883b      	ldrh	r3, [r7, #0]
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	2300      	movs	r3, #0
 800efce:	9303      	str	r3, [sp, #12]
 800efd0:	2302      	movs	r3, #2
 800efd2:	9302      	str	r3, [sp, #8]
 800efd4:	7c3b      	ldrb	r3, [r7, #16]
 800efd6:	9301      	str	r3, [sp, #4]
 800efd8:	2306      	movs	r3, #6
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2380      	movs	r3, #128	; 0x80
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7fe ff9f 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800efe4:	4603      	mov	r3, r0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800efee:	b580      	push	{r7, lr}
 800eff0:	b09e      	sub	sp, #120	; 0x78
 800eff2:	af08      	add	r7, sp, #32
 800eff4:	6078      	str	r0, [r7, #4]
 800eff6:	4608      	mov	r0, r1
 800eff8:	4611      	mov	r1, r2
 800effa:	461a      	mov	r2, r3
 800effc:	4603      	mov	r3, r0
 800effe:	70fb      	strb	r3, [r7, #3]
 800f000:	460b      	mov	r3, r1
 800f002:	70bb      	strb	r3, [r7, #2]
 800f004:	4613      	mov	r3, r2
 800f006:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800f00e:	f107 030c 	add.w	r3, r7, #12
 800f012:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800f014:	78ba      	ldrb	r2, [r7, #2]
 800f016:	78f9      	ldrb	r1, [r7, #3]
 800f018:	f107 030c 	add.w	r3, r7, #12
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	787b      	ldrb	r3, [r7, #1]
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	2309      	movs	r3, #9
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff ffba 	bl	800ef9e <_ZN3USB12getConfDescrEhhthPh>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800f030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800f038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f03c:	e020      	b.n	800f080 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800f03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f040:	789a      	ldrb	r2, [r3, #2]
 800f042:	78db      	ldrb	r3, [r3, #3]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	4313      	orrs	r3, r2
 800f048:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800f04c:	78ba      	ldrb	r2, [r7, #2]
 800f04e:	78f9      	ldrb	r1, [r7, #3]
 800f050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f052:	9307      	str	r3, [sp, #28]
 800f054:	f107 030c 	add.w	r3, r7, #12
 800f058:	9306      	str	r3, [sp, #24]
 800f05a:	2340      	movs	r3, #64	; 0x40
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f062:	9304      	str	r3, [sp, #16]
 800f064:	2300      	movs	r3, #0
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	2302      	movs	r3, #2
 800f06a:	9302      	str	r3, [sp, #8]
 800f06c:	787b      	ldrb	r3, [r7, #1]
 800f06e:	9301      	str	r3, [sp, #4]
 800f070:	2306      	movs	r3, #6
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	2380      	movs	r3, #128	; 0x80
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f7fe ff53 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f07c:	4603      	mov	r3, r0
 800f07e:	bf00      	nop
}
 800f080:	4618      	mov	r0, r3
 800f082:	3758      	adds	r7, #88	; 0x58
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08c      	sub	sp, #48	; 0x30
 800f08c:	af08      	add	r7, sp, #32
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	461a      	mov	r2, r3
 800f096:	4603      	mov	r3, r0
 800f098:	70fb      	strb	r3, [r7, #3]
 800f09a:	460b      	mov	r3, r1
 800f09c:	70bb      	strb	r3, [r7, #2]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800f0a2:	78ba      	ldrb	r2, [r7, #2]
 800f0a4:	78f9      	ldrb	r1, [r7, #3]
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	9307      	str	r3, [sp, #28]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	9306      	str	r3, [sp, #24]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	9305      	str	r3, [sp, #20]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	9304      	str	r3, [sp, #16]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	9302      	str	r3, [sp, #8]
 800f0be:	787b      	ldrb	r3, [r7, #1]
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	2305      	movs	r3, #5
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7fe ff2a 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800f0d2:	4804      	ldr	r0, [pc, #16]	; (800f0e4 <_ZN3USB7setAddrEhhh+0x5c>)
 800f0d4:	f7f2 fdc4 	bl	8001c60 <HAL_Delay>
        return rcode;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	000493e0 	.word	0x000493e0

0800f0e8 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b08a      	sub	sp, #40	; 0x28
 800f0ec:	af08      	add	r7, sp, #32
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	70fb      	strb	r3, [r7, #3]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70bb      	strb	r3, [r7, #2]
 800f0fe:	4613      	mov	r3, r2
 800f100:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800f102:	78ba      	ldrb	r2, [r7, #2]
 800f104:	78f9      	ldrb	r1, [r7, #3]
 800f106:	2300      	movs	r3, #0
 800f108:	9307      	str	r3, [sp, #28]
 800f10a:	2300      	movs	r3, #0
 800f10c:	9306      	str	r3, [sp, #24]
 800f10e:	2300      	movs	r3, #0
 800f110:	9305      	str	r3, [sp, #20]
 800f112:	2300      	movs	r3, #0
 800f114:	9304      	str	r3, [sp, #16]
 800f116:	2300      	movs	r3, #0
 800f118:	9303      	str	r3, [sp, #12]
 800f11a:	2300      	movs	r3, #0
 800f11c:	9302      	str	r3, [sp, #8]
 800f11e:	787b      	ldrb	r3, [r7, #1]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	2309      	movs	r3, #9
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	2300      	movs	r3, #0
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7fe fefa 	bl	800df22 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f12e:	4603      	mov	r3, r0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
};
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
	...

0800f150 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	4a04      	ldr	r2, [pc, #16]	; (800f16c <_ZN11AddressPoolC1Ev+0x1c>)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	0800fbe4 	.word	0x0800fbe4

0800f170 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff ffe8 	bl	800f150 <_ZN11AddressPoolC1Ev>
 800f180:	4a17      	ldr	r2, [pc, #92]	; (800f1e0 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800f18c:	2100      	movs	r1, #0
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 f990 	bl	800f4b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	1d1a      	adds	r2, r3, #4
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2208      	movs	r2, #8
 800f1ac:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	7993      	ldrb	r3, [r2, #6]
 800f1b2:	f36f 0300 	bfc	r3, #0, #1
 800f1b6:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	7993      	ldrb	r3, [r2, #6]
 800f1bc:	f36f 0341 	bfc	r3, #1, #1
 800f1c0:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	7993      	ldrb	r3, [r2, #6]
 800f1c6:	210f      	movs	r1, #15
 800f1c8:	f361 0387 	bfi	r3, r1, #2, #6
 800f1cc:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f9a1 	bl	800f516 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	0800fbd0 	.word	0x0800fbd0

0800f1e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d102      	bne.n	800f1fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	e014      	b.n	800f226 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800f1fc:	78fb      	ldrb	r3, [r7, #3]
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 f9a1 	bl	800f548 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d008      	beq.n	800f222 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f103 0108 	add.w	r1, r3, #8
 800f216:	7bfa      	ldrb	r2, [r7, #15]
 800f218:	4613      	mov	r3, r2
 800f21a:	00db      	lsls	r3, r3, #3
 800f21c:	1a9b      	subs	r3, r3, r2
 800f21e:	440b      	add	r3, r1
 800f220:	e000      	b.n	800f224 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800f222:	2300      	movs	r3, #0
 800f224:	bf00      	nop
        };
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	607b      	str	r3, [r7, #4]
 800f23a:	460b      	mov	r3, r1
 800f23c:	72fb      	strb	r3, [r7, #11]
 800f23e:	4613      	mov	r3, r2
 800f240:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f242:	f7f1 fb27 	bl	8000894 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800f246:	7afb      	ldrb	r3, [r7, #11]
 800f248:	f043 0302 	orr.w	r3, r3, #2
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f250:	f107 0117 	add.w	r1, r7, #23
 800f254:	f04f 33ff 	mov.w	r3, #4294967295
 800f258:	2201      	movs	r2, #1
 800f25a:	480b      	ldr	r0, [pc, #44]	; (800f288 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f25c:	f7f5 faeb 	bl	8004836 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f260:	7abb      	ldrb	r3, [r7, #10]
 800f262:	b29a      	uxth	r2, r3
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4807      	ldr	r0, [pc, #28]	; (800f288 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f26c:	f7f5 fae3 	bl	8004836 <HAL_SPI_Transmit>
        data_p += nbytes;
 800f270:	7abb      	ldrb	r3, [r7, #10]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	4413      	add	r3, r2
 800f276:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f278:	f7f1 fb00 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f27c:	687b      	ldr	r3, [r7, #4]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	20000304 	.word	0x20000304

0800f28c <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	4603      	mov	r3, r0
 800f294:	6039      	str	r1, [r7, #0]
 800f296:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800f298:	bf00      	nop
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	607b      	str	r3, [r7, #4]
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	72fb      	strb	r3, [r7, #11]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f2b6:	f7f1 faed 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f2ba:	f107 010b 	add.w	r1, r7, #11
 800f2be:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	480d      	ldr	r0, [pc, #52]	; (800f2fc <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f2c6:	f7f5 fab6 	bl	8004836 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f2ca:	7abb      	ldrb	r3, [r7, #10]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fa91 	bl	800f7f8 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f2d6:	7abb      	ldrb	r3, [r7, #10]
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	f04f 33ff 	mov.w	r3, #4294967295
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	4806      	ldr	r0, [pc, #24]	; (800f2fc <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f2e2:	f7f5 fbe4 	bl	8004aae <HAL_SPI_Receive>
        data_p += nbytes;
 800f2e6:	7abb      	ldrb	r3, [r7, #10]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f2ee:	f7f1 fac5 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f2f2:	687b      	ldr	r3, [r7, #4]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	20000304 	.word	0x20000304

0800f300 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800f30c:	f7fe fd0e 	bl	800dd2c <_ZN2P95IsSetEv>
 800f310:	4603      	mov	r3, r0
 800f312:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800f314:	7bbb      	ldrb	r3, [r7, #14]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d104      	bne.n	800f324 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 f937 	bl	800f58e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800f324:	7bfb      	ldrb	r3, [r7, #15]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
	...

0800f330 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
                return vbusState;
 800f338:	4b03      	ldr	r3, [pc, #12]	; (800f348 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
        };
 800f33c:	4618      	mov	r0, r3
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	20000657 	.word	0x20000657

0800f34c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	4608      	mov	r0, r1
 800f356:	4611      	mov	r1, r2
 800f358:	461a      	mov	r2, r3
 800f35a:	4603      	mov	r3, r0
 800f35c:	70fb      	strb	r3, [r7, #3]
 800f35e:	460b      	mov	r3, r1
 800f360:	70bb      	strb	r3, [r7, #2]
 800f362:	4613      	mov	r3, r2
 800f364:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f366:	78fb      	ldrb	r3, [r7, #3]
 800f368:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f36a:	7b3b      	ldrb	r3, [r7, #12]
 800f36c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f376:	787b      	ldrb	r3, [r7, #1]
 800f378:	2b07      	cmp	r3, #7
 800f37a:	d901      	bls.n	800f380 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	e079      	b.n	800f474 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f380:	78bb      	ldrb	r3, [r7, #2]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d005      	beq.n	800f392 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	79db      	ldrb	r3, [r3, #7]
 800f38a:	2b07      	cmp	r3, #7
 800f38c:	d101      	bne.n	800f392 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f38e:	2300      	movs	r3, #0
 800f390:	e070      	b.n	800f474 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f392:	2100      	movs	r1, #0
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f8d7 	bl	800f548 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f39a:	4603      	mov	r3, r0
 800f39c:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d101      	bne.n	800f3a8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e065      	b.n	800f474 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f3a8:	7b3b      	ldrb	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d124      	bne.n	800f3f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f3ae:	78bb      	ldrb	r3, [r7, #2]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00f      	beq.n	800f3d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f3b4:	7bfa      	ldrb	r2, [r7, #15]
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	1a9b      	subs	r3, r3, r2
 800f3be:	440b      	add	r3, r1
 800f3c0:	330c      	adds	r3, #12
 800f3c2:	2241      	movs	r2, #65	; 0x41
 800f3c4:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	79db      	ldrb	r3, [r3, #7]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	71da      	strb	r2, [r3, #7]
 800f3d2:	e008      	b.n	800f3e6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f3d4:	7bfa      	ldrb	r2, [r7, #15]
 800f3d6:	6879      	ldr	r1, [r7, #4]
 800f3d8:	4613      	mov	r3, r2
 800f3da:	00db      	lsls	r3, r3, #3
 800f3dc:	1a9b      	subs	r3, r3, r2
 800f3de:	440b      	add	r3, r1
 800f3e0:	330c      	adds	r3, #12
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f3e6:	7bfa      	ldrb	r2, [r7, #15]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	1a9b      	subs	r3, r3, r2
 800f3f0:	440b      	add	r3, r1
 800f3f2:	330c      	adds	r3, #12
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	e03d      	b.n	800f474 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f3fc:	7b3b      	ldrb	r3, [r7, #12]
 800f3fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f402:	b2da      	uxtb	r2, r3
 800f404:	7a3b      	ldrb	r3, [r7, #8]
 800f406:	f362 03c5 	bfi	r3, r2, #3, #3
 800f40a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f40c:	78bb      	ldrb	r3, [r7, #2]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d013      	beq.n	800f43a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f412:	7a3b      	ldrb	r3, [r7, #8]
 800f414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f418:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	79db      	ldrb	r3, [r3, #7]
 800f41e:	3301      	adds	r3, #1
 800f420:	b2da      	uxtb	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	71da      	strb	r2, [r3, #7]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	79db      	ldrb	r3, [r3, #7]
 800f42a:	f003 0307 	and.w	r3, r3, #7
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	7a3b      	ldrb	r3, [r7, #8]
 800f432:	f362 0302 	bfi	r3, r2, #0, #3
 800f436:	723b      	strb	r3, [r7, #8]
 800f438:	e00b      	b.n	800f452 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f43a:	7a3b      	ldrb	r3, [r7, #8]
 800f43c:	f36f 1386 	bfc	r3, #6, #1
 800f440:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f442:	787b      	ldrb	r3, [r7, #1]
 800f444:	f003 0307 	and.w	r3, r3, #7
 800f448:	b2da      	uxtb	r2, r3
 800f44a:	7a3b      	ldrb	r3, [r7, #8]
 800f44c:	f362 0302 	bfi	r3, r2, #0, #3
 800f450:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f452:	7bfa      	ldrb	r2, [r7, #15]
 800f454:	6879      	ldr	r1, [r7, #4]
 800f456:	4613      	mov	r3, r2
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	1a9b      	subs	r3, r3, r2
 800f45c:	440b      	add	r3, r1
 800f45e:	330c      	adds	r3, #12
 800f460:	7a3a      	ldrb	r2, [r7, #8]
 800f462:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f464:	7bfa      	ldrb	r2, [r7, #15]
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	4613      	mov	r3, r2
 800f46a:	00db      	lsls	r3, r3, #3
 800f46c:	1a9b      	subs	r3, r3, r2
 800f46e:	440b      	add	r3, r1
 800f470:	330c      	adds	r3, #12
 800f472:	781b      	ldrb	r3, [r3, #0]
        };
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f488:	78fb      	ldrb	r3, [r7, #3]
 800f48a:	2b41      	cmp	r3, #65	; 0x41
 800f48c:	d103      	bne.n	800f496 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f841 	bl	800f516 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f494:	e00b      	b.n	800f4ae <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f496:	78fb      	ldrb	r3, [r7, #3]
 800f498:	4619      	mov	r1, r3
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 f854 	bl	800f548 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f893 	bl	800f5d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f4c0:	78fa      	ldrb	r2, [r7, #3]
 800f4c2:	6879      	ldr	r1, [r7, #4]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	1a9b      	subs	r3, r3, r2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f4d2:	78fa      	ldrb	r2, [r7, #3]
 800f4d4:	6879      	ldr	r1, [r7, #4]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	00db      	lsls	r3, r3, #3
 800f4da:	1a9b      	subs	r3, r3, r2
 800f4dc:	440b      	add	r3, r1
 800f4de:	330d      	adds	r3, #13
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f4e4:	78fa      	ldrb	r2, [r7, #3]
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	00db      	lsls	r3, r3, #3
 800f4ec:	1a9b      	subs	r3, r3, r2
 800f4ee:	440b      	add	r3, r1
 800f4f0:	330e      	adds	r3, #14
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f4f6:	78fa      	ldrb	r2, [r7, #3]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	1d19      	adds	r1, r3, #4
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	4613      	mov	r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	1a9b      	subs	r3, r3, r2
 800f504:	4403      	add	r3, r0
 800f506:	3308      	adds	r3, #8
 800f508:	6019      	str	r1, [r3, #0]
        };
 800f50a:	bf00      	nop
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f516:	b580      	push	{r7, lr}
 800f518:	b084      	sub	sp, #16
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f51e:	2301      	movs	r3, #1
 800f520:	73fb      	strb	r3, [r7, #15]
 800f522:	7bfb      	ldrb	r3, [r7, #15]
 800f524:	2b0f      	cmp	r3, #15
 800f526:	d808      	bhi.n	800f53a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f528:	7bfb      	ldrb	r3, [r7, #15]
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff ffc1 	bl	800f4b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	3301      	adds	r3, #1
 800f536:	73fb      	strb	r3, [r7, #15]
 800f538:	e7f3      	b.n	800f522 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	71da      	strb	r2, [r3, #7]
        };
 800f540:	bf00      	nop
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f554:	2301      	movs	r3, #1
 800f556:	73fb      	strb	r3, [r7, #15]
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	2b0f      	cmp	r3, #15
 800f55c:	d810      	bhi.n	800f580 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f55e:	7bfa      	ldrb	r2, [r7, #15]
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	4613      	mov	r3, r2
 800f564:	00db      	lsls	r3, r3, #3
 800f566:	1a9b      	subs	r3, r3, r2
 800f568:	440b      	add	r3, r1
 800f56a:	330c      	adds	r3, #12
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	78fa      	ldrb	r2, [r7, #3]
 800f570:	429a      	cmp	r2, r3
 800f572:	d101      	bne.n	800f578 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	e004      	b.n	800f582 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f578:	7bfb      	ldrb	r3, [r7, #15]
 800f57a:	3301      	adds	r3, #1
 800f57c:	73fb      	strb	r3, [r7, #15]
 800f57e:	e7eb      	b.n	800f558 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f580:	2300      	movs	r3, #0
        };
 800f582:	4618      	mov	r0, r3
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f58e:	b580      	push	{r7, lr}
 800f590:	b084      	sub	sp, #16
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f596:	2300      	movs	r3, #0
 800f598:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f59a:	21c8      	movs	r1, #200	; 0xc8
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7f2 f8a5 	bl	80016ec <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f5a6:	7bbb      	ldrb	r3, [r7, #14]
 800f5a8:	f003 0320 	and.w	r3, r3, #32
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d006      	beq.n	800f5be <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7f2 f8bd 	bl	8001730 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f5b6:	7bfb      	ldrb	r3, [r7, #15]
 800f5b8:	f043 0320 	orr.w	r3, r3, #32
 800f5bc:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	21c8      	movs	r1, #200	; 0xc8
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7f2 f83f 	bl	8001648 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f5e0:	78fb      	ldrb	r3, [r7, #3]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d03a      	beq.n	800f65c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f5e6:	78fa      	ldrb	r2, [r7, #3]
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	00db      	lsls	r3, r3, #3
 800f5ee:	1a9b      	subs	r3, r3, r2
 800f5f0:	440b      	add	r3, r1
 800f5f2:	330c      	adds	r3, #12
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f5f8:	7b3b      	ldrb	r3, [r7, #12]
 800f5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d025      	beq.n	800f650 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f604:	2301      	movs	r3, #1
 800f606:	73fb      	strb	r3, [r7, #15]
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	461a      	mov	r2, r3
 800f60c:	7b39      	ldrb	r1, [r7, #12]
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 f828 	bl	800f664 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f614:	4603      	mov	r3, r0
 800f616:	73fb      	strb	r3, [r7, #15]
 800f618:	7bfb      	ldrb	r3, [r7, #15]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	bf14      	ite	ne
 800f61e:	2301      	movne	r3, #1
 800f620:	2300      	moveq	r3, #0
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f628:	7bfb      	ldrb	r3, [r7, #15]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7ff ffd1 	bl	800f5d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f632:	e7e9      	b.n	800f608 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	79db      	ldrb	r3, [r3, #7]
 800f638:	7b3a      	ldrb	r2, [r7, #12]
 800f63a:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f63e:	b2d2      	uxtb	r2, r2
 800f640:	4293      	cmp	r3, r2
 800f642:	d105      	bne.n	800f650 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	79db      	ldrb	r3, [r3, #7]
 800f648:	3b01      	subs	r3, #1
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f650:	78fb      	ldrb	r3, [r7, #3]
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ff2d 	bl	800f4b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f65a:	e000      	b.n	800f65e <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f65c:	bf00      	nop
        }
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	7039      	strb	r1, [r7, #0]
 800f66e:	4613      	mov	r3, r2
 800f670:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d004      	beq.n	800f682 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	2b0f      	cmp	r3, #15
 800f67c:	d801      	bhi.n	800f682 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f67e:	78fb      	ldrb	r3, [r7, #3]
 800f680:	e000      	b.n	800f684 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f682:	2301      	movs	r3, #1
 800f684:	73fb      	strb	r3, [r7, #15]
 800f686:	7bfb      	ldrb	r3, [r7, #15]
 800f688:	2b0f      	cmp	r3, #15
 800f68a:	d816      	bhi.n	800f6ba <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f68c:	7bfa      	ldrb	r2, [r7, #15]
 800f68e:	6879      	ldr	r1, [r7, #4]
 800f690:	4613      	mov	r3, r2
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	1a9b      	subs	r3, r3, r2
 800f696:	440b      	add	r3, r1
 800f698:	3308      	adds	r3, #8
 800f69a:	791b      	ldrb	r3, [r3, #4]
 800f69c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f6a0:	b2da      	uxtb	r2, r3
 800f6a2:	783b      	ldrb	r3, [r7, #0]
 800f6a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d101      	bne.n	800f6b2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	e004      	b.n	800f6bc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	73fb      	strb	r3, [r7, #15]
 800f6b8:	e7e5      	b.n	800f686 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f6ba:	2300      	movs	r3, #0
        };
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d101      	bne.n	800f6e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	e031      	b.n	800f744 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	791b      	ldrb	r3, [r3, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d022      	beq.n	800f72e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d01e      	beq.n	800f72e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68f9      	ldr	r1, [r7, #12]
 800f6fa:	7949      	ldrb	r1, [r1, #5]
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	68f9      	ldr	r1, [r7, #12]
 800f700:	7909      	ldrb	r1, [r1, #4]
 800f702:	1a41      	subs	r1, r0, r1
 800f704:	440b      	add	r3, r1
 800f706:	7812      	ldrb	r2, [r2, #0]
 800f708:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	791b      	ldrb	r3, [r3, #4]
 800f70e:	3b01      	subs	r3, #1
 800f710:	b2da      	uxtb	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	711a      	strb	r2, [r3, #4]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	801a      	strh	r2, [r3, #0]
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	601a      	str	r2, [r3, #0]
 800f72c:	e7d8      	b.n	800f6e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	791b      	ldrb	r3, [r3, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f736:	2300      	movs	r3, #0
 800f738:	e004      	b.n	800f744 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	795a      	ldrb	r2, [r3, #5]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	711a      	strb	r2, [r3, #4]
        return true;
 800f742:	2301      	movs	r3, #1
}
 800f744:	4618      	mov	r0, r3
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <__cxa_pure_virtual>:
 800f750:	b508      	push	{r3, lr}
 800f752:	f000 f80d 	bl	800f770 <_ZSt9terminatev>

0800f756 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f756:	b508      	push	{r3, lr}
 800f758:	4780      	blx	r0
 800f75a:	f000 f80e 	bl	800f77a <abort>
	...

0800f760 <_ZSt13get_terminatev>:
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <_ZSt13get_terminatev+0xc>)
 800f762:	6818      	ldr	r0, [r3, #0]
 800f764:	f3bf 8f5b 	dmb	ish
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	20000174 	.word	0x20000174

0800f770 <_ZSt9terminatev>:
 800f770:	b508      	push	{r3, lr}
 800f772:	f7ff fff5 	bl	800f760 <_ZSt13get_terminatev>
 800f776:	f7ff ffee 	bl	800f756 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f77a <abort>:
 800f77a:	b508      	push	{r3, lr}
 800f77c:	2006      	movs	r0, #6
 800f77e:	f000 f86b 	bl	800f858 <raise>
 800f782:	2001      	movs	r0, #1
 800f784:	f7f2 f9b0 	bl	8001ae8 <_exit>

0800f788 <__errno>:
 800f788:	4b01      	ldr	r3, [pc, #4]	; (800f790 <__errno+0x8>)
 800f78a:	6818      	ldr	r0, [r3, #0]
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	20000178 	.word	0x20000178

0800f794 <__libc_init_array>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4d0d      	ldr	r5, [pc, #52]	; (800f7cc <__libc_init_array+0x38>)
 800f798:	4c0d      	ldr	r4, [pc, #52]	; (800f7d0 <__libc_init_array+0x3c>)
 800f79a:	1b64      	subs	r4, r4, r5
 800f79c:	10a4      	asrs	r4, r4, #2
 800f79e:	2600      	movs	r6, #0
 800f7a0:	42a6      	cmp	r6, r4
 800f7a2:	d109      	bne.n	800f7b8 <__libc_init_array+0x24>
 800f7a4:	4d0b      	ldr	r5, [pc, #44]	; (800f7d4 <__libc_init_array+0x40>)
 800f7a6:	4c0c      	ldr	r4, [pc, #48]	; (800f7d8 <__libc_init_array+0x44>)
 800f7a8:	f000 f884 	bl	800f8b4 <_init>
 800f7ac:	1b64      	subs	r4, r4, r5
 800f7ae:	10a4      	asrs	r4, r4, #2
 800f7b0:	2600      	movs	r6, #0
 800f7b2:	42a6      	cmp	r6, r4
 800f7b4:	d105      	bne.n	800f7c2 <__libc_init_array+0x2e>
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7bc:	4798      	blx	r3
 800f7be:	3601      	adds	r6, #1
 800f7c0:	e7ee      	b.n	800f7a0 <__libc_init_array+0xc>
 800f7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c6:	4798      	blx	r3
 800f7c8:	3601      	adds	r6, #1
 800f7ca:	e7f2      	b.n	800f7b2 <__libc_init_array+0x1e>
 800f7cc:	0800fc58 	.word	0x0800fc58
 800f7d0:	0800fc58 	.word	0x0800fc58
 800f7d4:	0800fc58 	.word	0x0800fc58
 800f7d8:	0800fc60 	.word	0x0800fc60

0800f7dc <memcpy>:
 800f7dc:	440a      	add	r2, r1
 800f7de:	4291      	cmp	r1, r2
 800f7e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7e4:	d100      	bne.n	800f7e8 <memcpy+0xc>
 800f7e6:	4770      	bx	lr
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7f2:	4291      	cmp	r1, r2
 800f7f4:	d1f9      	bne.n	800f7ea <memcpy+0xe>
 800f7f6:	bd10      	pop	{r4, pc}

0800f7f8 <memset>:
 800f7f8:	4402      	add	r2, r0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d100      	bne.n	800f802 <memset+0xa>
 800f800:	4770      	bx	lr
 800f802:	f803 1b01 	strb.w	r1, [r3], #1
 800f806:	e7f9      	b.n	800f7fc <memset+0x4>

0800f808 <_raise_r>:
 800f808:	291f      	cmp	r1, #31
 800f80a:	b538      	push	{r3, r4, r5, lr}
 800f80c:	4604      	mov	r4, r0
 800f80e:	460d      	mov	r5, r1
 800f810:	d904      	bls.n	800f81c <_raise_r+0x14>
 800f812:	2316      	movs	r3, #22
 800f814:	6003      	str	r3, [r0, #0]
 800f816:	f04f 30ff 	mov.w	r0, #4294967295
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f81e:	b112      	cbz	r2, 800f826 <_raise_r+0x1e>
 800f820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f824:	b94b      	cbnz	r3, 800f83a <_raise_r+0x32>
 800f826:	4620      	mov	r0, r4
 800f828:	f000 f830 	bl	800f88c <_getpid_r>
 800f82c:	462a      	mov	r2, r5
 800f82e:	4601      	mov	r1, r0
 800f830:	4620      	mov	r0, r4
 800f832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f836:	f000 b817 	b.w	800f868 <_kill_r>
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d00a      	beq.n	800f854 <_raise_r+0x4c>
 800f83e:	1c59      	adds	r1, r3, #1
 800f840:	d103      	bne.n	800f84a <_raise_r+0x42>
 800f842:	2316      	movs	r3, #22
 800f844:	6003      	str	r3, [r0, #0]
 800f846:	2001      	movs	r0, #1
 800f848:	e7e7      	b.n	800f81a <_raise_r+0x12>
 800f84a:	2400      	movs	r4, #0
 800f84c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f850:	4628      	mov	r0, r5
 800f852:	4798      	blx	r3
 800f854:	2000      	movs	r0, #0
 800f856:	e7e0      	b.n	800f81a <_raise_r+0x12>

0800f858 <raise>:
 800f858:	4b02      	ldr	r3, [pc, #8]	; (800f864 <raise+0xc>)
 800f85a:	4601      	mov	r1, r0
 800f85c:	6818      	ldr	r0, [r3, #0]
 800f85e:	f7ff bfd3 	b.w	800f808 <_raise_r>
 800f862:	bf00      	nop
 800f864:	20000178 	.word	0x20000178

0800f868 <_kill_r>:
 800f868:	b538      	push	{r3, r4, r5, lr}
 800f86a:	4d07      	ldr	r5, [pc, #28]	; (800f888 <_kill_r+0x20>)
 800f86c:	2300      	movs	r3, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	4608      	mov	r0, r1
 800f872:	4611      	mov	r1, r2
 800f874:	602b      	str	r3, [r5, #0]
 800f876:	f7f2 f927 	bl	8001ac8 <_kill>
 800f87a:	1c43      	adds	r3, r0, #1
 800f87c:	d102      	bne.n	800f884 <_kill_r+0x1c>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	b103      	cbz	r3, 800f884 <_kill_r+0x1c>
 800f882:	6023      	str	r3, [r4, #0]
 800f884:	bd38      	pop	{r3, r4, r5, pc}
 800f886:	bf00      	nop
 800f888:	20000f54 	.word	0x20000f54

0800f88c <_getpid_r>:
 800f88c:	f7f2 b914 	b.w	8001ab8 <_getpid>

0800f890 <strncmp>:
 800f890:	b510      	push	{r4, lr}
 800f892:	b16a      	cbz	r2, 800f8b0 <strncmp+0x20>
 800f894:	3901      	subs	r1, #1
 800f896:	1884      	adds	r4, r0, r2
 800f898:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d103      	bne.n	800f8ac <strncmp+0x1c>
 800f8a4:	42a0      	cmp	r0, r4
 800f8a6:	d001      	beq.n	800f8ac <strncmp+0x1c>
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1f5      	bne.n	800f898 <strncmp+0x8>
 800f8ac:	1a98      	subs	r0, r3, r2
 800f8ae:	bd10      	pop	{r4, pc}
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	e7fc      	b.n	800f8ae <strncmp+0x1e>

0800f8b4 <_init>:
 800f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b6:	bf00      	nop
 800f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ba:	bc08      	pop	{r3}
 800f8bc:	469e      	mov	lr, r3
 800f8be:	4770      	bx	lr

0800f8c0 <_fini>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr
