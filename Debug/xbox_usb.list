
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f668  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800f82c  0800f82c  0001f82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbb0  0800fbb0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbb0  0800fbb0  0001fbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbb8  0800fbb8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fbb8  0800fbb8  0001fbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbc0  0800fbc0  0001fbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  200001dc  0800fda0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f58  0800fda0  00020f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005004a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e8f  00000000  00000000  00070256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000770e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00078de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc0e  00000000  00000000  0007a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a36  00000000  00000000  000a6596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafcd  00000000  00000000  000c9fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f8c  00000000  00000000  001b4fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f814 	.word	0x0800f814

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800f814 	.word	0x0800f814

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78fa      	ldrb	r2, [r7, #3]
 80005dc:	4611      	mov	r1, r2
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f805 	bl	800060c <_ZN5Print5printEli>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <_ZN5Print5printEli+0x26>
    return write(n);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e029      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d11d      	bne.n	8000674 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da12      	bge.n	8000664 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800063e:	212d      	movs	r1, #45	; 0x2d
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffc1 	bl	80005c8 <_ZN5Print5printEc>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
      n = -n;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	425b      	negs	r3, r3
 800064e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	220a      	movs	r2, #10
 8000654:	4619      	mov	r1, r3
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f819 	bl	800068e <_ZN5Print11printNumberEmh>
 800065c:	4602      	mov	r2, r0
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	e010      	b.n	8000686 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	220a      	movs	r2, #10
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f80f 	bl	800068e <_ZN5Print11printNumberEmh>
 8000670:	4603      	mov	r3, r0
 8000672:	e008      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f806 	bl	800068e <_ZN5Print11printNumberEmh>
 8000682:	4603      	mov	r3, r0
 8000684:	bf00      	nop
  }
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b090      	sub	sp, #64	; 0x40
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	4613      	mov	r3, r2
 800069a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	3320      	adds	r3, #32
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d801      	bhi.n	80006b4 <_ZN5Print11printNumberEmh+0x26>
 80006b0:	230a      	movs	r3, #10
 80006b2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79f9      	ldrb	r1, [r7, #7]
 80006cc:	fb11 f303 	smulbb	r3, r1, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d804      	bhi.n	80006ea <_ZN5Print11printNumberEmh+0x5c>
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	e003      	b.n	80006f2 <_ZN5Print11printNumberEmh+0x64>
 80006ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ee:	3337      	adds	r3, #55	; 0x37
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f4:	3a01      	subs	r2, #1
 80006f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fa:	7013      	strb	r3, [r2, #0]
  } while(n);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d000      	beq.n	8000704 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000702:	e7d7      	b.n	80006b4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff00 	bl	800050c <_ZN5Print5writeEPKc>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2201      	movs	r2, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	4798      	blx	r3
 8000732:	4603      	mov	r3, r0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	f005 f886 	bl	800586a <HAL_UART_Transmit>
	return size;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6918      	ldr	r0, [r3, #16]
 8000774:	f107 010f 	add.w	r1, r7, #15
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2201      	movs	r2, #1
 800077e:	f005 f906 	bl	800598e <HAL_UART_Receive>
	return data;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return -1;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <_ZN5PrintC1Ev+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	0800f988 	.word	0x0800f988

080007f8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffe4 	bl	80007d0 <_ZN5PrintC1Ev>
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_ZN6StreamC1Ev+0x28>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800fa00 	.word	0x0800fa00

08000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffe1 	bl	80007f8 <_ZN6StreamC1Ev>
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	611a      	str	r2, [r3, #16]
	};
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800f998 	.word	0x0800f998

08000850 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	4903      	ldr	r1, [pc, #12]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <_ZN2P910SetDirReadEv+0x28>)
 800086a:	f001 fb55 	bl	8001f18 <HAL_GPIO_Init>
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001f8 	.word	0x200001f8
 8000878:	40020800 	.word	0x40020800

0800087c <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <_ZN3P103SetEv+0x14>)
 8000886:	f001 fcf3 	bl	8002270 <HAL_GPIO_WritePin>
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400

08000894 <_ZN3P105ClearEv>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <_ZN3P105ClearEv+0x14>)
 800089e:	f001 fce7 	bl	8002270 <HAL_GPIO_WritePin>
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020400 	.word	0x40020400

080008ac <_ZN3P1011SetDirWriteEv>:
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b2:	2240      	movs	r2, #64	; 0x40
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	4902      	ldr	r1, [pc, #8]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008cc:	f001 fb24 	bl	8001f18 <HAL_GPIO_Init>
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	40020400 	.word	0x40020400

080008dc <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2206      	movs	r2, #6
 80008f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffde 	bl	80008dc <_ZN3BTD11pairWithHIDEv>
        };
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3
                OnInitBTHID();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	331c      	adds	r3, #28
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	4798      	blx	r3
        };
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	460b      	mov	r3, r1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	72fb      	strb	r3, [r7, #11]
                return;
 8000960:	bf00      	nop
        }
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <_ZN9PS4ParserC1Ev+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
                Reset();
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f00d f92c 	bl	800dbd8 <_ZN9PS4Parser5ResetEv>
        };
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800f9f4 	.word	0x0800f9f4

08000990 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
 800099c:	4613      	mov	r3, r2
 800099e:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 80009a0:	78ba      	ldrb	r2, [r7, #2]
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	0098      	lsls	r0, r3, #2
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	3320      	adds	r3, #32
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
        };
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f81c 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d105      	bne.n	8000a06 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f80a 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a04:	e004      	b.n	8000a10 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f804 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
 8000a24:	4613      	mov	r3, r2
 8000a26:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	78ba      	ldrb	r2, [r7, #2]
 8000a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	78ba      	ldrb	r2, [r7, #2]
 8000a72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	787a      	ldrb	r2, [r7, #1]
 8000a7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	141b      	asrs	r3, r3, #16
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffcd 	bl	8000a4c <_ZN9PS4Parser6setLedEhhh>
        };
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	f00b fe9a 	bl	800c80c <_ZN5BTHIDC1EP3BTDbPKc>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3378      	adds	r3, #120	; 0x78
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff45 	bl	800096c <_ZN9PS4ParserC1Ev>
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3378      	adds	r3, #120	; 0x78
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00d f870 	bl	800dbd8 <_ZN9PS4Parser5ResetEv>
        };
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800f9b8 	.word	0x0800f9b8
 8000b08:	0800f9e8 	.word	0x0800f9e8

08000b0c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3378      	adds	r3, #120	; 0x78
 8000b36:	7af9      	ldrb	r1, [r7, #11]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c ff87 	bl	800da4e <_ZN9PS4Parser5ParseEhPh>
        };
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00d f83f 	bl	800dbd8 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f855 	bl	8000c0a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3378      	adds	r3, #120	; 0x78
 8000b6c:	21ff      	movs	r1, #255	; 0xff
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8f 	bl	8000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3378      	adds	r3, #120	; 0x78
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00d f825 	bl	800dbd8 <_ZN9PS4Parser5ResetEv>
        };
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b096      	sub	sp, #88	; 0x58
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	224f      	movs	r2, #79	; 0x4f
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00e fdd5 	bl	800f758 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bae:	2352      	movs	r3, #82	; 0x52
 8000bb0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000bb2:	2311      	movs	r3, #17
 8000bb4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	799b      	ldrb	r3, [r3, #6]
 8000be6:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	224f      	movs	r2, #79	; 0x4f
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f81a 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c04:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c08:	e7c5      	b.n	8000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c0a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c12:	2343      	movs	r3, #67	; 0x43
 8000c14:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c16:	2302      	movs	r3, #2
 8000c18:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f804 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6898      	ldr	r0, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	8999      	ldrh	r1, [r3, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	7d9b      	ldrb	r3, [r3, #22]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	7dd2      	ldrb	r2, [r2, #23]
 8000c4e:	79fc      	ldrb	r4, [r7, #7]
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f00a fe74 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 ff91 	bl	8001b90 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 fac7 	bl	8001200 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 fc07 	bl	8001484 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c76:	f000 fbd7 	bl	8001428 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c7a:	f000 fb99 	bl	80013b0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c7e:	f007 ffa7 	bl	8008bd0 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c82:	f000 fb6b 	bl	800135c <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c86:	4ab9      	ldr	r2, [pc, #740]	; (8000f6c <main+0x308>)
 8000c88:	4bb9      	ldr	r3, [pc, #740]	; (8000f70 <main+0x30c>)
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2358      	movs	r3, #88	; 0x58
 8000c90:	461a      	mov	r2, r3
 8000c92:	f00e fd53 	bl	800f73c <memcpy>
  UART_Handle = huart2;
 8000c96:	4ab7      	ldr	r2, [pc, #732]	; (8000f74 <main+0x310>)
 8000c98:	4bb7      	ldr	r3, [pc, #732]	; (8000f78 <main+0x314>)
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2344      	movs	r3, #68	; 0x44
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f00e fd4b 	bl	800f73c <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71bb      	strb	r3, [r7, #6]
  gameHID.JoyY = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
  gameHID.Joy2X = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	723b      	strb	r3, [r7, #8]
  gameHID.Joy2Y = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	727b      	strb	r3, [r7, #9]
  gameHID.Joy_LT = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	713b      	strb	r3, [r7, #4]
  gameHID.Joy_RT = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	717b      	strb	r3, [r7, #5]

  uint8_t LeftHatX_val;
  uint8_t LeftHatY_val;
  uint8_t RightHatX_val;
  uint8_t RightHatY_val;
  uint32_t cpu_freq = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]

  uint16_t timer_val = 0 ;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	82fb      	strh	r3, [r7, #22]
  uint16_t timer_val2 = 0 ;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	82bb      	strh	r3, [r7, #20]
  uint32_t hal_gettick = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start_IT(&htim14);
 8000cce:	48ab      	ldr	r0, [pc, #684]	; (8000f7c <main+0x318>)
 8000cd0:	f004 fb2a 	bl	8005328 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cd4:	49aa      	ldr	r1, [pc, #680]	; (8000f80 <main+0x31c>)
 8000cd6:	48ab      	ldr	r0, [pc, #684]	; (8000f84 <main+0x320>)
 8000cd8:	f7ff fc5a 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000cdc:	f002 fd7e 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4aa9      	ldr	r2, [pc, #676]	; (8000f88 <main+0x324>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	61bb      	str	r3, [r7, #24]
  Serial.print((int)cpu_freq);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	220a      	movs	r2, #10
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	48a4      	ldr	r0, [pc, #656]	; (8000f84 <main+0x320>)
 8000cf4:	f7ff fc7a 	bl	80005ec <_ZN5Print5printEii>
  Serial.print("MHz");
 8000cf8:	49a4      	ldr	r1, [pc, #656]	; (8000f8c <main+0x328>)
 8000cfa:	48a2      	ldr	r0, [pc, #648]	; (8000f84 <main+0x320>)
 8000cfc:	f7ff fc56 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d00:	49a3      	ldr	r1, [pc, #652]	; (8000f90 <main+0x32c>)
 8000d02:	48a0      	ldr	r0, [pc, #640]	; (8000f84 <main+0x320>)
 8000d04:	f7ff fc52 	bl	80005ac <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d08:	4b9c      	ldr	r3, [pc, #624]	; (8000f7c <main+0x318>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	82fb      	strh	r3, [r7, #22]
  HAL_Delay(500); //500ms
 8000d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d14:	f000 ffae 	bl	8001c74 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d18:	4b98      	ldr	r3, [pc, #608]	; (8000f7c <main+0x318>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	8afb      	ldrh	r3, [r7, #22]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	82bb      	strh	r3, [r7, #20]
  Serial.print("\r\nTime Elapsed is: ");
 8000d26:	499b      	ldr	r1, [pc, #620]	; (8000f94 <main+0x330>)
 8000d28:	4896      	ldr	r0, [pc, #600]	; (8000f84 <main+0x320>)
 8000d2a:	f7ff fc3f 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000d2e:	8abb      	ldrh	r3, [r7, #20]
 8000d30:	4a99      	ldr	r2, [pc, #612]	; (8000f98 <main+0x334>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4891      	ldr	r0, [pc, #580]	; (8000f84 <main+0x320>)
 8000d40:	f7ff fc54 	bl	80005ec <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d44:	4995      	ldr	r1, [pc, #596]	; (8000f9c <main+0x338>)
 8000d46:	488f      	ldr	r0, [pc, #572]	; (8000f84 <main+0x320>)
 8000d48:	f7ff fc30 	bl	80005ac <_ZN5Print5printEPKc>
  hal_gettick = HAL_GetTick();
 8000d4c:	f000 ff86 	bl	8001c5c <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]
  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	488a      	ldr	r0, [pc, #552]	; (8000f84 <main+0x320>)
 8000d5a:	f7ff fc47 	bl	80005ec <_ZN5Print5printEii>


  if (Usb.Init() == -1) {
 8000d5e:	4890      	ldr	r0, [pc, #576]	; (8000fa0 <main+0x33c>)
 8000d60:	f000 fc25 	bl	80015ae <_ZN8MAX3421eI3P102P9E4InitEv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <main+0x11c>
  		Serial.print(F("\r\nOSC did not start"));
 8000d76:	498b      	ldr	r1, [pc, #556]	; (8000fa4 <main+0x340>)
 8000d78:	4882      	ldr	r0, [pc, #520]	; (8000f84 <main+0x320>)
 8000d7a:	f7ff fc09 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000d7e:	e7fe      	b.n	8000d7e <main+0x11a>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000d80:	4989      	ldr	r1, [pc, #548]	; (8000fa8 <main+0x344>)
 8000d82:	4880      	ldr	r0, [pc, #512]	; (8000f84 <main+0x320>)
 8000d84:	f7ff fc04 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000d88:	4885      	ldr	r0, [pc, #532]	; (8000fa0 <main+0x33c>)
 8000d8a:	f00d fc63 	bl	800e654 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2208      	movs	r2, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	4885      	ldr	r0, [pc, #532]	; (8000fac <main+0x348>)
 8000d96:	f006 fd2b 	bl	80077f0 <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000d9a:	4885      	ldr	r0, [pc, #532]	; (8000fb0 <main+0x34c>)
 8000d9c:	f7ff feb6 	bl	8000b0c <_ZN5PS4BT9connectedEv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 81f6 	beq.w	8001194 <main+0x530>
			ps4_connected = 1;
 8000da8:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <main+0x350>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000dae:	4b73      	ldr	r3, [pc, #460]	; (8000f7c <main+0x318>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f06f 0201 	mvn.w	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]


			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000db8:	2100      	movs	r1, #0
 8000dba:	487f      	ldr	r0, [pc, #508]	; (8000fb8 <main+0x354>)
 8000dbc:	f00c fe37 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	487c      	ldr	r0, [pc, #496]	; (8000fb8 <main+0x354>)
 8000dc8:	f00c fe31 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73bb      	strb	r3, [r7, #14]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4879      	ldr	r0, [pc, #484]	; (8000fb8 <main+0x354>)
 8000dd4:	f00c fe2b 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	737b      	strb	r3, [r7, #13]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000ddc:	2103      	movs	r1, #3
 8000dde:	4876      	ldr	r0, [pc, #472]	; (8000fb8 <main+0x354>)
 8000de0:	f00c fe25 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000de4:	4603      	mov	r3, r0
 8000de6:	733b      	strb	r3, [r7, #12]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b89      	cmp	r3, #137	; 0x89
 8000dec:	d814      	bhi.n	8000e18 <main+0x1b4>
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	2b74      	cmp	r3, #116	; 0x74
 8000df2:	d911      	bls.n	8000e18 <main+0x1b4>
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2b89      	cmp	r3, #137	; 0x89
 8000df8:	d80e      	bhi.n	8000e18 <main+0x1b4>
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b74      	cmp	r3, #116	; 0x74
 8000dfe:	d90b      	bls.n	8000e18 <main+0x1b4>
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	2b89      	cmp	r3, #137	; 0x89
 8000e04:	d808      	bhi.n	8000e18 <main+0x1b4>
 8000e06:	7b7b      	ldrb	r3, [r7, #13]
 8000e08:	2b74      	cmp	r3, #116	; 0x74
 8000e0a:	d905      	bls.n	8000e18 <main+0x1b4>
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	2b89      	cmp	r3, #137	; 0x89
 8000e10:	d802      	bhi.n	8000e18 <main+0x1b4>
 8000e12:	7b3b      	ldrb	r3, [r7, #12]
 8000e14:	2b74      	cmp	r3, #116	; 0x74
 8000e16:	d824      	bhi.n	8000e62 <main+0x1fe>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4867      	ldr	r0, [pc, #412]	; (8000fb8 <main+0x354>)
 8000e1c:	f00c fe07 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e20:	4603      	mov	r3, r0
 8000e22:	3b80      	subs	r3, #128	; 0x80
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4862      	ldr	r0, [pc, #392]	; (8000fb8 <main+0x354>)
 8000e2e:	f00c fdfe 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e32:	4603      	mov	r3, r0
 8000e34:	3b80      	subs	r3, #128	; 0x80
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	485e      	ldr	r0, [pc, #376]	; (8000fb8 <main+0x354>)
 8000e40:	f00c fdf5 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e44:	4603      	mov	r3, r0
 8000e46:	3b80      	subs	r3, #128	; 0x80
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000e4e:	2103      	movs	r1, #3
 8000e50:	4859      	ldr	r0, [pc, #356]	; (8000fb8 <main+0x354>)
 8000e52:	f00c fdec 	bl	800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e56:	4603      	mov	r3, r0
 8000e58:	3b80      	subs	r3, #128	; 0x80
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	727b      	strb	r3, [r7, #9]
 8000e60:	e007      	b.n	8000e72 <main+0x20e>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	727b      	strb	r3, [r7, #9]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000e72:	2108      	movs	r1, #8
 8000e74:	4850      	ldr	r0, [pc, #320]	; (8000fb8 <main+0x354>)
 8000e76:	f00c fdc1 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	3b80      	subs	r3, #128	; 0x80
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	713b      	strb	r3, [r7, #4]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000e84:	2109      	movs	r1, #9
 8000e86:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <main+0x354>)
 8000e88:	f00c fdb8 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	3b80      	subs	r3, #128	; 0x80
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	717b      	strb	r3, [r7, #5]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000e96:	2108      	movs	r1, #8
 8000e98:	4847      	ldr	r0, [pc, #284]	; (8000fb8 <main+0x354>)
 8000e9a:	f00c fdaf 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <main+0x358>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d108      	bne.n	8000ebc <main+0x258>
 8000eaa:	2109      	movs	r1, #9
 8000eac:	4842      	ldr	r0, [pc, #264]	; (8000fb8 <main+0x354>)
 8000eae:	f00c fda5 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <main+0x35c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	483e      	ldr	r0, [pc, #248]	; (8000fb8 <main+0x354>)
 8000ec0:	f00c fd9c 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <main+0x358>)
 8000eca:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000ecc:	2109      	movs	r1, #9
 8000ece:	483a      	ldr	r0, [pc, #232]	; (8000fb8 <main+0x354>)
 8000ed0:	f00c fd94 	bl	800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x35c>)
 8000eda:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000edc:	2110      	movs	r1, #16
 8000ede:	4836      	ldr	r0, [pc, #216]	; (8000fb8 <main+0x354>)
 8000ee0:	f00c fd4c 	bl	800d97c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <main+0x290>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000eea:	7abb      	ldrb	r3, [r7, #10]
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	72bb      	strb	r3, [r7, #10]
 8000ef2:	e148      	b.n	8001186 <main+0x522>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <main+0x354>)
 8000ef8:	f00c fd18 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0x2a8>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	72fb      	strb	r3, [r7, #11]
 8000f0a:	e003      	b.n	8000f14 <main+0x2b0>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	f36f 0300 	bfc	r3, #0, #1
 8000f12:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000f14:	210d      	movs	r1, #13
 8000f16:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <main+0x354>)
 8000f18:	f00c fd08 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <main+0x2c8>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	72bb      	strb	r3, [r7, #10]
 8000f2a:	e003      	b.n	8000f34 <main+0x2d0>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
 8000f2e:	f36f 13c7 	bfc	r3, #7, #1
 8000f32:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000f34:	210e      	movs	r1, #14
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <main+0x354>)
 8000f38:	f00c fcf8 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <main+0x2e8>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f48:	72bb      	strb	r3, [r7, #10]
 8000f4a:	e003      	b.n	8000f54 <main+0x2f0>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000f4c:	7abb      	ldrb	r3, [r7, #10]
 8000f4e:	f36f 1386 	bfc	r3, #6, #1
 8000f52:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000f54:	210f      	movs	r1, #15
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <main+0x354>)
 8000f58:	f00c fce8 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d030      	beq.n	8000fc4 <main+0x360>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	72fb      	strb	r3, [r7, #11]
 8000f6a:	e02f      	b.n	8000fcc <main+0x368>
 8000f6c:	20000304 	.word	0x20000304
 8000f70:	20000220 	.word	0x20000220
 8000f74:	2000035c 	.word	0x2000035c
 8000f78:	20000278 	.word	0x20000278
 8000f7c:	200002bc 	.word	0x200002bc
 8000f80:	0800f82c 	.word	0x0800f82c
 8000f84:	200003a0 	.word	0x200003a0
 8000f88:	431bde83 	.word	0x431bde83
 8000f8c:	0800f844 	.word	0x0800f844
 8000f90:	0800f848 	.word	0x0800f848
 8000f94:	0800f850 	.word	0x0800f850
 8000f98:	cccccccd 	.word	0xcccccccd
 8000f9c:	0800f864 	.word	0x0800f864
 8000fa0:	200003b4 	.word	0x200003b4
 8000fa4:	0800f868 	.word	0x0800f868
 8000fa8:	0800f87c 	.word	0x0800f87c
 8000fac:	2000067c 	.word	0x2000067c
 8000fb0:	20000588 	.word	0x20000588
 8000fb4:	20000656 	.word	0x20000656
 8000fb8:	20000600 	.word	0x20000600
 8000fbc:	20000652 	.word	0x20000652
 8000fc0:	20000653 	.word	0x20000653
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	f36f 0341 	bfc	r3, #1, #1
 8000fca:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(UP)) {
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4883      	ldr	r0, [pc, #524]	; (80011dc <main+0x578>)
 8000fd0:	f00c fcac 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <main+0x380>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	72fb      	strb	r3, [r7, #11]
 8000fe2:	e003      	b.n	8000fec <main+0x388>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	f36f 0382 	bfc	r3, #2, #1
 8000fea:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000fec:	2101      	movs	r1, #1
 8000fee:	487b      	ldr	r0, [pc, #492]	; (80011dc <main+0x578>)
 8000ff0:	f00c fc9c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <main+0x3a0>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	e003      	b.n	800100c <main+0x3a8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	f36f 03c3 	bfc	r3, #3, #1
 800100a:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(DOWN)) {
 800100c:	2102      	movs	r1, #2
 800100e:	4873      	ldr	r0, [pc, #460]	; (80011dc <main+0x578>)
 8001010:	f00c fc8c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <main+0x3c0>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	72fb      	strb	r3, [r7, #11]
 8001022:	e003      	b.n	800102c <main+0x3c8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	f36f 1345 	bfc	r3, #5, #1
 800102a:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(LEFT)) {
 800102c:	2103      	movs	r1, #3
 800102e:	486b      	ldr	r0, [pc, #428]	; (80011dc <main+0x578>)
 8001030:	f00c fc7c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <main+0x3e0>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	f043 0310 	orr.w	r3, r3, #16
 8001040:	72fb      	strb	r3, [r7, #11]
 8001042:	e003      	b.n	800104c <main+0x3e8>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	f36f 1304 	bfc	r3, #4, #1
 800104a:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(L1)) {
 800104c:	210a      	movs	r1, #10
 800104e:	4863      	ldr	r0, [pc, #396]	; (80011dc <main+0x578>)
 8001050:	f00c fc6c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <main+0x400>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	72bb      	strb	r3, [r7, #10]
 8001062:	e003      	b.n	800106c <main+0x408>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001064:	7abb      	ldrb	r3, [r7, #10]
 8001066:	f36f 1345 	bfc	r3, #5, #1
 800106a:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(L3)) {
 800106c:	2106      	movs	r1, #6
 800106e:	485b      	ldr	r0, [pc, #364]	; (80011dc <main+0x578>)
 8001070:	f00c fc5c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <main+0x420>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	72fb      	strb	r3, [r7, #11]
 8001082:	e003      	b.n	800108c <main+0x428>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	f36f 1386 	bfc	r3, #6, #1
 800108a:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(R1)) {
 800108c:	210b      	movs	r1, #11
 800108e:	4853      	ldr	r0, [pc, #332]	; (80011dc <main+0x578>)
 8001090:	f00c fc4c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <main+0x440>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	72bb      	strb	r3, [r7, #10]
 80010a2:	e003      	b.n	80010ac <main+0x448>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80010a4:	7abb      	ldrb	r3, [r7, #10]
 80010a6:	f36f 1304 	bfc	r3, #4, #1
 80010aa:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(R3)) {
 80010ac:	2107      	movs	r1, #7
 80010ae:	484b      	ldr	r0, [pc, #300]	; (80011dc <main+0x578>)
 80010b0:	f00c fc3c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <main+0x460>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	e003      	b.n	80010cc <main+0x468>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	f36f 13c7 	bfc	r3, #7, #1
 80010ca:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(SHARE)) {
 80010cc:	2104      	movs	r1, #4
 80010ce:	4843      	ldr	r0, [pc, #268]	; (80011dc <main+0x578>)
 80010d0:	f00c fc2c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <main+0x480>
					gameHID.ps4ButtonsTag.button_share = 1;
 80010da:	7abb      	ldrb	r3, [r7, #10]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	72bb      	strb	r3, [r7, #10]
 80010e2:	e003      	b.n	80010ec <main+0x488>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	f36f 03c3 	bfc	r3, #3, #1
 80010ea:	72bb      	strb	r3, [r7, #10]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 80010ec:	2105      	movs	r1, #5
 80010ee:	483b      	ldr	r0, [pc, #236]	; (80011dc <main+0x578>)
 80010f0:	f00c fc1c 	bl	800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <main+0x4ae>
					gameHID.ps4ButtonsTag.button_start = 1;
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	72bb      	strb	r3, [r7, #10]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <main+0x57c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <main+0x57c>)
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e003      	b.n	800111a <main+0x4b6>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	f36f 0382 	bfc	r3, #2, #1
 8001118:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 800111a:	2111      	movs	r1, #17
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <main+0x578>)
 800111e:	f00c fc2d 	bl	800d97c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <main+0x4d2>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <main+0x580>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <main+0x580>)
 8001134:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <main+0x580>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d023      	beq.n	8001186 <main+0x522>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	4826      	ldr	r0, [pc, #152]	; (80011dc <main+0x578>)
 8001144:	f7ff fc24 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <main+0x4fa>
 800114e:	2200      	movs	r2, #0
 8001150:	2101      	movs	r1, #1
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <main+0x578>)
 8001154:	f7ff fc1c 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <main+0x4fe>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <main+0x500>
 8001162:	2300      	movs	r3, #0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <main+0x522>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001168:	2300      	movs	r3, #0
 800116a:	77fb      	strb	r3, [r7, #31]
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d809      	bhi.n	8001186 <main+0x522>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <main+0x578>)
 800117a:	f7ff fc09 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	3301      	adds	r3, #1
 8001182:	77fb      	strb	r3, [r7, #31]
 8001184:	e7f2      	b.n	800116c <main+0x508>
							//Serial.print(F("\t"));
						}
					}
				}
			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4816      	ldr	r0, [pc, #88]	; (80011e8 <main+0x584>)
 800118e:	f006 fb2f 	bl	80077f0 <USBD_HID_SendReport>
 8001192:	e5f9      	b.n	8000d88 <main+0x124>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	4814      	ldr	r0, [pc, #80]	; (80011ec <main+0x588>)
 800119a:	f001 f851 	bl	8002240 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d011      	beq.n	80011d2 <main+0x56e>
		    if (!buttonPressed) {
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <main+0x58c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <main+0x566>
		    	Serial.print(F("\r\nButton Pressed"));
 80011bc:	490d      	ldr	r1, [pc, #52]	; (80011f4 <main+0x590>)
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <main+0x594>)
 80011c0:	f7ff f9e6 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <main+0x598>)
 80011c6:	f7ff fb9e 	bl	8000906 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <main+0x58c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e5da      	b.n	8000d88 <main+0x124>
		} else
		    buttonPressed = false;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <main+0x58c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  }
 80011d8:	e5d6      	b.n	8000d88 <main+0x124>
 80011da:	bf00      	nop
 80011dc:	20000600 	.word	0x20000600
 80011e0:	20000650 	.word	0x20000650
 80011e4:	20000651 	.word	0x20000651
 80011e8:	2000067c 	.word	0x2000067c
 80011ec:	40020800 	.word	0x40020800
 80011f0:	20000654 	.word	0x20000654
 80011f4:	0800f89c 	.word	0x0800f89c
 80011f8:	200003a0 	.word	0x200003a0
 80011fc:	20000588 	.word	0x20000588

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ac      	sub	sp, #176	; 0xb0
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800120a:	2234      	movs	r2, #52	; 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f00e faa2 	bl	800f758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	225c      	movs	r2, #92	; 0x5c
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00e fa93 	bl	800f758 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <SystemClock_Config+0x150>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a45      	ldr	r2, [pc, #276]	; (8001350 <SystemClock_Config+0x150>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <SystemClock_Config+0x150>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b40      	ldr	r3, [pc, #256]	; (8001354 <SystemClock_Config+0x154>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <SystemClock_Config+0x154>)
 8001258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <SystemClock_Config+0x154>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126a:	2301      	movs	r3, #1
 800126c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001284:	2304      	movs	r3, #4
 8001286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800128a:	23a8      	movs	r3, #168	; 0xa8
 800128c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 ffa8 	bl	80041fc <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012bc:	f000 f972 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012dc:	2105      	movs	r1, #5
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 f996 	bl	8003610 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012f4:	f000 f956 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012fe:	2300      	movs	r3, #0
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4618      	mov	r0, r3
 8001308:	f002 fa9c 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800131c:	f000 f942 	bl	80015a4 <Error_Handler>
  }

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000); // NOTE: Edited, so it increments every us
 8001320:	f002 fa5c 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8001324:	4603      	mov	r3, r0
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <SystemClock_Config+0x158>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fdc9 	bl	8001ec6 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001334:	2004      	movs	r0, #4
 8001336:	f000 fdd3 	bl	8001ee0 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	f000 fd96 	bl	8001e72 <HAL_NVIC_SetPriority>

}
 8001346:	bf00      	nop
 8001348:	37b0      	adds	r7, #176	; 0xb0
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000
 8001358:	10624dd3 	.word	0x10624dd3

0800135c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_ZL13MX_TIM14_Initv+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1; //increment every 100us
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 8001368:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800136c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 8001376:	f242 720f 	movw	r2, #9999	; 0x270f
 800137a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <_ZL13MX_TIM14_Initv+0x4c>)
 800138a:	f003 ff7d 	bl	8005288 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 800139e:	f000 f901 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002bc 	.word	0x200002bc
 80013ac:	40002000 	.word	0x40002000

080013b0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013b6:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <_ZL12MX_SPI1_Initv+0x74>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013e4:	2218      	movs	r2, #24
 80013e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 80013fc:	220a      	movs	r2, #10
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <_ZL12MX_SPI1_Initv+0x70>)
 8001402:	f003 f999 	bl	8004738 <HAL_SPI_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001416:	f000 f8c5 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000220 	.word	0x20000220
 8001424:	40013000 	.word	0x40013000

08001428 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001460:	f004 f9b6 	bl	80057d0 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001474:	f000 f896 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000278 	.word	0x20000278
 8001480:	40004400 	.word	0x40004400

08001484 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0d      	ldr	r2, [pc, #52]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <_ZL12MX_GPIO_Initv+0xa8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_ZL12MX_GPIO_Initv+0xac>)
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <_ZL12MX_GPIO_Initv+0xb0>)
 8001520:	f000 fcfa 	bl	8001f18 <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	10210000 	.word	0x10210000
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	if(htim == &htim14) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d11d      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x4c>
		//Serial.print("\r\nTesting");
		if(!rumble_once && ps4_connected) {
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10f      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x38>
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00b      	beq.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x38>
			Serial.print("\r\nPS4 Controller Connected");
 8001558:	490f      	ldr	r1, [pc, #60]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800155a:	4810      	ldr	r0, [pc, #64]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800155c:	f7ff f826 	bl	80005ac <_ZN5Print5printEPKc>
			PS4.setRumbleOn(RumbleLow);
 8001560:	2120      	movs	r1, #32
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001564:	f7ff fa40 	bl	80009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
			rumble_once = 2;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
		else if(rumble_once == 2) {
			PS4.setRumbleOff();
			rumble_once = 1;
		}
	}
}
 800156e:	e009      	b.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x4c>
		else if(rumble_once == 2) {
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d105      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x4c>
			PS4.setRumbleOff();
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800157a:	f7ff fa28 	bl	80009ce <_ZN9PS4Parser12setRumbleOffEv>
			rumble_once = 1;
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002bc 	.word	0x200002bc
 8001590:	20000655 	.word	0x20000655
 8001594:	20000656 	.word	0x20000656
 8001598:	0800f8b0 	.word	0x0800f8b0
 800159c:	200003a0 	.word	0x200003a0
 80015a0:	20000600 	.word	0x20000600

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>

080015ae <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80015b6:	f7ff f979 	bl	80008ac <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80015ba:	f7ff f95f 	bl	800087c <_ZN3P103SetEv>
        spi::init();
 80015be:	f000 f845 	bl	800164c <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80015c2:	f7ff f945 	bl	8000850 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80015c6:	2218      	movs	r2, #24
 80015c8:	2188      	movs	r1, #136	; 0x88
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f846 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f865 	bl	80016a0 <_ZN8MAX3421eI3P102P9E5resetEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e02b      	b.n	8001644 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80015ec:	22c1      	movs	r2, #193	; 0xc1
 80015ee:	21d8      	movs	r1, #216	; 0xd8
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f833 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80015f6:	2260      	movs	r2, #96	; 0x60
 80015f8:	21d0      	movs	r1, #208	; 0xd0
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f82e 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001600:	2204      	movs	r2, #4
 8001602:	21e8      	movs	r1, #232	; 0xe8
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f829 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800160a:	21e8      	movs	r1, #232	; 0xe8
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f877 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d000      	beq.n	8001628 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001626:	e7f0      	b.n	800160a <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f88b 	bl	8001744 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 800162e:	2220      	movs	r2, #32
 8001630:	21c8      	movs	r1, #200	; 0xc8
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f812 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001638:	2201      	movs	r2, #1
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f80d 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
        }
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
 8001668:	4613      	mov	r3, r2
 800166a:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 800166c:	f7ff f912 	bl	8000894 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 800167a:	78bb      	ldrb	r3, [r7, #2]
 800167c:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 800167e:	f107 010c 	add.w	r1, r7, #12
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2202      	movs	r2, #2
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800168a:	f003 f8de 	bl	800484a <HAL_SPI_Transmit>
        SPI_SS::Set();
 800168e:	f7ff f8f5 	bl	800087c <_ZN3P103SetEv>
        return;
 8001692:	bf00      	nop
};
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000304 	.word	0x20000304

080016a0 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 80016ac:	2220      	movs	r2, #32
 80016ae:	2178      	movs	r1, #120	; 0x78
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffd3 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2178      	movs	r1, #120	; 0x78
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffce 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	3301      	adds	r3, #1
 80016c4:	81fb      	strh	r3, [r7, #14]
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00f      	beq.n	80016f6 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 80016d6:	2168      	movs	r1, #104	; 0x68
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f811 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016de:	4603      	mov	r3, r0
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d100      	bne.n	80016f4 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80016f2:	e7e5      	b.n	80016c0 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80016f4:	bf00      	nop
        return ( i);
 80016f6:	89fb      	ldrh	r3, [r7, #14]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800170c:	f7ff f8c2 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001710:	1cf9      	adds	r1, r7, #3
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	2201      	movs	r2, #1
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800171a:	f003 f896 	bl	800484a <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001722:	f107 010f 	add.w	r1, r7, #15
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	2201      	movs	r2, #1
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800172e:	f003 f9c8 	bl	8004ac2 <HAL_SPI_Receive>
        SPI_SS::Set();
 8001732:	f7ff f8a3 	bl	800087c <_ZN3P103SetEv>
        return (rv);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000304 	.word	0x20000304

08001744 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 800174c:	21f8      	movs	r1, #248	; 0xf8
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffd6 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800175e:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2bc0      	cmp	r3, #192	; 0xc0
 8001764:	d04a      	beq.n	80017fc <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001766:	2bc0      	cmp	r3, #192	; 0xc0
 8001768:	dc55      	bgt.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800176a:	2b80      	cmp	r3, #128	; 0x80
 800176c:	d006      	beq.n	800177c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800176e:	2b80      	cmp	r3, #128	; 0x80
 8001770:	dc51      	bgt.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001772:	2b00      	cmp	r3, #0
 8001774:	d046      	beq.n	8001804 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d020      	beq.n	80017bc <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800177a:	e04c      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800177c:	21d8      	movs	r1, #216	; 0xd8
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffbe 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001784:	4603      	mov	r3, r0
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001798:	22c9      	movs	r2, #201	; 0xc9
 800179a:	21d8      	movs	r1, #216	; 0xd8
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff5d 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	701a      	strb	r2, [r3, #0]
                        break;
 80017a8:	e035      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80017aa:	22cb      	movs	r2, #203	; 0xcb
 80017ac:	21d8      	movs	r1, #216	; 0xd8
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff54 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
                        break;
 80017ba:	e02c      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80017bc:	21d8      	movs	r1, #216	; 0xd8
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff9e 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80017d8:	22cb      	movs	r2, #203	; 0xcb
 80017da:	21d8      	movs	r1, #216	; 0xd8
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff3d 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017e4:	2203      	movs	r2, #3
 80017e6:	701a      	strb	r2, [r3, #0]
                        break;
 80017e8:	e015      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80017ea:	22c9      	movs	r2, #201	; 0xc9
 80017ec:	21d8      	movs	r1, #216	; 0xd8
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff34 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
                        break;
 80017fa:	e00c      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
                        break;
 8001802:	e008      	b.n	8001816 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8001804:	22d1      	movs	r2, #209	; 0xd1
 8001806:	21d8      	movs	r1, #216	; 0xd8
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff27 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
                        break;
 8001814:	bf00      	nop
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000657 	.word	0x20000657

08001824 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d115      	bne.n	8001860 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	4293      	cmp	r3, r2
 800183c:	d110      	bne.n	8001860 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001840:	480a      	ldr	r0, [pc, #40]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001842:	f7fe ffef 	bl	8000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001848:	f00c fa64 	bl	800dd14 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 800184c:	4908      	ldr	r1, [pc, #32]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001850:	f008 f864 	bl	800991c <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001856:	2200      	movs	r2, #0
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800185c:	f7ff f92e 	bl	8000abc <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000278 	.word	0x20000278
 800186c:	200003a0 	.word	0x200003a0
 8001870:	200003b4 	.word	0x200003b4
 8001874:	20000470 	.word	0x20000470
 8001878:	0800f8cc 	.word	0x0800f8cc
 800187c:	20000588 	.word	0x20000588

08001880 <_GLOBAL__sub_I_hspi1>:
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
 8001884:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffcb 	bl	8001824 <_Z41__static_initialization_and_destruction_0ii>
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ce:	2007      	movs	r0, #7
 80018d0:	f000 fac4 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_SPI_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12b      	bne.n	800195a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_SPI_MspInit+0x88>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x88>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_SPI_MspInit+0x88>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_SPI_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_SPI_MspInit+0x88>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_SPI_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193a:	23e0      	movs	r3, #224	; 0xe0
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_SPI_MspInit+0x8c>)
 8001956:	f000 fadf 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40013000 	.word	0x40013000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d115      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	202d      	movs	r0, #45	; 0x2d
 80019a4:	f000 fa65 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019a8:	202d      	movs	r0, #45	; 0x2d
 80019aa:	f000 fa7e 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40002000 	.word	0x40002000
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12b      	bne.n	8001a3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_UART_MspInit+0x8c>)
 8001a36:	f000 fa6f 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f8ca 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001aaa:	f003 fcad 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200002bc 	.word	0x200002bc

08001ab8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <OTG_FS_IRQHandler+0x10>)
 8001abe:	f000 fd47 	bl	8002550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000b4c 	.word	0x20000b4c

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae6:	f00d fdff 	bl	800f6e8 <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
	return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <SystemInit+0x28>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <SystemInit+0x28>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SystemInit+0x28>)
 8001b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b42:	e003      	b.n	8001b4c <LoopCopyDataInit>

08001b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b4a:	3104      	adds	r1, #4

08001b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b54:	d3f6      	bcc.n	8001b44 <CopyDataInit>
  ldr  r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b58:	e002      	b.n	8001b60 <LoopFillZerobss>

08001b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b5c:	f842 3b04 	str.w	r3, [r2], #4

08001b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b64:	d3f9      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b66:	f7ff ffd3 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f00d fdc3 	bl	800f6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff f879 	bl	8000c64 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b78:	0800fbc4 	.word	0x0800fbc4
  ldr  r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b80:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001b84:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001b88:	20000f58 	.word	0x20000f58

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_Init+0x40>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_Init+0x40>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x40>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f94f 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fe64 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f967 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f92f 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000678 	.word	0x20000678

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000678 	.word	0x20000678

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff3e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff31 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d106      	bne.n	8001efc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001efa:	e005      	b.n	8001f08 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e165      	b.n	8002200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8154 	bne.w	80021fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d130      	bne.n	8001fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ae 	beq.w	80021fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a5c      	ldr	r2, [pc, #368]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_GPIO_Init+0x304>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x308>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x21a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_GPIO_Init+0x30c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x216>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x310>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x212>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x314>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x20e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_GPIO_Init+0x318>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x20a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x31c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x206>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x320>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x202>
 8002116:	2306      	movs	r3, #6
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800211a:	2307      	movs	r3, #7
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x304>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_GPIO_Init+0x324>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002176:	4a31      	ldr	r2, [pc, #196]	; (800223c <HAL_GPIO_Init+0x324>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800217c:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_GPIO_Init+0x324>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_GPIO_Init+0x324>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_GPIO_Init+0x324>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_GPIO_Init+0x324>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_GPIO_Init+0x324>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_GPIO_Init+0x324>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae96 	bls.w	8001f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a4:	b08f      	sub	sp, #60	; 0x3c
 80022a6:	af0a      	add	r7, sp, #40	; 0x28
 80022a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e116      	b.n	80024e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f006 fdc6 	bl	8008e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 ff15 	bl	8006122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	687e      	ldr	r6, [r7, #4]
 8002300:	466d      	mov	r5, sp
 8002302:	f106 0410 	add.w	r4, r6, #16
 8002306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002312:	e885 0003 	stmia.w	r5, {r0, r1}
 8002316:	1d33      	adds	r3, r6, #4
 8002318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f003 fdec 	bl	8005ef8 <USB_CoreInit>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0d7      	b.n	80024e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f003 ff03 	bl	8006144 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e04a      	b.n	80023da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333d      	adds	r3, #61	; 0x3d
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	333c      	adds	r3, #60	; 0x3c
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	b298      	uxth	r0, r3
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3342      	adds	r3, #66	; 0x42
 8002380:	4602      	mov	r2, r0
 8002382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	333f      	adds	r3, #63	; 0x3f
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3344      	adds	r3, #68	; 0x44
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3348      	adds	r3, #72	; 0x48
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3350      	adds	r3, #80	; 0x50
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	3301      	adds	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3af      	bcc.n	8002344 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e044      	b.n	8002474 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3b5      	bcc.n	80023ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	687e      	ldr	r6, [r7, #4]
 8002486:	466d      	mov	r5, sp
 8002488:	f106 0410 	add.w	r4, r6, #16
 800248c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002498:	e885 0003 	stmia.w	r5, {r0, r1}
 800249c:	1d33      	adds	r3, r6, #4
 800249e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f003 fe79 	bl	8006198 <USB_DevInit>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e014      	b.n	80024e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f001 f879 	bl	80035c8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 feb4 	bl	8007248 <USB_DevDisconnect>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_PCD_Start+0x1c>
 8002502:	2302      	movs	r3, #2
 8002504:	e020      	b.n	8002548 <HAL_PCD_Start+0x5e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	2b01      	cmp	r3, #1
 8002514:	d109      	bne.n	800252a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800251a:	2b01      	cmp	r3, #1
 800251c:	d005      	beq.n	800252a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fde6 	bl	8006100 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f004 fe64 	bl	8007206 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08d      	sub	sp, #52	; 0x34
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f004 ff22 	bl	80073b0 <USB_GetMode>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 83ca 	bne.w	8002d08 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fe86 	bl	800728a <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 83c0 	beq.w	8002d06 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fe7d 	bl	800728a <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 0202 	and.w	r2, r2, #2
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fe6b 	bl	800728a <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d161      	bne.n	8002682 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0210 	bic.w	r2, r2, #16
 80025cc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 020f 	and.w	r2, r3, #15
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	0c5b      	lsrs	r3, r3, #17
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d124      	bne.n	8002644 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d035      	beq.n	8002672 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	6a38      	ldr	r0, [r7, #32]
 800261a:	f004 fcd1 	bl	8006fc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262a:	441a      	add	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263c:	441a      	add	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	e016      	b.n	8002672 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	0c5b      	lsrs	r3, r3, #17
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	2b06      	cmp	r3, #6
 800264e:	d110      	bne.n	8002672 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002656:	2208      	movs	r2, #8
 8002658:	4619      	mov	r1, r3
 800265a:	6a38      	ldr	r0, [r7, #32]
 800265c:	f004 fcb0 	bl	8006fc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266c:	441a      	add	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0210 	orr.w	r2, r2, #16
 8002680:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fdff 	bl	800728a <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002696:	d16e      	bne.n	8002776 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fe05 	bl	80072b0 <USB_ReadDevAllOutEpInterrupt>
 80026a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80026a8:	e062      	b.n	8002770 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d057      	beq.n	8002764 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fe2a 	bl	8007318 <USB_ReadDevOutEPInterrupt>
 80026c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	2301      	movs	r3, #1
 80026e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fdc5 	bl	8003274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002700:	461a      	mov	r2, r3
 8002702:	2308      	movs	r3, #8
 8002704:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 febf 	bl	800348c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	2310      	movs	r3, #16
 8002728:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	2320      	movs	r3, #32
 8002744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002762:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3301      	adds	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d199      	bne.n	80026aa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fd85 	bl	800728a <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002786:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800278a:	f040 80c0 	bne.w	800290e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 fda6 	bl	80072e4 <USB_ReadDevAllInEpInterrupt>
 8002798:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800279e:	e0b2      	b.n	8002906 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a7 	beq.w	80028fa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 fdcc 	bl	8007354 <USB_ReadDevInEPInterrupt>
 80027bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d057      	beq.n	8002878 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69f9      	ldr	r1, [r7, #28]
 80027e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027e8:	4013      	ands	r3, r2
 80027ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f8:	461a      	mov	r2, r3
 80027fa:	2301      	movs	r3, #1
 80027fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d132      	bne.n	800286c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3348      	adds	r3, #72	; 0x48
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	3344      	adds	r3, #68	; 0x44
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4419      	add	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4403      	add	r3, r0
 800283a:	3348      	adds	r3, #72	; 0x48
 800283c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d113      	bne.n	800286c <HAL_PCD_IRQHandler+0x31c>
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3350      	adds	r3, #80	; 0x50
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002864:	461a      	mov	r2, r3
 8002866:	2101      	movs	r1, #1
 8002868:	f004 fdd4 	bl	8007414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 fb75 	bl	8008f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288e:	461a      	mov	r2, r3
 8002890:	2308      	movs	r3, #8
 8002892:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028aa:	461a      	mov	r2, r3
 80028ac:	2310      	movs	r3, #16
 80028ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	461a      	mov	r2, r3
 80028c8:	2340      	movs	r3, #64	; 0x40
 80028ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e2:	461a      	mov	r2, r3
 80028e4:	2302      	movs	r3, #2
 80028e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fc30 	bl	800315a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f af49 	bne.w	80027a0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 fcb9 	bl	800728a <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800291e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002922:	d122      	bne.n	800296a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800294a:	2100      	movs	r1, #0
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f006 fd45 	bl	80093dc <HAL_PCDEx_LPM_Callback>
 8002952:	e002      	b.n	800295a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f006 fb7b 	bl	8009050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fc8b 	bl	800728a <USB_ReadInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297e:	d112      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f006 fb37 	bl	8009004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029a4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fc6d 	bl	800728a <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ba:	d121      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80029ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d111      	bne.n	80029fa <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029f0:	2101      	movs	r1, #1
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f006 fcf2 	bl	80093dc <HAL_PCDEx_LPM_Callback>
 80029f8:	e002      	b.n	8002a00 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f006 fb02 	bl	8009004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fc40 	bl	800728a <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a14:	f040 80c7 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2110      	movs	r1, #16
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fd0e 	bl	8006454 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	e056      	b.n	8002aec <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a62:	0151      	lsls	r1, r2, #5
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	440a      	add	r2, r1
 8002a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a70:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a82:	0151      	lsls	r1, r2, #5
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	440a      	add	r2, r1
 8002a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad6:	0151      	lsls	r1, r2, #5
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	440a      	add	r2, r1
 8002adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	3301      	adds	r3, #1
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3a3      	bcc.n	8002a3e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b22:	f043 030b 	orr.w	r3, r3, #11
 8002b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f043 030b 	orr.w	r3, r3, #11
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	e015      	b.n	8002b6c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f043 030b 	orr.w	r3, r3, #11
 8002b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b90:	461a      	mov	r2, r3
 8002b92:	f004 fc3f 	bl	8007414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fb6d 	bl	800728a <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d124      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 fc03 	bl	80073cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fca3 	bl	8006516 <USB_GetDevSpeed>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	f000 fdfe 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8002be0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4620      	mov	r0, r4
 8002bec:	f003 f9e6 	bl	8005fbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f006 f9de 	bl	8008fb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fb3d 	bl	800728a <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d10a      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f006 f9bb 	bl	8008f96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 0208 	and.w	r2, r2, #8
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fb28 	bl	800728a <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c44:	d10f      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f006 fa1d 	bl	8009090 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 fb0d 	bl	800728a <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7a:	d10f      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f006 f9f0 	bl	800906c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 faf2 	bl	800728a <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f006 f9fe 	bl	80090b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f004 fadc 	bl	800728a <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d115      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f006 f9ee 	bl	80090d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	e000      	b.n	8002d08 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002d06:	bf00      	nop
    }
  }
}
 8002d08:	3734      	adds	r7, #52	; 0x34
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}

08002d0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_SetAddress+0x1a>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e013      	b.n	8002d50 <HAL_PCD_SetAddress+0x42>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fa3a 	bl	80071ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	70fb      	strb	r3, [r7, #3]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	803b      	strh	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da0f      	bge.n	8002d9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 020f 	and.w	r2, r3, #15
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	3338      	adds	r3, #56	; 0x38
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	3304      	adds	r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	705a      	strb	r2, [r3, #1]
 8002d9c:	e00f      	b.n	8002dbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dca:	883a      	ldrh	r2, [r7, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	78ba      	ldrb	r2, [r7, #2]
 8002dd4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002de8:	78bb      	ldrb	r3, [r7, #2]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d102      	bne.n	8002df4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_EP_Open+0xaa>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e00e      	b.n	8002e20 <HAL_PCD_EP_Open+0xc8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fba5 	bl	8006560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0f      	bge.n	8002e5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00f      	b.n	8002e7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_PCD_EP_Close+0x6e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e00e      	b.n	8002eb4 <HAL_PCD_EP_Close+0x8c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fbe3 	bl	8006670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f18:	7afb      	ldrb	r3, [r7, #11]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6979      	ldr	r1, [r7, #20]
 8002f30:	f003 febe 	bl	8006cb0 <USB_EP0StartXfer>
 8002f34:	e008      	b.n	8002f48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	f003 fc70 	bl	8006828 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	3338      	adds	r3, #56	; 0x38
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d102      	bne.n	8002fac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6979      	ldr	r1, [r7, #20]
 8002fc4:	f003 fe74 	bl	8006cb0 <USB_EP0StartXfer>
 8002fc8:	e008      	b.n	8002fdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	f003 fc26 	bl	8006828 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d901      	bls.n	8003004 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e050      	b.n	80030a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0f      	bge.n	800302c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e00d      	b.n	8003048 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_PCD_EP_SetStall+0x82>
 8003064:	2302      	movs	r3, #2
 8003066:	e01e      	b.n	80030a6 <HAL_PCD_EP_SetStall+0xc0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 ffcb 	bl	8007012 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	b2d9      	uxtb	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003096:	461a      	mov	r2, r3
 8003098:	f004 f9bc 	bl	8007414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d901      	bls.n	80030cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e042      	b.n	8003152 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da0f      	bge.n	80030f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	705a      	strb	r2, [r3, #1]
 80030f2:	e00f      	b.n	8003114 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	3304      	adds	r3, #4
 800310c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	b2da      	uxtb	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_PCD_EP_ClrStall+0x86>
 8003130:	2302      	movs	r3, #2
 8003132:	e00e      	b.n	8003152 <HAL_PCD_EP_ClrStall+0xa4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 ffd3 	bl	80070ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b08a      	sub	sp, #40	; 0x28
 800315e:	af02      	add	r7, sp, #8
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3338      	adds	r3, #56	; 0x38
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d901      	bls.n	8003192 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06c      	b.n	800326c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d902      	bls.n	80031ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3303      	adds	r3, #3
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031b6:	e02b      	b.n	8003210 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d902      	bls.n	80031d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3303      	adds	r3, #3
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4603      	mov	r3, r0
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f003 feaf 	bl	8006f56 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	b29b      	uxth	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	429a      	cmp	r2, r3
 8003224:	d809      	bhi.n	800323a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322e:	429a      	cmp	r2, r3
 8003230:	d203      	bcs.n	800323a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1be      	bne.n	80031b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	429a      	cmp	r2, r3
 8003244:	d811      	bhi.n	800326a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2201      	movs	r2, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	43db      	mvns	r3, r3
 8003260:	6939      	ldr	r1, [r7, #16]
 8003262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003266:	4013      	ands	r3, r2
 8003268:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	333c      	adds	r3, #60	; 0x3c
 800328c:	3304      	adds	r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 80a0 	bne.w	80033ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a72      	ldr	r2, [pc, #456]	; (8003484 <PCD_EP_OutXfrComplete_int+0x210>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f240 80dd 	bls.w	800347a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80d7 	beq.w	800347a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	e0cb      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	2320      	movs	r3, #32
 80032fc:	6093      	str	r3, [r2, #8]
 80032fe:	e0bc      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80b7 	bne.w	800347a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a5d      	ldr	r2, [pc, #372]	; (8003484 <PCD_EP_OutXfrComplete_int+0x210>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d90f      	bls.n	8003334 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003330:	6093      	str	r3, [r2, #8]
 8003332:	e0a2      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003346:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	0159      	lsls	r1, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	440b      	add	r3, r1
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800335a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4403      	add	r3, r0
 800336a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800336e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4419      	add	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d114      	bne.n	80033de <PCD_EP_OutXfrComplete_int+0x16a>
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d108      	bne.n	80033de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d6:	461a      	mov	r2, r3
 80033d8:	2101      	movs	r1, #1
 80033da:	f004 f81b 	bl	8007414 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f005 fda1 	bl	8008f2c <HAL_PCD_DataOutStageCallback>
 80033ea:	e046      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a26      	ldr	r2, [pc, #152]	; (8003488 <PCD_EP_OutXfrComplete_int+0x214>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d124      	bne.n	800343e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	461a      	mov	r2, r3
 800340c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	e032      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	461a      	mov	r2, r3
 800342c:	2320      	movs	r3, #32
 800342e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f005 fd78 	bl	8008f2c <HAL_PCD_DataOutStageCallback>
 800343c:	e01d      	b.n	800347a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d114      	bne.n	800346e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003466:	461a      	mov	r2, r3
 8003468:	2100      	movs	r1, #0
 800346a:	f003 ffd3 	bl	8007414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f005 fd59 	bl	8008f2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	4f54300a 	.word	0x4f54300a
 8003488:	4f54310a 	.word	0x4f54310a

0800348c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	333c      	adds	r3, #60	; 0x3c
 80034a4:	3304      	adds	r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <PCD_EP_OutSetupPacket_int+0x88>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d90e      	bls.n	80034e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f005 fd11 	bl	8008f08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <PCD_EP_OutSetupPacket_int+0x88>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d90c      	bls.n	8003508 <PCD_EP_OutSetupPacket_int+0x7c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003500:	461a      	mov	r2, r3
 8003502:	2101      	movs	r1, #1
 8003504:	f003 ff86 	bl	8007414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	4f54300a 	.word	0x4f54300a

08003518 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
 8003524:	4613      	mov	r3, r2
 8003526:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d107      	bne.n	8003546 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003536:	883b      	ldrh	r3, [r7, #0]
 8003538:	0419      	lsls	r1, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	430a      	orrs	r2, r1
 8003542:	629a      	str	r2, [r3, #40]	; 0x28
 8003544:	e028      	b.n	8003598 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e00d      	b.n	8003576 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3340      	adds	r3, #64	; 0x40
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4413      	add	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	3301      	adds	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	3b01      	subs	r3, #1
 800357c:	429a      	cmp	r2, r3
 800357e:	d3ec      	bcc.n	800355a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003580:	883b      	ldrh	r3, [r7, #0]
 8003582:	0418      	lsls	r0, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	3b01      	subs	r3, #1
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4302      	orrs	r2, r0
 8003590:	3340      	adds	r3, #64	; 0x40
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	f043 0303 	orr.w	r3, r3, #3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cc      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b68      	ldr	r3, [pc, #416]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d90c      	bls.n	800364c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d044      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d119      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e067      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4934      	ldr	r1, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe faac 	bl	8001c5c <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe faa8 	bl	8001c5c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d20c      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003796:	f000 fb7f 	bl	8003e98 <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fa0c 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	0800fa18 	.word	0x0800fa18
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004

080037dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f8:	f7ff fff0 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0a9b      	lsrs	r3, r3, #10
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	0800fa28 	.word	0x0800fa28

0800381c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003820:	f7ff ffdc 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0b5b      	lsrs	r3, r3, #13
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	0800fa28 	.word	0x0800fa28

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08c      	sub	sp, #48	; 0x30
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800387c:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800387e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003882:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	496c      	ldr	r1, [pc, #432]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800389a:	2301      	movs	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80038aa:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	4960      	ldr	r1, [pc, #384]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80038c8:	2301      	movs	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d017      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d8:	4b58      	ldr	r3, [pc, #352]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4955      	ldr	r1, [pc, #340]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f6:	d101      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80038f8:	2301      	movs	r3, #1
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003904:	2301      	movs	r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d017      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003914:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	4946      	ldr	r1, [pc, #280]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d101      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003940:	2301      	movs	r3, #1
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 808a 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800397a:	f7fe f96f 	bl	8001c5c <HAL_GetTick>
 800397e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fe f96b 	bl	8001c5c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e278      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003994:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d028      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d114      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fe f939 	bl	8001c5c <HAL_GetTick>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fe f935 	bl	8001c5c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e240      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ee      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1c:	d114      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	4902      	ldr	r1, [pc, #8]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
 8003a38:	e00c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
 8003a44:	42470e40 	.word	0x42470e40
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a52:	6093      	str	r3, [r2, #8]
 8003a54:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	4944      	ldr	r1, [pc, #272]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4937      	ldr	r1, [pc, #220]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab8:	492e      	ldr	r1, [pc, #184]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d011      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	4926      	ldr	r1, [pc, #152]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d101      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	491a      	ldr	r1, [pc, #104]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	4911      	ldr	r1, [pc, #68]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d005      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b50:	f040 80ff 	bne.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe f87f 	bl	8001c5c <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b60:	e00e      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b62:	f7fe f87b 	bl	8001c5c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d907      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e188      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	424711e0 	.word	0x424711e0
 8003b7c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b80:	4b7e      	ldr	r3, [pc, #504]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ea      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d028      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d124      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bb4:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	431a      	orrs	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	431a      	orrs	r2, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	071b      	lsls	r3, r3, #28
 8003bf6:	4961      	ldr	r1, [pc, #388]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d035      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c28:	d130      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c2a:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	0f1b      	lsrs	r3, r3, #28
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	019b      	lsls	r3, r3, #6
 8003c54:	431a      	orrs	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	431a      	orrs	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	071b      	lsls	r3, r3, #28
 8003c6c:	4943      	ldr	r1, [pc, #268]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c74:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7a:	f023 021f 	bic.w	r2, r3, #31
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	493d      	ldr	r1, [pc, #244]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d029      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca0:	d124      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	019b      	lsls	r3, r3, #6
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	071b      	lsls	r3, r3, #28
 8003ce4:	4925      	ldr	r1, [pc, #148]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd ff96 	bl	8001c5c <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d34:	f7fd ff92 	bl	8001c5c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e09f      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 8095 	bne.w	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fd ff7c 	bl	8001c5c <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d66:	e00f      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d68:	f7fd ff78 	bl	8001c5c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d908      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e085      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470068 	.word	0x42470068
 8003d84:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d0e8      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d02b      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d127      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	4928      	ldr	r1, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003df4:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	4922      	ldr	r1, [pc, #136]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01d      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e22:	d118      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	0e1b      	lsrs	r3, r3, #24
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	019b      	lsls	r3, r3, #6
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fd fefe 	bl	8001c5c <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e64:	f7fd fefa 	bl	8001c5c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e007      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e82:	d1ef      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3730      	adds	r7, #48	; 0x30
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470070 	.word	0x42470070

08003e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b088      	sub	sp, #32
 8003e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb4:	4bce      	ldr	r3, [pc, #824]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	f200 818d 	bhi.w	80041dc <HAL_RCC_GetSysClockFreq+0x344>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_RCC_GetSysClockFreq+0x30>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	080041dd 	.word	0x080041dd
 8003ed0:	080041dd 	.word	0x080041dd
 8003ed4:	080041dd 	.word	0x080041dd
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	080041dd 	.word	0x080041dd
 8003ee0:	080041dd 	.word	0x080041dd
 8003ee4:	080041dd 	.word	0x080041dd
 8003ee8:	08003f09 	.word	0x08003f09
 8003eec:	080041dd 	.word	0x080041dd
 8003ef0:	080041dd 	.word	0x080041dd
 8003ef4:	080041dd 	.word	0x080041dd
 8003ef8:	0800407d 	.word	0x0800407d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4bbd      	ldr	r3, [pc, #756]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003efe:	61bb      	str	r3, [r7, #24]
       break;
 8003f00:	e16f      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4bbd      	ldr	r3, [pc, #756]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x360>)
 8003f04:	61bb      	str	r3, [r7, #24]
      break;
 8003f06:	e16c      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f08:	4bb9      	ldr	r3, [pc, #740]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f10:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f12:	4bb7      	ldr	r3, [pc, #732]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d053      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4bb4      	ldr	r3, [pc, #720]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	ea02 0400 	and.w	r4, r2, r0
 8003f36:	603c      	str	r4, [r7, #0]
 8003f38:	400b      	ands	r3, r1
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	014b      	lsls	r3, r1, #5
 8003f4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f52:	0142      	lsls	r2, r0, #5
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	4623      	mov	r3, r4
 8003f5a:	1ac0      	subs	r0, r0, r3
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	eb61 0103 	sbc.w	r1, r1, r3
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f70:	0182      	lsls	r2, r0, #6
 8003f72:	1a12      	subs	r2, r2, r0
 8003f74:	eb63 0301 	sbc.w	r3, r3, r1
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f86:	00d0      	lsls	r0, r2, #3
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	1852      	adds	r2, r2, r1
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb43 0101 	adc.w	r1, r3, r1
 8003f96:	460b      	mov	r3, r1
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	0259      	lsls	r1, r3, #9
 8003fa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fa6:	0250      	lsls	r0, r2, #9
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	f7fc f92c 	bl	8000214 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	e04c      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b8a      	ldr	r3, [pc, #552]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	ea02 0a00 	and.w	sl, r2, r0
 8003fde:	ea03 0b01 	and.w	fp, r3, r1
 8003fe2:	4650      	mov	r0, sl
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	014b      	lsls	r3, r1, #5
 8003ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff4:	0142      	lsls	r2, r0, #5
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	ebb0 000a 	subs.w	r0, r0, sl
 8003ffe:	eb61 010b 	sbc.w	r1, r1, fp
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004010:	0182      	lsls	r2, r0, #6
 8004012:	1a12      	subs	r2, r2, r0
 8004014:	eb63 0301 	sbc.w	r3, r3, r1
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	00d9      	lsls	r1, r3, #3
 8004022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004026:	00d0      	lsls	r0, r2, #3
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	eb12 020a 	adds.w	r2, r2, sl
 8004030:	eb43 030b 	adc.w	r3, r3, fp
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0299      	lsls	r1, r3, #10
 800403e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004042:	0290      	lsls	r0, r2, #10
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f7fc f8de 	bl	8000214 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004060:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	3301      	adds	r3, #1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	61bb      	str	r3, [r7, #24]
      break;
 800407a:	e0b2      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b5c      	ldr	r3, [pc, #368]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004086:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d04d      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b57      	ldr	r3, [pc, #348]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	ea02 0800 	and.w	r8, r2, r0
 80040aa:	ea03 0901 	and.w	r9, r3, r1
 80040ae:	4640      	mov	r0, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	014b      	lsls	r3, r1, #5
 80040bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040c0:	0142      	lsls	r2, r0, #5
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	ebb0 0008 	subs.w	r0, r0, r8
 80040ca:	eb61 0109 	sbc.w	r1, r1, r9
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040dc:	0182      	lsls	r2, r0, #6
 80040de:	1a12      	subs	r2, r2, r0
 80040e0:	eb63 0301 	sbc.w	r3, r3, r1
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	00d9      	lsls	r1, r3, #3
 80040ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f2:	00d0      	lsls	r0, r2, #3
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	eb12 0208 	adds.w	r2, r2, r8
 80040fc:	eb43 0309 	adc.w	r3, r3, r9
 8004100:	f04f 0000 	mov.w	r0, #0
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	0259      	lsls	r1, r3, #9
 800410a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800410e:	0250      	lsls	r0, r2, #9
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	461a      	mov	r2, r3
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	f7fc f878 	bl	8000214 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	e04a      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	ea02 0400 	and.w	r4, r2, r0
 8004146:	ea03 0501 	and.w	r5, r3, r1
 800414a:	4620      	mov	r0, r4
 800414c:	4629      	mov	r1, r5
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	014b      	lsls	r3, r1, #5
 8004158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800415c:	0142      	lsls	r2, r0, #5
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	1b00      	subs	r0, r0, r4
 8004164:	eb61 0105 	sbc.w	r1, r1, r5
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	018b      	lsls	r3, r1, #6
 8004172:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004176:	0182      	lsls	r2, r0, #6
 8004178:	1a12      	subs	r2, r2, r0
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	00d9      	lsls	r1, r3, #3
 8004188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800418c:	00d0      	lsls	r0, r2, #3
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	1912      	adds	r2, r2, r4
 8004194:	eb45 0303 	adc.w	r3, r5, r3
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0299      	lsls	r1, r3, #10
 80041a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041a6:	0290      	lsls	r0, r2, #10
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	f7fc f82c 	bl	8000214 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x358>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0f1b      	lsrs	r3, r3, #28
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	61bb      	str	r3, [r7, #24]
      break;
 80041da:	e002      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041de:	61bb      	str	r3, [r7, #24]
      break;
 80041e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e2:	69bb      	ldr	r3, [r7, #24]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	007a1200 	.word	0x007a1200

080041fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e28d      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8083 	beq.w	8004322 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800421c:	4b94      	ldr	r3, [pc, #592]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b04      	cmp	r3, #4
 8004226:	d019      	beq.n	800425c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004228:	4b91      	ldr	r3, [pc, #580]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004230:	2b08      	cmp	r3, #8
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004234:	4b8e      	ldr	r3, [pc, #568]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b8b      	ldr	r3, [pc, #556]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d112      	bne.n	8004274 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4b84      	ldr	r3, [pc, #528]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <HAL_RCC_OscConfig+0x124>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e25a      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d106      	bne.n	800428c <HAL_RCC_OscConfig+0x90>
 800427e:	4b7c      	ldr	r3, [pc, #496]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7b      	ldr	r2, [pc, #492]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xcc>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0xb4>
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b73      	ldr	r3, [pc, #460]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a72      	ldr	r2, [pc, #456]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xcc>
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6e      	ldr	r2, [pc, #440]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6b      	ldr	r2, [pc, #428]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fcc4 	bl	8001c5c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd fcc0 	bl	8001c5c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e21f      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xdc>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd fcb0 	bl	8001c5c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd fcac 	bl	8001c5c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e20b      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b57      	ldr	r3, [pc, #348]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x104>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d06f      	beq.n	800440e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800432e:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d017      	beq.n	800436a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d105      	bne.n	8004352 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004346:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b44      	ldr	r3, [pc, #272]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b41      	ldr	r3, [pc, #260]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x186>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1d3      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4937      	ldr	r1, [pc, #220]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <HAL_RCC_OscConfig+0x278>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fd fc59 	bl	8001c5c <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fd fc55 	bl	8001c5c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1b4      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4925      	ldr	r1, [pc, #148]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x278>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fc38 	bl	8001c5c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fd fc34 	bl	8001c5c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e193      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fd fc18 	bl	8001c5c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fd fc14 	bl	8001c5c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e173      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_OscConfig+0x274>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x234>
 800444e:	e01b      	b.n	8004488 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd fc01 	bl	8001c5c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e00e      	b.n	800447c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fd fbfd 	bl	8001c5c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d907      	bls.n	800447c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e15c      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
 8004470:	40023800 	.word	0x40023800
 8004474:	42470000 	.word	0x42470000
 8004478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	4b8a      	ldr	r3, [pc, #552]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ea      	bne.n	800445e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8097 	beq.w	80045c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4b83      	ldr	r3, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	4b7f      	ldr	r3, [pc, #508]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a7e      	ldr	r2, [pc, #504]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b7c      	ldr	r3, [pc, #496]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b79      	ldr	r3, [pc, #484]	; (80046ac <HAL_RCC_OscConfig+0x4b0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCC_OscConfig+0x4b0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	; (80046ac <HAL_RCC_OscConfig+0x4b0>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fd fbbd 	bl	8001c5c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fd fbb9 	bl	8001c5c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e118      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <HAL_RCC_OscConfig+0x4b0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x31e>
 800450c:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a65      	ldr	r2, [pc, #404]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	e01c      	b.n	8004554 <HAL_RCC_OscConfig+0x358>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b05      	cmp	r3, #5
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x340>
 8004522:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a60      	ldr	r2, [pc, #384]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	4b5e      	ldr	r3, [pc, #376]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a5d      	ldr	r2, [pc, #372]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0x358>
 800453c:	4b5a      	ldr	r3, [pc, #360]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a59      	ldr	r2, [pc, #356]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	4b57      	ldr	r3, [pc, #348]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	f023 0304 	bic.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd fb7e 	bl	8001c5c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	e00a      	b.n	800457a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fd fb7a 	bl	8001c5c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0d7      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	4b4b      	ldr	r3, [pc, #300]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ee      	beq.n	8004564 <HAL_RCC_OscConfig+0x368>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fd fb68 	bl	8001c5c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fd fb64 	bl	8001c5c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0c1      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a6:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ee      	bne.n	8004590 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80ad 	beq.w	8004728 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d060      	beq.n	800469c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d145      	bne.n	800466e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <HAL_RCC_OscConfig+0x4b4>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fb38 	bl	8001c5c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fb34 	bl	8001c5c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e093      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	491b      	ldr	r1, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x4b4>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fb09 	bl	8001c5c <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fb05 	bl	8001c5c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e064      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x452>
 800466c:	e05c      	b.n	8004728 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_RCC_OscConfig+0x4b4>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd faf2 	bl	8001c5c <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd faee 	bl	8001c5c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e04d      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x480>
 800469a:	e045      	b.n	8004728 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e040      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_RCC_OscConfig+0x538>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d030      	beq.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d129      	bne.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d122      	bne.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d119      	bne.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	3b01      	subs	r3, #1
 80046fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d10f      	bne.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07b      	b.n	8004842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d009      	beq.n	8004770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
 8004762:	e005      	b.n	8004770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f8a8 	bl	80018e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	ea42 0103 	orr.w	r1, r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0104 	and.w	r1, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0210 	and.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b088      	sub	sp, #32
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_SPI_Transmit+0x22>
 8004868:	2302      	movs	r3, #2
 800486a:	e126      	b.n	8004aba <HAL_SPI_Transmit+0x270>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004874:	f7fd f9f2 	bl	8001c5c <HAL_GetTick>
 8004878:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800488e:	e10b      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0x52>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a0:	e102      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e8:	d10f      	bne.n	800490a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d007      	beq.n	8004928 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d14b      	bne.n	80049ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Transmit+0xf6>
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d13e      	bne.n	80049be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004964:	e02b      	b.n	80049be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d112      	bne.n	800499a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	86da      	strh	r2, [r3, #54]	; 0x36
 8004998:	e011      	b.n	80049be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800499a:	f7fd f95f 	bl	8001c5c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d803      	bhi.n	80049b2 <HAL_SPI_Transmit+0x168>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_Transmit+0x16e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049bc:	e074      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ce      	bne.n	8004966 <HAL_SPI_Transmit+0x11c>
 80049c8:	e04c      	b.n	8004a64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Transmit+0x18e>
 80049d2:	8afb      	ldrh	r3, [r7, #22]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d140      	bne.n	8004a5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049fe:	e02c      	b.n	8004a5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d113      	bne.n	8004a36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a34:	e011      	b.n	8004a5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a36:	f7fd f911 	bl	8001c5c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d803      	bhi.n	8004a4e <HAL_SPI_Transmit+0x204>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_Transmit+0x20a>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a58:	e026      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1cd      	bne.n	8004a00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fbcb 	bl	8005204 <SPI_EndRxTxTransaction>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a82:	2300      	movs	r3, #0
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e000      	b.n	8004aa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af02      	add	r7, sp, #8
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Receive+0x44>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2204      	movs	r2, #4
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f8f1 	bl	8004ce4 <HAL_SPI_TransmitReceive>
 8004b02:	4603      	mov	r3, r0
 8004b04:	e0ea      	b.n	8004cdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_SPI_Receive+0x52>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0e3      	b.n	8004cdc <HAL_SPI_Receive+0x21a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b1c:	f7fd f89e 	bl	8001c5c <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b32:	e0ca      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Receive+0x7e>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b44:	e0c1      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d10f      	bne.n	8004bae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d007      	beq.n	8004bcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d162      	bne.n	8004c9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bd4:	e02e      	b.n	8004c34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d115      	bne.n	8004c10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f103 020c 	add.w	r2, r3, #12
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0e:	e011      	b.n	8004c34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c10:	f7fd f824 	bl	8001c5c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d803      	bhi.n	8004c28 <HAL_SPI_Receive+0x166>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Receive+0x16c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c32:	e04a      	b.n	8004cca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1cb      	bne.n	8004bd6 <HAL_SPI_Receive+0x114>
 8004c3e:	e031      	b.n	8004ca4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d113      	bne.n	8004c76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fc fff1 	bl	8001c5c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Receive+0x1cc>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Receive+0x1d2>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c98:	e017      	b.n	8004cca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cd      	bne.n	8004c40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fa45 	bl	8005138 <SPI_EndRxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
 8004cc6:	e000      	b.n	8004cca <HAL_SPI_Receive+0x208>
  }

error :
 8004cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x26>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e18a      	b.n	8005020 <HAL_SPI_TransmitReceive+0x33c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d12:	f7fc ffa3 	bl	8001c5c <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d00f      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x70>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d107      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x68>
 8004d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d003      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d52:	e15b      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x82>
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d6c:	e14e      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	887a      	ldrh	r2, [r7, #2]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	887a      	ldrh	r2, [r7, #2]
 8004daa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d007      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dde:	d178      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x10a>
 8004de8:	8b7b      	ldrh	r3, [r7, #26]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d166      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	e053      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11b      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d016      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d113      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d119      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x1b8>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d014      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e9c:	f7fc fede 	bl	8001c5c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d807      	bhi.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d003      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eba:	e0a7      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1a6      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x130>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1a1      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x130>
 8004ed0:	e07c      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x1fc>
 8004eda:	8b7b      	ldrh	r3, [r7, #26]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d16b      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f06:	e057      	b.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d11c      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d114      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d119      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x2ae>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d014      	beq.n	8004f92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f92:	f7fc fe63 	bl	8001c5c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d803      	bhi.n	8004faa <HAL_SPI_TransmitReceive+0x2c6>
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2cc>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fb6:	e029      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1a2      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x224>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d19d      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f917 	bl	8005204 <SPI_EndRxTxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fe8:	e010      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	e000      	b.n	800500c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800500a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005038:	f7fc fe10 	bl	8001c5c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005048:	f7fc fe08 	bl	8001c5c <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	e054      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d050      	beq.n	800510a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005068:	f7fc fdf8 	bl	8001c5c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d13d      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800508c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005096:	d111      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	d004      	beq.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d107      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d10f      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e017      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3b01      	subs	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d19b      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000

08005138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514c:	d111      	bne.n	8005172 <SPI_EndRxTransaction+0x3a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005156:	d004      	beq.n	8005162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d107      	bne.n	8005172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005170:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517a:	d12a      	bne.n	80051d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d012      	beq.n	80051ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff49 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02d      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e026      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2101      	movs	r1, #1
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff36 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01a      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e013      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	2101      	movs	r1, #1
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff23 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e000      	b.n	80051fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <SPI_EndRxTxTransaction+0x7c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <SPI_EndRxTxTransaction+0x80>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0d5b      	lsrs	r3, r3, #21
 800521c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522e:	d112      	bne.n	8005256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff fef4 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e00f      	b.n	8005276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d0f2      	beq.n	8005256 <SPI_EndRxTxTransaction+0x52>
 8005270:	e000      	b.n	8005274 <SPI_EndRxTxTransaction+0x70>
        break;
 8005272:	bf00      	nop
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000000 	.word	0x20000000
 8005284:	165e9f81 	.word	0x165e9f81

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fb5e 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 f9ce 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e04e      	b.n	80053de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_TIM_Base_Start_IT+0xc4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d01d      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_TIM_Base_Start_IT+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIM_Base_Start_IT+0xdc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d010      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e007      	b.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0202 	mvn.w	r2, #2
 8005434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8ee 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8e0 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f8f1 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b04      	cmp	r3, #4
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0204 	mvn.w	r2, #4
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8c4 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8b6 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f8c7 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d122      	bne.n	800550c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0208 	mvn.w	r2, #8
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f89a 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f88c 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f89d 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0210 	mvn.w	r2, #16
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2208      	movs	r2, #8
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f870 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f862 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f873 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0201 	mvn.w	r2, #1
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb ffd6 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f902 	bl	80057bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f838 	bl	8005654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d10e      	bne.n	8005610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0220 	mvn.w	r2, #32
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8cc 	bl	80057a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a40      	ldr	r2, [pc, #256]	; (800577c <TIM_Base_SetConfig+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d00f      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3d      	ldr	r2, [pc, #244]	; (8005780 <TIM_Base_SetConfig+0x118>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00b      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3c      	ldr	r2, [pc, #240]	; (8005784 <TIM_Base_SetConfig+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3b      	ldr	r2, [pc, #236]	; (8005788 <TIM_Base_SetConfig+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3a      	ldr	r2, [pc, #232]	; (800578c <TIM_Base_SetConfig+0x124>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2f      	ldr	r2, [pc, #188]	; (800577c <TIM_Base_SetConfig+0x114>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d027      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <TIM_Base_SetConfig+0x118>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d023      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <TIM_Base_SetConfig+0x11c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01f      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <TIM_Base_SetConfig+0x120>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a29      	ldr	r2, [pc, #164]	; (800578c <TIM_Base_SetConfig+0x124>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d017      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a28      	ldr	r2, [pc, #160]	; (8005790 <TIM_Base_SetConfig+0x128>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a27      	ldr	r2, [pc, #156]	; (8005794 <TIM_Base_SetConfig+0x12c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00f      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a26      	ldr	r2, [pc, #152]	; (8005798 <TIM_Base_SetConfig+0x130>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00b      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a25      	ldr	r2, [pc, #148]	; (800579c <TIM_Base_SetConfig+0x134>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a24      	ldr	r2, [pc, #144]	; (80057a0 <TIM_Base_SetConfig+0x138>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <TIM_Base_SetConfig+0x13c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <TIM_Base_SetConfig+0x114>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_Base_SetConfig+0xf8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a0c      	ldr	r2, [pc, #48]	; (800578c <TIM_Base_SetConfig+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d103      	bne.n	8005768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	615a      	str	r2, [r3, #20]
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40010400 	.word	0x40010400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	40001800 	.word	0x40001800
 80057a0:	40001c00 	.word	0x40001c00
 80057a4:	40002000 	.word	0x40002000

080057a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e03f      	b.n	8005862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fc f8e2 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	; 0x24
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f9a7 	bl	8005b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b08a      	sub	sp, #40	; 0x28
 800586e:	af02      	add	r7, sp, #8
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b20      	cmp	r3, #32
 8005888:	d17c      	bne.n	8005984 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_UART_Transmit+0x2c>
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e075      	b.n	8005986 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Transmit+0x3e>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e06e      	b.n	8005986 <HAL_UART_Transmit+0x11c>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058be:	f7fc f9cd 	bl	8001c5c <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	88fa      	ldrh	r2, [r7, #6]
 80058ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d8:	d108      	bne.n	80058ec <HAL_UART_Transmit+0x82>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e003      	b.n	80058f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058fc:	e02a      	b.n	8005954 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	2180      	movs	r1, #128	; 0x80
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8e2 	bl	8005ad2 <UART_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e036      	b.n	8005986 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800592c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	3302      	adds	r3, #2
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	e007      	b.n	8005946 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	3301      	adds	r3, #1
 8005944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1cf      	bne.n	80058fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	2140      	movs	r1, #64	; 0x40
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f8b2 	bl	8005ad2 <UART_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e006      	b.n	8005986 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b08a      	sub	sp, #40	; 0x28
 8005992:	af02      	add	r7, sp, #8
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	f040 808c 	bne.w	8005ac8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Receive+0x2e>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e084      	b.n	8005aca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Receive+0x40>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e07d      	b.n	8005aca <HAL_UART_Receive+0x13c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2222      	movs	r2, #34	; 0x22
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ea:	f7fc f937 	bl	8001c5c <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d108      	bne.n	8005a18 <HAL_UART_Receive+0x8a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e003      	b.n	8005a20 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a28:	e043      	b.n	8005ab2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2120      	movs	r1, #32
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f84c 	bl	8005ad2 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e042      	b.n	8005aca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	3302      	adds	r3, #2
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e01f      	b.n	8005aa4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6c:	d007      	beq.n	8005a7e <HAL_UART_Receive+0xf0>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_UART_Receive+0xfe>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e008      	b.n	8005a9e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1b6      	bne.n	8005a2a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae2:	e02c      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d028      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005af2:	f7fc f8b3 	bl	8001c5c <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d21d      	bcs.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e00f      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d0c3      	beq.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	b09f      	sub	sp, #124	; 0x7c
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	68d9      	ldr	r1, [r3, #12]
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	ea40 0301 	orr.w	r3, r0, r1
 8005b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bac:	f021 010c 	bic.w	r1, r1, #12
 8005bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	6999      	ldr	r1, [r3, #24]
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	ea40 0301 	orr.w	r3, r0, r1
 8005bd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4bc5      	ldr	r3, [pc, #788]	; (8005eec <UART_SetConfig+0x384>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d004      	beq.n	8005be6 <UART_SetConfig+0x7e>
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4bc3      	ldr	r3, [pc, #780]	; (8005ef0 <UART_SetConfig+0x388>)
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d103      	bne.n	8005bee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be6:	f7fd fe19 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8005bea:	6778      	str	r0, [r7, #116]	; 0x74
 8005bec:	e002      	b.n	8005bf4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fd fe01 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005bf2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	f040 80b6 	bne.w	8005d6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c02:	461c      	mov	r4, r3
 8005c04:	f04f 0500 	mov.w	r5, #0
 8005c08:	4622      	mov	r2, r4
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	6439      	str	r1, [r7, #64]	; 0x40
 8005c10:	415b      	adcs	r3, r3
 8005c12:	647b      	str	r3, [r7, #68]	; 0x44
 8005c14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c18:	1912      	adds	r2, r2, r4
 8005c1a:	eb45 0303 	adc.w	r3, r5, r3
 8005c1e:	f04f 0000 	mov.w	r0, #0
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	00d9      	lsls	r1, r3, #3
 8005c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c2c:	00d0      	lsls	r0, r2, #3
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	1911      	adds	r1, r2, r4
 8005c34:	6639      	str	r1, [r7, #96]	; 0x60
 8005c36:	416b      	adcs	r3, r5
 8005c38:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c54:	f7fa fade 	bl	8000214 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4ba5      	ldr	r3, [pc, #660]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	011e      	lsls	r6, r3, #4
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	461c      	mov	r4, r3
 8005c6a:	f04f 0500 	mov.w	r5, #0
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	6339      	str	r1, [r7, #48]	; 0x30
 8005c76:	415b      	adcs	r3, r3
 8005c78:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c7e:	1912      	adds	r2, r2, r4
 8005c80:	eb45 0303 	adc.w	r3, r5, r3
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	00d9      	lsls	r1, r3, #3
 8005c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c92:	00d0      	lsls	r0, r2, #3
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	1911      	adds	r1, r2, r4
 8005c9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c9c:	416b      	adcs	r3, r5
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	1891      	adds	r1, r2, r2
 8005cac:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cae:	415b      	adcs	r3, r3
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cba:	f7fa faab 	bl	8000214 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4b8c      	ldr	r3, [pc, #560]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	; 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	3332      	adds	r3, #50	; 0x32
 8005cd6:	4a87      	ldr	r2, [pc, #540]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce4:	441e      	add	r6, r3
 8005ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	1894      	adds	r4, r2, r2
 8005cf4:	623c      	str	r4, [r7, #32]
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cfe:	1812      	adds	r2, r2, r0
 8005d00:	eb41 0303 	adc.w	r3, r1, r3
 8005d04:	f04f 0400 	mov.w	r4, #0
 8005d08:	f04f 0500 	mov.w	r5, #0
 8005d0c:	00dd      	lsls	r5, r3, #3
 8005d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d12:	00d4      	lsls	r4, r2, #3
 8005d14:	4622      	mov	r2, r4
 8005d16:	462b      	mov	r3, r5
 8005d18:	1814      	adds	r4, r2, r0
 8005d1a:	653c      	str	r4, [r7, #80]	; 0x50
 8005d1c:	414b      	adcs	r3, r1
 8005d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	461a      	mov	r2, r3
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	1891      	adds	r1, r2, r2
 8005d2c:	61b9      	str	r1, [r7, #24]
 8005d2e:	415b      	adcs	r3, r3
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d3a:	f7fa fa6b 	bl	8000214 <__aeabi_uldivmod>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4b6c      	ldr	r3, [pc, #432]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005d44:	fba3 1302 	umull	r1, r3, r3, r2
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	2164      	movs	r1, #100	; 0x64
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	3332      	adds	r3, #50	; 0x32
 8005d56:	4a67      	ldr	r2, [pc, #412]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005d58:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	f003 0207 	and.w	r2, r3, #7
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4432      	add	r2, r6
 8005d68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d6a:	e0b9      	b.n	8005ee0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6e:	461c      	mov	r4, r3
 8005d70:	f04f 0500 	mov.w	r5, #0
 8005d74:	4622      	mov	r2, r4
 8005d76:	462b      	mov	r3, r5
 8005d78:	1891      	adds	r1, r2, r2
 8005d7a:	6139      	str	r1, [r7, #16]
 8005d7c:	415b      	adcs	r3, r3
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d84:	1912      	adds	r2, r2, r4
 8005d86:	eb45 0303 	adc.w	r3, r5, r3
 8005d8a:	f04f 0000 	mov.w	r0, #0
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	00d9      	lsls	r1, r3, #3
 8005d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d98:	00d0      	lsls	r0, r2, #3
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	eb12 0804 	adds.w	r8, r2, r4
 8005da2:	eb43 0905 	adc.w	r9, r3, r5
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	008b      	lsls	r3, r1, #2
 8005dba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dbe:	0082      	lsls	r2, r0, #2
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	f7fa fa26 	bl	8000214 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4b49      	ldr	r3, [pc, #292]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005dce:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	011e      	lsls	r6, r3, #4
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f04f 0100 	mov.w	r1, #0
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	1894      	adds	r4, r2, r2
 8005de4:	60bc      	str	r4, [r7, #8]
 8005de6:	415b      	adcs	r3, r3
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dee:	1812      	adds	r2, r2, r0
 8005df0:	eb41 0303 	adc.w	r3, r1, r3
 8005df4:	f04f 0400 	mov.w	r4, #0
 8005df8:	f04f 0500 	mov.w	r5, #0
 8005dfc:	00dd      	lsls	r5, r3, #3
 8005dfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e02:	00d4      	lsls	r4, r2, #3
 8005e04:	4622      	mov	r2, r4
 8005e06:	462b      	mov	r3, r5
 8005e08:	1814      	adds	r4, r2, r0
 8005e0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e0c:	414b      	adcs	r3, r1
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f04f 0100 	mov.w	r1, #0
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	008b      	lsls	r3, r1, #2
 8005e24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e28:	0082      	lsls	r2, r0, #2
 8005e2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e2e:	f7fa f9f1 	bl	8000214 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4b2f      	ldr	r3, [pc, #188]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005e38:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	2164      	movs	r1, #100	; 0x64
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	3332      	adds	r3, #50	; 0x32
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e56:	441e      	add	r6, r3
 8005e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	1894      	adds	r4, r2, r2
 8005e66:	603c      	str	r4, [r7, #0]
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e70:	1812      	adds	r2, r2, r0
 8005e72:	eb41 0303 	adc.w	r3, r1, r3
 8005e76:	f04f 0400 	mov.w	r4, #0
 8005e7a:	f04f 0500 	mov.w	r5, #0
 8005e7e:	00dd      	lsls	r5, r3, #3
 8005e80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e84:	00d4      	lsls	r4, r2, #3
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	eb12 0a00 	adds.w	sl, r2, r0
 8005e8e:	eb43 0b01 	adc.w	fp, r3, r1
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f04f 0100 	mov.w	r1, #0
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	008b      	lsls	r3, r1, #2
 8005ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005eaa:	0082      	lsls	r2, r0, #2
 8005eac:	4650      	mov	r0, sl
 8005eae:	4659      	mov	r1, fp
 8005eb0:	f7fa f9b0 	bl	8000214 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005eba:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	2164      	movs	r1, #100	; 0x64
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	3332      	adds	r3, #50	; 0x32
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <UART_SetConfig+0x38c>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f003 020f 	and.w	r2, r3, #15
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4432      	add	r2, r6
 8005ede:	609a      	str	r2, [r3, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	377c      	adds	r7, #124	; 0x7c
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	40011400 	.word	0x40011400
 8005ef4:	51eb851f 	.word	0x51eb851f

08005ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ef8:	b084      	sub	sp, #16
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	f107 001c 	add.w	r0, r7, #28
 8005f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d122      	bne.n	8005f56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fac0 	bl	80074d0 <USB_CoreReset>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e01a      	b.n	8005f8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fab4 	bl	80074d0 <USB_CoreReset>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f7e:	e005      	b.n	8005f8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10b      	bne.n	8005faa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f043 0206 	orr.w	r2, r3, #6
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb6:	b004      	add	sp, #16
 8005fb8:	4770      	bx	lr
	...

08005fbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d165      	bne.n	800609c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a41      	ldr	r2, [pc, #260]	; (80060d8 <USB_SetTurnaroundTime+0x11c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d906      	bls.n	8005fe6 <USB_SetTurnaroundTime+0x2a>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a40      	ldr	r2, [pc, #256]	; (80060dc <USB_SetTurnaroundTime+0x120>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d202      	bcs.n	8005fe6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fe0:	230f      	movs	r3, #15
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e062      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <USB_SetTurnaroundTime+0x120>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d306      	bcc.n	8005ffc <USB_SetTurnaroundTime+0x40>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <USB_SetTurnaroundTime+0x124>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d202      	bcs.n	8005ffc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ff6:	230e      	movs	r3, #14
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e057      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4a38      	ldr	r2, [pc, #224]	; (80060e0 <USB_SetTurnaroundTime+0x124>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d306      	bcc.n	8006012 <USB_SetTurnaroundTime+0x56>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <USB_SetTurnaroundTime+0x128>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d202      	bcs.n	8006012 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800600c:	230d      	movs	r3, #13
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e04c      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a33      	ldr	r2, [pc, #204]	; (80060e4 <USB_SetTurnaroundTime+0x128>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d306      	bcc.n	8006028 <USB_SetTurnaroundTime+0x6c>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4a32      	ldr	r2, [pc, #200]	; (80060e8 <USB_SetTurnaroundTime+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d802      	bhi.n	8006028 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006022:	230c      	movs	r3, #12
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e041      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a2f      	ldr	r2, [pc, #188]	; (80060e8 <USB_SetTurnaroundTime+0x12c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d906      	bls.n	800603e <USB_SetTurnaroundTime+0x82>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <USB_SetTurnaroundTime+0x130>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d802      	bhi.n	800603e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006038:	230b      	movs	r3, #11
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e036      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <USB_SetTurnaroundTime+0x130>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d906      	bls.n	8006054 <USB_SetTurnaroundTime+0x98>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <USB_SetTurnaroundTime+0x134>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d802      	bhi.n	8006054 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800604e:	230a      	movs	r3, #10
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e02b      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <USB_SetTurnaroundTime+0x134>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d906      	bls.n	800606a <USB_SetTurnaroundTime+0xae>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <USB_SetTurnaroundTime+0x138>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d202      	bcs.n	800606a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006064:	2309      	movs	r3, #9
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e020      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <USB_SetTurnaroundTime+0x138>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d306      	bcc.n	8006080 <USB_SetTurnaroundTime+0xc4>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <USB_SetTurnaroundTime+0x13c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d802      	bhi.n	8006080 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800607a:	2308      	movs	r3, #8
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e015      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <USB_SetTurnaroundTime+0x13c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d906      	bls.n	8006096 <USB_SetTurnaroundTime+0xda>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <USB_SetTurnaroundTime+0x140>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d202      	bcs.n	8006096 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006090:	2307      	movs	r3, #7
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e00a      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006096:	2306      	movs	r3, #6
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e007      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060a2:	2309      	movs	r3, #9
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e001      	b.n	80060ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060a8:	2309      	movs	r3, #9
 80060aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	029b      	lsls	r3, r3, #10
 80060c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	00d8acbf 	.word	0x00d8acbf
 80060dc:	00e4e1c0 	.word	0x00e4e1c0
 80060e0:	00f42400 	.word	0x00f42400
 80060e4:	01067380 	.word	0x01067380
 80060e8:	011a499f 	.word	0x011a499f
 80060ec:	01312cff 	.word	0x01312cff
 80060f0:	014ca43f 	.word	0x014ca43f
 80060f4:	016e3600 	.word	0x016e3600
 80060f8:	01a6ab1f 	.word	0x01a6ab1f
 80060fc:	01e84800 	.word	0x01e84800

08006100 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f043 0201 	orr.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d106      	bne.n	8006170 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e00b      	b.n	8006188 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	e001      	b.n	8006188 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e003      	b.n	8006190 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006188:	2032      	movs	r0, #50	; 0x32
 800618a:	f7fb fd73 	bl	8001c74 <HAL_Delay>

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006198:	b084      	sub	sp, #16
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e009      	b.n	80061cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	3340      	adds	r3, #64	; 0x40
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b0e      	cmp	r3, #14
 80061d0:	d9f2      	bls.n	80061b8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11c      	bne.n	8006212 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e6:	f043 0302 	orr.w	r3, r3, #2
 80061ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e005      	b.n	800621e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006224:	461a      	mov	r2, r3
 8006226:	2300      	movs	r3, #0
 8006228:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	4619      	mov	r1, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	461a      	mov	r2, r3
 800623a:	680b      	ldr	r3, [r1, #0]
 800623c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10c      	bne.n	800625e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800624a:	2100      	movs	r1, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f949 	bl	80064e4 <USB_SetDevSpeed>
 8006252:	e008      	b.n	8006266 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006254:	2101      	movs	r1, #1
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f944 	bl	80064e4 <USB_SetDevSpeed>
 800625c:	e003      	b.n	8006266 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800625e:	2103      	movs	r1, #3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f93f 	bl	80064e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006266:	2110      	movs	r1, #16
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f8f3 	bl	8006454 <USB_FlushTxFifo>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f911 	bl	80064a0 <USB_FlushRxFifo>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	461a      	mov	r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	e043      	b.n	800633a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c8:	d118      	bne.n	80062fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e013      	b.n	800630e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e008      	b.n	800630e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	461a      	mov	r2, r3
 800630a:	2300      	movs	r3, #0
 800630c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	461a      	mov	r2, r3
 800632e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3301      	adds	r3, #1
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d3b7      	bcc.n	80062b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e043      	b.n	80063d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800635a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800635e:	d118      	bne.n	8006392 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	461a      	mov	r2, r3
 8006374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e013      	b.n	80063a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	461a      	mov	r2, r3
 800638a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e008      	b.n	80063a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	461a      	mov	r2, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3301      	adds	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d3b7      	bcc.n	8006348 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f043 0210 	orr.w	r2, r3, #16
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <USB_DevInit+0x2b8>)
 8006412:	4313      	orrs	r3, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f043 0208 	orr.w	r2, r3, #8
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d107      	bne.n	8006440 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006438:	f043 0304 	orr.w	r3, r3, #4
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800644c:	b004      	add	sp, #16
 800644e:	4770      	bx	lr
 8006450:	803c3800 	.word	0x803c3800

08006454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	019b      	lsls	r3, r3, #6
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <USB_FlushTxFifo+0x48>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d901      	bls.n	8006480 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b20      	cmp	r3, #32
 800648a:	d0f0      	beq.n	800646e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	00030d40 	.word	0x00030d40

080064a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2210      	movs	r2, #16
 80064b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <USB_FlushRxFifo+0x40>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d0f0      	beq.n	80064b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	00030d40 	.word	0x00030d40

080064e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	68f9      	ldr	r1, [r7, #12]
 8006500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b087      	sub	sp, #28
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0306 	and.w	r3, r3, #6
 800652e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]
 800653a:	e00a      	b.n	8006552 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d002      	beq.n	8006548 <USB_GetDevSpeed+0x32>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b06      	cmp	r3, #6
 8006546:	d102      	bne.n	800654e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006548:	2302      	movs	r3, #2
 800654a:	75fb      	strb	r3, [r7, #23]
 800654c:	e001      	b.n	8006552 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800654e:	230f      	movs	r3, #15
 8006550:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
}
 8006554:	4618      	mov	r0, r3
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d13a      	bne.n	80065f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	b29b      	uxth	r3, r3
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659a:	4313      	orrs	r3, r2
 800659c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d155      	bne.n	8006660 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	059b      	lsls	r3, r3, #22
 80065d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065d8:	4313      	orrs	r3, r2
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e036      	b.n	8006660 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	2101      	movs	r1, #1
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006610:	4313      	orrs	r3, r2
 8006612:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11a      	bne.n	8006660 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	78db      	ldrb	r3, [r3, #3]
 8006644:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006646:	430b      	orrs	r3, r1
 8006648:	4313      	orrs	r3, r2
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d161      	bne.n	8006750 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a2:	d11f      	bne.n	80066e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f303 	lsl.w	r3, r1, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006704:	4013      	ands	r3, r2
 8006706:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	2101      	movs	r1, #1
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	b29b      	uxth	r3, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006728:	4013      	ands	r3, r2
 800672a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	0159      	lsls	r1, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	440b      	add	r3, r1
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	4619      	mov	r1, r3
 8006748:	4b35      	ldr	r3, [pc, #212]	; (8006820 <USB_DeactivateEndpoint+0x1b0>)
 800674a:	4013      	ands	r3, r2
 800674c:	600b      	str	r3, [r1, #0]
 800674e:	e060      	b.n	8006812 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006766:	d11f      	bne.n	80067a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006786:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	2101      	movs	r1, #1
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	43db      	mvns	r3, r3
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c8:	4013      	ands	r3, r2
 80067ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	2101      	movs	r1, #1
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	43db      	mvns	r3, r3
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ec:	4013      	ands	r3, r2
 80067ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	0159      	lsls	r1, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	440b      	add	r3, r1
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	4619      	mov	r1, r3
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <USB_DeactivateEndpoint+0x1b4>)
 800680e:	4013      	ands	r3, r2
 8006810:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	ec337800 	.word	0xec337800
 8006824:	eff37800 	.word	0xeff37800

08006828 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	f040 815c 	bne.w	8006b02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d132      	bne.n	80068b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b0:	0cdb      	lsrs	r3, r3, #19
 80068b2:	04db      	lsls	r3, r3, #19
 80068b4:	6113      	str	r3, [r2, #16]
 80068b6:	e074      	b.n	80069a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d2:	0cdb      	lsrs	r3, r3, #19
 80068d4:	04db      	lsls	r3, r3, #19
 80068d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6959      	ldr	r1, [r3, #20]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	440b      	add	r3, r1
 8006914:	1e59      	subs	r1, r3, #1
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	fbb1 f3f3 	udiv	r3, r1, r3
 800691e:	04d9      	lsls	r1, r3, #19
 8006920:	4b9d      	ldr	r3, [pc, #628]	; (8006b98 <USB_EPStartXfer+0x370>)
 8006922:	400b      	ands	r3, r1
 8006924:	69b9      	ldr	r1, [r7, #24]
 8006926:	0148      	lsls	r0, r1, #5
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	4401      	add	r1, r0
 800692c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	691a      	ldr	r2, [r3, #16]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	0148      	lsls	r0, r1, #5
 800694e:	69f9      	ldr	r1, [r7, #28]
 8006950:	4401      	add	r1, r0
 8006952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006956:	4313      	orrs	r3, r2
 8006958:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	78db      	ldrb	r3, [r3, #3]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d11f      	bne.n	80069a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006980:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d14b      	bne.n	8006a40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	78db      	ldrb	r3, [r3, #3]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d128      	bne.n	8006a1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d110      	bne.n	80069fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	e00f      	b.n	8006a1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e12f      	b.n	8006ca0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d015      	beq.n	8006a94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8117 	beq.w	8006ca0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	2101      	movs	r1, #1
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	69f9      	ldr	r1, [r7, #28]
 8006a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	634b      	str	r3, [r1, #52]	; 0x34
 8006a92:	e105      	b.n	8006ca0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d110      	bne.n	8006ac6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	e00f      	b.n	8006ae6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	68d9      	ldr	r1, [r3, #12]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	b298      	uxth	r0, r3
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4603      	mov	r3, r0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fa2b 	bl	8006f56 <USB_WritePacket>
 8006b00:	e0ce      	b.n	8006ca0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1c:	0cdb      	lsrs	r3, r3, #19
 8006b1e:	04db      	lsls	r3, r3, #19
 8006b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d126      	bne.n	8006b9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b64:	69b9      	ldr	r1, [r7, #24]
 8006b66:	0148      	lsls	r0, r1, #5
 8006b68:	69f9      	ldr	r1, [r7, #28]
 8006b6a:	4401      	add	r1, r0
 8006b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b70:	4313      	orrs	r3, r2
 8006b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b92:	6113      	str	r3, [r2, #16]
 8006b94:	e036      	b.n	8006c04 <USB_EPStartXfer+0x3dc>
 8006b96:	bf00      	nop
 8006b98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	1e5a      	subs	r2, r3, #1
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	8afb      	ldrh	r3, [r7, #22]
 8006bc2:	04d9      	lsls	r1, r3, #19
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <USB_EPStartXfer+0x484>)
 8006bc6:	400b      	ands	r3, r1
 8006bc8:	69b9      	ldr	r1, [r7, #24]
 8006bca:	0148      	lsls	r0, r1, #5
 8006bcc:	69f9      	ldr	r1, [r7, #28]
 8006bce:	4401      	add	r1, r0
 8006bd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	8af9      	ldrh	r1, [r7, #22]
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	0148      	lsls	r0, r1, #5
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	4401      	add	r1, r0
 8006bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c00:	4313      	orrs	r3, r2
 8006c02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10d      	bne.n	8006c26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68d9      	ldr	r1, [r3, #12]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	460a      	mov	r2, r1
 8006c24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d128      	bne.n	8006c80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d110      	bne.n	8006c60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e00f      	b.n	8006c80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	1ff80000 	.word	0x1ff80000

08006cb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f040 80cd 	bne.w	8006e6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d132      	bne.n	8006d40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d38:	0cdb      	lsrs	r3, r3, #19
 8006d3a:	04db      	lsls	r3, r3, #19
 8006d3c:	6113      	str	r3, [r2, #16]
 8006d3e:	e04e      	b.n	8006dde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	0cdb      	lsrs	r3, r3, #19
 8006d5c:	04db      	lsls	r3, r3, #19
 8006d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d903      	bls.n	8006d98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dce:	6939      	ldr	r1, [r7, #16]
 8006dd0:	0148      	lsls	r0, r1, #5
 8006dd2:	6979      	ldr	r1, [r7, #20]
 8006dd4:	4401      	add	r1, r0
 8006dd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d11e      	bne.n	8006e22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	e092      	b.n	8006f48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d07e      	beq.n	8006f48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e60:	6979      	ldr	r1, [r7, #20]
 8006e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e66:	4313      	orrs	r3, r2
 8006e68:	634b      	str	r3, [r1, #52]	; 0x34
 8006e6a:	e06d      	b.n	8006f48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e86:	0cdb      	lsrs	r3, r3, #19
 8006e88:	04db      	lsls	r3, r3, #19
 8006e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ede:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef6:	6939      	ldr	r1, [r7, #16]
 8006ef8:	0148      	lsls	r0, r1, #5
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	4401      	add	r1, r0
 8006efe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f02:	4313      	orrs	r3, r2
 8006f04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d10d      	bne.n	8006f28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	68d9      	ldr	r1, [r3, #12]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	460a      	mov	r2, r1
 8006f26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b089      	sub	sp, #36	; 0x24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	4611      	mov	r1, r2
 8006f62:	461a      	mov	r2, r3
 8006f64:	460b      	mov	r3, r1
 8006f66:	71fb      	strb	r3, [r7, #7]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006f74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11a      	bne.n	8006fb2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f7c:	88bb      	ldrh	r3, [r7, #4]
 8006f7e:	3303      	adds	r3, #3
 8006f80:	089b      	lsrs	r3, r3, #2
 8006f82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e00f      	b.n	8006faa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	031a      	lsls	r2, r3, #12
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f96:	461a      	mov	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d3eb      	bcc.n	8006f8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3724      	adds	r7, #36	; 0x24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	3303      	adds	r3, #3
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	e00b      	b.n	8006ffc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3ef      	bcc.n	8006fe4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007004:	69fb      	ldr	r3, [r7, #28]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d12c      	bne.n	8007088 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	db12      	blt.n	8007066 <USB_EPSetStall+0x54>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00f      	beq.n	8007066 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007064:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	e02b      	b.n	80070e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	db12      	blt.n	80070c0 <USB_EPSetStall+0xae>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d128      	bne.n	800715c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007128:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	78db      	ldrb	r3, [r3, #3]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d003      	beq.n	800713a <USB_EPClearStall+0x4c>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	78db      	ldrb	r3, [r3, #3]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d138      	bne.n	80071ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e027      	b.n	80071ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	440a      	add	r2, r1
 8007172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800717a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	78db      	ldrb	r3, [r3, #3]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d003      	beq.n	800718c <USB_EPClearStall+0x9e>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	78db      	ldrb	r3, [r3, #3]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d10f      	bne.n	80071ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007220:	f023 0303 	bic.w	r3, r3, #3
 8007224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007234:	f023 0302 	bic.w	r3, r3, #2
 8007238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007276:	f043 0302 	orr.w	r3, r3, #2
 800727a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4013      	ands	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4013      	ands	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	0c1b      	lsrs	r3, r3, #16
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	b29b      	uxth	r3, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	4013      	ands	r3, r2
 8007344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007346:	68bb      	ldr	r3, [r7, #8]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007376:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
 8007384:	01db      	lsls	r3, r3, #7
 8007386:	b2db      	uxtb	r3, r3
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4013      	ands	r3, r2
 80073a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073a2:	68bb      	ldr	r3, [r7, #8]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	f003 0301 	and.w	r3, r3, #1
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007402:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	333c      	adds	r3, #60	; 0x3c
 800742a:	3304      	adds	r3, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4a26      	ldr	r2, [pc, #152]	; (80074cc <USB_EP0_OutStart+0xb8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d90a      	bls.n	800744e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007448:	d101      	bne.n	800744e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e037      	b.n	80074be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800746c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	f043 0318 	orr.w	r3, r3, #24
 8007480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007490:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10f      	bne.n	80074bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	4f54300a 	.word	0x4f54300a

080074d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <USB_CoreReset+0x64>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d901      	bls.n	80074ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e01b      	b.n	8007526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	daf2      	bge.n	80074dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <USB_CoreReset+0x64>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e006      	b.n	8007526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d0f0      	beq.n	8007506 <USB_CoreReset+0x36>

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	00030d40 	.word	0x00030d40

08007538 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007544:	2010      	movs	r0, #16
 8007546:	f001 ff97 	bl	8009478 <USBD_static_malloc>
 800754a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800755a:	2302      	movs	r3, #2
 800755c:	e01b      	b.n	8007596 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7c1b      	ldrb	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2207      	movs	r2, #7
 8007572:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007574:	e002      	b.n	800757c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220a      	movs	r2, #10
 800757a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800757c:	2304      	movs	r3, #4
 800757e:	2203      	movs	r2, #3
 8007580:	2181      	movs	r1, #129	; 0x81
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fe19 	bl	80091ba <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80075aa:	2181      	movs	r1, #129	; 0x81
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fe2a 	bl	8009206 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 ff60 	bl	8009494 <USBD_static_free>
    pdev->pClassData = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e0e8      	b.n	80077de <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007614:	2b00      	cmp	r3, #0
 8007616:	d046      	beq.n	80076a6 <USBD_HID_Setup+0xbe>
 8007618:	2b20      	cmp	r3, #32
 800761a:	f040 80d8 	bne.w	80077ce <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	3b02      	subs	r3, #2
 8007624:	2b09      	cmp	r3, #9
 8007626:	d836      	bhi.n	8007696 <USBD_HID_Setup+0xae>
 8007628:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USBD_HID_Setup+0x48>)
 800762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007687 	.word	0x08007687
 8007634:	08007667 	.word	0x08007667
 8007638:	08007697 	.word	0x08007697
 800763c:	08007697 	.word	0x08007697
 8007640:	08007697 	.word	0x08007697
 8007644:	08007697 	.word	0x08007697
 8007648:	08007697 	.word	0x08007697
 800764c:	08007697 	.word	0x08007697
 8007650:	08007675 	.word	0x08007675
 8007654:	08007659 	.word	0x08007659
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]
          break;
 8007664:	e01e      	b.n	80076a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fa4c 	bl	8008b0a <USBD_CtlSendData>
          break;
 8007672:	e017      	b.n	80076a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	885b      	ldrh	r3, [r3, #2]
 8007678:	0a1b      	lsrs	r3, r3, #8
 800767a:	b29b      	uxth	r3, r3
 800767c:	b2db      	uxtb	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	605a      	str	r2, [r3, #4]
          break;
 8007684:	e00e      	b.n	80076a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3304      	adds	r3, #4
 800768a:	2201      	movs	r2, #1
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fa3b 	bl	8008b0a <USBD_CtlSendData>
          break;
 8007694:	e006      	b.n	80076a4 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f9c5 	bl	8008a28 <USBD_CtlError>
          ret = USBD_FAIL;
 800769e:	2303      	movs	r3, #3
 80076a0:	75fb      	strb	r3, [r7, #23]
          break;
 80076a2:	bf00      	nop
      }
      break;
 80076a4:	e09a      	b.n	80077dc <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b0b      	cmp	r3, #11
 80076ac:	f200 8086 	bhi.w	80077bc <USBD_HID_Setup+0x1d4>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <USBD_HID_Setup+0xd0>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	080077cb 	.word	0x080077cb
 80076c0:	080077bd 	.word	0x080077bd
 80076c4:	080077bd 	.word	0x080077bd
 80076c8:	080077bd 	.word	0x080077bd
 80076cc:	080077bd 	.word	0x080077bd
 80076d0:	08007713 	.word	0x08007713
 80076d4:	080077bd 	.word	0x080077bd
 80076d8:	080077bd 	.word	0x080077bd
 80076dc:	080077bd 	.word	0x080077bd
 80076e0:	0800776b 	.word	0x0800776b
 80076e4:	08007795 	.word	0x08007795
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d107      	bne.n	8007704 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076f4:	f107 030a 	add.w	r3, r7, #10
 80076f8:	2202      	movs	r2, #2
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 fa04 	bl	8008b0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007702:	e063      	b.n	80077cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 f98e 	bl	8008a28 <USBD_CtlError>
            ret = USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	75fb      	strb	r3, [r7, #23]
          break;
 8007710:	e05c      	b.n	80077cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	885b      	ldrh	r3, [r3, #2]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b22      	cmp	r3, #34	; 0x22
 800771c:	d108      	bne.n	8007730 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	88db      	ldrh	r3, [r3, #6]
 8007722:	2b4a      	cmp	r3, #74	; 0x4a
 8007724:	bf28      	it	cs
 8007726:	234a      	movcs	r3, #74	; 0x4a
 8007728:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800772a:	4b2f      	ldr	r3, [pc, #188]	; (80077e8 <USBD_HID_Setup+0x200>)
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	e015      	b.n	800775c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b21      	cmp	r3, #33	; 0x21
 800773a:	d108      	bne.n	800774e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <USBD_HID_Setup+0x204>)
 800773e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	88db      	ldrh	r3, [r3, #6]
 8007744:	2b09      	cmp	r3, #9
 8007746:	bf28      	it	cs
 8007748:	2309      	movcs	r3, #9
 800774a:	82bb      	strh	r3, [r7, #20]
 800774c:	e006      	b.n	800775c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f969 	bl	8008a28 <USBD_CtlError>
            ret = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	75fb      	strb	r3, [r7, #23]
            break;
 800775a:	e037      	b.n	80077cc <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800775c:	8abb      	ldrh	r3, [r7, #20]
 800775e:	461a      	mov	r2, r3
 8007760:	6939      	ldr	r1, [r7, #16]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f9d1 	bl	8008b0a <USBD_CtlSendData>
          break;
 8007768:	e030      	b.n	80077cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b03      	cmp	r3, #3
 8007774:	d107      	bne.n	8007786 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3308      	adds	r3, #8
 800777a:	2201      	movs	r2, #1
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 f9c3 	bl	8008b0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007784:	e022      	b.n	80077cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f94d 	bl	8008a28 <USBD_CtlError>
            ret = USBD_FAIL;
 800778e:	2303      	movs	r3, #3
 8007790:	75fb      	strb	r3, [r7, #23]
          break;
 8007792:	e01b      	b.n	80077cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b03      	cmp	r3, #3
 800779e:	d106      	bne.n	80077ae <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077ac:	e00e      	b.n	80077cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f939 	bl	8008a28 <USBD_CtlError>
            ret = USBD_FAIL;
 80077b6:	2303      	movs	r3, #3
 80077b8:	75fb      	strb	r3, [r7, #23]
          break;
 80077ba:	e007      	b.n	80077cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 f932 	bl	8008a28 <USBD_CtlError>
          ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	75fb      	strb	r3, [r7, #23]
          break;
 80077c8:	e000      	b.n	80077cc <USBD_HID_Setup+0x1e4>
          break;
 80077ca:	bf00      	nop
      }
      break;
 80077cc:	e006      	b.n	80077dc <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f929 	bl	8008a28 <USBD_CtlError>
      ret = USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	75fb      	strb	r3, [r7, #23]
      break;
 80077da:	bf00      	nop
  }

  return (uint8_t)ret;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200000c8 	.word	0x200000c8
 80077ec:	200000b0 	.word	0x200000b0

080077f0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007804:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	e013      	b.n	8007838 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d10c      	bne.n	8007836 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	7b1b      	ldrb	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d108      	bne.n	8007836 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2201      	movs	r2, #1
 8007828:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	2181      	movs	r1, #129	; 0x81
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fd90 	bl	8009356 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2222      	movs	r2, #34	; 0x22
 800784c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800784e:	4b03      	ldr	r3, [pc, #12]	; (800785c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	20000044 	.word	0x20000044

08007860 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2222      	movs	r2, #34	; 0x22
 800786c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800786e:	4b03      	ldr	r3, [pc, #12]	; (800787c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20000068 	.word	0x20000068

08007880 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2222      	movs	r2, #34	; 0x22
 800788c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	2000008c 	.word	0x2000008c

080078a0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b2:	2200      	movs	r2, #0
 80078b4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220a      	movs	r2, #10
 80078d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80078d2:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200000bc 	.word	0x200000bc

080078e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e01f      	b.n	800793c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	79fa      	ldrb	r2, [r7, #7]
 800792e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f001 fbdb 	bl	80090ec <USBD_LL_Init>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]

  return ret;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007958:	2303      	movs	r3, #3
 800795a:	e016      	b.n	800798a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	f107 020e 	add.w	r2, r7, #14
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	4602      	mov	r2, r0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fbf2 	bl	8009184 <USBD_LL_Start>
 80079a0:	4603      	mov	r3, r0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	4611      	mov	r1, r2
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
  }

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 ffba 	bl	80089b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d01a      	beq.n	8007a9a <USBD_LL_SetupStage+0x72>
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d822      	bhi.n	8007aae <USBD_LL_SetupStage+0x86>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <USBD_LL_SetupStage+0x4a>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00a      	beq.n	8007a86 <USBD_LL_SetupStage+0x5e>
 8007a70:	e01d      	b.n	8007aae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa62 	bl	8007f44 <USBD_StdDevReq>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
      break;
 8007a84:	e020      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fac6 	bl	8008020 <USBD_StdItfReq>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
      break;
 8007a98:	e016      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb05 	bl	80080b2 <USBD_StdEPReq>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e00c      	b.n	8007ac8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fbc1 	bl	8009244 <USBD_LL_StallEP>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	460b      	mov	r3, r1
 8007adc:	607a      	str	r2, [r7, #4]
 8007ade:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d138      	bne.n	8007b58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007aec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d14a      	bne.n	8007b8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d913      	bls.n	8007b2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	1ad2      	subs	r2, r2, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bf28      	it	cs
 8007b1e:	4613      	movcs	r3, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f001 f81c 	bl	8008b62 <USBD_CtlContinueRx>
 8007b2a:	e030      	b.n	8007b8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d10b      	bne.n	8007b50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f001 f817 	bl	8008b84 <USBD_CtlSendStatus>
 8007b56:	e01a      	b.n	8007b8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d114      	bne.n	8007b8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	7afa      	ldrb	r2, [r7, #11]
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	4798      	blx	r3
 8007b80:	4603      	mov	r3, r0
 8007b82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	e000      	b.n	8007b90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d16b      	bne.n	8007c84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d156      	bne.n	8007c6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d914      	bls.n	8007bf2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 ffae 	bl	8008b40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be4:	2300      	movs	r3, #0
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f001 fbd4 	bl	8009398 <USBD_LL_PrepareReceive>
 8007bf0:	e03b      	b.n	8007c6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d11c      	bne.n	8007c38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d316      	bcc.n	8007c38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d20f      	bcs.n	8007c38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 ff8f 	bl	8008b40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 fbb1 	bl	8009398 <USBD_LL_PrepareReceive>
 8007c36:	e018      	b.n	8007c6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d10b      	bne.n	8007c5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5c:	2180      	movs	r1, #128	; 0x80
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f001 faf0 	bl	8009244 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 ffa0 	bl	8008baa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d122      	bne.n	8007cba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff fe98 	bl	80079aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c82:	e01a      	b.n	8007cba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d114      	bne.n	8007cba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00e      	beq.n	8007cba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	7afa      	ldrb	r2, [r7, #11]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	4798      	blx	r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	e000      	b.n	8007cbc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e02f      	b.n	8007d58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6852      	ldr	r2, [r2, #4]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fa46 	bl	80091ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2240      	movs	r2, #64	; 0x40
 8007d3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	2200      	movs	r2, #0
 8007d42:	2180      	movs	r1, #128	; 0x80
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fa38 	bl	80091ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2240      	movs	r2, #64	; 0x40
 8007d54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d106      	bne.n	8007dce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e012      	b.n	8007e18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d10b      	bne.n	8007e16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e014      	b.n	8007e64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d10d      	bne.n	8007e62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d007      	beq.n	8007e62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e014      	b.n	8007eb0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d10d      	bne.n	8007eae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6852      	ldr	r2, [r2, #4]
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
  }

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b087      	sub	sp, #28
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f24:	8a3b      	ldrh	r3, [r7, #16]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	b21a      	sxth	r2, r3
 8007f2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f34:	89fb      	ldrh	r3, [r7, #14]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d005      	beq.n	8007f6a <USBD_StdDevReq+0x26>
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d853      	bhi.n	800800a <USBD_StdDevReq+0xc6>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <USBD_StdDevReq+0x3a>
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d14f      	bne.n	800800a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e04a      	b.n	8008014 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d83b      	bhi.n	8007ffe <USBD_StdDevReq+0xba>
 8007f86:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <USBD_StdDevReq+0x48>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	08007fff 	.word	0x08007fff
 8007f98:	08007feb 	.word	0x08007feb
 8007f9c:	08007fff 	.word	0x08007fff
 8007fa0:	08007fbf 	.word	0x08007fbf
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fff 	.word	0x08007fff
 8007fac:	08007fd7 	.word	0x08007fd7
 8007fb0:	08007fc9 	.word	0x08007fc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9de 	bl	8008378 <USBD_GetDescriptor>
          break;
 8007fbc:	e024      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb6d 	bl	80086a0 <USBD_SetAddress>
          break;
 8007fc6:	e01f      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fbac 	bl	8008728 <USBD_SetConfig>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
          break;
 8007fd4:	e018      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fc4b 	bl	8008874 <USBD_GetConfig>
          break;
 8007fde:	e013      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc7c 	bl	80088e0 <USBD_GetStatus>
          break;
 8007fe8:	e00e      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fcab 	bl	8008948 <USBD_SetFeature>
          break;
 8007ff2:	e009      	b.n	8008008 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fcba 	bl	8008970 <USBD_ClrFeature>
          break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fd11 	bl	8008a28 <USBD_CtlError>
          break;
 8008006:	bf00      	nop
      }
      break;
 8008008:	e004      	b.n	8008014 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fd0b 	bl	8008a28 <USBD_CtlError>
      break;
 8008012:	bf00      	nop
  }

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d005      	beq.n	8008046 <USBD_StdItfReq+0x26>
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d82f      	bhi.n	800809e <USBD_StdItfReq+0x7e>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <USBD_StdItfReq+0x26>
 8008042:	2b20      	cmp	r3, #32
 8008044:	d12b      	bne.n	800809e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	2b02      	cmp	r3, #2
 8008052:	d81d      	bhi.n	8008090 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	889b      	ldrh	r3, [r3, #4]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b01      	cmp	r3, #1
 800805c:	d813      	bhi.n	8008086 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	88db      	ldrh	r3, [r3, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d110      	bne.n	800809a <USBD_StdItfReq+0x7a>
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10d      	bne.n	800809a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fd80 	bl	8008b84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008084:	e009      	b.n	800809a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fccd 	bl	8008a28 <USBD_CtlError>
          break;
 800808e:	e004      	b.n	800809a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fcc8 	bl	8008a28 <USBD_CtlError>
          break;
 8008098:	e000      	b.n	800809c <USBD_StdItfReq+0x7c>
          break;
 800809a:	bf00      	nop
      }
      break;
 800809c:	e004      	b.n	80080a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fcc1 	bl	8008a28 <USBD_CtlError>
      break;
 80080a6:	bf00      	nop
  }

  return ret;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	889b      	ldrh	r3, [r3, #4]
 80080c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d007      	beq.n	80080e2 <USBD_StdEPReq+0x30>
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	f200 8145 	bhi.w	8008362 <USBD_StdEPReq+0x2b0>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <USBD_StdEPReq+0x44>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	f040 8140 	bne.w	8008362 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e13a      	b.n	800836c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d007      	beq.n	800810e <USBD_StdEPReq+0x5c>
 80080fe:	2b03      	cmp	r3, #3
 8008100:	f300 8129 	bgt.w	8008356 <USBD_StdEPReq+0x2a4>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d07f      	beq.n	8008208 <USBD_StdEPReq+0x156>
 8008108:	2b01      	cmp	r3, #1
 800810a:	d03c      	beq.n	8008186 <USBD_StdEPReq+0xd4>
 800810c:	e123      	b.n	8008356 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d002      	beq.n	8008120 <USBD_StdEPReq+0x6e>
 800811a:	2b03      	cmp	r3, #3
 800811c:	d016      	beq.n	800814c <USBD_StdEPReq+0x9a>
 800811e:	e02c      	b.n	800817a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <USBD_StdEPReq+0x90>
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b80      	cmp	r3, #128	; 0x80
 800812a:	d00a      	beq.n	8008142 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f887 	bl	8009244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f883 	bl	8009244 <USBD_LL_StallEP>
 800813e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008140:	e020      	b.n	8008184 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc6f 	bl	8008a28 <USBD_CtlError>
              break;
 800814a:	e01b      	b.n	8008184 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	885b      	ldrh	r3, [r3, #2]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10e      	bne.n	8008172 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <USBD_StdEPReq+0xc0>
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d008      	beq.n	8008172 <USBD_StdEPReq+0xc0>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f869 	bl	8009244 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd06 	bl	8008b84 <USBD_CtlSendStatus>

              break;
 8008178:	e004      	b.n	8008184 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc53 	bl	8008a28 <USBD_CtlError>
              break;
 8008182:	bf00      	nop
          }
          break;
 8008184:	e0ec      	b.n	8008360 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d002      	beq.n	8008198 <USBD_StdEPReq+0xe6>
 8008192:	2b03      	cmp	r3, #3
 8008194:	d016      	beq.n	80081c4 <USBD_StdEPReq+0x112>
 8008196:	e030      	b.n	80081fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00d      	beq.n	80081ba <USBD_StdEPReq+0x108>
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b80      	cmp	r3, #128	; 0x80
 80081a2:	d00a      	beq.n	80081ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f84b 	bl	8009244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ae:	2180      	movs	r1, #128	; 0x80
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f847 	bl	8009244 <USBD_LL_StallEP>
 80081b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081b8:	e025      	b.n	8008206 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fc33 	bl	8008a28 <USBD_CtlError>
              break;
 80081c2:	e020      	b.n	8008206 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	885b      	ldrh	r3, [r3, #2]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11b      	bne.n	8008204 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f851 	bl	8009282 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fccf 	bl	8008b84 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80081f8:	e004      	b.n	8008204 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fc13 	bl	8008a28 <USBD_CtlError>
              break;
 8008202:	e000      	b.n	8008206 <USBD_StdEPReq+0x154>
              break;
 8008204:	bf00      	nop
          }
          break;
 8008206:	e0ab      	b.n	8008360 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d002      	beq.n	800821a <USBD_StdEPReq+0x168>
 8008214:	2b03      	cmp	r3, #3
 8008216:	d032      	beq.n	800827e <USBD_StdEPReq+0x1cc>
 8008218:	e097      	b.n	800834a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d007      	beq.n	8008230 <USBD_StdEPReq+0x17e>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	d004      	beq.n	8008230 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fbfd 	bl	8008a28 <USBD_CtlError>
                break;
 800822e:	e091      	b.n	8008354 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	da0b      	bge.n	8008250 <USBD_StdEPReq+0x19e>
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	3310      	adds	r3, #16
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4413      	add	r3, r2
 800824c:	3304      	adds	r3, #4
 800824e:	e00b      	b.n	8008268 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	3304      	adds	r3, #4
 8008268:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2202      	movs	r2, #2
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fc47 	bl	8008b0a <USBD_CtlSendData>
              break;
 800827c:	e06a      	b.n	8008354 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800827e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	da11      	bge.n	80082aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	f003 020f 	and.w	r2, r3, #15
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	440b      	add	r3, r1
 8008298:	3324      	adds	r3, #36	; 0x24
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d117      	bne.n	80082d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fbc0 	bl	8008a28 <USBD_CtlError>
                  break;
 80082a8:	e054      	b.n	8008354 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	f003 020f 	and.w	r2, r3, #15
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d104      	bne.n	80082d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fbad 	bl	8008a28 <USBD_CtlError>
                  break;
 80082ce:	e041      	b.n	8008354 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da0b      	bge.n	80082f0 <USBD_StdEPReq+0x23e>
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	3310      	adds	r3, #16
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	4413      	add	r3, r2
 80082ec:	3304      	adds	r3, #4
 80082ee:	e00b      	b.n	8008308 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	4413      	add	r3, r2
 8008306:	3304      	adds	r3, #4
 8008308:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <USBD_StdEPReq+0x264>
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d103      	bne.n	800831e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	e00e      	b.n	800833c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 ffcc 	bl	80092c0 <USBD_LL_IsStallEP>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e002      	b.n	800833c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2202      	movs	r2, #2
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fbe1 	bl	8008b0a <USBD_CtlSendData>
              break;
 8008348:	e004      	b.n	8008354 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb6b 	bl	8008a28 <USBD_CtlError>
              break;
 8008352:	bf00      	nop
          }
          break;
 8008354:	e004      	b.n	8008360 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fb65 	bl	8008a28 <USBD_CtlError>
          break;
 800835e:	bf00      	nop
      }
      break;
 8008360:	e004      	b.n	800836c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fb5f 	bl	8008a28 <USBD_CtlError>
      break;
 800836a:	bf00      	nop
  }

  return ret;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	0a1b      	lsrs	r3, r3, #8
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	2b0e      	cmp	r3, #14
 800839a:	f200 8152 	bhi.w	8008642 <USBD_GetDescriptor+0x2ca>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <USBD_GetDescriptor+0x2c>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	08008415 	.word	0x08008415
 80083a8:	0800842d 	.word	0x0800842d
 80083ac:	0800846d 	.word	0x0800846d
 80083b0:	08008643 	.word	0x08008643
 80083b4:	08008643 	.word	0x08008643
 80083b8:	080085e3 	.word	0x080085e3
 80083bc:	0800860f 	.word	0x0800860f
 80083c0:	08008643 	.word	0x08008643
 80083c4:	08008643 	.word	0x08008643
 80083c8:	08008643 	.word	0x08008643
 80083cc:	08008643 	.word	0x08008643
 80083d0:	08008643 	.word	0x08008643
 80083d4:	08008643 	.word	0x08008643
 80083d8:	08008643 	.word	0x08008643
 80083dc:	080083e1 	.word	0x080083e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008402:	e126      	b.n	8008652 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb0e 	bl	8008a28 <USBD_CtlError>
        err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
      break;
 8008412:	e11e      	b.n	8008652 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
      break;
 800842a:	e112      	b.n	8008652 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7c1b      	ldrb	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10d      	bne.n	8008450 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f107 0208 	add.w	r2, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	2202      	movs	r2, #2
 800844c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800844e:	e100      	b.n	8008652 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	f107 0208 	add.w	r2, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3301      	adds	r3, #1
 8008466:	2202      	movs	r2, #2
 8008468:	701a      	strb	r2, [r3, #0]
      break;
 800846a:	e0f2      	b.n	8008652 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	885b      	ldrh	r3, [r3, #2]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b05      	cmp	r3, #5
 8008474:	f200 80ac 	bhi.w	80085d0 <USBD_GetDescriptor+0x258>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBD_GetDescriptor+0x108>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008499 	.word	0x08008499
 8008484:	080084cd 	.word	0x080084cd
 8008488:	08008501 	.word	0x08008501
 800848c:	08008535 	.word	0x08008535
 8008490:	08008569 	.word	0x08008569
 8008494:	0800859d 	.word	0x0800859d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e091      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fab2 	bl	8008a28 <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e089      	b.n	80085e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e077      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa98 	bl	8008a28 <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e06f      	b.n	80085e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e05d      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa7e 	bl	8008a28 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e055      	b.n	80085e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e043      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa64 	bl	8008a28 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e03b      	b.n	80085e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e029      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa4a 	bl	8008a28 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e021      	b.n	80085e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085be:	e00f      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa30 	bl	8008a28 <USBD_CtlError>
            err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
          break;
 80085ce:	e007      	b.n	80085e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa28 	bl	8008a28 <USBD_CtlError>
          err++;
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	3301      	adds	r3, #1
 80085dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80085de:	bf00      	nop
      }
      break;
 80085e0:	e037      	b.n	8008652 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7c1b      	ldrb	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f2:	f107 0208 	add.w	r2, r7, #8
 80085f6:	4610      	mov	r0, r2
 80085f8:	4798      	blx	r3
 80085fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085fc:	e029      	b.n	8008652 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa11 	bl	8008a28 <USBD_CtlError>
        err++;
 8008606:	7afb      	ldrb	r3, [r7, #11]
 8008608:	3301      	adds	r3, #1
 800860a:	72fb      	strb	r3, [r7, #11]
      break;
 800860c:	e021      	b.n	8008652 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7c1b      	ldrb	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10d      	bne.n	8008632 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	f107 0208 	add.w	r2, r7, #8
 8008622:	4610      	mov	r0, r2
 8008624:	4798      	blx	r3
 8008626:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	2207      	movs	r2, #7
 800862e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008630:	e00f      	b.n	8008652 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9f7 	bl	8008a28 <USBD_CtlError>
        err++;
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	3301      	adds	r3, #1
 800863e:	72fb      	strb	r3, [r7, #11]
      break;
 8008640:	e007      	b.n	8008652 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9ef 	bl	8008a28 <USBD_CtlError>
      err++;
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	3301      	adds	r3, #1
 800864e:	72fb      	strb	r3, [r7, #11]
      break;
 8008650:	bf00      	nop
  }

  if (err != 0U)
 8008652:	7afb      	ldrb	r3, [r7, #11]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d11e      	bne.n	8008696 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	88db      	ldrh	r3, [r3, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d016      	beq.n	800868e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008660:	893b      	ldrh	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	88da      	ldrh	r2, [r3, #6]
 800866a:	893b      	ldrh	r3, [r7, #8]
 800866c:	4293      	cmp	r3, r2
 800866e:	bf28      	it	cs
 8008670:	4613      	movcs	r3, r2
 8008672:	b29b      	uxth	r3, r3
 8008674:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008676:	893b      	ldrh	r3, [r7, #8]
 8008678:	461a      	mov	r2, r3
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa44 	bl	8008b0a <USBD_CtlSendData>
 8008682:	e009      	b.n	8008698 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f9ce 	bl	8008a28 <USBD_CtlError>
 800868c:	e004      	b.n	8008698 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa78 	bl	8008b84 <USBD_CtlSendStatus>
 8008694:	e000      	b.n	8008698 <USBD_GetDescriptor+0x320>
    return;
 8008696:	bf00      	nop
  }
}
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop

080086a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	889b      	ldrh	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d131      	bne.n	8008716 <USBD_SetAddress+0x76>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	88db      	ldrh	r3, [r3, #6]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d12d      	bne.n	8008716 <USBD_SetAddress+0x76>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	2b7f      	cmp	r3, #127	; 0x7f
 80086c0:	d829      	bhi.n	8008716 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	885b      	ldrh	r3, [r3, #2]
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d104      	bne.n	80086e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f9a3 	bl	8008a28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	e01d      	b.n	8008720 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7bfa      	ldrb	r2, [r7, #15]
 80086e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fe11 	bl	8009318 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa44 	bl	8008b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	e009      	b.n	8008720 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008714:	e004      	b.n	8008720 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f985 	bl	8008a28 <USBD_CtlError>
  }
}
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	4b4c      	ldr	r3, [pc, #304]	; (8008870 <USBD_SetConfig+0x148>)
 800873e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008740:	4b4b      	ldr	r3, [pc, #300]	; (8008870 <USBD_SetConfig+0x148>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d905      	bls.n	8008754 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f96c 	bl	8008a28 <USBD_CtlError>
    return USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	e088      	b.n	8008866 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d002      	beq.n	8008766 <USBD_SetConfig+0x3e>
 8008760:	2b03      	cmp	r3, #3
 8008762:	d025      	beq.n	80087b0 <USBD_SetConfig+0x88>
 8008764:	e071      	b.n	800884a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008766:	4b42      	ldr	r3, [pc, #264]	; (8008870 <USBD_SetConfig+0x148>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01c      	beq.n	80087a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800876e:	4b40      	ldr	r3, [pc, #256]	; (8008870 <USBD_SetConfig+0x148>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008778:	4b3d      	ldr	r3, [pc, #244]	; (8008870 <USBD_SetConfig+0x148>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff f91e 	bl	80079c0 <USBD_SetClassConfig>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f949 	bl	8008a28 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008796:	e065      	b.n	8008864 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f9f3 	bl	8008b84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2203      	movs	r2, #3
 80087a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087a6:	e05d      	b.n	8008864 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9eb 	bl	8008b84 <USBD_CtlSendStatus>
      break;
 80087ae:	e059      	b.n	8008864 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087b0:	4b2f      	ldr	r3, [pc, #188]	; (8008870 <USBD_SetConfig+0x148>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d112      	bne.n	80087de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087c0:	4b2b      	ldr	r3, [pc, #172]	; (8008870 <USBD_SetConfig+0x148>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087ca:	4b29      	ldr	r3, [pc, #164]	; (8008870 <USBD_SetConfig+0x148>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff f911 	bl	80079f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9d4 	bl	8008b84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087dc:	e042      	b.n	8008864 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80087de:	4b24      	ldr	r3, [pc, #144]	; (8008870 <USBD_SetConfig+0x148>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d02a      	beq.n	8008842 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff f8ff 	bl	80079f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <USBD_SetConfig+0x148>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <USBD_SetConfig+0x148>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff f8d8 	bl	80079c0 <USBD_SetClassConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00f      	beq.n	800883a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f903 	bl	8008a28 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f8e4 	bl	80079f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008838:	e014      	b.n	8008864 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9a2 	bl	8008b84 <USBD_CtlSendStatus>
      break;
 8008840:	e010      	b.n	8008864 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f99e 	bl	8008b84 <USBD_CtlSendStatus>
      break;
 8008848:	e00c      	b.n	8008864 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f8eb 	bl	8008a28 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <USBD_SetConfig+0x148>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff f8cd 	bl	80079f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	73fb      	strb	r3, [r7, #15]
      break;
 8008862:	bf00      	nop
  }

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000658 	.word	0x20000658

08008874 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	88db      	ldrh	r3, [r3, #6]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d004      	beq.n	8008890 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f8cd 	bl	8008a28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800888e:	e023      	b.n	80088d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	dc02      	bgt.n	80088a2 <USBD_GetConfig+0x2e>
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc03      	bgt.n	80088a8 <USBD_GetConfig+0x34>
 80088a0:	e015      	b.n	80088ce <USBD_GetConfig+0x5a>
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d00b      	beq.n	80088be <USBD_GetConfig+0x4a>
 80088a6:	e012      	b.n	80088ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3308      	adds	r3, #8
 80088b2:	2201      	movs	r2, #1
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f927 	bl	8008b0a <USBD_CtlSendData>
        break;
 80088bc:	e00c      	b.n	80088d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3304      	adds	r3, #4
 80088c2:	2201      	movs	r2, #1
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f91f 	bl	8008b0a <USBD_CtlSendData>
        break;
 80088cc:	e004      	b.n	80088d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8a9 	bl	8008a28 <USBD_CtlError>
        break;
 80088d6:	bf00      	nop
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	3b01      	subs	r3, #1
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d81e      	bhi.n	8008936 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	88db      	ldrh	r3, [r3, #6]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d004      	beq.n	800890a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f890 	bl	8008a28 <USBD_CtlError>
        break;
 8008908:	e01a      	b.n	8008940 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f043 0202 	orr.w	r2, r3, #2
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	330c      	adds	r3, #12
 800892a:	2202      	movs	r2, #2
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8eb 	bl	8008b0a <USBD_CtlSendData>
      break;
 8008934:	e004      	b.n	8008940 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f875 	bl	8008a28 <USBD_CtlError>
      break;
 800893e:	bf00      	nop
  }
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	885b      	ldrh	r3, [r3, #2]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d106      	bne.n	8008968 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f90e 	bl	8008b84 <USBD_CtlSendStatus>
  }
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	2b02      	cmp	r3, #2
 8008986:	d80b      	bhi.n	80089a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	885b      	ldrh	r3, [r3, #2]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d10c      	bne.n	80089aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f8f3 	bl	8008b84 <USBD_CtlSendStatus>
      }
      break;
 800899e:	e004      	b.n	80089aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f840 	bl	8008a28 <USBD_CtlError>
      break;
 80089a8:	e000      	b.n	80089ac <USBD_ClrFeature+0x3c>
      break;
 80089aa:	bf00      	nop
  }
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3301      	adds	r3, #1
 80089ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fa91 	bl	8007f06 <SWAPBYTE>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7ff fa84 	bl	8007f06 <SWAPBYTE>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff fa77 	bl	8007f06 <SWAPBYTE>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	80da      	strh	r2, [r3, #6]
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a32:	2180      	movs	r1, #128	; 0x80
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc05 	bl	8009244 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc01 	bl	8009244 <USBD_LL_StallEP>
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d036      	beq.n	8008ace <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a64:	6938      	ldr	r0, [r7, #16]
 8008a66:	f000 f836 	bl	8008ad6 <USBD_GetLen>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	7812      	ldrb	r2, [r2, #0]
 8008a82:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	3301      	adds	r3, #1
 8008a88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	4413      	add	r3, r2
 8008a90:	2203      	movs	r2, #3
 8008a92:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	3301      	adds	r3, #1
 8008a98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a9a:	e013      	b.n	8008ac4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	7812      	ldrb	r2, [r2, #0]
 8008aa6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	613b      	str	r3, [r7, #16]
    idx++;
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4413      	add	r3, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
    idx++;
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e7      	bne.n	8008a9c <USBD_GetString+0x52>
 8008acc:	e000      	b.n	8008ad0 <USBD_GetString+0x86>
    return;
 8008ace:	bf00      	nop
  }
}
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ae6:	e005      	b.n	8008af4 <USBD_GetLen+0x1e>
  {
    len++;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	3301      	adds	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f5      	bne.n	8008ae8 <USBD_GetLen+0x12>
  }

  return len;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fc10 	bl	8009356 <USBD_LL_Transmit>

  return USBD_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	2100      	movs	r1, #0
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fbff 	bl	8009356 <USBD_LL_Transmit>

  return USBD_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	2100      	movs	r1, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fc0f 	bl	8009398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2204      	movs	r2, #4
 8008b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b94:	2300      	movs	r3, #0
 8008b96:	2200      	movs	r2, #0
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fbdb 	bl	8009356 <USBD_LL_Transmit>

  return USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fbe9 	bl	8009398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	490e      	ldr	r1, [pc, #56]	; (8008c10 <MX_USB_DEVICE_Init+0x40>)
 8008bd8:	480e      	ldr	r0, [pc, #56]	; (8008c14 <MX_USB_DEVICE_Init+0x44>)
 8008bda:	f7fe fe83 	bl	80078e4 <USBD_Init>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008be4:	f7f8 fcde 	bl	80015a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008be8:	490b      	ldr	r1, [pc, #44]	; (8008c18 <MX_USB_DEVICE_Init+0x48>)
 8008bea:	480a      	ldr	r0, [pc, #40]	; (8008c14 <MX_USB_DEVICE_Init+0x44>)
 8008bec:	f7fe feaa 	bl	8007944 <USBD_RegisterClass>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bf6:	f7f8 fcd5 	bl	80015a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bfa:	4806      	ldr	r0, [pc, #24]	; (8008c14 <MX_USB_DEVICE_Init+0x44>)
 8008bfc:	f7fe fec9 	bl	8007992 <USBD_Start>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008c06:	f7f8 fccd 	bl	80015a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000114 	.word	0x20000114
 8008c14:	2000067c 	.word	0x2000067c
 8008c18:	2000000c 	.word	0x2000000c

08008c1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2212      	movs	r2, #18
 8008c2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c2e:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20000134 	.word	0x20000134

08008c40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2204      	movs	r2, #4
 8008c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c52:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	20000154 	.word	0x20000154

08008c64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d105      	bne.n	8008c82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	4907      	ldr	r1, [pc, #28]	; (8008c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c7a:	4808      	ldr	r0, [pc, #32]	; (8008c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c7c:	f7ff fee5 	bl	8008a4a <USBD_GetString>
 8008c80:	e004      	b.n	8008c8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	4904      	ldr	r1, [pc, #16]	; (8008c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c86:	4805      	ldr	r0, [pc, #20]	; (8008c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c88:	f7ff fedf 	bl	8008a4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c8c:	4b02      	ldr	r3, [pc, #8]	; (8008c98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2000094c 	.word	0x2000094c
 8008c9c:	0800f8d4 	.word	0x0800f8d4

08008ca0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cb0:	4804      	ldr	r0, [pc, #16]	; (8008cc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cb2:	f7ff feca 	bl	8008a4a <USBD_GetString>
  return USBD_StrDesc;
 8008cb6:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	2000094c 	.word	0x2000094c
 8008cc4:	0800f8ec 	.word	0x0800f8ec

08008cc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	221a      	movs	r2, #26
 8008cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cda:	f000 f855 	bl	8008d88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cde:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20000158 	.word	0x20000158

08008cec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d105      	bne.n	8008d0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	4907      	ldr	r1, [pc, #28]	; (8008d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d02:	4808      	ldr	r0, [pc, #32]	; (8008d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d04:	f7ff fea1 	bl	8008a4a <USBD_GetString>
 8008d08:	e004      	b.n	8008d14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	4904      	ldr	r1, [pc, #16]	; (8008d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d0e:	4805      	ldr	r0, [pc, #20]	; (8008d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d10:	f7ff fe9b 	bl	8008a4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000094c 	.word	0x2000094c
 8008d24:	0800f900 	.word	0x0800f900

08008d28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	6039      	str	r1, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4907      	ldr	r1, [pc, #28]	; (8008d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d3e:	4808      	ldr	r0, [pc, #32]	; (8008d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d40:	f7ff fe83 	bl	8008a4a <USBD_GetString>
 8008d44:	e004      	b.n	8008d50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	4904      	ldr	r1, [pc, #16]	; (8008d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d4c:	f7ff fe7d 	bl	8008a4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000094c 	.word	0x2000094c
 8008d60:	0800f90c 	.word	0x0800f90c

08008d64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	220c      	movs	r2, #12
 8008d74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008d76:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	20000148 	.word	0x20000148

08008d88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <Get_SerialNum+0x44>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d94:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <Get_SerialNum+0x48>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Get_SerialNum+0x4c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dae:	2208      	movs	r2, #8
 8008db0:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <Get_SerialNum+0x50>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f814 	bl	8008de0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008db8:	2204      	movs	r2, #4
 8008dba:	4908      	ldr	r1, [pc, #32]	; (8008ddc <Get_SerialNum+0x54>)
 8008dbc:	68b8      	ldr	r0, [r7, #8]
 8008dbe:	f000 f80f 	bl	8008de0 <IntToUnicode>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	1fff7a10 	.word	0x1fff7a10
 8008dd0:	1fff7a14 	.word	0x1fff7a14
 8008dd4:	1fff7a18 	.word	0x1fff7a18
 8008dd8:	2000015a 	.word	0x2000015a
 8008ddc:	2000016a 	.word	0x2000016a

08008de0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	e027      	b.n	8008e48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0f1b      	lsrs	r3, r3, #28
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d80b      	bhi.n	8008e18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0f1b      	lsrs	r3, r3, #28
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	440b      	add	r3, r1
 8008e10:	3230      	adds	r2, #48	; 0x30
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e00a      	b.n	8008e2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	0f1b      	lsrs	r3, r3, #28
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	440b      	add	r3, r1
 8008e28:	3237      	adds	r2, #55	; 0x37
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	3301      	adds	r3, #1
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	3301      	adds	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
 8008e48:	7dfa      	ldrb	r2, [r7, #23]
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d3d3      	bcc.n	8008df8 <IntToUnicode+0x18>
  }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	605a      	str	r2, [r3, #4]
 8008e72:	609a      	str	r2, [r3, #8]
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e80:	d13a      	bne.n	8008ef8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e82:	2300      	movs	r3, #0
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6313      	str	r3, [r2, #48]	; 0x30
 8008e92:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eac:	2303      	movs	r3, #3
 8008eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008eb0:	230a      	movs	r3, #10
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4812      	ldr	r0, [pc, #72]	; (8008f04 <HAL_PCD_MspInit+0xa4>)
 8008ebc:	f7f9 f82c 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec4:	4a0e      	ldr	r2, [pc, #56]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eca:	6353      	str	r3, [r2, #52]	; 0x34
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed4:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008eda:	6453      	str	r3, [r2, #68]	; 0x44
 8008edc:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <HAL_PCD_MspInit+0xa0>)
 8008ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2100      	movs	r1, #0
 8008eec:	2043      	movs	r0, #67	; 0x43
 8008eee:	f7f8 ffc0 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ef2:	2043      	movs	r0, #67	; 0x43
 8008ef4:	f7f8 ffd9 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3728      	adds	r7, #40	; 0x28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40023800 	.word	0x40023800
 8008f04:	40020000 	.word	0x40020000

08008f08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fd82 	bl	8007a28 <USBD_LL_SetupStage>
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7fe fdbc 	bl	8007ad2 <USBD_LL_DataOutStage>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	3348      	adds	r3, #72	; 0x48
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7fe fe05 	bl	8007b98 <USBD_LL_DataInStage>
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe ff19 	bl	8007ddc <USBD_LL_SOF>
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
 8008fca:	e008      	b.n	8008fde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d102      	bne.n	8008fda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
 8008fd8:	e001      	b.n	8008fde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fda:	f7f8 fae3 	bl	80015a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fe4:	7bfa      	ldrb	r2, [r7, #15]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe feb9 	bl	8007d60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fe65 	bl	8007cc4 <USBD_LL_Reset>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe feb4 	bl	8007d80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009038:	4b04      	ldr	r3, [pc, #16]	; (800904c <HAL_PCD_SuspendCallback+0x48>)
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	4a03      	ldr	r2, [pc, #12]	; (800904c <HAL_PCD_SuspendCallback+0x48>)
 800903e:	f043 0306 	orr.w	r3, r3, #6
 8009042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed00 	.word	0xe000ed00

08009050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe fea4 	bl	8007dac <USBD_LL_Resume>
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fef2 	bl	8007e6c <USBD_LL_IsoOUTIncomplete>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe feba 	bl	8007e20 <USBD_LL_IsoINIncomplete>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fef8 	bl	8007eb8 <USBD_LL_DevConnected>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fef5 	bl	8007ece <USBD_LL_DevDisconnected>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d13c      	bne.n	8009176 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090fc:	4a20      	ldr	r2, [pc, #128]	; (8009180 <USBD_LL_Init+0x94>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <USBD_LL_Init+0x94>)
 8009108:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800910c:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <USBD_LL_Init+0x94>)
 800910e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009112:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009114:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <USBD_LL_Init+0x94>)
 8009116:	2206      	movs	r2, #6
 8009118:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800911a:	4b19      	ldr	r3, [pc, #100]	; (8009180 <USBD_LL_Init+0x94>)
 800911c:	2202      	movs	r2, #2
 800911e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009120:	4b17      	ldr	r3, [pc, #92]	; (8009180 <USBD_LL_Init+0x94>)
 8009122:	2200      	movs	r2, #0
 8009124:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <USBD_LL_Init+0x94>)
 8009128:	2202      	movs	r2, #2
 800912a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800912c:	4b14      	ldr	r3, [pc, #80]	; (8009180 <USBD_LL_Init+0x94>)
 800912e:	2200      	movs	r2, #0
 8009130:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <USBD_LL_Init+0x94>)
 8009134:	2200      	movs	r2, #0
 8009136:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <USBD_LL_Init+0x94>)
 800913a:	2200      	movs	r2, #0
 800913c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <USBD_LL_Init+0x94>)
 8009140:	2200      	movs	r2, #0
 8009142:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009144:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <USBD_LL_Init+0x94>)
 8009146:	2200      	movs	r2, #0
 8009148:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800914a:	480d      	ldr	r0, [pc, #52]	; (8009180 <USBD_LL_Init+0x94>)
 800914c:	f7f9 f8a9 	bl	80022a2 <HAL_PCD_Init>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009156:	f7f8 fa25 	bl	80015a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800915a:	2180      	movs	r1, #128	; 0x80
 800915c:	4808      	ldr	r0, [pc, #32]	; (8009180 <USBD_LL_Init+0x94>)
 800915e:	f7fa fa22 	bl	80035a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009162:	2240      	movs	r2, #64	; 0x40
 8009164:	2100      	movs	r1, #0
 8009166:	4806      	ldr	r0, [pc, #24]	; (8009180 <USBD_LL_Init+0x94>)
 8009168:	f7fa f9d6 	bl	8003518 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800916c:	2280      	movs	r2, #128	; 0x80
 800916e:	2101      	movs	r1, #1
 8009170:	4803      	ldr	r0, [pc, #12]	; (8009180 <USBD_LL_Init+0x94>)
 8009172:	f7fa f9d1 	bl	8003518 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000b4c 	.word	0x20000b4c

08009184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800919a:	4618      	mov	r0, r3
 800919c:	f7f9 f9a5 	bl	80024ea <HAL_PCD_Start>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f97e 	bl	80094a8 <USBD_Get_USB_Status>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	461a      	mov	r2, r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	70fb      	strb	r3, [r7, #3]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70bb      	strb	r3, [r7, #2]
 80091d0:	4613      	mov	r3, r2
 80091d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091e2:	78bb      	ldrb	r3, [r7, #2]
 80091e4:	883a      	ldrh	r2, [r7, #0]
 80091e6:	78f9      	ldrb	r1, [r7, #3]
 80091e8:	f7f9 fdb6 	bl	8002d58 <HAL_PCD_EP_Open>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f958 	bl	80094a8 <USBD_Get_USB_Status>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7f9 fdff 	bl	8002e28 <HAL_PCD_EP_Close>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f939 	bl	80094a8 <USBD_Get_USB_Status>
 8009236:	4603      	mov	r3, r0
 8009238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923a:	7bbb      	ldrb	r3, [r7, #14]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7f9 febf 	bl	8002fe6 <HAL_PCD_EP_SetStall>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f91a 	bl	80094a8 <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009278:	7bbb      	ldrb	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7f9 ff04 	bl	80030ae <HAL_PCD_EP_ClrStall>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f8fb 	bl	80094a8 <USBD_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da0b      	bge.n	80092f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	333e      	adds	r3, #62	; 0x3e
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	e00b      	b.n	800930c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800930a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7f9 fce9 	bl	8002d0e <HAL_PCD_SetAddress>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f8b0 	bl	80094a8 <USBD_Get_USB_Status>
 8009348:	4603      	mov	r3, r0
 800934a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800934c:	7bbb      	ldrb	r3, [r7, #14]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b086      	sub	sp, #24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
 8009362:	460b      	mov	r3, r1
 8009364:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009374:	7af9      	ldrb	r1, [r7, #11]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	f7f9 fdea 	bl	8002f52 <HAL_PCD_EP_Transmit>
 800937e:	4603      	mov	r3, r0
 8009380:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f88f 	bl	80094a8 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800938e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	460b      	mov	r3, r1
 80093a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093b6:	7af9      	ldrb	r1, [r7, #11]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	f7f9 fd7e 	bl	8002ebc <HAL_PCD_EP_Receive>
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f86e 	bl	80094a8 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_PCDEx_LPM_Callback+0x18>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d01f      	beq.n	8009432 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80093f2:	e03b      	b.n	800946c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80093fc:	f7f7 ff00 	bl	8001200 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009400:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <HAL_PCDEx_LPM_Callback+0x98>)
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	4a1b      	ldr	r2, [pc, #108]	; (8009474 <HAL_PCDEx_LPM_Callback+0x98>)
 8009406:	f023 0306 	bic.w	r3, r3, #6
 800940a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800941e:	f023 0301 	bic.w	r3, r3, #1
 8009422:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fcbe 	bl	8007dac <USBD_LL_Resume>
    break;
 8009430:	e01c      	b.n	800946c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fc95 	bl	8007d80 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_PCDEx_LPM_Callback+0x98>)
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	4a04      	ldr	r2, [pc, #16]	; (8009474 <HAL_PCDEx_LPM_Callback+0x98>)
 8009464:	f043 0306 	orr.w	r3, r3, #6
 8009468:	6113      	str	r3, [r2, #16]
    break;
 800946a:	bf00      	nop
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed00 	.word	0xe000ed00

08009478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009480:	4b03      	ldr	r3, [pc, #12]	; (8009490 <USBD_static_malloc+0x18>)
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000065c 	.word	0x2000065c

08009494 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d817      	bhi.n	80094ec <USBD_Get_USB_Status+0x44>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <USBD_Get_USB_Status+0x1c>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094db 	.word	0x080094db
 80094cc:	080094e1 	.word	0x080094e1
 80094d0:	080094e7 	.word	0x080094e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	e00b      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
    break;
 80094de:	e008      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
    break;
 80094e4:	e005      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094e6:	2303      	movs	r3, #3
 80094e8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ea:	e002      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	73fb      	strb	r3, [r7, #15]
    break;
 80094f0:	bf00      	nop
  }
  return usb_status;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	4608      	mov	r0, r1
 800950a:	4611      	mov	r1, r2
 800950c:	461a      	mov	r2, r3
 800950e:	4603      	mov	r3, r0
 8009510:	70fb      	strb	r3, [r7, #3]
 8009512:	460b      	mov	r3, r1
 8009514:	70bb      	strb	r3, [r7, #2]
 8009516:	4613      	mov	r3, r2
 8009518:	707b      	strb	r3, [r7, #1]
                return 0;
 800951a:	2300      	movs	r3, #0
        }
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4603      	mov	r3, r0
 8009538:	70fb      	strb	r3, [r7, #3]
 800953a:	460b      	mov	r3, r1
 800953c:	70bb      	strb	r3, [r7, #2]
 800953e:	4613      	mov	r3, r2
 8009540:	707b      	strb	r3, [r7, #1]
                return 0;
 8009542:	2300      	movs	r3, #0
        }
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
                return 0;
 8009558:	2300      	movs	r3, #0
        }
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
                return 0;
 800956e:	2300      	movs	r3, #0
        }
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
                return 0;
 8009584:	2300      	movs	r3, #0
        }
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
                return;
 800959e:	bf00      	nop
        } // Note used for hubs only!
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	807b      	strh	r3, [r7, #2]
 80095b6:	4613      	mov	r3, r2
 80095b8:	803b      	strh	r3, [r7, #0]
                return false;
 80095ba:	2300      	movs	r3, #0
        }
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
                return false;
 80095d4:	2300      	movs	r3, #0
        }
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
                return true;
 80095ee:	2301      	movs	r3, #1
        }
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 8009604:	687b      	ldr	r3, [r7, #4]
        };
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	2b0f      	cmp	r3, #15
 8009624:	d812      	bhi.n	800964c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	321e      	adds	r2, #30
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d107      	bne.n	8009644 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	321e      	adds	r2, #30
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 8009640:	2300      	movs	r3, #0
 8009642:	e004      	b.n	800964e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	3301      	adds	r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]
 800964a:	e7e9      	b.n	8009620 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800964c:	23d3      	movs	r3, #211	; 0xd3
        };
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	705a      	strb	r2, [r3, #1]
 800966e:	2200      	movs	r2, #0
 8009670:	709a      	strb	r2, [r3, #2]
 8009672:	2200      	movs	r2, #0
 8009674:	70da      	strb	r2, [r3, #3]
 8009676:	2200      	movs	r2, #0
 8009678:	711a      	strb	r2, [r3, #4]
        };
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	711a      	strb	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	715a      	strb	r2, [r3, #5]
        };
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	715a      	strb	r2, [r3, #5]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	795a      	ldrb	r2, [r3, #5]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	711a      	strb	r2, [r3, #4]
        };
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	711a      	strb	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	80da      	strh	r2, [r3, #6]
        };
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	80da      	strh	r2, [r3, #6]
        };
 8009722:	bf00      	nop
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	791b      	ldrb	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 8009744:	2b01      	cmp	r3, #1
 8009746:	d009      	beq.n	800975c <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 8009748:	e029      	b.n	800979e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	887a      	ldrh	r2, [r7, #2]
 800974e:	80da      	strh	r2, [r3, #6]
                                nStage++;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	3301      	adds	r3, #1
 8009756:	b2da      	uxtb	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88db      	ldrh	r3, [r3, #6]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d015      	beq.n	8009790 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d011      	beq.n	8009790 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88db      	ldrh	r3, [r3, #6]
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	80da      	strh	r2, [r3, #6]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	e7e5      	b.n	800975c <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	88db      	ldrh	r3, [r3, #6]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bf0c      	ite	eq
 80097a6:	2301      	moveq	r3, #1
 80097a8:	2300      	movne	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
        };
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	461a      	mov	r2, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	70fb      	strb	r3, [r7, #3]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70bb      	strb	r3, [r7, #2]
 80097ce:	4613      	mov	r3, r2
 80097d0:	707b      	strb	r3, [r7, #1]
        };
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <_ZN15USBDeviceConfigC1Ev+0x1c>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	0800faa8 	.word	0x0800faa8

08009800 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	4a04      	ldr	r2, [pc, #16]	; (800981c <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	0800fa90 	.word	0x0800fa90

08009820 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
                return bAddress;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	2be0      	cmp	r3, #224	; 0xe0
 8009864:	bf0c      	ite	eq
 8009866:	2301      	moveq	r3, #1
 8009868:	2300      	movne	r3, #0
 800986a:	b2db      	uxtb	r3, r3
        };
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	807b      	strh	r3, [r7, #2]
 8009884:	4613      	mov	r3, r2
 8009886:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 8009888:	887b      	ldrh	r3, [r7, #2]
 800988a:	f640 225c 	movw	r2, #2652	; 0xa5c
 800988e:	4293      	cmp	r3, r2
 8009890:	d104      	bne.n	800989c <_ZN3BTD8VIDPIDOKEtt+0x24>
 8009892:	883b      	ldrh	r3, [r7, #0]
 8009894:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009898:	4293      	cmp	r3, r2
 800989a:	d009      	beq.n	80098b0 <_ZN3BTD8VIDPIDOKEtt+0x38>
 800989c:	887b      	ldrh	r3, [r7, #2]
 800989e:	f240 520d 	movw	r2, #1293	; 0x50d
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d106      	bne.n	80098b4 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 80098a6:	883b      	ldrh	r3, [r7, #0]
 80098a8:	f240 625a 	movw	r2, #1626	; 0x65a
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d101      	bne.n	80098b4 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e02d      	b.n	8009910 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	7d1b      	ldrb	r3, [r3, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d113      	bne.n	80098e4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7d5b      	ldrb	r3, [r3, #21]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10f      	bne.n	80098e4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7d9b      	ldrb	r3, [r3, #22]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7ddb      	ldrb	r3, [r3, #23]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7e1b      	ldrb	r3, [r3, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d103      	bne.n	80098e4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7e5b      	ldrb	r3, [r3, #25]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d014      	beq.n	800990e <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 80098e4:	887b      	ldrh	r3, [r7, #2]
 80098e6:	f240 524c 	movw	r2, #1356	; 0x54c
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d10f      	bne.n	800990e <_ZN3BTD8VIDPIDOKEtt+0x96>
 80098ee:	883b      	ldrh	r3, [r7, #0]
 80098f0:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 80098f4:	d009      	beq.n	800990a <_ZN3BTD8VIDPIDOKEtt+0x92>
 80098f6:	883b      	ldrh	r3, [r7, #0]
 80098f8:	f240 422f 	movw	r2, #1071	; 0x42f
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d004      	beq.n	800990a <_ZN3BTD8VIDPIDOKEtt+0x92>
 8009900:	883b      	ldrh	r3, [r7, #0]
 8009902:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009906:	4293      	cmp	r3, r2
 8009908:	d101      	bne.n	800990e <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800990e:	2300      	movs	r3, #0
        };
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff ff59 	bl	80097e0 <_ZN15USBDeviceConfigC1Ev>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff ff64 	bl	8009800 <_ZN17UsbConfigXtracterC1Ev>
 8009938:	4a2b      	ldr	r2, [pc, #172]	; (80099e8 <_ZN3BTDC1EP3USB+0xcc>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	4a2b      	ldr	r2, [pc, #172]	; (80099ec <_ZN3BTDC1EP3USB+0xd0>)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	605a      	str	r2, [r3, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	64da      	str	r2, [r3, #76]	; 0x4c
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	661a      	str	r2, [r3, #96]	; 0x60
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d80a      	bhi.n	80099c0 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	3318      	adds	r3, #24
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	3301      	adds	r3, #1
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	e7f1      	b.n	80099a4 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fa7d 	bl	8009ec0 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d006      	beq.n	80099dc <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fe1b 	bl	8009612 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	0800fa50 	.word	0x0800fa50
 80099ec:	0800fa84 	.word	0x0800fa84

080099f0 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b08f      	sub	sp, #60	; 0x3c
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	461a      	mov	r2, r3
 80099fe:	4603      	mov	r3, r0
 8009a00:	70fb      	strb	r3, [r7, #3]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70bb      	strb	r3, [r7, #2]
 8009a06:	4613      	mov	r3, r2
 8009a08:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 8009a0a:	2312      	movs	r3, #18
 8009a0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 8009a10:	f107 0308 	add.w	r3, r7, #8
 8009a14:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa4e 	bl	8009ec0 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fde7 	bl	80095fc <_ZN3USB14GetAddressPoolEv>
 8009a2e:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 8009a3a:	23d9      	movs	r3, #217	; 0xd9
 8009a3c:	e087      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2100      	movs	r1, #0
 8009a46:	69f8      	ldr	r0, [r7, #28]
 8009a48:	4798      	blx	r3
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009a52:	23d6      	movs	r3, #214	; 0xd6
 8009a54:	e07b      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 8009a5e:	23d7      	movs	r3, #215	; 0xd7
 8009a60:	e075      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	787a      	ldrb	r2, [r7, #1]
 8009a76:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	2312      	movs	r3, #18
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	f005 fa13 	bl	800eeb2 <_ZN3USB11getDevDescrEhhtPh>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	6a3a      	ldr	r2, [r7, #32]
 8009a96:	601a      	str	r2, [r3, #0]

        if(rcode)
 8009a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d146      	bne.n	8009b2e <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	681c      	ldr	r4, [r3, #0]
 8009aa8:	78bb      	ldrb	r3, [r7, #2]
 8009aaa:	78f9      	ldrb	r1, [r7, #3]
 8009aac:	2200      	movs	r2, #0
 8009aae:	69f8      	ldr	r0, [r7, #28]
 8009ab0:	47a0      	blx	r4
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8009ac6:	23d4      	movs	r3, #212	; 0xd4
 8009ac8:	e041      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d017      	beq.n	8009b02 <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	79da      	ldrb	r2, [r3, #7]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	7c5a      	ldrb	r2, [r3, #17]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	891b      	ldrh	r3, [r3, #8]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	895b      	ldrh	r3, [r3, #10]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 8009afe:	23e0      	movs	r3, #224	; 0xe0
 8009b00:	e025      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 8009b02:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2200      	movs	r2, #0
 8009b12:	f005 fa6b 	bl	800efec <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009b16:	23d1      	movs	r3, #209	; 0xd1
 8009b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	4798      	blx	r3
        return rcode;
 8009b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b2c:	e00f      	b.n	8009b4e <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 8009b2e:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 8009b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b34:	2b0d      	cmp	r3, #13
 8009b36:	d002      	beq.n	8009b3e <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 8009b38:	23e1      	movs	r3, #225	; 0xe1
 8009b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
        return rcode;
 8009b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3734      	adds	r7, #52	; 0x34
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}

08009b56 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b096      	sub	sp, #88	; 0x58
 8009b5a:	af02      	add	r7, sp, #8
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	461a      	mov	r2, r3
 8009b64:	4603      	mov	r3, r0
 8009b66:	70fb      	strb	r3, [r7, #3]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70bb      	strb	r3, [r7, #2]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009b76:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fd38 	bl	80095fc <_ZN3USB14GetAddressPoolEv>
 8009b8c:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b9e:	4798      	blx	r3
 8009ba0:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 8009ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009ba8:	23d6      	movs	r3, #214	; 0xd6
 8009baa:	e185      	b.n	8009eb8 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 8009bac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009bb0:	f7f8 f860 	bl	8001c74 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	f005 fa13 	bl	800efec <_ZN3USB7setAddrEhhh>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 8009bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 8009bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	719a      	strb	r2, [r3, #6]
                goto Fail;
 8009bda:	e165      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bde:	2200      	movs	r2, #0
 8009be0:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009bee:	4611      	mov	r1, r2
 8009bf0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009bf2:	4798      	blx	r3
 8009bf4:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 8009bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009bfc:	23d6      	movs	r3, #214	; 0xd6
 8009bfe:	e15b      	b.n	8009eb8 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 8009c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c02:	787a      	ldrb	r2, [r7, #1]
 8009c04:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3351      	adds	r3, #81	; 0x51
 8009c14:	2201      	movs	r2, #1
 8009c16:	f004 f8dc 	bl	800ddd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 8009c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 8128 	bne.w	8009e7a <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009c30:	f240 524c 	movw	r2, #1356	; 0x54c
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d177      	bne.n	8009d28 <_ZN3BTD4InitEhhb+0x1d2>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c3e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009c42:	d00d      	beq.n	8009c60 <_ZN3BTD4InitEhhb+0x10a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c4a:	f240 422f 	movw	r2, #1071	; 0x42f
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d006      	beq.n	8009c60 <_ZN3BTD4InitEhhb+0x10a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c58:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d163      	bne.n	8009d28 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 8009c60:	2064      	movs	r0, #100	; 0x64
 8009c62:	f7f8 f807 	bl	8001c74 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009c76:	2301      	movs	r3, #1
 8009c78:	f005 f9e6 	bl	800f048 <_ZN3USB7setConfEhhh>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 80f9 	bne.w	8009e7e <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7d1b      	ldrb	r3, [r3, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d113      	bne.n	8009cbc <_ZN3BTD4InitEhhb+0x166>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	7d5b      	ldrb	r3, [r3, #21]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10f      	bne.n	8009cbc <_ZN3BTD4InitEhhb+0x166>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	7d9b      	ldrb	r3, [r3, #22]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <_ZN3BTD4InitEhhb+0x166>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7ddb      	ldrb	r3, [r3, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <_ZN3BTD4InitEhhb+0x166>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7e1b      	ldrb	r3, [r3, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <_ZN3BTD4InitEhhb+0x166>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	7e5b      	ldrb	r3, [r3, #25]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d019      	beq.n	8009cf0 <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009cc2:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009cc6:	d006      	beq.n	8009cd6 <_ZN3BTD4InitEhhb+0x180>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009cce:	f240 422f 	movw	r2, #1071	; 0x42f
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d106      	bne.n	8009ce4 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3314      	adds	r3, #20
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f002 f8b0 	bl	800be42 <_ZN3BTD9setBdaddrEPh>
 8009ce2:	e005      	b.n	8009cf0 <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3314      	adds	r3, #20
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 f8e9 	bl	800bec2 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009d00:	2300      	movs	r3, #0
 8009d02:	f005 f9a1 	bl	800f048 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d10:	2300      	movs	r3, #0
 8009d12:	2200      	movs	r2, #0
 8009d14:	f005 f96a 	bl	800efec <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009d24:	23d1      	movs	r3, #209	; 0xd1
 8009d26:	e0c7      	b.n	8009eb8 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009d2e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d25e      	bcs.n	8009df8 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009d40:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d106      	bne.n	8009d56 <_ZN3BTD4InitEhhb+0x200>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009d4e:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00d      	beq.n	8009d72 <_ZN3BTD4InitEhhb+0x21c>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009d5c:	f240 520d 	movw	r2, #1293	; 0x50d
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d120      	bne.n	8009da6 <_ZN3BTD4InitEhhb+0x250>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009d6a:	f240 625a 	movw	r2, #1626	; 0x65a
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d119      	bne.n	8009da6 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	1d1a      	adds	r2, r3, #4
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 f8f3 	bl	800bf68 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d8c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d90:	f107 0308 	add.w	r3, r7, #8
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4613      	mov	r3, r2
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f005 f8da 	bl	800ef52 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009da4:	e018      	b.n	8009dd8 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	1d1a      	adds	r2, r3, #4
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f002 f927 	bl	800c004 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009dc0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f005 f8c0 	bl	800ef52 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d150      	bne.n	8009e82 <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d805      	bhi.n	8009df6 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009dea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009dee:	3301      	adds	r3, #1
 8009df0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009df4:	e79b      	b.n	8009d2e <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 8009df6:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d945      	bls.n	8009e8e <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3351      	adds	r3, #81	; 0x51
 8009e16:	f003 ffdc 	bl	800ddd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009e20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d12e      	bne.n	8009e86 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e3e:	f005 f903 	bl	800f048 <_ZN3USB7setConfEhhh>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009e48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11c      	bne.n	8009e8a <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2264      	movs	r2, #100	; 0x64
 8009e54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009e76:	2300      	movs	r3, #0
 8009e78:	e01e      	b.n	8009eb8 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 8009e7a:	bf00      	nop
 8009e7c:	e014      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 8009e7e:	bf00      	nop
 8009e80:	e012      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 8009e82:	bf00      	nop
 8009e84:	e010      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 8009e86:	bf00      	nop
 8009e88:	e00e      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 8009e8a:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009e8c:	e00c      	b.n	8009ea8 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 8009e8e:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f005 f8a5 	bl	800efec <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009ea2:	23d1      	movs	r3, #209	; 0xd1
 8009ea4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3308      	adds	r3, #8
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
        return rcode;
 8009eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3750      	adds	r7, #80	; 0x50
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d845      	bhi.n	8009f5e <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009ed2:	7bfa      	ldrb	r2, [r7, #15]
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	440b      	add	r3, r1
 8009ede:	3351      	adds	r3, #81	; 0x51
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <_ZN3BTD10InitializeEv+0x2e>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e000      	b.n	8009ef0 <_ZN3BTD10InitializeEv+0x30>
 8009eee:	2008      	movs	r0, #8
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	4413      	add	r3, r2
 8009efa:	440b      	add	r3, r1
 8009efc:	3352      	adds	r3, #82	; 0x52
 8009efe:	4602      	mov	r2, r0
 8009f00:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009f02:	7bfa      	ldrb	r2, [r7, #15]
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f12:	78d3      	ldrb	r3, [r2, #3]
 8009f14:	f36f 0300 	bfc	r3, #0, #1
 8009f18:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009f1a:	7bfa      	ldrb	r2, [r7, #15]
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	4413      	add	r3, r2
 8009f24:	440b      	add	r3, r1
 8009f26:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f2a:	78d3      	ldrb	r3, [r2, #3]
 8009f2c:	f36f 0341 	bfc	r3, #1, #1
 8009f30:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <_ZN3BTD10InitializeEv+0x7c>
 8009f38:	2101      	movs	r1, #1
 8009f3a:	e000      	b.n	8009f3e <_ZN3BTD10InitializeEv+0x7e>
 8009f3c:	210f      	movs	r1, #15
 8009f3e:	7bfa      	ldrb	r2, [r7, #15]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	4413      	add	r3, r2
 8009f48:	4403      	add	r3, r0
 8009f4a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f4e:	78d3      	ldrb	r3, [r2, #3]
 8009f50:	f361 0387 	bfi	r3, r1, #2, #6
 8009f54:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
 8009f5c:	e7b6      	b.n	8009ecc <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d81c      	bhi.n	8009fa2 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	3318      	adds	r3, #24
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d010      	beq.n	8009f9a <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	3318      	adds	r3, #24
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	3318      	adds	r3, #24
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4608      	mov	r0, r1
 8009f98:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	73fb      	strb	r3, [r7, #15]
 8009fa0:	e7df      	b.n	8009f62 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	70fb      	strb	r3, [r7, #3]
 800a012:	460b      	mov	r3, r1
 800a014:	70bb      	strb	r3, [r7, #2]
 800a016:	4613      	mov	r3, r2
 800a018:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800a01a:	787b      	ldrb	r3, [r7, #1]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d15d      	bne.n	800a0dc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	78db      	ldrb	r3, [r3, #3]
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	2b03      	cmp	r3, #3
 800a032:	d114      	bne.n	800a05e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	789b      	ldrb	r3, [r3, #2]
 800a038:	b25b      	sxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da0f      	bge.n	800a05e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800a042:	7bfa      	ldrb	r2, [r7, #15]
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	4413      	add	r3, r2
 800a04c:	440b      	add	r3, r1
 800a04e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a052:	78d3      	ldrb	r3, [r2, #3]
 800a054:	2101      	movs	r1, #1
 800a056:	f361 0387 	bfi	r3, r1, #2, #6
 800a05a:	70d3      	strb	r3, [r2, #3]
 800a05c:	e00e      	b.n	800a07c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d13a      	bne.n	800a0e0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	789b      	ldrb	r3, [r3, #2]
 800a06e:	b25b      	sxtb	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	da01      	bge.n	800a078 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800a074:	2302      	movs	r3, #2
 800a076:	e000      	b.n	800a07a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	789b      	ldrb	r3, [r3, #2]
 800a080:	7bfa      	ldrb	r2, [r7, #15]
 800a082:	f003 030f 	and.w	r3, r3, #15
 800a086:	b2d8      	uxtb	r0, r3
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4413      	add	r3, r2
 800a090:	440b      	add	r3, r1
 800a092:	3351      	adds	r3, #81	; 0x51
 800a094:	4602      	mov	r2, r0
 800a096:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	889b      	ldrh	r3, [r3, #4]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	7bfa      	ldrb	r2, [r7, #15]
 800a0a0:	b2d8      	uxtb	r0, r3
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	440b      	add	r3, r1
 800a0ac:	3352      	adds	r3, #82	; 0x52
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	799b      	ldrb	r3, [r3, #6]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d204      	bcs.n	800a0ca <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	799a      	ldrb	r2, [r3, #6]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800a0da:	e002      	b.n	800a0e2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800a0dc:	bf00      	nop
 800a0de:	e000      	b.n	800a0e2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800a0e0:	bf00      	nop
}
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800a0ec:	f1a0 0004 	sub.w	r0, r0, #4
 800a0f0:	f7ff bf86 	b.w	800a000 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800a0f4 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff fedf 	bl	8009ec0 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff fa78 	bl	80095fc <_ZN3USB14GetAddressPoolEv>
 800a10c:	4603      	mov	r3, r0
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	3208      	adds	r2, #8
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800a11a:	4618      	mov	r0, r3
 800a11c:	4790      	blx	r2
        return 0;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800a136:	f083 0301 	eor.w	r3, r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800a140:	2300      	movs	r3, #0
 800a142:	e01d      	b.n	800a180 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800a144:	f7f7 fd8a 	bl	8001c5c <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	43db      	mvns	r3, r3
 800a152:	0fdb      	lsrs	r3, r3, #31
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d011      	beq.n	800a17e <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800a15a:	f7f7 fd7f 	bl	8001c5c <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a166:	441a      	add	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f80b 	bl	800a188 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb22 	bl	800a7bc <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fe4b 	bl	800ae14 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800a188:	b5b0      	push	{r4, r5, r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3389      	adds	r3, #137	; 0x89
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a1ae:	f107 050c 	add.w	r5, r7, #12
 800a1b2:	9201      	str	r2, [sp, #4]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	f003 ff72 	bl	800e0a2 <_ZN3USB10inTransferEhhPtPhh>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <_ZN3BTD14HCI_event_taskEv+0x48>
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	f040 82f1 	bne.w	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b35      	cmp	r3, #53	; 0x35
 800a1da:	f200 82ea 	bhi.w	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a3c5 	.word	0x0800a3c5
 800a1e8:	0800a425 	.word	0x0800a425
 800a1ec:	0800a57d 	.word	0x0800a57d
 800a1f0:	0800a667 	.word	0x0800a667
 800a1f4:	0800a5d9 	.word	0x0800a5d9
 800a1f8:	0800a725 	.word	0x0800a725
 800a1fc:	0800a60b 	.word	0x0800a60b
 800a200:	0800a79d 	.word	0x0800a79d
 800a204:	0800a79d 	.word	0x0800a79d
 800a208:	0800a7b3 	.word	0x0800a7b3
 800a20c:	0800a7b3 	.word	0x0800a7b3
 800a210:	0800a79d 	.word	0x0800a79d
 800a214:	0800a79d 	.word	0x0800a79d
 800a218:	0800a2bd 	.word	0x0800a2bd
 800a21c:	0800a79d 	.word	0x0800a79d
 800a220:	0800a7b3 	.word	0x0800a7b3
 800a224:	0800a7b3 	.word	0x0800a7b3
 800a228:	0800a79d 	.word	0x0800a79d
 800a22c:	0800a79d 	.word	0x0800a79d
 800a230:	0800a7b3 	.word	0x0800a7b3
 800a234:	0800a7b3 	.word	0x0800a7b3
 800a238:	0800a6f3 	.word	0x0800a6f3
 800a23c:	0800a71d 	.word	0x0800a71d
 800a240:	0800a79d 	.word	0x0800a79d
 800a244:	0800a79d 	.word	0x0800a79d
 800a248:	0800a79d 	.word	0x0800a79d
 800a24c:	0800a79d 	.word	0x0800a79d
 800a250:	0800a7b3 	.word	0x0800a7b3
 800a254:	0800a7b3 	.word	0x0800a7b3
 800a258:	0800a7b3 	.word	0x0800a7b3
 800a25c:	0800a7b3 	.word	0x0800a7b3
 800a260:	0800a79d 	.word	0x0800a79d
 800a264:	0800a7b3 	.word	0x0800a7b3
 800a268:	0800a7b3 	.word	0x0800a7b3
 800a26c:	0800a7b3 	.word	0x0800a7b3
 800a270:	0800a7b3 	.word	0x0800a7b3
 800a274:	0800a7b3 	.word	0x0800a7b3
 800a278:	0800a7b3 	.word	0x0800a7b3
 800a27c:	0800a7b3 	.word	0x0800a7b3
 800a280:	0800a7b3 	.word	0x0800a7b3
 800a284:	0800a7b3 	.word	0x0800a7b3
 800a288:	0800a7b3 	.word	0x0800a7b3
 800a28c:	0800a7b3 	.word	0x0800a7b3
 800a290:	0800a7b3 	.word	0x0800a7b3
 800a294:	0800a7b3 	.word	0x0800a7b3
 800a298:	0800a7b3 	.word	0x0800a7b3
 800a29c:	0800a7b3 	.word	0x0800a7b3
 800a2a0:	0800a7b3 	.word	0x0800a7b3
 800a2a4:	0800a78d 	.word	0x0800a78d
 800a2a8:	0800a79d 	.word	0x0800a79d
 800a2ac:	0800a795 	.word	0x0800a795
 800a2b0:	0800a7b3 	.word	0x0800a7b3
 800a2b4:	0800a7b3 	.word	0x0800a7b3
 800a2b8:	0800a79d 	.word	0x0800a79d
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f040 826c 	bne.w	800a7a0 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d114      	bne.n	800a30e <_ZN3BTD14HCI_event_taskEv+0x186>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d10f      	bne.n	800a30e <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a30c:	e059      	b.n	800a3c2 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a314:	2b04      	cmp	r3, #4
 800a316:	d12a      	bne.n	800a36e <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a31e:	2b10      	cmp	r3, #16
 800a320:	d125      	bne.n	800a36e <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d114      	bne.n	800a35a <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10f      	bne.n	800a35a <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a350:	e003      	b.n	800a35a <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a364:	b29a      	uxth	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a36c:	e029      	b.n	800a3c2 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a374:	2b09      	cmp	r3, #9
 800a376:	f040 8213 	bne.w	800a7a0 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a380:	2b10      	cmp	r3, #16
 800a382:	f040 820d 	bne.w	800a7a0 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a386:	2300      	movs	r3, #0
 800a388:	75fb      	strb	r3, [r7, #23]
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	d80e      	bhi.n	800a3ae <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	1d9a      	adds	r2, r3, #6
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	440a      	add	r2, r1
 800a39a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	460a      	mov	r2, r1
 800a3a4:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a3a6:	7dfb      	ldrb	r3, [r7, #23]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	75fb      	strb	r3, [r7, #23]
 800a3ac:	e7ed      	b.n	800a38a <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3b4:	f043 0320 	orr.w	r3, r3, #32
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a3c0:	e1ee      	b.n	800a7a0 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a3c2:	e1ed      	b.n	800a7a0 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d921      	bls.n	800a412 <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d017      	beq.n	800a412 <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	220a      	movs	r2, #10
 800a40e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a418:	3301      	adds	r3, #1
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a422:	e1c6      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 81ba 	beq.w	800a7a4 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a430:	2300      	movs	r3, #0
 800a432:	75bb      	strb	r3, [r7, #22]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a43a:	7dba      	ldrb	r2, [r7, #22]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	f080 81b1 	bcs.w	800a7a4 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	7dbb      	ldrb	r3, [r7, #22]
 800a44e:	4619      	mov	r1, r3
 800a450:	0049      	lsls	r1, r1, #1
 800a452:	440b      	add	r3, r1
 800a454:	b2db      	uxtb	r3, r3
 800a456:	4413      	add	r3, r2
 800a458:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	757b      	strb	r3, [r7, #21]
 800a45e:	7d7b      	ldrb	r3, [r7, #21]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d811      	bhi.n	800a488 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a464:	7d7b      	ldrb	r3, [r7, #21]
 800a466:	1d1a      	adds	r2, r3, #4
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	441a      	add	r2, r3
 800a46c:	7d7b      	ldrb	r3, [r7, #21]
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	440a      	add	r2, r1
 800a472:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	460a      	mov	r2, r1
 800a47c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a480:	7d7b      	ldrb	r3, [r7, #21]
 800a482:	3301      	adds	r3, #1
 800a484:	757b      	strb	r3, [r7, #21]
 800a486:	e7ea      	b.n	800a45e <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d038      	beq.n	800a504 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d133      	bne.n	800a504 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	d12e      	bne.n	800a504 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a4ac:	f003 030c 	and.w	r3, r3, #12
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d027      	beq.n	800a504 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	753b      	strb	r3, [r7, #20]
 800a4c0:	7d3b      	ldrb	r3, [r7, #20]
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d814      	bhi.n	800a4f0 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a4c6:	7d3b      	ldrb	r3, [r7, #20]
 800a4c8:	1cd9      	adds	r1, r3, #3
 800a4ca:	7dba      	ldrb	r2, [r7, #22]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	18ca      	adds	r2, r1, r3
 800a4d6:	7d3b      	ldrb	r3, [r7, #20]
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	460a      	mov	r2, r1
 800a4e6:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a4e8:	7d3b      	ldrb	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	753b      	strb	r3, [r7, #20]
 800a4ee:	e7e7      	b.n	800a4c0 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a502:	e03a      	b.n	800a57a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d031      	beq.n	800a572 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	2b05      	cmp	r3, #5
 800a51a:	d12a      	bne.n	800a572 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a522:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d023      	beq.n	800a572 <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a52a:	2300      	movs	r3, #0
 800a52c:	74fb      	strb	r3, [r7, #19]
 800a52e:	7cfb      	ldrb	r3, [r7, #19]
 800a530:	2b05      	cmp	r3, #5
 800a532:	d814      	bhi.n	800a55e <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a534:	7cfb      	ldrb	r3, [r7, #19]
 800a536:	1cd9      	adds	r1, r3, #3
 800a538:	7dba      	ldrb	r2, [r7, #22]
 800a53a:	4613      	mov	r3, r2
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	4413      	add	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	18ca      	adds	r2, r1, r3
 800a544:	7cfb      	ldrb	r3, [r7, #19]
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	440a      	add	r2, r1
 800a54a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	460a      	mov	r2, r1
 800a554:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a556:	7cfb      	ldrb	r3, [r7, #19]
 800a558:	3301      	adds	r3, #1
 800a55a:	74fb      	strb	r3, [r7, #19]
 800a55c:	e7e7      	b.n	800a52e <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a570:	e003      	b.n	800a57a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a572:	7dbb      	ldrb	r3, [r7, #22]
 800a574:	3301      	adds	r3, #1
 800a576:	75bb      	strb	r3, [r7, #22]
 800a578:	e75c      	b.n	800a434 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a57a:	e113      	b.n	800a7a4 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11a      	bne.n	800a5ce <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a59e:	b21a      	sxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	b21b      	sxth	r3, r3
 800a5aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	b21b      	sxth	r3, r3
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5c0:	f043 0302 	orr.w	r3, r3, #2
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a5cc:	e0f1      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a5d6:	e0ec      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f040 80e2 	bne.w	800a7a8 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5ea:	f043 0304 	orr.w	r3, r3, #4
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5fc:	f023 0302 	bic.w	r3, r3, #2
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a608:	e0ce      	b.n	800a7a8 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a610:	2b00      	cmp	r3, #0
 800a612:	f040 80cb 	bne.w	800a7ac <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a616:	2300      	movs	r3, #0
 800a618:	74bb      	strb	r3, [r7, #18]
 800a61a:	7cbb      	ldrb	r3, [r7, #18]
 800a61c:	2b1d      	cmp	r3, #29
 800a61e:	d818      	bhi.n	800a652 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a620:	7cbb      	ldrb	r3, [r7, #18]
 800a622:	f103 0209 	add.w	r2, r3, #9
 800a626:	7cbb      	ldrb	r3, [r7, #18]
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	440a      	add	r2, r1
 800a62c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	460a      	mov	r2, r1
 800a636:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a63a:	7cbb      	ldrb	r3, [r7, #18]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a648:	7cbb      	ldrb	r3, [r7, #18]
 800a64a:	3301      	adds	r3, #1
 800a64c:	74bb      	strb	r3, [r7, #18]
 800a64e:	e7e4      	b.n	800a61a <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a650:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a658:	f043 0308 	orr.w	r3, r3, #8
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a664:	e0a2      	b.n	800a7ac <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a666:	2300      	movs	r3, #0
 800a668:	747b      	strb	r3, [r7, #17]
 800a66a:	7c7b      	ldrb	r3, [r7, #17]
 800a66c:	2b05      	cmp	r3, #5
 800a66e:	d80e      	bhi.n	800a68e <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a670:	7c7b      	ldrb	r3, [r7, #17]
 800a672:	1c9a      	adds	r2, r3, #2
 800a674:	7c7b      	ldrb	r3, [r7, #17]
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	440a      	add	r2, r1
 800a67a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	4413      	add	r3, r2
 800a682:	460a      	mov	r2, r1
 800a684:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a686:	7c7b      	ldrb	r3, [r7, #17]
 800a688:	3301      	adds	r3, #1
 800a68a:	747b      	strb	r3, [r7, #17]
 800a68c:	e7ed      	b.n	800a66a <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a68e:	2300      	movs	r3, #0
 800a690:	743b      	strb	r3, [r7, #16]
 800a692:	7c3b      	ldrb	r3, [r7, #16]
 800a694:	2b02      	cmp	r3, #2
 800a696:	d810      	bhi.n	800a6ba <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a698:	7c3b      	ldrb	r3, [r7, #16]
 800a69a:	f103 0208 	add.w	r2, r3, #8
 800a69e:	7c3b      	ldrb	r3, [r7, #16]
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	460a      	mov	r2, r1
 800a6ae:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a6b2:	7c3b      	ldrb	r3, [r7, #16]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	743b      	strb	r3, [r7, #16]
 800a6b8:	e7eb      	b.n	800a692 <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	2b05      	cmp	r3, #5
 800a6c6:	d10a      	bne.n	800a6de <_ZN3BTD14HCI_event_taskEv+0x556>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a6ce:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6e4:	f043 0310 	orr.w	r3, r3, #16
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a6f0:	e05f      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 feec 	bl	800b4da <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a702:	e056      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fee4 	bl	800b4da <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a712:	e04e      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 ff93 	bl	800b640 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a71a:	e04a      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 ffca 	bl	800b6b6 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a722:	e046      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d123      	bne.n	800a776 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a73e:	f083 0301 	eor.w	r3, r3, #1
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a750:	e02e      	b.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d029      	beq.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x628>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a762:	f083 0301 	eor.w	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d021      	beq.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a774:	e01c      	b.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8b5b      	ldrh	r3, [r3, #26]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 f882 	bl	800b886 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2210      	movs	r2, #16
 800a786:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a78a:	e011      	b.n	800a7b0 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 ffcd 	bl	800b72c <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a792:	e00e      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 f810 	bl	800b7ba <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a79a:	e00a      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a79c:	bf00      	nop
 800a79e:	e008      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7a0:	bf00      	nop
 800a7a2:	e006      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7a4:	bf00      	nop
 800a7a6:	e004      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7a8:	bf00      	nop
 800a7aa:	e002      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7ac:	bf00      	nop
 800a7ae:	e000      	b.n	800a7b2 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a7b0:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a7b2:	bf00      	nop
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ba:	bf00      	nop

0800a7bc <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7ca:	2b13      	cmp	r3, #19
 800a7cc:	f200 82ef 	bhi.w	800adae <_ZN3BTD8HCI_taskEv+0x5f2>
 800a7d0:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <_ZN3BTD8HCI_taskEv+0x1c>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a829 	.word	0x0800a829
 800a7dc:	0800a863 	.word	0x0800a863
 800a7e0:	0800a8e9 	.word	0x0800a8e9
 800a7e4:	0800a909 	.word	0x0800a909
 800a7e8:	0800a929 	.word	0x0800a929
 800a7ec:	0800a97d 	.word	0x0800a97d
 800a7f0:	0800aa23 	.word	0x0800aa23
 800a7f4:	0800aa51 	.word	0x0800aa51
 800a7f8:	0800aa8b 	.word	0x0800aa8b
 800a7fc:	0800aab3 	.word	0x0800aab3
 800a800:	0800aae9 	.word	0x0800aae9
 800a804:	0800ab47 	.word	0x0800ab47
 800a808:	0800ab85 	.word	0x0800ab85
 800a80c:	0800acab 	.word	0x0800acab
 800a810:	0800adaf 	.word	0x0800adaf
 800a814:	0800acf1 	.word	0x0800acf1
 800a818:	0800ad1f 	.word	0x0800ad1f
 800a81c:	0800a9b3 	.word	0x0800a9b3
 800a820:	0800a9e9 	.word	0x0800a9e9
 800a824:	0800aa09 	.word	0x0800aa09
                case HCI_INIT_STATE:
                        hci_counter++;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a82e:	3301      	adds	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a844:	429a      	cmp	r2, r3
 800a846:	f240 82b4 	bls.w	800adb2 <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fb7d 	bl	800af4a <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a860:	e2a7      	b.n	800adb2 <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a868:	3301      	adds	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 f830 	bl	800b8f6 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a896:	e28e      	b.n	800adb6 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	f240 8286 	bls.w	800adb6 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	0092      	lsls	r2, r2, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a8c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8ca:	d904      	bls.n	800a8d6 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8d2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a8e6:	e266      	b.n	800adb6 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8261 	beq.w	800adba <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fb72 	bl	800afea <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a906:	e258      	b.n	800adba <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 8253 	beq.w	800adbe <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fb8a 	bl	800b032 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2204      	movs	r2, #4
 800a922:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a926:	e24a      	b.n	800adbe <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8245 	beq.w	800adc2 <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fc5d 	bl	800b206 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2205      	movs	r2, #5
 800a950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a954:	e235      	b.n	800adc2 <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d008      	beq.n	800a972 <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a960:	2100      	movs	r1, #0
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fb89 	bl	800b07a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2211      	movs	r2, #17
 800a96c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a970:	e227      	b.n	800adc2 <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2206      	movs	r2, #6
 800a976:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a97a:	e222      	b.n	800adc2 <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 821d 	beq.w	800adc6 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a992:	2b00      	cmp	r3, #0
 800a994:	d008      	beq.n	800a9a8 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a996:	2100      	movs	r1, #0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fb6e 	bl	800b07a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2211      	movs	r2, #17
 800a9a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a9a6:	e20e      	b.n	800adc6 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2206      	movs	r2, #6
 800a9ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9b0:	e209      	b.n	800adc6 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 8204 	beq.w	800adca <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fc9d 	bl	800b30e <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2212      	movs	r2, #18
 800a9d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a9dc:	e1f5      	b.n	800adca <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2206      	movs	r2, #6
 800a9e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9e6:	e1f0      	b.n	800adca <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 81eb 	beq.w	800adce <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fc4d 	bl	800b298 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2213      	movs	r2, #19
 800aa02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa06:	e1e2      	b.n	800adce <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 81dd 	beq.w	800add2 <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2206      	movs	r2, #6
 800aa1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa20:	e1d7      	b.n	800add2 <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d104      	bne.n	800aa36 <_ZN3BTD8HCI_taskEv+0x27a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fc8f 	bl	800b35a <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2207      	movs	r2, #7
 800aa40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800aa44:	e1d8      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	220a      	movs	r2, #10
 800aa4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa4e:	e1d3      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 81bb 	beq.w	800add6 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fcb2 	bl	800b3ca <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fb74 	bl	800b15e <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	220c      	movs	r2, #12
 800aa7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800aa7e:	e1aa      	b.n	800add6 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2208      	movs	r2, #8
 800aa84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa88:	e1a5      	b.n	800add6 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 81a0 	beq.w	800adda <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fcac 	bl	800b400 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2209      	movs	r2, #9
 800aaac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aab0:	e193      	b.n	800adda <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 818e 	beq.w	800adde <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d007      	beq.n	800aae0 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fead 	bl	800b830 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	220a      	movs	r2, #10
 800aada:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800aade:	e17e      	b.n	800adde <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fc8d 	bl	800b400 <_ZN3BTD11hci_connectEv>
                        break;
 800aae6:	e17a      	b.n	800adde <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaee:	f083 0301 	eor.w	r3, r3, #1
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8174 	beq.w	800ade2 <_ZN3BTD8HCI_taskEv+0x626>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab00:	f083 0301 	eor.w	r3, r3, #1
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 816b 	beq.w	800ade2 <_ZN3BTD8HCI_taskEv+0x626>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab12:	f083 0301 	eor.w	r3, r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 8162 	beq.w	800ade2 <_ZN3BTD8HCI_taskEv+0x626>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab24:	f083 0301 	eor.w	r3, r3, #1
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8159 	beq.w	800ade2 <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fa29 	bl	800af88 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	220b      	movs	r2, #11
 800ab40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ab44:	e14d      	b.n	800ade2 <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab4c:	f003 0310 	and.w	r3, r3, #16
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 faff 	bl	800b15e <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	220c      	movs	r2, #12
 800ab64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ab68:	e13d      	b.n	800ade6 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8136 	beq.w	800ade6 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2210      	movs	r2, #16
 800ab7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ab82:	e130      	b.n	800ade6 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab8a:	f003 0308 	and.w	r3, r3, #8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 812b 	beq.w	800adea <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3322      	adds	r3, #34	; 0x22
 800ab98:	2208      	movs	r2, #8
 800ab9a:	4999      	ldr	r1, [pc, #612]	; (800ae00 <_ZN3BTD8HCI_taskEv+0x644>)
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f004 fe27 	bl	800f7f0 <strncmp>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d147      	bne.n	800ac38 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3322      	adds	r3, #34	; 0x22
 800abcc:	2216      	movs	r2, #22
 800abce:	498d      	ldr	r1, [pc, #564]	; (800ae04 <_ZN3BTD8HCI_taskEv+0x648>)
 800abd0:	4618      	mov	r0, r3
 800abd2:	f004 fe0d 	bl	800f7f0 <strncmp>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d104      	bne.n	800abe6 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe4:	e028      	b.n	800ac38 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3322      	adds	r3, #34	; 0x22
 800abea:	2216      	movs	r2, #22
 800abec:	4986      	ldr	r1, [pc, #536]	; (800ae08 <_ZN3BTD8HCI_taskEv+0x64c>)
 800abee:	4618      	mov	r0, r3
 800abf0:	f004 fdfe 	bl	800f7f0 <strncmp>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d110      	bne.n	800ac1c <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac1a:	e00d      	b.n	800ac38 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3322      	adds	r3, #34	; 0x22
 800ac20:	2213      	movs	r2, #19
 800ac22:	497a      	ldr	r1, [pc, #488]	; (800ae0c <_ZN3BTD8HCI_taskEv+0x650>)
 800ac24:	4618      	mov	r0, r3
 800ac26:	f004 fde3 	bl	800f7f0 <strncmp>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d103      	bne.n	800ac38 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d117      	bne.n	800ac72 <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ac48:	2b25      	cmp	r3, #37	; 0x25
 800ac4a:	d112      	bne.n	800ac72 <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ac52:	2b08      	cmp	r3, #8
 800ac54:	d10d      	bne.n	800ac72 <_ZN3BTD8HCI_taskEv+0x4b6>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3322      	adds	r3, #34	; 0x22
 800ac5a:	2213      	movs	r2, #19
 800ac5c:	496c      	ldr	r1, [pc, #432]	; (800ae10 <_ZN3BTD8HCI_taskEv+0x654>)
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f004 fdc6 	bl	800f7f0 <strncmp>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d103      	bne.n	800ac72 <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <_ZN3BTD8HCI_taskEv+0x4de>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2208      	movs	r2, #8
 800ac94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ac98:	e0a7      	b.n	800adea <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa17 	bl	800b0ce <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	220d      	movs	r2, #13
 800aca4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aca8:	e09f      	b.n	800adea <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 809a 	beq.w	800adee <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d003      	beq.n	800accc <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	220f      	movs	r2, #15
 800acea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800acee:	e07e      	b.n	800adee <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800acf6:	3301      	adds	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ad06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad0a:	d972      	bls.n	800adf2 <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	220a      	movs	r2, #10
 800ad18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ad1c:	e069      	b.n	800adf2 <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d064      	beq.n	800adf6 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3389      	adds	r3, #137	; 0x89
 800ad38:	2240      	movs	r2, #64	; 0x40
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f004 fd0b 	bl	800f758 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	33c9      	adds	r3, #201	; 0xc9
 800ad46:	2240      	movs	r2, #64	; 0x40
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f004 fd04 	bl	800f758 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	220a      	movs	r2, #10
 800ada8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800adac:	e023      	b.n	800adf6 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800adae:	bf00      	nop
 800adb0:	e022      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adb2:	bf00      	nop
 800adb4:	e020      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adb6:	bf00      	nop
 800adb8:	e01e      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adba:	bf00      	nop
 800adbc:	e01c      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adbe:	bf00      	nop
 800adc0:	e01a      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adc2:	bf00      	nop
 800adc4:	e018      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adc6:	bf00      	nop
 800adc8:	e016      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adca:	bf00      	nop
 800adcc:	e014      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adce:	bf00      	nop
 800add0:	e012      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800add2:	bf00      	nop
 800add4:	e010      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800add6:	bf00      	nop
 800add8:	e00e      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adda:	bf00      	nop
 800addc:	e00c      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adde:	bf00      	nop
 800ade0:	e00a      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ade2:	bf00      	nop
 800ade4:	e008      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ade6:	bf00      	nop
 800ade8:	e006      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adea:	bf00      	nop
 800adec:	e004      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adee:	bf00      	nop
 800adf0:	e002      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adf2:	bf00      	nop
 800adf4:	e000      	b.n	800adf8 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800adf6:	bf00      	nop
        }
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	0800f91c 	.word	0x0800f91c
 800ae04:	0800f928 	.word	0x0800f928
 800ae08:	0800f940 	.word	0x0800f940
 800ae0c:	0800f958 	.word	0x0800f958
 800ae10:	0800f96c 	.word	0x0800f96c

0800ae14 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ae14:	b5b0      	push	{r4, r5, r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ae1c:	2340      	movs	r3, #64	; 0x40
 800ae1e:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	33c9      	adds	r3, #201	; 0xc9
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ae3a:	f107 050a 	add.w	r5, r7, #10
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	462b      	mov	r3, r5
 800ae44:	4622      	mov	r2, r4
 800ae46:	f003 f92c 	bl	800e0a2 <_ZN3USB10inTransferEhhPtPhh>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ae4e:	7b7b      	ldrb	r3, [r7, #13]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d125      	bne.n	800aea0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d022      	beq.n	800aea0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b03      	cmp	r3, #3
 800ae62:	d81d      	bhi.n	800aea0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	3318      	adds	r3, #24
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d011      	beq.n	800ae98 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	3318      	adds	r3, #24
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	6858      	ldr	r0, [r3, #4]
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	3318      	adds	r3, #24
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	32c9      	adds	r2, #201	; 0xc9
 800ae94:	4611      	mov	r1, r2
 800ae96:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	73fb      	strb	r3, [r7, #15]
 800ae9e:	e7de      	b.n	800ae5e <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d81c      	bhi.n	800aee4 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	3318      	adds	r3, #24
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	3318      	adds	r3, #24
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	3318      	adds	r3, #24
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3304      	adds	r3, #4
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4608      	mov	r0, r1
 800aeda:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	3301      	adds	r3, #1
 800aee0:	73bb      	strb	r3, [r7, #14]
 800aee2:	e7df      	b.n	800aea4 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bdb0      	pop	{r4, r5, r7, pc}

0800aeec <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	; 0x30
 800aef0:	af08      	add	r7, sp, #32
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	4613      	mov	r3, r2
 800aef8:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	b29a      	uxth	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800af1c:	2300      	movs	r3, #0
 800af1e:	9307      	str	r3, [sp, #28]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	9306      	str	r3, [sp, #24]
 800af24:	88fb      	ldrh	r3, [r7, #6]
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	9304      	str	r3, [sp, #16]
 800af2c:	2300      	movs	r3, #0
 800af2e:	9303      	str	r3, [sp, #12]
 800af30:	2300      	movs	r3, #0
 800af32:	9302      	str	r3, [sp, #8]
 800af34:	2300      	movs	r3, #0
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	2300      	movs	r3, #0
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2320      	movs	r3, #32
 800af3e:	f002 ffd8 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2203      	movs	r2, #3
 800af5e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	220c      	movs	r2, #12
 800af66:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3389      	adds	r3, #137	; 0x89
 800af76:	2203      	movs	r2, #3
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff ffb6 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af96:	f023 0310 	bic.w	r3, r3, #16
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	221a      	movs	r2, #26
 800afa6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	220c      	movs	r2, #12
 800afae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2203      	movs	r2, #3
 800afc6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800afca:	e003      	b.n	800afd4 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3389      	adds	r3, #137	; 0x89
 800afd8:	2204      	movs	r2, #4
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff ff85 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aff8:	f023 0320 	bic.w	r3, r3, #32
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2209      	movs	r2, #9
 800b008:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2210      	movs	r2, #16
 800b010:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3389      	adds	r3, #137	; 0x89
 800b020:	2203      	movs	r2, #3
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ff61 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b02a:	bf00      	nop
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2210      	movs	r2, #16
 800b058:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3389      	adds	r3, #137	; 0x89
 800b068:	2203      	movs	r2, #3
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ff3d 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b072:	bf00      	nop
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b08c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b090:	b29a      	uxth	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2204      	movs	r2, #4
 800b09c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2210      	movs	r2, #16
 800b0a4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3389      	adds	r3, #137	; 0x89
 800b0bc:	2204      	movs	r2, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ff13 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b0dc:	f023 0302 	bic.w	r3, r3, #2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2209      	movs	r2, #9
 800b0ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2207      	movs	r2, #7
 800b0fc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7f1a      	ldrb	r2, [r3, #28]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	7f5a      	ldrb	r2, [r3, #29]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7f9a      	ldrb	r2, [r3, #30]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	7fda      	ldrb	r2, [r3, #31]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3389      	adds	r3, #137	; 0x89
 800b14c:	220a      	movs	r2, #10
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fecb 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b16c:	f023 0308 	bic.w	r3, r3, #8
 800b170:	b29a      	uxth	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2219      	movs	r2, #25
 800b17c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2204      	movs	r2, #4
 800b184:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	220a      	movs	r2, #10
 800b18c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7f1a      	ldrb	r2, [r3, #28]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7f5a      	ldrb	r2, [r3, #29]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7f9a      	ldrb	r2, [r3, #30]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7fda      	ldrb	r2, [r3, #31]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3389      	adds	r3, #137	; 0x89
 800b1f4:	220d      	movs	r2, #13
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fe77 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b1fe:	bf00      	nop
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2213      	movs	r2, #19
 800b214:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	220c      	movs	r2, #12
 800b21c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800b220:	6838      	ldr	r0, [r7, #0]
 800b222:	f7f4 ffef 	bl	8000204 <strlen>
 800b226:	4603      	mov	r3, r0
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	3301      	adds	r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
 800b238:	7bfc      	ldrb	r4, [r7, #15]
 800b23a:	6838      	ldr	r0, [r7, #0]
 800b23c:	f7f4 ffe2 	bl	8000204 <strlen>
 800b240:	4603      	mov	r3, r0
 800b242:	429c      	cmp	r4, r3
 800b244:	d20e      	bcs.n	800b264 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	441a      	add	r2, r3
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	3303      	adds	r3, #3
 800b250:	7811      	ldrb	r1, [r2, #0]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	4413      	add	r3, r2
 800b256:	460a      	mov	r2, r1
 800b258:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	3301      	adds	r3, #1
 800b260:	73fb      	strb	r3, [r7, #15]
 800b262:	e7e9      	b.n	800b238 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	3303      	adds	r3, #3
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800b278:	6838      	ldr	r0, [r7, #0]
 800b27a:	f7f4 ffc3 	bl	8000204 <strlen>
 800b27e:	4603      	mov	r3, r0
 800b280:	b29b      	uxth	r3, r3
 800b282:	3304      	adds	r3, #4
 800b284:	b29b      	uxth	r3, r3
 800b286:	461a      	mov	r2, r3
 800b288:	4621      	mov	r1, r4
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff fe2e 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}

0800b298 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	220c      	movs	r2, #12
 800b2ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2208      	movs	r2, #8
 800b2b4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	22ff      	movs	r2, #255	; 0xff
 800b2bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	22ff      	movs	r2, #255	; 0xff
 800b2c4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	22ff      	movs	r2, #255	; 0xff
 800b2cc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	22ff      	movs	r2, #255	; 0xff
 800b2d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	22ff      	movs	r2, #255	; 0xff
 800b2dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	221f      	movs	r2, #31
 800b2e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	22ff      	movs	r2, #255	; 0xff
 800b2ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3389      	adds	r3, #137	; 0x89
 800b2fc:	220b      	movs	r2, #11
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff fdf3 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800b30e:	b580      	push	{r7, lr}
 800b310:	b082      	sub	sp, #8
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	460b      	mov	r3, r1
 800b318:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2256      	movs	r2, #86	; 0x56
 800b31e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	220c      	movs	r2, #12
 800b326:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800b338:	2201      	movs	r2, #1
 800b33a:	e000      	b.n	800b33e <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b33c:	2200      	movs	r2, #0
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3389      	adds	r3, #137	; 0x89
 800b348:	2204      	movs	r2, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff fdcd 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2204      	movs	r2, #4
 800b380:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2205      	movs	r2, #5
 800b388:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2233      	movs	r2, #51	; 0x33
 800b390:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	228b      	movs	r2, #139	; 0x8b
 800b398:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	229e      	movs	r2, #158	; 0x9e
 800b3a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2230      	movs	r2, #48	; 0x30
 800b3a8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3389      	adds	r3, #137	; 0x89
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fd95 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2204      	movs	r2, #4
 800b3de:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3389      	adds	r3, #137	; 0x89
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff fd7a 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	331c      	adds	r3, #28
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f804 	bl	800b41c <_ZN3BTD11hci_connectEPh>
}
 800b414:	bf00      	nop
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b42c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b430:	b29a      	uxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2205      	movs	r2, #5
 800b43c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2204      	movs	r2, #4
 800b444:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	220d      	movs	r2, #13
 800b44c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781a      	ldrb	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	785a      	ldrb	r2, [r3, #1]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	789a      	ldrb	r2, [r3, #2]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	78da      	ldrb	r2, [r3, #3]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	791a      	ldrb	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	795a      	ldrb	r2, [r3, #5]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2218      	movs	r2, #24
 800b490:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	22cc      	movs	r2, #204	; 0xcc
 800b498:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3389      	adds	r3, #137	; 0x89
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff fd0d 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b4da:	b590      	push	{r4, r7, lr}
 800b4dc:	b085      	sub	sp, #20
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	220d      	movs	r2, #13
 800b4e6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2204      	movs	r2, #4
 800b4ee:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2217      	movs	r2, #23
 800b4f6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7f1a      	ldrb	r2, [r3, #28]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7f5a      	ldrb	r2, [r3, #29]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7f9a      	ldrb	r2, [r3, #30]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7fda      	ldrb	r2, [r3, #31]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b540:	2b00      	cmp	r3, #0
 800b542:	d03f      	beq.n	800b5c4 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2206      	movs	r2, #6
 800b548:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b552:	2b00      	cmp	r3, #0
 800b554:	d013      	beq.n	800b57e <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b05      	cmp	r3, #5
 800b55e:	d822      	bhi.n	800b5a6 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b560:	7bfa      	ldrb	r2, [r7, #15]
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	330a      	adds	r3, #10
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	440a      	add	r2, r1
 800b56a:	7d11      	ldrb	r1, [r2, #20]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4413      	add	r3, r2
 800b570:	460a      	mov	r2, r1
 800b572:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	3301      	adds	r3, #1
 800b57a:	73fb      	strb	r3, [r7, #15]
 800b57c:	e7ed      	b.n	800b55a <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b57e:	2300      	movs	r3, #0
 800b580:	73bb      	strb	r3, [r7, #14]
 800b582:	7bbb      	ldrb	r3, [r7, #14]
 800b584:	2b05      	cmp	r3, #5
 800b586:	d80e      	bhi.n	800b5a6 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b588:	7bba      	ldrb	r2, [r7, #14]
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	330a      	adds	r3, #10
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	440a      	add	r2, r1
 800b592:	7f11      	ldrb	r1, [r2, #28]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	4413      	add	r3, r2
 800b598:	460a      	mov	r2, r1
 800b59a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	73bb      	strb	r3, [r7, #14]
 800b5a4:	e7ed      	b.n	800b582 <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	737b      	strb	r3, [r7, #13]
 800b5aa:	7b7b      	ldrb	r3, [r7, #13]
 800b5ac:	2b19      	cmp	r3, #25
 800b5ae:	d83c      	bhi.n	800b62a <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b5b0:	7b7b      	ldrb	r3, [r7, #13]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b5bc:	7b7b      	ldrb	r3, [r7, #13]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	737b      	strb	r3, [r7, #13]
 800b5c2:	e7f2      	b.n	800b5aa <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7f4 fe1b 	bl	8000204 <strlen>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b5d8:	2300      	movs	r3, #0
 800b5da:	733b      	strb	r3, [r7, #12]
 800b5dc:	7b3c      	ldrb	r4, [r7, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f4 fe0e 	bl	8000204 <strlen>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	429c      	cmp	r4, r3
 800b5ec:	d20f      	bcs.n	800b60e <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	691a      	ldr	r2, [r3, #16]
 800b5f2:	7b3b      	ldrb	r3, [r7, #12]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	7b3b      	ldrb	r3, [r7, #12]
 800b5f8:	330a      	adds	r3, #10
 800b5fa:	7811      	ldrb	r1, [r2, #0]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	4413      	add	r3, r2
 800b600:	460a      	mov	r2, r1
 800b602:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b606:	7b3b      	ldrb	r3, [r7, #12]
 800b608:	3301      	adds	r3, #1
 800b60a:	733b      	strb	r3, [r7, #12]
 800b60c:	e7e6      	b.n	800b5dc <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b60e:	7b3b      	ldrb	r3, [r7, #12]
 800b610:	2b0f      	cmp	r3, #15
 800b612:	d80a      	bhi.n	800b62a <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b614:	7b3b      	ldrb	r3, [r7, #12]
 800b616:	330a      	adds	r3, #10
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	4413      	add	r3, r2
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b622:	7b3b      	ldrb	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	733b      	strb	r3, [r7, #12]
 800b628:	e7f1      	b.n	800b60e <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3389      	adds	r3, #137	; 0x89
 800b62e:	221a      	movs	r2, #26
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fc5a 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b638:	bf00      	nop
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd90      	pop	{r4, r7, pc}

0800b640 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	220e      	movs	r2, #14
 800b64c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2204      	movs	r2, #4
 800b654:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2206      	movs	r2, #6
 800b65c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7f1a      	ldrb	r2, [r3, #28]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7f5a      	ldrb	r2, [r3, #29]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	7f9a      	ldrb	r2, [r3, #30]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7fda      	ldrb	r2, [r3, #31]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3389      	adds	r3, #137	; 0x89
 800b6a4:	2209      	movs	r2, #9
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fc1f 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	220c      	movs	r2, #12
 800b6c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2204      	movs	r2, #4
 800b6ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2206      	movs	r2, #6
 800b6d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	7f1a      	ldrb	r2, [r3, #28]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7f5a      	ldrb	r2, [r3, #29]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	7f9a      	ldrb	r2, [r3, #30]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7fda      	ldrb	r2, [r3, #31]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3389      	adds	r3, #137	; 0x89
 800b71a:	2209      	movs	r2, #9
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fbe4 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	222b      	movs	r2, #43	; 0x2b
 800b738:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2204      	movs	r2, #4
 800b740:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2209      	movs	r2, #9
 800b748:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	7f1a      	ldrb	r2, [r3, #28]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	7f5a      	ldrb	r2, [r3, #29]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	7f9a      	ldrb	r2, [r3, #30]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	7fda      	ldrb	r2, [r3, #31]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3389      	adds	r3, #137	; 0x89
 800b7a8:	220c      	movs	r2, #12
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff fb9d 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	222c      	movs	r2, #44	; 0x2c
 800b7c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2204      	movs	r2, #4
 800b7ce:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2206      	movs	r2, #6
 800b7d6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7f1a      	ldrb	r2, [r3, #28]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7f5a      	ldrb	r2, [r3, #29]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	7f9a      	ldrb	r2, [r3, #30]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7fda      	ldrb	r2, [r3, #31]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3389      	adds	r3, #137	; 0x89
 800b81e:	2209      	movs	r2, #9
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff fb62 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2211      	movs	r2, #17
 800b83c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2204      	movs	r2, #4
 800b844:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8b5b      	ldrh	r3, [r3, #26]
 800b854:	b2da      	uxtb	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8b5b      	ldrh	r3, [r3, #26]
 800b860:	121b      	asrs	r3, r3, #8
 800b862:	b2db      	uxtb	r3, r3
 800b864:	f003 030f 	and.w	r3, r3, #15
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3389      	adds	r3, #137	; 0x89
 800b874:	2205      	movs	r2, #5
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff fb37 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b898:	f023 0304 	bic.w	r3, r3, #4
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2206      	movs	r2, #6
 800b8a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2203      	movs	r2, #3
 800b8b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b8bc:	887b      	ldrh	r3, [r7, #2]
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b8c6:	887b      	ldrh	r3, [r7, #2]
 800b8c8:	121b      	asrs	r3, r3, #8
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2213      	movs	r2, #19
 800b8dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	3389      	adds	r3, #137	; 0x89
 800b8e4:	2206      	movs	r2, #6
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff faff 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2224      	movs	r2, #36	; 0x24
 800b902:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	220c      	movs	r2, #12
 800b90a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2203      	movs	r2, #3
 800b912:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2204      	movs	r2, #4
 800b91a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2208      	movs	r2, #8
 800b922:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3389      	adds	r3, #137	; 0x89
 800b932:	2206      	movs	r2, #6
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fad8 	bl	800aeec <_ZN3BTD11HCI_CommandEPht>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b944:	b5b0      	push	{r4, r5, r7, lr}
 800b946:	b08a      	sub	sp, #40	; 0x28
 800b948:	af02      	add	r7, sp, #8
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	461a      	mov	r2, r3
 800b950:	460b      	mov	r3, r1
 800b952:	817b      	strh	r3, [r7, #10]
 800b954:	4613      	mov	r3, r2
 800b956:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b958:	466b      	mov	r3, sp
 800b95a:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b95c:	7a7b      	ldrb	r3, [r7, #9]
 800b95e:	1ddc      	adds	r4, r3, #7
 800b960:	61bc      	str	r4, [r7, #24]
 800b962:	4623      	mov	r3, r4
 800b964:	3301      	adds	r3, #1
 800b966:	4618      	mov	r0, r3
 800b968:	f04f 0100 	mov.w	r1, #0
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	00cb      	lsls	r3, r1, #3
 800b976:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b97a:	00c2      	lsls	r2, r0, #3
 800b97c:	4623      	mov	r3, r4
 800b97e:	3301      	adds	r3, #1
 800b980:	4618      	mov	r0, r3
 800b982:	f04f 0100 	mov.w	r1, #0
 800b986:	f04f 0200 	mov.w	r2, #0
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	00cb      	lsls	r3, r1, #3
 800b990:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b994:	00c2      	lsls	r2, r0, #3
 800b996:	4623      	mov	r3, r4
 800b998:	3301      	adds	r3, #1
 800b99a:	3307      	adds	r3, #7
 800b99c:	08db      	lsrs	r3, r3, #3
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	ebad 0d03 	sub.w	sp, sp, r3
 800b9a4:	ab02      	add	r3, sp, #8
 800b9a6:	3300      	adds	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b9aa:	897b      	ldrh	r3, [r7, #10]
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b9b2:	897b      	ldrh	r3, [r7, #10]
 800b9b4:	121b      	asrs	r3, r3, #8
 800b9b6:	b25b      	sxtb	r3, r3
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	b25b      	sxtb	r3, r3
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b9ca:	7a7b      	ldrb	r3, [r7, #9]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b9d4:	7a7b      	ldrb	r3, [r7, #9]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	121b      	asrs	r3, r3, #8
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	7a7a      	ldrb	r2, [r7, #9]
 800b9e4:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b9e6:	7a7b      	ldrb	r3, [r7, #9]
 800b9e8:	121b      	asrs	r3, r3, #8
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b9f6:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b9fe:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800ba00:	2300      	movs	r3, #0
 800ba02:	83fb      	strh	r3, [r7, #30]
 800ba04:	7a7b      	ldrb	r3, [r7, #9]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	8bfa      	ldrh	r2, [r7, #30]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d20b      	bcs.n	800ba26 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800ba0e:	8bfb      	ldrh	r3, [r7, #30]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	441a      	add	r2, r3
 800ba14:	8bfb      	ldrh	r3, [r7, #30]
 800ba16:	3308      	adds	r3, #8
 800ba18:	7811      	ldrb	r1, [r2, #0]
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800ba1e:	8bfb      	ldrh	r3, [r7, #30]
 800ba20:	3301      	adds	r3, #1
 800ba22:	83fb      	strh	r3, [r7, #30]
 800ba24:	e7ee      	b.n	800ba04 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800ba36:	7a7b      	ldrb	r3, [r7, #9]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	b29c      	uxth	r4, r3
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	4623      	mov	r3, r4
 800ba44:	f002 fc34 	bl	800e2b0 <_ZN3USB11outTransferEhhtPh>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800ba4c:	7cfb      	ldrb	r3, [r7, #19]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800ba52:	2064      	movs	r0, #100	; 0x64
 800ba54:	f7f6 f90e 	bl	8001c74 <HAL_Delay>
 800ba58:	46ad      	mov	sp, r5
}
 800ba5a:	bf00      	nop
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bdb0      	pop	{r4, r5, r7, pc}

0800ba62 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af02      	add	r7, sp, #8
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	817b      	strh	r3, [r7, #10]
 800ba70:	4613      	mov	r3, r2
 800ba72:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	7a7a      	ldrb	r2, [r7, #9]
 800ba80:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2204      	movs	r2, #4
 800ba88:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800ba94:	8b3b      	ldrh	r3, [r7, #24]
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800ba9e:	8b3b      	ldrh	r3, [r7, #24]
 800baa0:	121b      	asrs	r3, r3, #8
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	781a      	ldrb	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	785a      	ldrb	r2, [r3, #1]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bac4:	8979      	ldrh	r1, [r7, #10]
 800bac6:	2300      	movs	r3, #0
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	2301      	movs	r3, #1
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	2308      	movs	r3, #8
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff ff37 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af02      	add	r7, sp, #8
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	817b      	strh	r3, [r7, #10]
 800baec:	4613      	mov	r3, r2
 800baee:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2203      	movs	r2, #3
 800baf4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	7a7a      	ldrb	r2, [r7, #9]
 800bafc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2208      	movs	r2, #8
 800bb04:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	781a      	ldrb	r2, [r3, #0]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	785a      	ldrb	r2, [r3, #1]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	781a      	ldrb	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	785a      	ldrb	r2, [r3, #1]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	7f3a      	ldrb	r2, [r7, #28]
 800bb3c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bb5e:	8979      	ldrh	r1, [r7, #10]
 800bb60:	2300      	movs	r3, #0
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2301      	movs	r3, #1
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	230c      	movs	r3, #12
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff feea 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb70:	bf00      	nop
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	607b      	str	r3, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	817b      	strh	r3, [r7, #10]
 800bb86:	4613      	mov	r3, r2
 800bb88:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	7a7a      	ldrb	r2, [r7, #9]
 800bb96:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	785a      	ldrb	r2, [r3, #1]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2202      	movs	r2, #2
 800bbda:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	22ff      	movs	r2, #255	; 0xff
 800bbe2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	22ff      	movs	r2, #255	; 0xff
 800bbea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bbf4:	8979      	ldrh	r1, [r7, #10]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	230c      	movs	r3, #12
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff fe9f 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b086      	sub	sp, #24
 800bc12:	af02      	add	r7, sp, #8
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	607b      	str	r3, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	817b      	strh	r3, [r7, #10]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2205      	movs	r2, #5
 800bc24:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	7a7a      	ldrb	r2, [r7, #9]
 800bc2c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	220a      	movs	r2, #10
 800bc34:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	785a      	ldrb	r2, [r3, #1]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	22a0      	movs	r2, #160	; 0xa0
 800bc88:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bc9a:	8979      	ldrh	r1, [r7, #10]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	2301      	movs	r3, #1
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	230e      	movs	r3, #14
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fe4c 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bcac:	bf00      	nop
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	817b      	strh	r3, [r7, #10]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2206      	movs	r2, #6
 800bcca:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	7a7a      	ldrb	r2, [r7, #9]
 800bcd2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2204      	movs	r2, #4
 800bcda:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	781a      	ldrb	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	785a      	ldrb	r2, [r3, #1]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	781a      	ldrb	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	785a      	ldrb	r2, [r3, #1]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bd14:	8979      	ldrh	r1, [r7, #10]
 800bd16:	2300      	movs	r3, #0
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	2308      	movs	r3, #8
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff fe0f 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bd26:	bf00      	nop
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	af02      	add	r7, sp, #8
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	607b      	str	r3, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	817b      	strh	r3, [r7, #10]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2207      	movs	r2, #7
 800bd44:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	7a7a      	ldrb	r2, [r7, #9]
 800bd4c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2204      	movs	r2, #4
 800bd54:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	785a      	ldrb	r2, [r3, #1]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	785a      	ldrb	r2, [r3, #1]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bd8e:	8979      	ldrh	r1, [r7, #10]
 800bd90:	2300      	movs	r3, #0
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	2301      	movs	r3, #1
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2308      	movs	r3, #8
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff fdd2 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bda0:	bf00      	nop
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af02      	add	r7, sp, #8
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	807b      	strh	r3, [r7, #2]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	707b      	strb	r3, [r7, #1]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	220b      	movs	r2, #11
 800bdc6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	787a      	ldrb	r2, [r7, #1]
 800bdce:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2208      	movs	r2, #8
 800bdd6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	783a      	ldrb	r2, [r7, #0]
 800bde6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7c3a      	ldrb	r2, [r7, #16]
 800bdee:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f203 1209 	addw	r2, r3, #265	; 0x109
 800be28:	8879      	ldrh	r1, [r7, #2]
 800be2a:	2300      	movs	r3, #0
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	2301      	movs	r3, #1
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	230c      	movs	r3, #12
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fd85 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800be42:	b580      	push	{r7, lr}
 800be44:	b08e      	sub	sp, #56	; 0x38
 800be46:	af08      	add	r7, sp, #32
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800be4c:	2301      	movs	r3, #1
 800be4e:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800be50:	2300      	movs	r3, #0
 800be52:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800be54:	2300      	movs	r3, #0
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	2b05      	cmp	r3, #5
 800be5c:	d811      	bhi.n	800be82 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	f1c3 0305 	rsb	r3, r3, #5
 800be64:	461a      	mov	r2, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	441a      	add	r2, r3
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	3302      	adds	r3, #2
 800be6e:	7812      	ldrb	r2, [r2, #0]
 800be70:	f107 0118 	add.w	r1, r7, #24
 800be74:	440b      	add	r3, r1
 800be76:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	3301      	adds	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
 800be80:	e7ea      	b.n	800be58 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800be92:	2300      	movs	r3, #0
 800be94:	9307      	str	r3, [sp, #28]
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	9306      	str	r3, [sp, #24]
 800be9c:	2308      	movs	r3, #8
 800be9e:	9305      	str	r3, [sp, #20]
 800bea0:	2308      	movs	r3, #8
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	2300      	movs	r3, #0
 800bea6:	9303      	str	r3, [sp, #12]
 800bea8:	2303      	movs	r3, #3
 800beaa:	9302      	str	r3, [sp, #8]
 800beac:	23f5      	movs	r3, #245	; 0xf5
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	2309      	movs	r3, #9
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	2321      	movs	r3, #33	; 0x21
 800beb6:	f002 f81c 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800beba:	bf00      	nop
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b08e      	sub	sp, #56	; 0x38
 800bec6:	af08      	add	r7, sp, #32
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800becc:	2305      	movs	r3, #5
 800bece:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800bed0:	2310      	movs	r3, #16
 800bed2:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800bed4:	2301      	movs	r3, #1
 800bed6:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800bed8:	2302      	movs	r3, #2
 800beda:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800bedc:	2312      	movs	r3, #18
 800bede:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800bee0:	2300      	movs	r3, #0
 800bee2:	75fb      	strb	r3, [r7, #23]
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b05      	cmp	r3, #5
 800bee8:	d80e      	bhi.n	800bf08 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	441a      	add	r2, r3
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	3301      	adds	r3, #1
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	f107 0118 	add.w	r1, r7, #24
 800befa:	440b      	add	r3, r1
 800befc:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	3301      	adds	r3, #1
 800bf04:	75fb      	strb	r3, [r7, #23]
 800bf06:	e7ed      	b.n	800bee4 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9307      	str	r3, [sp, #28]
 800bf1c:	f107 030c 	add.w	r3, r7, #12
 800bf20:	9306      	str	r3, [sp, #24]
 800bf22:	230b      	movs	r3, #11
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	230b      	movs	r3, #11
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9303      	str	r3, [sp, #12]
 800bf2e:	2303      	movs	r3, #3
 800bf30:	9302      	str	r3, [sp, #8]
 800bf32:	2305      	movs	r3, #5
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	2309      	movs	r3, #9
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	2321      	movs	r3, #33	; 0x21
 800bf3c:	f001 ffd9 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bf40:	bf00      	nop
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	4a04      	ldr	r2, [pc, #16]	; (800bf64 <_ZN13USBReadParserC1Ev+0x1c>)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	0800fa9c 	.word	0x0800fa9c

0800bf68 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff ffe7 	bl	800bf48 <_ZN13USBReadParserC1Ev>
 800bf7a:	4a21      	ldr	r2, [pc, #132]	; (800c000 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	605a      	str	r2, [r3, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3308      	adds	r3, #8
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fb65 	bl	800965a <_ZN16MultiValueBufferC1Ev>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3310      	adds	r3, #16
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd fb77 	bl	8009688 <_ZN20MultiByteValueParserC1Ev>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3318      	adds	r3, #24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fd fb9e 	bl	80096e0 <_ZN11ByteSkipperC1Ev>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f103 0220 	add.w	r2, r3, #32
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f103 0210 	add.w	r2, r3, #16
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4610      	mov	r0, r2
 800bfde:	f7fd fb67 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f103 0218 	add.w	r2, r3, #24
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	3308      	adds	r3, #8
 800bfec:	4619      	mov	r1, r3
 800bfee:	4610      	mov	r0, r2
 800bff0:	f7fd fb8a 	bl	8009708 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	0800fa44 	.word	0x0800fa44

0800c004 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff ff99 	bl	800bf48 <_ZN13USBReadParserC1Ev>
 800c016:	4a21      	ldr	r2, [pc, #132]	; (800c09c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	605a      	str	r2, [r3, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3308      	adds	r3, #8
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fb17 	bl	800965a <_ZN16MultiValueBufferC1Ev>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3310      	adds	r3, #16
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fb29 	bl	8009688 <_ZN20MultiByteValueParserC1Ev>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3318      	adds	r3, #24
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fd fb50 	bl	80096e0 <_ZN11ByteSkipperC1Ev>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f103 0220 	add.w	r2, r3, #32
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f103 0210 	add.w	r2, r3, #16
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3308      	adds	r3, #8
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f7fd fb19 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f103 0218 	add.w	r2, r3, #24
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3308      	adds	r3, #8
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f7fd fb3c 	bl	8009708 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	0800fa38 	.word	0x0800fa38

0800c0a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	607a      	str	r2, [r7, #4]
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c0b0:	897b      	ldrh	r3, [r7, #10]
 800c0b2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800c0b8:	8afb      	ldrh	r3, [r7, #22]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00f      	beq.n	800c0de <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c0be:	f107 0216 	add.w	r2, r7, #22
 800c0c2:	f107 0310 	add.w	r3, r7, #16
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f82d 	bl	800c128 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f083 0301 	eor.w	r3, r3, #1
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d100      	bne.n	800c0dc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c0da:	e7ed      	b.n	800c0b8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c0dc:	bf00      	nop
}
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c0f4:	897b      	ldrh	r3, [r7, #10]
 800c0f6:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800c0fc:	8afb      	ldrh	r3, [r7, #22]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00f      	beq.n	800c122 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c102:	f107 0216 	add.w	r2, r7, #22
 800c106:	f107 0310 	add.w	r3, r7, #16
 800c10a:	4619      	mov	r1, r3
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 f981 	bl	800c414 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c112:	4603      	mov	r3, r0
 800c114:	f083 0301 	eor.w	r3, r3, #1
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d100      	bne.n	800c120 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c11e:	e7ed      	b.n	800c0fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c120:	bf00      	nop
}
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c12a:	b089      	sub	sp, #36	; 0x24
 800c12c:	af02      	add	r7, sp, #8
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3320      	adds	r3, #32
 800c138:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3320      	adds	r3, #32
 800c13e:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c146:	2b04      	cmp	r3, #4
 800c148:	f200 815e 	bhi.w	800c408 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c14c:	a201      	add	r2, pc, #4	; (adr r2, 800c154 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c152:	bf00      	nop
 800c154:	0800c169 	.word	0x0800c169
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c1cb 	.word	0x0800c1cb
 800c160:	0800c1df 	.word	0x0800c1df
 800c164:	0800c2a3 	.word	0x0800c2a3
                case 0:
                        theBuffer.valueSize = 2;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2202      	movs	r2, #2
 800c16c:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f103 0210 	add.w	r2, r3, #16
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3308      	adds	r3, #8
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fd fa98 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3310      	adds	r3, #16
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	68b9      	ldr	r1, [r7, #8]
 800c190:	4618      	mov	r0, r3
 800c192:	f003 fa49 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c196:	4603      	mov	r3, r0
 800c198:	f083 0301 	eor.w	r3, r3, #1
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e131      	b.n	800c40a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c1ba:	785a      	ldrb	r2, [r3, #1]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3320      	adds	r3, #32
 800c1ce:	1c9a      	adds	r2, r3, #2
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2203      	movs	r2, #3
 800c1da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c1e4:	3b02      	subs	r3, #2
 800c1e6:	2b1f      	cmp	r3, #31
 800c1e8:	d847      	bhi.n	800c27a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c1ea:	a201      	add	r2, pc, #4	; (adr r2, 800c1f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f0:	0800c27b 	.word	0x0800c27b
 800c1f4:	0800c27b 	.word	0x0800c27b
 800c1f8:	0800c271 	.word	0x0800c271
 800c1fc:	0800c27b 	.word	0x0800c27b
 800c200:	0800c27b 	.word	0x0800c27b
 800c204:	0800c27b 	.word	0x0800c27b
 800c208:	0800c27b 	.word	0x0800c27b
 800c20c:	0800c27b 	.word	0x0800c27b
 800c210:	0800c27b 	.word	0x0800c27b
 800c214:	0800c27b 	.word	0x0800c27b
 800c218:	0800c27b 	.word	0x0800c27b
 800c21c:	0800c27b 	.word	0x0800c27b
 800c220:	0800c27b 	.word	0x0800c27b
 800c224:	0800c27b 	.word	0x0800c27b
 800c228:	0800c27b 	.word	0x0800c27b
 800c22c:	0800c27b 	.word	0x0800c27b
 800c230:	0800c27b 	.word	0x0800c27b
 800c234:	0800c27b 	.word	0x0800c27b
 800c238:	0800c27b 	.word	0x0800c27b
 800c23c:	0800c27b 	.word	0x0800c27b
 800c240:	0800c27b 	.word	0x0800c27b
 800c244:	0800c27b 	.word	0x0800c27b
 800c248:	0800c27b 	.word	0x0800c27b
 800c24c:	0800c27b 	.word	0x0800c27b
 800c250:	0800c27b 	.word	0x0800c27b
 800c254:	0800c27b 	.word	0x0800c27b
 800c258:	0800c27b 	.word	0x0800c27b
 800c25c:	0800c27b 	.word	0x0800c27b
 800c260:	0800c27b 	.word	0x0800c27b
 800c264:	0800c27b 	.word	0x0800c27b
 800c268:	0800c27b 	.word	0x0800c27b
 800c26c:	0800c27b 	.word	0x0800c27b
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c278:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c280:	3b02      	subs	r3, #2
 800c282:	b2da      	uxtb	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f103 0210 	add.w	r2, r3, #16
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3308      	adds	r3, #8
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd fa0b 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2204      	movs	r2, #4
 800c29e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c2a8:	2b05      	cmp	r3, #5
 800c2aa:	d055      	beq.n	800c358 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c2ac:	2b05      	cmp	r3, #5
 800c2ae:	f300 8085 	bgt.w	800c3bc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d002      	beq.n	800c2bc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d015      	beq.n	800c2e6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c2ba:	e07f      	b.n	800c3bc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3310      	adds	r3, #16
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f003 f9af 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f083 0301 	eor.w	r3, r3, #1
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e097      	b.n	800c40a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	795a      	ldrb	r2, [r3, #5]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c2e4:	e086      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3310      	adds	r3, #16
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f003 f99a 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	f083 0301 	eor.w	r3, r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c300:	2300      	movs	r3, #0
 800c302:	e082      	b.n	800c40a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	795b      	ldrb	r3, [r3, #5]
 800c308:	2be0      	cmp	r3, #224	; 0xe0
 800c30a:	d16c      	bne.n	800c3e6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	799b      	ldrb	r3, [r3, #6]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d16a      	bne.n	800c3ea <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d004      	beq.n	800c328 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	79db      	ldrb	r3, [r3, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d104      	bne.n	800c330 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c326:	e065      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	79db      	ldrb	r3, [r3, #7]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d15e      	bne.n	800c3ee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	789a      	ldrb	r2, [r3, #2]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	78da      	ldrb	r2, [r3, #3]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	79da      	ldrb	r2, [r3, #7]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c356:	e04d      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3310      	adds	r3, #16
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	4618      	mov	r0, r3
 800c362:	f003 f961 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c366:	4603      	mov	r3, r0
 800c368:	f083 0301 	eor.w	r3, r3, #1
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c372:	2300      	movs	r3, #0
 800c374:	e049      	b.n	800c40a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d038      	beq.n	800c3f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d034      	beq.n	800c3f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6858      	ldr	r0, [r3, #4]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681c      	ldr	r4, [r3, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	3220      	adds	r2, #32
 800c3b0:	9201      	str	r2, [sp, #4]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	4633      	mov	r3, r6
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	47a0      	blx	r4
                                        break;
 800c3ba:	e01a      	b.n	800c3f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f103 0018 	add.w	r0, r3, #24
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	3b02      	subs	r3, #2
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	f7fd f9ac 	bl	800972e <_ZN11ByteSkipper4SkipEPPhPtt>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f083 0301 	eor.w	r3, r3, #1
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d008      	beq.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e011      	b.n	800c40a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c3e6:	bf00      	nop
 800c3e8:	e004      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c3ea:	bf00      	nop
 800c3ec:	e002      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c3f2:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f103 0220 	add.w	r2, r3, #32
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c408:	2301      	movs	r3, #1
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c412:	bf00      	nop

0800c414 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c416:	b089      	sub	sp, #36	; 0x24
 800c418:	af02      	add	r7, sp, #8
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3320      	adds	r3, #32
 800c424:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3320      	adds	r3, #32
 800c42a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c432:	2b04      	cmp	r3, #4
 800c434:	f200 815e 	bhi.w	800c6f4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c438:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43e:	bf00      	nop
 800c440:	0800c455 	.word	0x0800c455
 800c444:	0800c475 	.word	0x0800c475
 800c448:	0800c4b7 	.word	0x0800c4b7
 800c44c:	0800c4cb 	.word	0x0800c4cb
 800c450:	0800c58f 	.word	0x0800c58f
                        theBuffer.valueSize = 2;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2202      	movs	r2, #2
 800c458:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f103 0210 	add.w	r2, r3, #16
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3308      	adds	r3, #8
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f7fd f922 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3310      	adds	r3, #16
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	68b9      	ldr	r1, [r7, #8]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f003 f8d3 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c482:	4603      	mov	r3, r0
 800c484:	f083 0301 	eor.w	r3, r3, #1
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c48e:	2300      	movs	r3, #0
 800c490:	e131      	b.n	800c6f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c498:	781a      	ldrb	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c4a6:	785a      	ldrb	r2, [r3, #1]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3320      	adds	r3, #32
 800c4ba:	1c9a      	adds	r2, r3, #2
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c4d0:	3b02      	subs	r3, #2
 800c4d2:	2b1f      	cmp	r3, #31
 800c4d4:	d847      	bhi.n	800c566 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c4d6:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c567 	.word	0x0800c567
 800c4e0:	0800c567 	.word	0x0800c567
 800c4e4:	0800c55d 	.word	0x0800c55d
 800c4e8:	0800c567 	.word	0x0800c567
 800c4ec:	0800c567 	.word	0x0800c567
 800c4f0:	0800c567 	.word	0x0800c567
 800c4f4:	0800c567 	.word	0x0800c567
 800c4f8:	0800c567 	.word	0x0800c567
 800c4fc:	0800c567 	.word	0x0800c567
 800c500:	0800c567 	.word	0x0800c567
 800c504:	0800c567 	.word	0x0800c567
 800c508:	0800c567 	.word	0x0800c567
 800c50c:	0800c567 	.word	0x0800c567
 800c510:	0800c567 	.word	0x0800c567
 800c514:	0800c567 	.word	0x0800c567
 800c518:	0800c567 	.word	0x0800c567
 800c51c:	0800c567 	.word	0x0800c567
 800c520:	0800c567 	.word	0x0800c567
 800c524:	0800c567 	.word	0x0800c567
 800c528:	0800c567 	.word	0x0800c567
 800c52c:	0800c567 	.word	0x0800c567
 800c530:	0800c567 	.word	0x0800c567
 800c534:	0800c567 	.word	0x0800c567
 800c538:	0800c567 	.word	0x0800c567
 800c53c:	0800c567 	.word	0x0800c567
 800c540:	0800c567 	.word	0x0800c567
 800c544:	0800c567 	.word	0x0800c567
 800c548:	0800c567 	.word	0x0800c567
 800c54c:	0800c567 	.word	0x0800c567
 800c550:	0800c567 	.word	0x0800c567
 800c554:	0800c567 	.word	0x0800c567
 800c558:	0800c567 	.word	0x0800c567
                                        isGoodInterface = false;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c564:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c56c:	3b02      	subs	r3, #2
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f103 0210 	add.w	r2, r3, #16
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3308      	adds	r3, #8
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fd f895 	bl	80096b0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2204      	movs	r2, #4
 800c58a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c594:	2b05      	cmp	r3, #5
 800c596:	d055      	beq.n	800c644 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c598:	2b05      	cmp	r3, #5
 800c59a:	f300 8085 	bgt.w	800c6a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d002      	beq.n	800c5a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d015      	beq.n	800c5d2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c5a6:	e07f      	b.n	800c6a8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3310      	adds	r3, #16
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f003 f839 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	f083 0301 	eor.w	r3, r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e097      	b.n	800c6f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	795a      	ldrb	r2, [r3, #5]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c5d0:	e086      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3310      	adds	r3, #16
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	68b9      	ldr	r1, [r7, #8]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f003 f824 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	f083 0301 	eor.w	r3, r3, #1
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e082      	b.n	800c6f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	795b      	ldrb	r3, [r3, #5]
 800c5f4:	2bff      	cmp	r3, #255	; 0xff
 800c5f6:	d16c      	bne.n	800c6d2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	799b      	ldrb	r3, [r3, #6]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d16a      	bne.n	800c6d6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	79db      	ldrb	r3, [r3, #7]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d104      	bne.n	800c61c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c612:	e065      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	79db      	ldrb	r3, [r3, #7]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d15e      	bne.n	800c6da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	789a      	ldrb	r2, [r3, #2]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	78da      	ldrb	r2, [r3, #3]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	79da      	ldrb	r2, [r3, #7]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c642:	e04d      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3310      	adds	r3, #16
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	68b9      	ldr	r1, [r7, #8]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f002 ffeb 	bl	800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c652:	4603      	mov	r3, r0
 800c654:	f083 0301 	eor.w	r3, r3, #1
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c65e:	2300      	movs	r3, #0
 800c660:	e049      	b.n	800c6f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d038      	beq.n	800c6de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d034      	beq.n	800c6de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6858      	ldr	r0, [r3, #4]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681c      	ldr	r4, [r3, #0]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	3220      	adds	r2, #32
 800c69c:	9201      	str	r2, [sp, #4]
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	4633      	mov	r3, r6
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	47a0      	blx	r4
                                        break;
 800c6a6:	e01a      	b.n	800c6de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f103 0018 	add.w	r0, r3, #24
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	3b02      	subs	r3, #2
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	68b9      	ldr	r1, [r7, #8]
 800c6be:	f7fd f836 	bl	800972e <_ZN11ByteSkipper4SkipEPPhPtt>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	f083 0301 	eor.w	r3, r3, #1
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d008      	beq.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e011      	b.n	800c6f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c6d2:	bf00      	nop
 800c6d4:	e004      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c6d6:	bf00      	nop
 800c6d8:	e002      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c6da:	bf00      	nop
 800c6dc:	e000      	b.n	800c6e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c6de:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f103 0220 	add.w	r2, r3, #32
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c6f4:	2301      	movs	r3, #1
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fe:	bf00      	nop

0800c700 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b03      	cmp	r3, #3
 800c712:	d815      	bhi.n	800c740 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	3318      	adds	r3, #24
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d109      	bne.n	800c738 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	3318      	adds	r3, #24
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c736:	e005      	b.n	800c744 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	3301      	adds	r3, #1
 800c73c:	73fb      	strb	r3, [r7, #15]
 800c73e:	e7e6      	b.n	800c70e <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c740:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c744:	4618      	mov	r0, r3
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	4a0a      	ldr	r2, [pc, #40]	; (800c784 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	601a      	str	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff ffc3 	bl	800c700 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	0800fb00 	.word	0x0800fb00

0800c788 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4613      	mov	r3, r2
 800c794:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	88fb      	ldrh	r3, [r7, #6]
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d10b      	bne.n	800c7bc <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	88fb      	ldrh	r3, [r7, #6]
 800c7ae:	121b      	asrs	r3, r3, #8
 800c7b0:	f043 0320 	orr.w	r3, r3, #32
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d101      	bne.n	800c7bc <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c7bc:	2300      	movs	r3, #0
        }
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	607a      	str	r2, [r7, #4]
 800c7d6:	72fb      	strb	r3, [r7, #11]
                return;
 800c7d8:	bf00      	nop
        };
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
                return;
 800c7ec:	bf00      	nop
        };
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
                return;
 800c800:	bf00      	nop
        }
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	603b      	str	r3, [r7, #0]
 800c818:	4613      	mov	r3, r2
 800c81a:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68b9      	ldr	r1, [r7, #8]
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff ff95 	bl	800c750 <_ZN16BluetoothServiceC1EP3BTD>
 800c826:	4a1f      	ldr	r2, [pc, #124]	; (800c8a4 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c834:	2300      	movs	r3, #0
 800c836:	75fb      	strb	r3, [r7, #23]
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d809      	bhi.n	800c852 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c83e:	7dfa      	ldrb	r2, [r7, #23]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3208      	adds	r2, #8
 800c844:	2100      	movs	r1, #0
 800c846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	3301      	adds	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
 800c850:	e7f2      	b.n	800c838 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	79fa      	ldrb	r2, [r7, #7]
 800c858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2250      	movs	r2, #80	; 0x50
 800c868:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2270      	movs	r2, #112	; 0x70
 800c878:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2271      	movs	r2, #113	; 0x71
 800c888:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f000 f807 	bl	800c8a8 <_ZN5BTHID5ResetEv>
}
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	0800fad4 	.word	0x0800fad4

0800c8a8 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
        connected = false;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	220a      	movs	r2, #10
 800c8d0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3320      	adds	r3, #32
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	4798      	blx	r3
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c8ee:	b590      	push	{r4, r7, lr}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af02      	add	r7, sp, #8
 800c8f4:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d014      	beq.n	800c92a <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6898      	ldr	r0, [r3, #8]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	8999      	ldrh	r1, [r3, #12]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	3301      	adds	r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	751a      	strb	r2, [r3, #20]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7d1a      	ldrb	r2, [r3, #20]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f103 041b 	add.w	r4, r3, #27
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	336f      	adds	r3, #111	; 0x6f
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	4623      	mov	r3, r4
 800c926:	f7ff f9c5 	bl	800bcb4 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6898      	ldr	r0, [r3, #8]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8999      	ldrh	r1, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7d1b      	ldrb	r3, [r3, #20]
 800c936:	3301      	adds	r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	751a      	strb	r2, [r3, #20]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7d1a      	ldrb	r2, [r3, #20]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f103 0418 	add.w	r4, r3, #24
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	336d      	adds	r3, #109	; 0x6d
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4623      	mov	r3, r4
 800c950:	f7ff f9b0 	bl	800bcb4 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	220e      	movs	r2, #14
 800c964:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2209      	movs	r2, #9
 800c96a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	bd90      	pop	{r4, r7, pc}

0800c976 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c976:	b590      	push	{r4, r7, lr}
 800c978:	b087      	sub	sp, #28
 800c97a:	af02      	add	r7, sp, #8
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	7d5b      	ldrb	r3, [r3, #21]
 800c984:	f083 0301 	eor.w	r3, r3, #1
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d023      	beq.n	800c9d6 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	3308      	adds	r3, #8
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b02      	cmp	r3, #2
 800c996:	d11e      	bne.n	800c9d6 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	330c      	adds	r3, #12
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	330d      	adds	r3, #13
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d113      	bne.n	800c9d6 <_ZN5BTHID7ACLDataEPh+0x60>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	7a9b      	ldrb	r3, [r3, #10]
 800c9b4:	f083 0301 	eor.w	r3, r3, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00b      	beq.n	800c9d6 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	8b5a      	ldrh	r2, [r3, #26]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	220a      	movs	r2, #10
 800c9d4:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	7a5b      	ldrb	r3, [r3, #9]
 800c9dc:	f083 0301 	eor.w	r3, r3, #1
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d03a      	beq.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d034      	beq.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7d5b      	ldrb	r3, [r3, #21]
 800c9f6:	f083 0301 	eor.w	r3, r3, #1
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02d      	beq.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ca06:	f083 0301 	eor.w	r3, r3, #1
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d025      	beq.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	3308      	adds	r3, #8
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d120      	bne.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	330c      	adds	r3, #12
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	330d      	adds	r3, #13
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	2b11      	cmp	r3, #17
 800ca2e:	d115      	bne.n	800ca5c <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	8b5a      	ldrh	r2, [r3, #26]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	899b      	ldrh	r3, [r3, #12]
 800ca62:	461a      	mov	r2, r3
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	f7ff fe8f 	bl	800c788 <_ZN16BluetoothService14checkHciHandleEPht>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 83d9 	beq.w	800d224 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	3306      	adds	r3, #6
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	021b      	lsls	r3, r3, #8
 800ca82:	4313      	orrs	r3, r2
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	f040 829b 	bne.w	800cfc0 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	f000 83c1 	beq.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	f040 808d 	bne.w	800cbbc <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	3310      	adds	r3, #16
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	3311      	adds	r3, #17
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	021b      	lsls	r3, r3, #8
 800cab2:	4313      	orrs	r3, r2
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f040 83af 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	3312      	adds	r3, #18
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	461a      	mov	r2, r3
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	3313      	adds	r3, #19
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	021b      	lsls	r3, r3, #8
 800caca:	4313      	orrs	r3, r2
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 83a3 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	330e      	adds	r3, #14
 800cad6:	781a      	ldrb	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cade:	429a      	cmp	r2, r3
 800cae0:	d124      	bne.n	800cb2c <_ZN5BTHID7ACLDataEPh+0x1b6>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	330f      	adds	r3, #15
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800caee:	429a      	cmp	r2, r3
 800caf0:	d11c      	bne.n	800cb2c <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	7a5a      	ldrb	r2, [r3, #9]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	7b1a      	ldrb	r2, [r3, #12]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	7b5a      	ldrb	r2, [r3, #13]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7d1b      	ldrb	r3, [r3, #20]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6898      	ldr	r0, [r3, #8]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	8999      	ldrh	r1, [r3, #12]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7d1a      	ldrb	r2, [r3, #20]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	331b      	adds	r3, #27
 800cb26:	f7ff f827 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>
 800cb2a:	e375      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	330e      	adds	r3, #14
 800cb30:	781a      	ldrb	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d11a      	bne.n	800cb72 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	330f      	adds	r3, #15
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d112      	bne.n	800cb72 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	7a5a      	ldrb	r2, [r3, #9]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	7b1a      	ldrb	r2, [r3, #12]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	7b5a      	ldrb	r2, [r3, #13]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	f043 0204 	orr.w	r2, r3, #4
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	611a      	str	r2, [r3, #16]
 800cb70:	e352      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	330e      	adds	r3, #14
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f040 834a 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	330f      	adds	r3, #15
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cb90:	429a      	cmp	r2, r3
 800cb92:	f040 8341 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	7a5a      	ldrb	r2, [r3, #9]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	7b1a      	ldrb	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	7b5a      	ldrb	r2, [r3, #13]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	611a      	str	r2, [r3, #16]
 800cbba:	e32d      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d15a      	bne.n	800cc7c <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	330c      	adds	r3, #12
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	330d      	adds	r3, #13
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d112      	bne.n	800cc02 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	7a5a      	ldrb	r2, [r3, #9]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	7b9a      	ldrb	r2, [r3, #14]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	7bda      	ldrb	r2, [r3, #15]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	611a      	str	r2, [r3, #16]
 800cc00:	e30a      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	330c      	adds	r3, #12
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	330d      	adds	r3, #13
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	021b      	lsls	r3, r3, #8
 800cc12:	4313      	orrs	r3, r2
 800cc14:	2b11      	cmp	r3, #17
 800cc16:	d112      	bne.n	800cc3e <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	7a5a      	ldrb	r2, [r3, #9]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	7b9a      	ldrb	r2, [r3, #14]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	7bda      	ldrb	r2, [r3, #15]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	f043 0201 	orr.w	r2, r3, #1
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	611a      	str	r2, [r3, #16]
 800cc3c:	e2ec      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	330c      	adds	r3, #12
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	330d      	adds	r3, #13
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	021b      	lsls	r3, r3, #8
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	2b13      	cmp	r3, #19
 800cc52:	f040 82e1 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	7a5a      	ldrb	r2, [r3, #9]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	7b9a      	ldrb	r2, [r3, #14]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	7bda      	ldrb	r2, [r3, #15]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f043 0210 	orr.w	r2, r3, #16
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	611a      	str	r2, [r3, #16]
 800cc7a:	e2cd      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d15e      	bne.n	800cd44 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	3310      	adds	r3, #16
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	3311      	adds	r3, #17
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	021b      	lsls	r3, r3, #8
 800cc96:	4313      	orrs	r3, r2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f040 82bd 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	330c      	adds	r3, #12
 800cca2:	781a      	ldrb	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d112      	bne.n	800ccd4 <_ZN5BTHID7ACLDataEPh+0x35e>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	330d      	adds	r3, #13
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d10a      	bne.n	800ccd4 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	7a5a      	ldrb	r2, [r3, #9]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	611a      	str	r2, [r3, #16]
 800ccd2:	e2a1      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	330c      	adds	r3, #12
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d112      	bne.n	800cd0a <_ZN5BTHID7ACLDataEPh+0x394>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	330d      	adds	r3, #13
 800cce8:	781a      	ldrb	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d10a      	bne.n	800cd0a <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	7a5a      	ldrb	r2, [r3, #9]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f043 0202 	orr.w	r2, r3, #2
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	611a      	str	r2, [r3, #16]
 800cd08:	e286      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	330c      	adds	r3, #12
 800cd0e:	781a      	ldrb	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cd16:	429a      	cmp	r2, r3
 800cd18:	f040 827e 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	330d      	adds	r3, #13
 800cd20:	781a      	ldrb	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	f040 8275 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	7a5a      	ldrb	r2, [r3, #9]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	f043 0220 	orr.w	r2, r3, #32
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	611a      	str	r2, [r3, #16]
 800cd42:	e269      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	3308      	adds	r3, #8
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b04      	cmp	r3, #4
 800cd4c:	d155      	bne.n	800cdfa <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	330c      	adds	r3, #12
 800cd52:	781a      	ldrb	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d113      	bne.n	800cd86 <_ZN5BTHID7ACLDataEPh+0x410>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	330d      	adds	r3, #13
 800cd62:	781a      	ldrb	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d10b      	bne.n	800cd86 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6898      	ldr	r0, [r3, #8]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	8999      	ldrh	r1, [r3, #12]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	3309      	adds	r3, #9
 800cd7a:	781a      	ldrb	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	331b      	adds	r3, #27
 800cd80:	f7fe ff45 	bl	800bc0e <_ZN3BTD21l2cap_config_responseEthPh>
 800cd84:	e248      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	330c      	adds	r3, #12
 800cd8a:	781a      	ldrb	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d113      	bne.n	800cdbe <_ZN5BTHID7ACLDataEPh+0x448>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	330d      	adds	r3, #13
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d10b      	bne.n	800cdbe <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6898      	ldr	r0, [r3, #8]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8999      	ldrh	r1, [r3, #12]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	3309      	adds	r3, #9
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3316      	adds	r3, #22
 800cdb8:	f7fe ff29 	bl	800bc0e <_ZN3BTD21l2cap_config_responseEthPh>
 800cdbc:	e22c      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	330c      	adds	r3, #12
 800cdc2:	781a      	ldrb	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	f040 8224 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	330d      	adds	r3, #13
 800cdd4:	781a      	ldrb	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cddc:	429a      	cmp	r2, r3
 800cdde:	f040 821b 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6898      	ldr	r0, [r3, #8]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8999      	ldrh	r1, [r3, #12]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3309      	adds	r3, #9
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3318      	adds	r3, #24
 800cdf4:	f7fe ff0b 	bl	800bc0e <_ZN3BTD21l2cap_config_responseEthPh>
 800cdf8:	e20e      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	2b06      	cmp	r3, #6
 800ce02:	d170      	bne.n	800cee6 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	330c      	adds	r3, #12
 800ce08:	781a      	ldrb	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d112      	bne.n	800ce3a <_ZN5BTHID7ACLDataEPh+0x4c4>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	330d      	adds	r3, #13
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d10a      	bne.n	800ce3a <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	7a5a      	ldrb	r2, [r3, #9]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	611a      	str	r2, [r3, #16]
 800ce38:	e1ee      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	330c      	adds	r3, #12
 800ce3e:	781a      	ldrb	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d121      	bne.n	800ce8e <_ZN5BTHID7ACLDataEPh+0x518>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	330d      	adds	r3, #13
 800ce4e:	781a      	ldrb	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d119      	bne.n	800ce8e <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	7a5a      	ldrb	r2, [r3, #9]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6898      	ldr	r0, [r3, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8999      	ldrh	r1, [r3, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7d1a      	ldrb	r2, [r3, #20]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3316      	adds	r3, #22
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4623      	mov	r3, r4
 800ce7c:	f7fe ff57 	bl	800bd2e <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3308      	adds	r3, #8
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	4798      	blx	r3
 800ce8c:	e1c4      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	330c      	adds	r3, #12
 800ce92:	781a      	ldrb	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	f040 81bc 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	330d      	adds	r3, #13
 800cea4:	781a      	ldrb	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ceac:	429a      	cmp	r2, r3
 800ceae:	f040 81b3 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	7a5a      	ldrb	r2, [r3, #9]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6898      	ldr	r0, [r3, #8]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	8999      	ldrh	r1, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7d1a      	ldrb	r2, [r3, #20]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	3318      	adds	r3, #24
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4623      	mov	r3, r4
 800ced4:	f7fe ff2b 	bl	800bd2e <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3308      	adds	r3, #8
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	4798      	blx	r3
 800cee4:	e198      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	3308      	adds	r3, #8
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b07      	cmp	r3, #7
 800ceee:	d14c      	bne.n	800cf8a <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	330c      	adds	r3, #12
 800cef4:	781a      	ldrb	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7edb      	ldrb	r3, [r3, #27]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d111      	bne.n	800cf22 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	330d      	adds	r3, #13
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	7f1b      	ldrb	r3, [r3, #28]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d10a      	bne.n	800cf22 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	7a5a      	ldrb	r2, [r3, #9]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	611a      	str	r2, [r3, #16]
 800cf20:	e17a      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	330c      	adds	r3, #12
 800cf26:	781a      	ldrb	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7d9b      	ldrb	r3, [r3, #22]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d111      	bne.n	800cf54 <_ZN5BTHID7ACLDataEPh+0x5de>
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	330d      	adds	r3, #13
 800cf34:	781a      	ldrb	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7ddb      	ldrb	r3, [r3, #23]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d10a      	bne.n	800cf54 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	7a5a      	ldrb	r2, [r3, #9]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	f043 0208 	orr.w	r2, r3, #8
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	611a      	str	r2, [r3, #16]
 800cf52:	e161      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	330c      	adds	r3, #12
 800cf58:	781a      	ldrb	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7e1b      	ldrb	r3, [r3, #24]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	f040 815a 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	330d      	adds	r3, #13
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7e5b      	ldrb	r3, [r3, #25]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f040 8152 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	7a5a      	ldrb	r2, [r3, #9]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	611a      	str	r2, [r3, #16]
 800cf88:	e146      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	3308      	adds	r3, #8
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	2b0a      	cmp	r3, #10
 800cf92:	f040 8141 	bne.w	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	7a5a      	ldrb	r2, [r3, #9]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6898      	ldr	r0, [r3, #8]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	8999      	ldrh	r1, [r3, #12]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7d1a      	ldrb	r2, [r3, #20]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	330c      	adds	r3, #12
 800cfae:	781c      	ldrb	r4, [r3, #0]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	330d      	adds	r3, #13
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	4623      	mov	r3, r4
 800cfba:	f7fe fef5 	bl	800bda8 <_ZN3BTD26l2cap_information_responseEthhh>
 800cfbe:	e12b      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	3306      	adds	r3, #6
 800cfc4:	781a      	ldrb	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	f040 8087 	bne.w	800d0e0 <_ZN5BTHID7ACLDataEPh+0x76a>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	781a      	ldrb	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d17e      	bne.n	800d0e0 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d131      	bne.n	800d050 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2203      	movs	r2, #3
 800cff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	7a5a      	ldrb	r2, [r3, #9]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	7a9a      	ldrb	r2, [r3, #10]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2205      	movs	r2, #5
 800d014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3328      	adds	r3, #40	; 0x28
 800d044:	220a      	movs	r2, #10
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fb6d 	bl	800d728 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d04e:	e0e0      	b.n	800d212 <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b04      	cmp	r3, #4
 800d058:	d131      	bne.n	800d0be <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2205      	movs	r2, #5
 800d05e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	7a5a      	ldrb	r2, [r3, #9]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	7a9a      	ldrb	r2, [r3, #10]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2205      	movs	r2, #5
 800d082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2202      	movs	r2, #2
 800d092:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2235      	movs	r2, #53	; 0x35
 800d09a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3328      	adds	r3, #40	; 0x28
 800d0b2:	220a      	movs	r2, #10
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fb36 	bl	800d728 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d0bc:	e0a9      	b.n	800d212 <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2b06      	cmp	r3, #6
 800d0c6:	f040 80a4 	bne.w	800d212 <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	3309      	adds	r3, #9
 800d0ce:	7819      	ldrb	r1, [r3, #0]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	330a      	adds	r3, #10
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fb3f 	bl	800d75c <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d0de:	e098      	b.n	800d212 <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	3306      	adds	r3, #6
 800d0e4:	781a      	ldrb	r2, [r3, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d162      	bne.n	800d1b6 <_ZN5BTHID7ACLDataEPh+0x840>
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	3307      	adds	r3, #7
 800d0f4:	781a      	ldrb	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d15a      	bne.n	800d1b6 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	3308      	adds	r3, #8
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2ba1      	cmp	r3, #161	; 0xa1
 800d108:	f040 8085 	bne.w	800d216 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800d10c:	f7f4 fda6 	bl	8001c5c <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	3305      	adds	r3, #5
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	021b      	lsls	r3, r3, #8
 800d11e:	b21a      	sxth	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	3304      	adds	r3, #4
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	b21b      	sxth	r3, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3314      	adds	r3, #20
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	89fa      	ldrh	r2, [r7, #14]
 800d138:	b2d2      	uxtb	r2, r2
 800d13a:	3a01      	subs	r2, #1
 800d13c:	b2d1      	uxtb	r1, r2
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	3209      	adds	r2, #9
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	3309      	adds	r3, #9
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d002      	beq.n	800d156 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800d150:	2b02      	cmp	r3, #2
 800d152:	d016      	beq.n	800d182 <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800d154:	e05f      	b.n	800d216 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d027      	beq.n	800d1ae <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a18      	ldr	r0, [r3, #32]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681c      	ldr	r4, [r3, #0]
 800d16a:	89fb      	ldrh	r3, [r7, #14]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	3b02      	subs	r3, #2
 800d170:	b2da      	uxtb	r2, r3
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	330a      	adds	r3, #10
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	4613      	mov	r3, r2
 800d17a:	2200      	movs	r2, #0
 800d17c:	6879      	ldr	r1, [r7, #4]
 800d17e:	47a0      	blx	r4
                                                break;
 800d180:	e015      	b.n	800d1ae <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	d013      	beq.n	800d1b2 <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681c      	ldr	r4, [r3, #0]
 800d196:	89fb      	ldrh	r3, [r7, #14]
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	3b02      	subs	r3, #2
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	330a      	adds	r3, #10
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	6879      	ldr	r1, [r7, #4]
 800d1aa:	47a0      	blx	r4
                                                break;
 800d1ac:	e001      	b.n	800d1b2 <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800d1ae:	bf00      	nop
 800d1b0:	e031      	b.n	800d216 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800d1b2:	bf00      	nop
                        }
 800d1b4:	e02f      	b.n	800d216 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	3306      	adds	r3, #6
 800d1ba:	781a      	ldrb	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d128      	bne.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	3307      	adds	r3, #7
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d120      	bne.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2ba3      	cmp	r3, #163	; 0xa3
 800d1de:	d11b      	bne.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	3305      	adds	r3, #5
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	021b      	lsls	r3, r3, #8
 800d1e8:	b21a      	sxth	r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	b21b      	sxth	r3, r3
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	b21b      	sxth	r3, r3
 800d1f6:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3318      	adds	r3, #24
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	89ba      	ldrh	r2, [r7, #12]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	3a01      	subs	r2, #1
 800d206:	b2d1      	uxtb	r1, r2
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	3209      	adds	r2, #9
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	4798      	blx	r3
 800d210:	e002      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d212:	bf00      	nop
 800d214:	e000      	b.n	800d218 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800d216:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f807 	bl	800d22c <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f8b4 	bl	800d38c <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd90      	pop	{r4, r7, pc}

0800d22c <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800d22c:	b5b0      	push	{r4, r5, r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af02      	add	r7, sp, #8
 800d232:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7e9b      	ldrb	r3, [r3, #26]
 800d238:	2b0e      	cmp	r3, #14
 800d23a:	f000 8084 	beq.w	800d346 <_ZN5BTHID8SDP_taskEv+0x11a>
 800d23e:	2b0e      	cmp	r3, #14
 800d240:	f300 809f 	bgt.w	800d382 <_ZN5BTHID8SDP_taskEv+0x156>
 800d244:	2b0a      	cmp	r3, #10
 800d246:	d002      	beq.n	800d24e <_ZN5BTHID8SDP_taskEv+0x22>
 800d248:	2b0b      	cmp	r3, #11
 800d24a:	d068      	beq.n	800d31e <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800d24c:	e099      	b.n	800d382 <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d256:	2b00      	cmp	r3, #0
 800d258:	d041      	beq.n	800d2de <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6898      	ldr	r0, [r3, #8]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8999      	ldrh	r1, [r3, #12]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7d1a      	ldrb	r2, [r3, #20]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	331b      	adds	r3, #27
 800d27c:	2501      	movs	r5, #1
 800d27e:	9501      	str	r5, [sp, #4]
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	4623      	mov	r3, r4
 800d284:	f7fe fc2b 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d288:	2001      	movs	r0, #1
 800d28a:	f7f4 fcf3 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6898      	ldr	r0, [r3, #8]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	8999      	ldrh	r1, [r3, #12]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7d1a      	ldrb	r2, [r3, #20]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	331b      	adds	r3, #27
 800d2a4:	2500      	movs	r5, #0
 800d2a6:	9501      	str	r5, [sp, #4]
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4623      	mov	r3, r4
 800d2ac:	f7fe fc17 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7d1b      	ldrb	r3, [r3, #20]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d2bc:	2001      	movs	r0, #1
 800d2be:	f7f4 fcd9 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6898      	ldr	r0, [r3, #8]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	8999      	ldrh	r1, [r3, #12]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7d1a      	ldrb	r2, [r3, #20]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	331b      	adds	r3, #27
 800d2d2:	f7fe fc51 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	220b      	movs	r2, #11
 800d2da:	769a      	strb	r2, [r3, #26]
                        break;
 800d2dc:	e04c      	b.n	800d378 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d046      	beq.n	800d378 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6898      	ldr	r0, [r3, #8]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	8999      	ldrh	r1, [r3, #12]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7d1a      	ldrb	r2, [r3, #20]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	331b      	adds	r3, #27
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4623      	mov	r3, r4
 800d318:	f7fe fd09 	bl	800bd2e <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800d31c:	e02c      	b.n	800d378 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d326:	2b00      	cmp	r3, #0
 800d328:	d028      	beq.n	800d37c <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	220a      	movs	r2, #10
 800d342:	769a      	strb	r2, [r3, #26]
                        break;
 800d344:	e01a      	b.n	800d37c <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d016      	beq.n	800d380 <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	899b      	ldrh	r3, [r3, #12]
 800d35a:	4619      	mov	r1, r3
 800d35c:	4610      	mov	r0, r2
 800d35e:	f7fe fa92 	bl	800b886 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d368:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3308      	adds	r3, #8
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	4798      	blx	r3
                        break;
 800d376:	e003      	b.n	800d380 <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 800d378:	bf00      	nop
 800d37a:	e002      	b.n	800d382 <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800d37c:	bf00      	nop
 800d37e:	e000      	b.n	800d382 <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800d380:	bf00      	nop
}
 800d382:	bf00      	nop
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d38c <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d38c:	b5b0      	push	{r4, r5, r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af02      	add	r7, sp, #8
 800d392:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d39a:	3b01      	subs	r3, #1
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	f200 812c 	bhi.w	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
 800d3a2:	a201      	add	r2, pc, #4	; (adr r2, 800d3a8 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a8:	0800d5d9 	.word	0x0800d5d9
 800d3ac:	0800d473 	.word	0x0800d473
 800d3b0:	0800d4ab 	.word	0x0800d4ab
 800d3b4:	0800d3cd 	.word	0x0800d3cd
 800d3b8:	0800d5a5 	.word	0x0800d5a5
 800d3bc:	0800d3eb 	.word	0x0800d3eb
 800d3c0:	0800d4f3 	.word	0x0800d4f3
 800d3c4:	0800d529 	.word	0x0800d529
 800d3c8:	0800d565 	.word	0x0800d565
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	f003 0302 	and.w	r3, r3, #2
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 8101 	beq.w	800d5dc <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 f9f9 	bl	800d7d2 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2206      	movs	r2, #6
 800d3e4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d3e8:	e0f8      	b.n	800d5dc <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	f003 0310 	and.w	r3, r3, #16
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 80f4 	beq.w	800d5e0 <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6898      	ldr	r0, [r3, #8]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	8999      	ldrh	r1, [r3, #12]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	7d1a      	ldrb	r2, [r3, #20]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3318      	adds	r3, #24
 800d40e:	2501      	movs	r5, #1
 800d410:	9501      	str	r5, [sp, #4]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	4623      	mov	r3, r4
 800d416:	f7fe fb62 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d41a:	2001      	movs	r0, #1
 800d41c:	f7f4 fc2a 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6898      	ldr	r0, [r3, #8]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	8999      	ldrh	r1, [r3, #12]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d1a      	ldrb	r2, [r3, #20]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3318      	adds	r3, #24
 800d436:	2500      	movs	r5, #0
 800d438:	9501      	str	r5, [sp, #4]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	4623      	mov	r3, r4
 800d43e:	f7fe fb4e 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	7d1b      	ldrb	r3, [r3, #20]
 800d446:	3301      	adds	r3, #1
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d44e:	2001      	movs	r0, #1
 800d450:	f7f4 fc10 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6898      	ldr	r0, [r3, #8]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	8999      	ldrh	r1, [r3, #12]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7d1a      	ldrb	r2, [r3, #20]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3318      	adds	r3, #24
 800d464:	f7fe fb88 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2208      	movs	r2, #8
 800d46c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d470:	e0b6      	b.n	800d5e0 <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	f003 0304 	and.w	r3, r3, #4
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 80b2 	beq.w	800d5e4 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	3301      	adds	r3, #1
 800d486:	b2da      	uxtb	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6898      	ldr	r0, [r3, #8]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8999      	ldrh	r1, [r3, #12]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7d1a      	ldrb	r2, [r3, #20]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	3316      	adds	r3, #22
 800d49c:	f7fe fb6c 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2203      	movs	r2, #3
 800d4a4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d4a8:	e09c      	b.n	800d5e4 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	691b      	ldr	r3, [r3, #16]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 8098 	beq.w	800d5e8 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f98a 	bl	800d7d2 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d4be:	2001      	movs	r0, #1
 800d4c0:	f7f4 fbd8 	bl	8001c74 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7d1b      	ldrb	r3, [r3, #20]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6898      	ldr	r0, [r3, #8]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	8999      	ldrh	r1, [r3, #12]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	7d1a      	ldrb	r2, [r3, #20]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	336d      	adds	r3, #109	; 0x6d
 800d4e0:	2413      	movs	r4, #19
 800d4e2:	9400      	str	r4, [sp, #0]
 800d4e4:	f7fe fabd 	bl	800ba62 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2207      	movs	r2, #7
 800d4ec:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d4f0:	e07a      	b.n	800d5e8 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d076      	beq.n	800d5ec <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	7d1b      	ldrb	r3, [r3, #20]
 800d502:	3301      	adds	r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6898      	ldr	r0, [r3, #8]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8999      	ldrh	r1, [r3, #12]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	7d1a      	ldrb	r2, [r3, #20]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3318      	adds	r3, #24
 800d51a:	f7fe fb2d 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2208      	movs	r2, #8
 800d522:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d526:	e061      	b.n	800d5ec <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	d05d      	beq.n	800d5f0 <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3310      	adds	r3, #16
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d562:	e045      	b.n	800d5f0 <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d041      	beq.n	800d5f4 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7d1b      	ldrb	r3, [r3, #20]
 800d574:	3301      	adds	r3, #1
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6898      	ldr	r0, [r3, #8]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	8999      	ldrh	r1, [r3, #12]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	7d1a      	ldrb	r2, [r3, #20]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f103 0416 	add.w	r4, r3, #22
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	336b      	adds	r3, #107	; 0x6b
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4623      	mov	r3, r4
 800d596:	f7fe fb8d 	bl	800bcb4 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2205      	movs	r2, #5
 800d59e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d5a2:	e027      	b.n	800d5f4 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	f003 0308 	and.w	r3, r3, #8
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d023      	beq.n	800d5f8 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	899b      	ldrh	r3, [r3, #12]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fe f963 	bl	800b886 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5c6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d5d6:	e00f      	b.n	800d5f8 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 800d5d8:	bf00      	nop
 800d5da:	e00e      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5dc:	bf00      	nop
 800d5de:	e00c      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5e0:	bf00      	nop
 800d5e2:	e00a      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5e4:	bf00      	nop
 800d5e6:	e008      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5e8:	bf00      	nop
 800d5ea:	e006      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5ec:	bf00      	nop
 800d5ee:	e004      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d5f8:	bf00      	nop
        }
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bdb0      	pop	{r4, r5, r7, pc}
 800d602:	bf00      	nop

0800d604 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d604:	b5b0      	push	{r4, r5, r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af02      	add	r7, sp, #8
 800d60a:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d612:	2b00      	cmp	r3, #0
 800d614:	f040 8084 	bne.w	800d720 <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d620:	2b00      	cmp	r3, #0
 800d622:	d03a      	beq.n	800d69a <_ZN5BTHID3RunEv+0x96>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	7a5b      	ldrb	r3, [r3, #9]
 800d62a:	f083 0301 	eor.w	r3, r3, #1
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d032      	beq.n	800d69a <_ZN5BTHID3RunEv+0x96>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7d5b      	ldrb	r3, [r3, #21]
 800d638:	f083 0301 	eor.w	r3, r3, #1
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d02b      	beq.n	800d69a <_ZN5BTHID3RunEv+0x96>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d648:	f083 0301 	eor.w	r3, r3, #1
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d023      	beq.n	800d69a <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	2201      	movs	r2, #1
 800d658:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	8b5a      	ldrh	r2, [r3, #26]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6898      	ldr	r0, [r3, #8]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	8999      	ldrh	r1, [r3, #12]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	7d1a      	ldrb	r2, [r3, #20]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	336b      	adds	r3, #107	; 0x6b
 800d688:	2411      	movs	r4, #17
 800d68a:	9400      	str	r4, [sp, #0]
 800d68c:	f7fe f9e9 	bl	800ba62 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2202      	movs	r2, #2
 800d694:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d698:	e041      	b.n	800d71e <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d03b      	beq.n	800d71e <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6898      	ldr	r0, [r3, #8]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8999      	ldrh	r1, [r3, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7d1a      	ldrb	r2, [r3, #20]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3316      	adds	r3, #22
 800d6bc:	2501      	movs	r5, #1
 800d6be:	9501      	str	r5, [sp, #4]
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	4623      	mov	r3, r4
 800d6c4:	f7fe fa0b 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	f7f4 fad3 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6898      	ldr	r0, [r3, #8]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8999      	ldrh	r1, [r3, #12]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7d1a      	ldrb	r2, [r3, #20]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	3316      	adds	r3, #22
 800d6e4:	2500      	movs	r5, #0
 800d6e6:	9501      	str	r5, [sp, #4]
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	f7fe f9f7 	bl	800bade <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7d1b      	ldrb	r3, [r3, #20]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d6fc:	2001      	movs	r0, #1
 800d6fe:	f7f4 fab9 	bl	8001c74 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6898      	ldr	r0, [r3, #8]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8999      	ldrh	r1, [r3, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	7d1a      	ldrb	r2, [r3, #20]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3316      	adds	r3, #22
 800d712:	f7fe fa31 	bl	800bb78 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2204      	movs	r2, #4
 800d71a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d71e:	bf00      	nop
        }
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bdb0      	pop	{r4, r5, r7, pc}

0800d728 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d728:	b590      	push	{r4, r7, lr}
 800d72a:	b087      	sub	sp, #28
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	4613      	mov	r3, r2
 800d734:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6898      	ldr	r0, [r3, #8]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8999      	ldrh	r1, [r3, #12]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	7edb      	ldrb	r3, [r3, #27]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	7f12      	ldrb	r2, [r2, #28]
 800d746:	79fc      	ldrb	r4, [r7, #7]
 800d748:	9201      	str	r2, [sp, #4]
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	4623      	mov	r3, r4
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	f7fe f8f8 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d754:	bf00      	nop
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd90      	pop	{r4, r7, pc}

0800d75c <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
 800d768:	4613      	mov	r3, r2
 800d76a:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2207      	movs	r2, #7
 800d770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	78ba      	ldrb	r2, [r7, #2]
 800d780:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2205      	movs	r2, #5
 800d790:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2202      	movs	r2, #2
 800d7a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2235      	movs	r2, #53	; 0x35
 800d7a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3328      	adds	r3, #40	; 0x28
 800d7c0:	220a      	movs	r2, #10
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7ff ffaf 	bl	800d728 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d7d2:	b590      	push	{r4, r7, lr}
 800d7d4:	b087      	sub	sp, #28
 800d7d6:	af02      	add	r7, sp, #8
 800d7d8:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d008      	beq.n	800d7f6 <_ZN5BTHID11setProtocolEv+0x24>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d003      	beq.n	800d7f6 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d7fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d800:	b2db      	uxtb	r3, r3
 800d802:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6898      	ldr	r0, [r3, #8]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8999      	ldrh	r1, [r3, #12]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7d9b      	ldrb	r3, [r3, #22]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	7dd2      	ldrb	r2, [r2, #23]
 800d814:	f107 040f 	add.w	r4, r7, #15
 800d818:	9201      	str	r2, [sp, #4]
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	2301      	movs	r3, #1
 800d81e:	4622      	mov	r2, r4
 800d820:	f7fe f890 	bl	800b944 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd90      	pop	{r4, r7, pc}

0800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d86e      	bhi.n	800d91c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d83e:	a201      	add	r2, pc, #4	; (adr r2, 800d844 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d844:	0800d855 	.word	0x0800d855
 800d848:	0800d887 	.word	0x0800d887
 800d84c:	0800d8b9 	.word	0x0800d8b9
 800d850:	0800d8eb 	.word	0x0800d8eb
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7a1b      	ldrb	r3, [r3, #8]
 800d858:	f003 030f 	and.w	r3, r3, #15
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b07      	cmp	r3, #7
 800d860:	d00d      	beq.n	800d87e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7a1b      	ldrb	r3, [r3, #8]
 800d866:	f003 030f 	and.w	r3, r3, #15
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d006      	beq.n	800d87e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7a1b      	ldrb	r3, [r3, #8]
 800d874:	f003 030f 	and.w	r3, r3, #15
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d101      	bne.n	800d882 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d87e:	2301      	movs	r3, #1
 800d880:	e04d      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d882:	2300      	movs	r3, #0
 800d884:	e04b      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7a1b      	ldrb	r3, [r3, #8]
 800d88a:	f003 030f 	and.w	r3, r3, #15
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b01      	cmp	r3, #1
 800d892:	d00d      	beq.n	800d8b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	7a1b      	ldrb	r3, [r3, #8]
 800d898:	f003 030f 	and.w	r3, r3, #15
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d006      	beq.n	800d8b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7a1b      	ldrb	r3, [r3, #8]
 800d8a6:	f003 030f 	and.w	r3, r3, #15
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d101      	bne.n	800d8b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e034      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	e032      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	7a1b      	ldrb	r3, [r3, #8]
 800d8bc:	f003 030f 	and.w	r3, r3, #15
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d00d      	beq.n	800d8e2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7a1b      	ldrb	r3, [r3, #8]
 800d8ca:	f003 030f 	and.w	r3, r3, #15
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b04      	cmp	r3, #4
 800d8d2:	d006      	beq.n	800d8e2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7a1b      	ldrb	r3, [r3, #8]
 800d8d8:	f003 030f 	and.w	r3, r3, #15
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b05      	cmp	r3, #5
 800d8e0:	d101      	bne.n	800d8e6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e01b      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e019      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7a1b      	ldrb	r3, [r3, #8]
 800d8ee:	f003 030f 	and.w	r3, r3, #15
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b05      	cmp	r3, #5
 800d8f6:	d00d      	beq.n	800d914 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7a1b      	ldrb	r3, [r3, #8]
 800d8fc:	f003 030f 	and.w	r3, r3, #15
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b06      	cmp	r3, #6
 800d904:	d006      	beq.n	800d914 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	7a1b      	ldrb	r3, [r3, #8]
 800d90a:	f003 030f 	and.w	r3, r3, #15
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b07      	cmp	r3, #7
 800d912:	d101      	bne.n	800d918 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d914:	2301      	movs	r3, #1
 800d916:	e002      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d918:	2300      	movs	r3, #0
 800d91a:	e000      	b.n	800d91e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d91c:	2300      	movs	r3, #0
        }
}
 800d91e:	4618      	mov	r0, r3
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop

0800d92c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	460b      	mov	r3, r1
 800d936:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d938:	78fb      	ldrb	r3, [r7, #3]
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d806      	bhi.n	800d94c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7ff ff72 	bl	800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d948:	4603      	mov	r3, r0
 800d94a:	e011      	b.n	800d970 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d954:	4619      	mov	r1, r3
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	4a07      	ldr	r2, [pc, #28]	; (800d978 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d95a:	4413      	add	r3, r2
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	fa21 f303 	lsr.w	r3, r1, r3
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	2b00      	cmp	r3, #0
 800d968:	bf14      	ite	ne
 800d96a:	2301      	movne	r3, #1
 800d96c:	2300      	moveq	r3, #0
 800d96e:	b2db      	uxtb	r3, r3
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	0800fb14 	.word	0x0800fb14

0800d97c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	4a1b      	ldr	r2, [pc, #108]	; (800d9f8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d98c:	4413      	add	r3, r2
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	461a      	mov	r2, r3
 800d992:	2301      	movs	r3, #1
 800d994:	4093      	lsls	r3, r2
 800d996:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d99e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9a2:	021b      	lsls	r3, r3, #8
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	bf14      	ite	ne
 800d9b0:	2301      	movne	r3, #1
 800d9b2:	2300      	moveq	r3, #0
 800d9b4:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d9bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9c0:	021b      	lsls	r3, r3, #8
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	43db      	mvns	r3, r3
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	b2d1      	uxtb	r1, r2
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	4301      	orrs	r1, r0
 800d9d8:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d9dc:	0a12      	lsrs	r2, r2, #8
 800d9de:	b292      	uxth	r2, r2
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d9e8:	7afb      	ldrb	r3, [r7, #11]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	0800fb14 	.word	0x0800fb14

0800d9fc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	2b08      	cmp	r3, #8
 800da0c:	d102      	bne.n	800da14 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7adb      	ldrb	r3, [r3, #11]
 800da12:	e006      	b.n	800da22 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800da14:	78fb      	ldrb	r3, [r7, #3]
 800da16:	2b09      	cmp	r3, #9
 800da18:	d102      	bne.n	800da20 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	7b1b      	ldrb	r3, [r3, #12]
 800da1e:	e000      	b.n	800da22 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800da3a:	78fb      	ldrb	r3, [r7, #3]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	4413      	add	r3, r2
 800da40:	791b      	ldrb	r3, [r3, #4]
}
 800da42:	4618      	mov	r0, r3
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800da4e:	b580      	push	{r7, lr}
 800da50:	b086      	sub	sp, #24
 800da52:	af00      	add	r7, sp, #0
 800da54:	60f8      	str	r0, [r7, #12]
 800da56:	460b      	mov	r3, r1
 800da58:	607a      	str	r2, [r7, #4]
 800da5a:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800da5c:	7afb      	ldrb	r3, [r7, #11]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	f240 80a6 	bls.w	800dbb0 <_ZN9PS4Parser5ParseEhPh+0x162>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80a2 	beq.w	800dbb0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d10e      	bne.n	800da92 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	1d18      	adds	r0, r3, #4
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	1c59      	adds	r1, r3, #1
 800da7c:	7afb      	ldrb	r3, [r7, #11]
 800da7e:	3b01      	subs	r3, #1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b3c      	cmp	r3, #60	; 0x3c
 800da84:	bf28      	it	cs
 800da86:	233c      	movcs	r3, #60	; 0x3c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	461a      	mov	r2, r3
 800da8c:	f001 fe56 	bl	800f73c <memcpy>
 800da90:	e016      	b.n	800dac0 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b11      	cmp	r3, #17
 800da98:	f040 8098 	bne.w	800dbcc <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800da9c:	7afb      	ldrb	r3, [r7, #11]
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	f240 8096 	bls.w	800dbd0 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	1d18      	adds	r0, r3, #4
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	1cd9      	adds	r1, r3, #3
 800daac:	7afb      	ldrb	r3, [r7, #11]
 800daae:	3b03      	subs	r3, #3
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b3c      	cmp	r3, #60	; 0x3c
 800dab4:	bf28      	it	cs
 800dab6:	233c      	movcs	r3, #60	; 0x3c
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	461a      	mov	r2, r3
 800dabc:	f001 fe3e 	bl	800f73c <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dacc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d06d      	beq.n	800dbb0 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dadc:	461a      	mov	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dae6:	43db      	mvns	r3, r3
 800dae8:	4013      	ands	r3, r2
 800daea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	b2d1      	uxtb	r1, r2
 800daf2:	2000      	movs	r0, #0
 800daf4:	4301      	orrs	r1, r0
 800daf6:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800dafa:	0a12      	lsrs	r2, r2, #8
 800dafc:	b292      	uxth	r2, r2
 800dafe:	2100      	movs	r1, #0
 800db00:	430a      	orrs	r2, r1
 800db02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800db12:	f361 0317 	bfi	r3, r1, #0, #24
 800db16:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800db1c:	2100      	movs	r1, #0
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fe84 	bl	800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	f043 0301 	orr.w	r3, r3, #1
 800db30:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800db32:	2101      	movs	r1, #1
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f7ff fe79 	bl	800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d003      	beq.n	800db48 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	f043 0302 	orr.w	r3, r3, #2
 800db46:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800db48:	2102      	movs	r1, #2
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fe6e 	bl	800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	f043 0304 	orr.w	r3, r3, #4
 800db5c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800db5e:	2103      	movs	r1, #3
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f7ff fe63 	bl	800d82c <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d003      	beq.n	800db74 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
 800db6e:	f043 0308 	orr.w	r3, r3, #8
 800db72:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800db7a:	7dfa      	ldrb	r2, [r7, #23]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d017      	beq.n	800dbb0 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800db86:	b25b      	sxtb	r3, r3
 800db88:	43db      	mvns	r3, r3
 800db8a:	b25a      	sxtb	r2, r3
 800db8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db90:	4013      	ands	r3, r2
 800db92:	b25b      	sxtb	r3, r3
 800db94:	f003 030f 	and.w	r3, r3, #15
 800db98:	b2d9      	uxtb	r1, r3
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dba0:	f361 0303 	bfi	r3, r1, #0, #4
 800dba4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	7dfa      	ldrb	r2, [r7, #23]
 800dbac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00b      	beq.n	800dbd2 <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	3246      	adds	r2, #70	; 0x46
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	4798      	blx	r3
 800dbca:	e002      	b.n	800dbd2 <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800dbcc:	bf00      	nop
 800dbce:	e000      	b.n	800dbd2 <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800dbd0:	bf00      	nop
}
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d808      	bhi.n	800dbfc <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	4413      	add	r3, r2
 800dbf0:	227f      	movs	r2, #127	; 0x7f
 800dbf2:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	73fb      	strb	r3, [r7, #15]
 800dbfa:	e7f3      	b.n	800dbe4 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	6893      	ldr	r3, [r2, #8]
 800dc00:	f36f 0317 	bfc	r3, #0, #24
 800dc04:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800dc0a:	f36f 0317 	bfc	r3, #0, #24
 800dc0e:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dc10:	2300      	movs	r3, #0
 800dc12:	73fb      	strb	r3, [r7, #15]
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d808      	bhi.n	800dc2c <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	4413      	add	r3, r2
 800dc20:	2200      	movs	r2, #0
 800dc22:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	3301      	adds	r3, #1
 800dc28:	73fb      	strb	r3, [r7, #15]
 800dc2a:	e7f3      	b.n	800dc14 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d81b      	bhi.n	800dc6e <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dc36:	2300      	movs	r3, #0
 800dc38:	73bb      	strb	r3, [r7, #14]
 800dc3a:	7bbb      	ldrb	r3, [r7, #14]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d812      	bhi.n	800dc66 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800dc40:	7bfa      	ldrb	r2, [r7, #15]
 800dc42:	7bbb      	ldrb	r3, [r7, #14]
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	0098      	lsls	r0, r3, #2
 800dc48:	4613      	mov	r3, r2
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	4413      	add	r3, r2
 800dc4e:	4403      	add	r3, r0
 800dc50:	440b      	add	r3, r1
 800dc52:	f103 0220 	add.w	r2, r3, #32
 800dc56:	7993      	ldrb	r3, [r2, #6]
 800dc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc5c:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	3301      	adds	r3, #1
 800dc62:	73bb      	strb	r3, [r7, #14]
 800dc64:	e7e9      	b.n	800dc3a <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	73fb      	strb	r3, [r7, #15]
 800dc6c:	e7e0      	b.n	800dc30 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	7a13      	ldrb	r3, [r2, #8]
 800dc72:	2108      	movs	r1, #8
 800dc74:	f361 0303 	bfi	r3, r1, #0, #4
 800dc78:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dc80:	2108      	movs	r1, #8
 800dc82:	f361 0303 	bfi	r3, r1, #0, #4
 800dc86:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dc90:	f36f 0303 	bfc	r3, #0, #4
 800dc94:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800dcf0:	bf00      	nop
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	2180      	movs	r1, #128	; 0x80
 800dd02:	4803      	ldr	r0, [pc, #12]	; (800dd10 <_ZN2P95IsSetEv+0x14>)
 800dd04:	f7f4 fa9c 	bl	8002240 <HAL_GPIO_ReadPin>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	40020800 	.word	0x40020800

0800dd14 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f001 f9bb 	bl	800f098 <_ZN8MAX3421eI3P102P9EC1Ev>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f001 f9d3 	bl	800f0d0 <_ZN15AddressPoolImplILh16EEC1Ev>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800dd32:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <_ZN3USBC1Ev+0x34>)
 800dd34:	2211      	movs	r2, #17
 800dd36:	701a      	strb	r2, [r3, #0]
        init();
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f807 	bl	800dd4c <_ZN3USB4initEv>
}
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20000671 	.word	0x20000671

0800dd4c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
 800dd74:	4613      	mov	r3, r2
 800dd76:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	78fa      	ldrb	r2, [r7, #3]
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f001 f9e0 	bl	800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dd84:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d003      	beq.n	800dd94 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800dd94:	2300      	movs	r3, #0
 800dd96:	e018      	b.n	800ddca <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800dd9e:	2300      	movs	r3, #0
 800dda0:	74fb      	strb	r3, [r7, #19]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	795b      	ldrb	r3, [r3, #5]
 800dda6:	7cfa      	ldrb	r2, [r7, #19]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d20d      	bcs.n	800ddc8 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	78ba      	ldrb	r2, [r7, #2]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d101      	bne.n	800ddba <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	e007      	b.n	800ddca <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	3303      	adds	r3, #3
 800ddbe:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800ddc0:	7cfb      	ldrb	r3, [r7, #19]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	74fb      	strb	r3, [r7, #19]
 800ddc6:	e7ec      	b.n	800dda2 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b086      	sub	sp, #24
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	607b      	str	r3, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	72fb      	strb	r3, [r7, #11]
 800dde0:	4613      	mov	r3, r2
 800dde2:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800ddea:	23d8      	movs	r3, #216	; 0xd8
 800ddec:	e015      	b.n	800de1a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	7afa      	ldrb	r2, [r7, #11]
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f001 f9a5 	bl	800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ddfa:	6178      	str	r0, [r7, #20]

        if(!p)
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de02:	23d6      	movs	r3, #214	; 0xd6
 800de04:	e009      	b.n	800de1a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	7afa      	ldrb	r2, [r7, #11]
 800de0a:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	7aba      	ldrb	r2, [r7, #10]
 800de16:	715a      	strb	r2, [r3, #5]

        return 0;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800de22:	b580      	push	{r7, lr}
 800de24:	b086      	sub	sp, #24
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	607b      	str	r3, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	72fb      	strb	r3, [r7, #11]
 800de30:	4613      	mov	r3, r2
 800de32:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	7afa      	ldrb	r2, [r7, #11]
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f001 f982 	bl	800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800de40:	6178      	str	r0, [r7, #20]

        if(!p)
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de48:	23d6      	movs	r3, #214	; 0xd6
 800de4a:	e04e      	b.n	800deea <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800de54:	23d7      	movs	r3, #215	; 0xd7
 800de56:	e048      	b.n	800deea <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800de58:	7aba      	ldrb	r2, [r7, #10]
 800de5a:	7afb      	ldrb	r3, [r7, #11]
 800de5c:	4619      	mov	r1, r3
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff ff82 	bl	800dd68 <_ZN3USB14getEpInfoEntryEhh>
 800de64:	4602      	mov	r2, r0
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800de72:	23db      	movs	r3, #219	; 0xdb
 800de74:	e039      	b.n	800deea <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	789b      	ldrb	r3, [r3, #2]
 800de7c:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b0f      	cmp	r3, #15
 800de84:	bf28      	it	cs
 800de86:	230f      	movcs	r3, #15
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	2301      	movs	r3, #1
 800de8e:	4093      	lsls	r3, r2
 800de90:	b29a      	uxth	r2, r3
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800dea2:	7afb      	ldrb	r3, [r7, #11]
 800dea4:	461a      	mov	r2, r3
 800dea6:	21e0      	movs	r1, #224	; 0xe0
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7f3 fbd7 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800deae:	21d8      	movs	r1, #216	; 0xd8
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7f3 fc25 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800deb6:	4603      	mov	r3, r0
 800deb8:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	799b      	ldrb	r3, [r3, #6]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d009      	beq.n	800ded6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800dec8:	7cfb      	ldrb	r3, [r7, #19]
 800deca:	4313      	orrs	r3, r2
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f043 0302 	orr.w	r3, r3, #2
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	e003      	b.n	800dede <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800ded6:	7cfb      	ldrb	r3, [r7, #19]
 800ded8:	f023 0306 	bic.w	r3, r3, #6
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	461a      	mov	r2, r3
 800dee0:	21d8      	movs	r1, #216	; 0xd8
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f7f3 fbba 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800def2:	b590      	push	{r4, r7, lr}
 800def4:	b08b      	sub	sp, #44	; 0x2c
 800def6:	af02      	add	r7, sp, #8
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	4608      	mov	r0, r1
 800defc:	4611      	mov	r1, r2
 800defe:	461a      	mov	r2, r3
 800df00:	4603      	mov	r3, r0
 800df02:	70fb      	strb	r3, [r7, #3]
 800df04:	460b      	mov	r3, r1
 800df06:	70bb      	strb	r3, [r7, #2]
 800df08:	4613      	mov	r3, r2
 800df0a:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800df0c:	2300      	movs	r3, #0
 800df0e:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800df18:	f107 000c 	add.w	r0, r7, #12
 800df1c:	78ba      	ldrb	r2, [r7, #2]
 800df1e:	78f9      	ldrb	r1, [r7, #3]
 800df20:	f107 030a 	add.w	r3, r7, #10
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	4603      	mov	r3, r0
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff ff7a 	bl	800de22 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800df2e:	4603      	mov	r3, r0
 800df30:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800df32:	7ffb      	ldrb	r3, [r7, #31]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800df38:	7ffb      	ldrb	r3, [r7, #31]
 800df3a:	e0ae      	b.n	800e09a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800df3c:	787b      	ldrb	r3, [r7, #1]
 800df3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df42:	2b00      	cmp	r3, #0
 800df44:	bfcc      	ite	gt
 800df46:	2301      	movgt	r3, #1
 800df48:	2300      	movle	r3, #0
 800df4a:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800df4c:	787b      	ldrb	r3, [r7, #1]
 800df4e:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800df50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800df54:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800df56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800df5a:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800df5c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800df60:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800df62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df64:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800df66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df6a:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800df6c:	f107 0310 	add.w	r3, r7, #16
 800df70:	2208      	movs	r2, #8
 800df72:	2120      	movs	r1, #32
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f001 f90b 	bl	800f190 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800df7a:	897b      	ldrh	r3, [r7, #10]
 800df7c:	78ba      	ldrb	r2, [r7, #2]
 800df7e:	2110      	movs	r1, #16
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 faf2 	bl	800e56a <_ZN3USB11dispatchPktEhht>
 800df86:	4603      	mov	r3, r0
 800df88:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800df8a:	7ffb      	ldrb	r3, [r7, #31]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800df90:	7ffb      	ldrb	r3, [r7, #31]
 800df92:	e082      	b.n	800e09a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800df94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df96:	2b00      	cmp	r3, #0
 800df98:	d072      	beq.n	800e080 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800df9a:	7efb      	ldrb	r3, [r7, #27]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d057      	beq.n	800e050 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800dfa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dfa4:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	7893      	ldrb	r3, [r2, #2]
 800dfaa:	f043 0302 	orr.w	r3, r3, #2
 800dfae:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800dfb0:	8bbb      	ldrh	r3, [r7, #28]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d05f      	beq.n	800e076 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800dfb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dfba:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800dfbc:	68f9      	ldr	r1, [r7, #12]
 800dfbe:	897a      	ldrh	r2, [r7, #10]
 800dfc0:	f107 0008 	add.w	r0, r7, #8
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9301      	str	r3, [sp, #4]
 800dfc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	4603      	mov	r3, r0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f8a6 	bl	800e120 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800dfd8:	7ffb      	ldrb	r3, [r7, #31]
 800dfda:	2b06      	cmp	r3, #6
 800dfdc:	d114      	bne.n	800e008 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800dfde:	21f8      	movs	r1, #248	; 0xf8
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7f3 fb8d 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	f003 0320 	and.w	r3, r3, #32
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	bf0c      	ite	eq
 800dff0:	2301      	moveq	r3, #1
 800dff2:	2300      	movne	r3, #0
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	b2d9      	uxtb	r1, r3
 800dffe:	7893      	ldrb	r3, [r2, #2]
 800e000:	f361 0341 	bfi	r3, r1, #1, #1
 800e004:	7093      	strb	r3, [r2, #2]
 800e006:	e7d3      	b.n	800dfb0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800e008:	7ffb      	ldrb	r3, [r7, #31]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800e00e:	7ffb      	ldrb	r3, [r7, #31]
 800e010:	e043      	b.n	800e09a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800e012:	7ffb      	ldrb	r3, [r7, #31]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d111      	bne.n	800e03c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800e018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00e      	beq.n	800e03c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800e01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681c      	ldr	r4, [r3, #0]
 800e024:	8939      	ldrh	r1, [r7, #8]
 800e026:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e02a:	8bbb      	ldrh	r3, [r7, #28]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	b29b      	uxth	r3, r3
 800e030:	833b      	strh	r3, [r7, #24]
 800e032:	f107 0318 	add.w	r3, r7, #24
 800e036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e038:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e03a:	47a0      	blx	r4

                                left -= read;
 800e03c:	893b      	ldrh	r3, [r7, #8]
 800e03e:	8bba      	ldrh	r2, [r7, #28]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800e044:	893b      	ldrh	r3, [r7, #8]
 800e046:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d812      	bhi.n	800e074 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800e04e:	e7af      	b.n	800dfb0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	7893      	ldrb	r3, [r2, #2]
 800e054:	f043 0301 	orr.w	r3, r3, #1
 800e058:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800e05a:	68f9      	ldr	r1, [r7, #12]
 800e05c:	897a      	ldrh	r2, [r7, #10]
 800e05e:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800e062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	4603      	mov	r3, r0
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f953 	bl	800e314 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e06e:	4603      	mov	r3, r0
 800e070:	77fb      	strb	r3, [r7, #31]
 800e072:	e000      	b.n	800e076 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800e074:	bf00      	nop
                }
                if(rcode) //return error
 800e076:	7ffb      	ldrb	r3, [r7, #31]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800e07c:	7ffb      	ldrb	r3, [r7, #31]
 800e07e:	e00c      	b.n	800e09a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800e080:	7efb      	ldrb	r3, [r7, #27]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800e086:	21a0      	movs	r1, #160	; 0xa0
 800e088:	e000      	b.n	800e08c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800e08a:	2180      	movs	r1, #128	; 0x80
 800e08c:	897b      	ldrh	r3, [r7, #10]
 800e08e:	78ba      	ldrb	r2, [r7, #2]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fa6a 	bl	800e56a <_ZN3USB11dispatchPktEhht>
 800e096:	4603      	mov	r3, r0
 800e098:	bf00      	nop
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3724      	adds	r7, #36	; 0x24
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd90      	pop	{r4, r7, pc}

0800e0a2 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b08a      	sub	sp, #40	; 0x28
 800e0a6:	af02      	add	r7, sp, #8
 800e0a8:	60f8      	str	r0, [r7, #12]
 800e0aa:	607b      	str	r3, [r7, #4]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	72fb      	strb	r3, [r7, #11]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e0bc:	f107 0018 	add.w	r0, r7, #24
 800e0c0:	7aba      	ldrb	r2, [r7, #10]
 800e0c2:	7af9      	ldrb	r1, [r7, #11]
 800e0c4:	f107 0316 	add.w	r3, r7, #22
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7ff fea8 	bl	800de22 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800e0d6:	7ffb      	ldrb	r3, [r7, #31]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d010      	beq.n	800e0fe <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800e0dc:	7ffb      	ldrb	r3, [r7, #31]
 800e0de:	2181      	movs	r1, #129	; 0x81
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f001 f883 	bl	800f1ec <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800e0e6:	7afb      	ldrb	r3, [r7, #11]
 800e0e8:	2181      	movs	r1, #129	; 0x81
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f001 f87e 	bl	800f1ec <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800e0f0:	7abb      	ldrb	r3, [r7, #10]
 800e0f2:	2181      	movs	r1, #129	; 0x81
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f001 f879 	bl	800f1ec <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800e0fa:	7ffb      	ldrb	r3, [r7, #31]
 800e0fc:	e00c      	b.n	800e118 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800e0fe:	69b9      	ldr	r1, [r7, #24]
 800e100:	8afa      	ldrh	r2, [r7, #22]
 800e102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e106:	9301      	str	r3, [sp, #4]
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f000 f806 	bl	800e120 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800e114:	4603      	mov	r3, r0
 800e116:	bf00      	nop
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	603b      	str	r3, [r7, #0]
 800e12c:	4613      	mov	r3, r2
 800e12e:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	785b      	ldrb	r3, [r3, #1]
 800e13e:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2200      	movs	r2, #0
 800e144:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	789b      	ldrb	r3, [r3, #2]
 800e14a:	f003 0302 	and.w	r3, r3, #2
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800e154:	2320      	movs	r3, #32
 800e156:	e000      	b.n	800e15a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800e158:	2310      	movs	r3, #16
 800e15a:	461a      	mov	r2, r3
 800e15c:	21e8      	movs	r1, #232	; 0xe8
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7f3 fa7c 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	781a      	ldrb	r2, [r3, #0]
 800e168:	88fb      	ldrh	r3, [r7, #6]
 800e16a:	2100      	movs	r1, #0
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f9fc 	bl	800e56a <_ZN3USB11dispatchPktEhht>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b06      	cmp	r3, #6
 800e17a:	d123      	bne.n	800e1c4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800e17c:	21f8      	movs	r1, #248	; 0xf8
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f7f3 fabe 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e184:	4603      	mov	r3, r0
 800e186:	f003 0310 	and.w	r3, r3, #16
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bf0c      	ite	eq
 800e18e:	2301      	moveq	r3, #1
 800e190:	2300      	movne	r3, #0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0301 	and.w	r3, r3, #1
 800e198:	b2d9      	uxtb	r1, r3
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	7893      	ldrb	r3, [r2, #2]
 800e19e:	f361 0341 	bfi	r3, r1, #1, #1
 800e1a2:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	789b      	ldrb	r3, [r3, #2]
 800e1a8:	f003 0302 	and.w	r3, r3, #2
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800e1b2:	2320      	movs	r3, #32
 800e1b4:	e000      	b.n	800e1b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800e1b6:	2310      	movs	r3, #16
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	21e8      	movs	r1, #232	; 0xe8
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7f3 fa4d 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800e1c2:	e06e      	b.n	800e2a2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d16c      	bne.n	800e2a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800e1ca:	21c8      	movs	r1, #200	; 0xc8
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7f3 fa97 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	f003 0304 	and.w	r3, r3, #4
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bf0c      	ite	eq
 800e1dc:	2301      	moveq	r3, #1
 800e1de:	2300      	movne	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d002      	beq.n	800e1ec <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800e1e6:	23f0      	movs	r3, #240	; 0xf0
 800e1e8:	75fb      	strb	r3, [r7, #23]
                        break;
 800e1ea:	e05c      	b.n	800e2a6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800e1ec:	2130      	movs	r1, #48	; 0x30
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f7f3 fa86 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800e1f8:	7dba      	ldrb	r2, [r7, #22]
 800e1fa:	8a7b      	ldrh	r3, [r7, #18]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	dd01      	ble.n	800e204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800e200:	8a7b      	ldrh	r3, [r7, #18]
 800e202:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	8a7a      	ldrh	r2, [r7, #18]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	b29b      	uxth	r3, r3
 800e212:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800e214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	da01      	bge.n	800e220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800e220:	7dba      	ldrb	r2, [r7, #22]
 800e222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e226:	4293      	cmp	r3, r2
 800e228:	bfa8      	it	ge
 800e22a:	4613      	movge	r3, r2
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	2108      	movs	r1, #8
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f000 ffe6 	bl	800f204 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800e238:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800e23a:	2204      	movs	r2, #4
 800e23c:	21c8      	movs	r1, #200	; 0xc8
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7f3 fa0c 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	881a      	ldrh	r2, [r3, #0]
 800e248:	7dbb      	ldrb	r3, [r7, #22]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	4413      	add	r3, r2
 800e24e:	b29a      	uxth	r2, r3
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800e254:	7dba      	ldrb	r2, [r7, #22]
 800e256:	7c7b      	ldrb	r3, [r7, #17]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d304      	bcc.n	800e266 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	8a7a      	ldrh	r2, [r7, #18]
 800e262:	429a      	cmp	r2, r3
 800e264:	d813      	bhi.n	800e28e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800e266:	21f8      	movs	r1, #248	; 0xf8
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7f3 fa49 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e26e:	4603      	mov	r3, r0
 800e270:	f003 0310 	and.w	r3, r3, #16
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800e278:	2101      	movs	r1, #1
 800e27a:	e000      	b.n	800e27e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800e27c:	2100      	movs	r1, #0
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	7893      	ldrb	r3, [r2, #2]
 800e282:	f361 0341 	bfi	r3, r1, #1, #1
 800e286:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800e288:	2300      	movs	r3, #0
 800e28a:	75fb      	strb	r3, [r7, #23]
                        break;
 800e28c:	e00b      	b.n	800e2a6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 800e28e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e292:	2b00      	cmp	r3, #0
 800e294:	f43f af66 	beq.w	800e164 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800e298:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7f3 fce9 	bl	8001c74 <HAL_Delay>
        } //while( 1 )
 800e2a2:	e75f      	b.n	800e164 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800e2a4:	bf00      	nop
        return ( rcode);
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4603      	mov	r3, r0
 800e2c0:	70fb      	strb	r3, [r7, #3]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70bb      	strb	r3, [r7, #2]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e2d2:	f107 0010 	add.w	r0, r7, #16
 800e2d6:	78ba      	ldrb	r2, [r7, #2]
 800e2d8:	78f9      	ldrb	r1, [r7, #3]
 800e2da:	f107 030e 	add.w	r3, r7, #14
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff fd9d 	bl	800de22 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800e2ec:	7dfb      	ldrb	r3, [r7, #23]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
 800e2f4:	e00a      	b.n	800e30c <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800e2f6:	6939      	ldr	r1, [r7, #16]
 800e2f8:	89fa      	ldrh	r2, [r7, #14]
 800e2fa:	8838      	ldrh	r0, [r7, #0]
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	4603      	mov	r3, r0
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f806 	bl	800e314 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e308:	4603      	mov	r3, r0
 800e30a:	bf00      	nop
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e314:	b580      	push	{r7, lr}
 800e316:	b08a      	sub	sp, #40	; 0x28
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	4611      	mov	r1, r2
 800e320:	461a      	mov	r2, r3
 800e322:	460b      	mov	r3, r1
 800e324:	80fb      	strh	r3, [r7, #6]
 800e326:	4613      	mov	r3, r2
 800e328:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e32a:	2300      	movs	r3, #0
 800e32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e334:	88bb      	ldrh	r3, [r7, #4]
 800e336:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	785b      	ldrb	r3, [r3, #1]
 800e33c:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e33e:	7efb      	ldrb	r3, [r7, #27]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e344:	7efb      	ldrb	r3, [r7, #27]
 800e346:	2b40      	cmp	r3, #64	; 0x40
 800e348:	d901      	bls.n	800e34e <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e34a:	23da      	movs	r3, #218	; 0xda
 800e34c:	e109      	b.n	800e562 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e34e:	f7f3 fc85 	bl	8001c5c <HAL_GetTick>
 800e352:	4603      	mov	r3, r0
 800e354:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e358:	3308      	adds	r3, #8
 800e35a:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	789b      	ldrb	r3, [r3, #2]
 800e360:	f003 0301 	and.w	r3, r3, #1
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 800e36a:	2380      	movs	r3, #128	; 0x80
 800e36c:	e000      	b.n	800e370 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	461a      	mov	r2, r3
 800e372:	21e8      	movs	r1, #232	; 0xe8
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7f3 f971 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e37a:	8bbb      	ldrh	r3, [r7, #28]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 80da 	beq.w	800e536 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e38c:	7efb      	ldrb	r3, [r7, #27]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	8bba      	ldrh	r2, [r7, #28]
 800e392:	4293      	cmp	r3, r2
 800e394:	bf28      	it	cs
 800e396:	4613      	movcs	r3, r2
 800e398:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e39a:	8a7b      	ldrh	r3, [r7, #18]
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	6a3b      	ldr	r3, [r7, #32]
 800e3a0:	2110      	movs	r1, #16
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f000 fef4 	bl	800f190 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e3a8:	8a7b      	ldrh	r3, [r7, #18]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	2138      	movs	r1, #56	; 0x38
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f7f3 f953 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	f043 0320 	orr.w	r3, r3, #32
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	21f0      	movs	r1, #240	; 0xf0
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f7f3 f949 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e3ca:	21c8      	movs	r1, #200	; 0xc8
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f7f3 f997 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	b25b      	sxtb	r3, r3
 800e3d6:	43db      	mvns	r3, r3
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	09db      	lsrs	r3, r3, #7
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d000      	beq.n	800e3e4 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 800e3e2:	e7f2      	b.n	800e3ca <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e3e4:	2280      	movs	r2, #128	; 0x80
 800e3e6:	21c8      	movs	r1, #200	; 0xc8
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7f3 f937 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e3ee:	21f8      	movs	r1, #248	; 0xf8
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7f3 f985 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	f003 030f 	and.w	r3, r3, #15
 800e3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e404:	2b00      	cmp	r3, #0
 800e406:	d008      	beq.n	800e41a <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 800e408:	f7f3 fc28 	bl	8001c5c <HAL_GetTick>
 800e40c:	4602      	mov	r2, r0
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	da01      	bge.n	800e41a <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 800e41a:	2300      	movs	r3, #0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 8081 	beq.w	800e524 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e426:	2b0e      	cmp	r3, #14
 800e428:	d012      	beq.n	800e450 <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 800e42a:	2b0e      	cmp	r3, #14
 800e42c:	f300 8085 	bgt.w	800e53a <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 800e430:	2b04      	cmp	r3, #4
 800e432:	d002      	beq.n	800e43a <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 800e434:	2b06      	cmp	r3, #6
 800e436:	d015      	beq.n	800e464 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e438:	e07f      	b.n	800e53a <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 800e43a:	8bfb      	ldrh	r3, [r7, #30]
 800e43c:	3301      	adds	r3, #1
 800e43e:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e440:	88fb      	ldrh	r3, [r7, #6]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d032      	beq.n	800e4ac <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 800e446:	8bfa      	ldrh	r2, [r7, #30]
 800e448:	88fb      	ldrh	r3, [r7, #6]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d12e      	bne.n	800e4ac <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 800e44e:	e075      	b.n	800e53c <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 800e450:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e454:	3301      	adds	r3, #1
 800e456:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e45a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d126      	bne.n	800e4b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 800e462:	e06b      	b.n	800e53c <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e464:	21f8      	movs	r1, #248	; 0xf8
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f7f3 f94a 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f003 0320 	and.w	r3, r3, #32
 800e472:	2b00      	cmp	r3, #0
 800e474:	bf0c      	ite	eq
 800e476:	2301      	moveq	r3, #1
 800e478:	2300      	movne	r3, #0
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	b2d9      	uxtb	r1, r3
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	7893      	ldrb	r3, [r2, #2]
 800e486:	f361 0300 	bfi	r3, r1, #0, #1
 800e48a:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	789b      	ldrb	r3, [r3, #2]
 800e490:	f003 0301 	and.w	r3, r3, #1
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 800e49a:	2380      	movs	r3, #128	; 0x80
 800e49c:	e000      	b.n	800e4a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 800e49e:	2340      	movs	r3, #64	; 0x40
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	21e8      	movs	r1, #232	; 0xe8
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7f3 f8d9 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e4aa:	e002      	b.n	800e4b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 800e4ac:	bf00      	nop
 800e4ae:	e000      	b.n	800e4b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 800e4b0:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2138      	movs	r1, #56	; 0x38
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7f3 f8d0 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	2110      	movs	r1, #16
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7f3 f8c9 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e4ca:	8a7b      	ldrh	r3, [r7, #18]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	2138      	movs	r1, #56	; 0x38
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7f3 f8c2 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	f043 0320 	orr.w	r3, r3, #32
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	21f0      	movs	r1, #240	; 0xf0
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f7f3 f8b8 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e4ec:	21c8      	movs	r1, #200	; 0xc8
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7f3 f906 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	43db      	mvns	r3, r3
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	09db      	lsrs	r3, r3, #7
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d000      	beq.n	800e506 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 800e504:	e7f2      	b.n	800e4ec <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e506:	2280      	movs	r2, #128	; 0x80
 800e508:	21c8      	movs	r1, #200	; 0xc8
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f7f3 f8a6 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e510:	21f8      	movs	r1, #248	; 0xf8
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f7f3 f8f4 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e518:	4603      	mov	r3, r0
 800e51a:	f003 030f 	and.w	r3, r3, #15
 800e51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e522:	e76d      	b.n	800e400 <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e524:	8bba      	ldrh	r2, [r7, #28]
 800e526:	8a7b      	ldrh	r3, [r7, #18]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e52c:	8a7b      	ldrh	r3, [r7, #18]
 800e52e:	6a3a      	ldr	r2, [r7, #32]
 800e530:	4413      	add	r3, r2
 800e532:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e534:	e721      	b.n	800e37a <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 800e536:	bf00      	nop
 800e538:	e000      	b.n	800e53c <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 800e53a:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e53c:	21f8      	movs	r1, #248	; 0xf8
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7f3 f8de 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e544:	4603      	mov	r3, r0
 800e546:	f003 0320 	and.w	r3, r3, #32
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 800e54e:	2101      	movs	r1, #1
 800e550:	e000      	b.n	800e554 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 800e552:	2100      	movs	r1, #0
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	7893      	ldrb	r3, [r2, #2]
 800e558:	f361 0300 	bfi	r3, r1, #0, #1
 800e55c:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e55e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e562:	4618      	mov	r0, r3
 800e564:	3728      	adds	r7, #40	; 0x28
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b086      	sub	sp, #24
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	4608      	mov	r0, r1
 800e574:	4611      	mov	r1, r2
 800e576:	461a      	mov	r2, r3
 800e578:	4603      	mov	r3, r0
 800e57a:	70fb      	strb	r3, [r7, #3]
 800e57c:	460b      	mov	r3, r1
 800e57e:	70bb      	strb	r3, [r7, #2]
 800e580:	4613      	mov	r3, r2
 800e582:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e584:	f7f3 fb6a 	bl	8001c5c <HAL_GetTick>
 800e588:	4603      	mov	r3, r0
 800e58a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e58e:	3308      	adds	r3, #8
 800e590:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e592:	2300      	movs	r3, #0
 800e594:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e59e:	f7f3 fb5d 	bl	8001c5c <HAL_GetTick>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	0fdb      	lsrs	r3, r3, #31
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d04c      	beq.n	800e64a <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e5b0:	78fa      	ldrb	r2, [r7, #3]
 800e5b2:	78bb      	ldrb	r3, [r7, #2]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	21f0      	movs	r1, #240	; 0xf0
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f3 f84d 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e5c2:	23ff      	movs	r3, #255	; 0xff
 800e5c4:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e5c6:	f7f3 fb49 	bl	8001c5c <HAL_GetTick>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	0fdb      	lsrs	r3, r3, #31
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d010      	beq.n	800e5fa <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e5d8:	21c8      	movs	r1, #200	; 0xc8
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7f3 f890 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	daec      	bge.n	800e5c6 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e5ec:	2280      	movs	r2, #128	; 0x80
 800e5ee:	21c8      	movs	r1, #200	; 0xc8
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7f3 f833 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e5fa:	21f8      	movs	r1, #248	; 0xf8
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7f3 f87f 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e602:	4603      	mov	r3, r0
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d002      	beq.n	800e616 <_ZN3USB11dispatchPktEhht+0xac>
 800e610:	2b0e      	cmp	r3, #14
 800e612:	d00c      	beq.n	800e62e <_ZN3USB11dispatchPktEhht+0xc4>
 800e614:	e013      	b.n	800e63e <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 800e616:	8abb      	ldrh	r3, [r7, #20]
 800e618:	3301      	adds	r3, #1
 800e61a:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e61c:	883b      	ldrh	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00f      	beq.n	800e642 <_ZN3USB11dispatchPktEhht+0xd8>
 800e622:	8aba      	ldrh	r2, [r7, #20]
 800e624:	883b      	ldrh	r3, [r7, #0]
 800e626:	429a      	cmp	r2, r3
 800e628:	d10b      	bne.n	800e642 <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
 800e62c:	e00e      	b.n	800e64c <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e62e:	7dbb      	ldrb	r3, [r7, #22]
 800e630:	3301      	adds	r3, #1
 800e632:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e634:	7dbb      	ldrb	r3, [r7, #22]
 800e636:	2b03      	cmp	r3, #3
 800e638:	d105      	bne.n	800e646 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 800e63a:	7dfb      	ldrb	r3, [r7, #23]
 800e63c:	e006      	b.n	800e64c <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	e004      	b.n	800e64c <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 800e642:	bf00      	nop
 800e644:	e7ab      	b.n	800e59e <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 800e646:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e648:	e7a9      	b.n	800e59e <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3718      	adds	r7, #24
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fdfd 	bl	800f260 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 fe12 	bl	800f290 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e66c:	4603      	mov	r3, r0
 800e66e:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e670:	7b3b      	ldrb	r3, [r7, #12]
 800e672:	2b03      	cmp	r3, #3
 800e674:	d82e      	bhi.n	800e6d4 <_ZN3USB4TaskEv+0x80>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <_ZN3USB4TaskEv+0x28>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e699 	.word	0x0800e699
 800e680:	0800e68d 	.word	0x0800e68d
 800e684:	0800e6b5 	.word	0x0800e6b5
 800e688:	0800e6b1 	.word	0x0800e6b1
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e68c:	4bbf      	ldr	r3, [pc, #764]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e68e:	2213      	movs	r2, #19
 800e690:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e692:	2300      	movs	r3, #0
 800e694:	73fb      	strb	r3, [r7, #15]
                        break;
 800e696:	e01d      	b.n	800e6d4 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e698:	4bbc      	ldr	r3, [pc, #752]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6a0:	2b10      	cmp	r3, #16
 800e6a2:	d002      	beq.n	800e6aa <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e6a4:	4bb9      	ldr	r3, [pc, #740]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e6a6:	2211      	movs	r2, #17
 800e6a8:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	73fb      	strb	r3, [r7, #15]
                        break;
 800e6ae:	e011      	b.n	800e6d4 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e6b4:	4bb5      	ldr	r3, [pc, #724]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6bc:	2b10      	cmp	r3, #16
 800e6be:	d108      	bne.n	800e6d2 <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e6c0:	f7f3 facc 	bl	8001c5c <HAL_GetTick>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	33c8      	adds	r3, #200	; 0xc8
 800e6c8:	4ab1      	ldr	r2, [pc, #708]	; (800e990 <_ZN3USB4TaskEv+0x33c>)
 800e6ca:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e6cc:	4baf      	ldr	r3, [pc, #700]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e6d2:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	73bb      	strb	r3, [r7, #14]
 800e6d8:	7bbb      	ldrb	r3, [r7, #14]
 800e6da:	2b0f      	cmp	r3, #15
 800e6dc:	d81b      	bhi.n	800e716 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 800e6de:	7bba      	ldrb	r2, [r7, #14]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	321e      	adds	r2, #30
 800e6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d010      	beq.n	800e70e <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 800e6ec:	7bba      	ldrb	r2, [r7, #14]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	321e      	adds	r2, #30
 800e6f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6f6:	7bba      	ldrb	r2, [r7, #14]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	321e      	adds	r2, #30
 800e6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	330c      	adds	r3, #12
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4608      	mov	r0, r1
 800e708:	4798      	blx	r3
 800e70a:	4603      	mov	r3, r0
 800e70c:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	3301      	adds	r3, #1
 800e712:	73bb      	strb	r3, [r7, #14]
 800e714:	e7e0      	b.n	800e6d8 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 800e716:	4b9d      	ldr	r3, [pc, #628]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2ba0      	cmp	r3, #160	; 0xa0
 800e71c:	f000 8123 	beq.w	800e966 <_ZN3USB4TaskEv+0x312>
 800e720:	2ba0      	cmp	r3, #160	; 0xa0
 800e722:	f300 812f 	bgt.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e726:	2b90      	cmp	r3, #144	; 0x90
 800e728:	f000 811f 	beq.w	800e96a <_ZN3USB4TaskEv+0x316>
 800e72c:	2b90      	cmp	r3, #144	; 0x90
 800e72e:	f300 8129 	bgt.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e732:	2b80      	cmp	r3, #128	; 0x80
 800e734:	f000 80fe 	beq.w	800e934 <_ZN3USB4TaskEv+0x2e0>
 800e738:	2b80      	cmp	r3, #128	; 0x80
 800e73a:	f300 8123 	bgt.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e73e:	2b51      	cmp	r3, #81	; 0x51
 800e740:	f000 80ea 	beq.w	800e918 <_ZN3USB4TaskEv+0x2c4>
 800e744:	2b51      	cmp	r3, #81	; 0x51
 800e746:	f300 811d 	bgt.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e74a:	2b40      	cmp	r3, #64	; 0x40
 800e74c:	dc6a      	bgt.n	800e824 <_ZN3USB4TaskEv+0x1d0>
 800e74e:	2b11      	cmp	r3, #17
 800e750:	f2c0 8118 	blt.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e754:	3b11      	subs	r3, #17
 800e756:	2b2f      	cmp	r3, #47	; 0x2f
 800e758:	f200 8114 	bhi.w	800e984 <_ZN3USB4TaskEv+0x330>
 800e75c:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <_ZN3USB4TaskEv+0x110>)
 800e75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e762:	bf00      	nop
 800e764:	0800e82b 	.word	0x0800e82b
 800e768:	0800e96f 	.word	0x0800e96f
 800e76c:	0800e96f 	.word	0x0800e96f
 800e770:	0800e985 	.word	0x0800e985
 800e774:	0800e985 	.word	0x0800e985
 800e778:	0800e985 	.word	0x0800e985
 800e77c:	0800e985 	.word	0x0800e985
 800e780:	0800e985 	.word	0x0800e985
 800e784:	0800e985 	.word	0x0800e985
 800e788:	0800e985 	.word	0x0800e985
 800e78c:	0800e985 	.word	0x0800e985
 800e790:	0800e985 	.word	0x0800e985
 800e794:	0800e985 	.word	0x0800e985
 800e798:	0800e985 	.word	0x0800e985
 800e79c:	0800e985 	.word	0x0800e985
 800e7a0:	0800e87b 	.word	0x0800e87b
 800e7a4:	0800e985 	.word	0x0800e985
 800e7a8:	0800e985 	.word	0x0800e985
 800e7ac:	0800e985 	.word	0x0800e985
 800e7b0:	0800e985 	.word	0x0800e985
 800e7b4:	0800e985 	.word	0x0800e985
 800e7b8:	0800e985 	.word	0x0800e985
 800e7bc:	0800e985 	.word	0x0800e985
 800e7c0:	0800e985 	.word	0x0800e985
 800e7c4:	0800e985 	.word	0x0800e985
 800e7c8:	0800e985 	.word	0x0800e985
 800e7cc:	0800e985 	.word	0x0800e985
 800e7d0:	0800e985 	.word	0x0800e985
 800e7d4:	0800e985 	.word	0x0800e985
 800e7d8:	0800e985 	.word	0x0800e985
 800e7dc:	0800e985 	.word	0x0800e985
 800e7e0:	0800e897 	.word	0x0800e897
 800e7e4:	0800e985 	.word	0x0800e985
 800e7e8:	0800e985 	.word	0x0800e985
 800e7ec:	0800e985 	.word	0x0800e985
 800e7f0:	0800e985 	.word	0x0800e985
 800e7f4:	0800e985 	.word	0x0800e985
 800e7f8:	0800e985 	.word	0x0800e985
 800e7fc:	0800e985 	.word	0x0800e985
 800e800:	0800e985 	.word	0x0800e985
 800e804:	0800e985 	.word	0x0800e985
 800e808:	0800e985 	.word	0x0800e985
 800e80c:	0800e985 	.word	0x0800e985
 800e810:	0800e985 	.word	0x0800e985
 800e814:	0800e985 	.word	0x0800e985
 800e818:	0800e985 	.word	0x0800e985
 800e81c:	0800e985 	.word	0x0800e985
 800e820:	0800e8a9 	.word	0x0800e8a9
 800e824:	2b50      	cmp	r3, #80	; 0x50
 800e826:	d05f      	beq.n	800e8e8 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e828:	e0ac      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        init();
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff fa8e 	bl	800dd4c <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e830:	2300      	movs	r3, #0
 800e832:	737b      	strb	r3, [r7, #13]
 800e834:	7b7b      	ldrb	r3, [r7, #13]
 800e836:	2b0f      	cmp	r3, #15
 800e838:	d81b      	bhi.n	800e872 <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 800e83a:	7b7a      	ldrb	r2, [r7, #13]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	321e      	adds	r2, #30
 800e840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d010      	beq.n	800e86a <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 800e848:	7b7a      	ldrb	r2, [r7, #13]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	321e      	adds	r2, #30
 800e84e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e852:	7b7a      	ldrb	r2, [r7, #13]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	321e      	adds	r2, #30
 800e858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3308      	adds	r3, #8
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4608      	mov	r0, r1
 800e864:	4798      	blx	r3
 800e866:	4603      	mov	r3, r0
 800e868:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e86a:	7b7b      	ldrb	r3, [r7, #13]
 800e86c:	3301      	adds	r3, #1
 800e86e:	737b      	strb	r3, [r7, #13]
 800e870:	e7e0      	b.n	800e834 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e872:	4b46      	ldr	r3, [pc, #280]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e874:	2212      	movs	r2, #18
 800e876:	701a      	strb	r2, [r3, #0]
                        break;
 800e878:	e084      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e87a:	f7f3 f9ef 	bl	8001c5c <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	4b43      	ldr	r3, [pc, #268]	; (800e990 <_ZN3USB4TaskEv+0x33c>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	43db      	mvns	r3, r3
 800e888:	0fdb      	lsrs	r3, r3, #31
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d070      	beq.n	800e972 <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e890:	4b3e      	ldr	r3, [pc, #248]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e892:	2230      	movs	r2, #48	; 0x30
 800e894:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e896:	2201      	movs	r2, #1
 800e898:	21e8      	movs	r1, #232	; 0xe8
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7f2 fede 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e8a0:	4b3a      	ldr	r3, [pc, #232]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e8a2:	2240      	movs	r2, #64	; 0x40
 800e8a4:	701a      	strb	r2, [r3, #0]
                        break;
 800e8a6:	e06d      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e8a8:	21e8      	movs	r1, #232	; 0xe8
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7f2 ff28 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	bf0c      	ite	eq
 800e8ba:	2301      	moveq	r3, #1
 800e8bc:	2300      	movne	r3, #0
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d058      	beq.n	800e976 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e8c4:	21d8      	movs	r1, #216	; 0xd8
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7f2 ff1a 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f043 0308 	orr.w	r3, r3, #8
 800e8d2:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e8d4:	7b3b      	ldrb	r3, [r7, #12]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	21d8      	movs	r1, #216	; 0xd8
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7f2 febe 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e8e0:	4b2a      	ldr	r3, [pc, #168]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e8e2:	2250      	movs	r2, #80	; 0x50
 800e8e4:	701a      	strb	r2, [r3, #0]
                        break;
 800e8e6:	e046      	b.n	800e976 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e8e8:	21c8      	movs	r1, #200	; 0xc8
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7f2 ff08 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	bf14      	ite	ne
 800e8fa:	2301      	movne	r3, #1
 800e8fc:	2300      	moveq	r3, #0
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d03a      	beq.n	800e97a <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e904:	4b21      	ldr	r3, [pc, #132]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e906:	2251      	movs	r2, #81	; 0x51
 800e908:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e90a:	f7f3 f9a7 	bl	8001c5c <HAL_GetTick>
 800e90e:	4603      	mov	r3, r0
 800e910:	3314      	adds	r3, #20
 800e912:	4a1f      	ldr	r2, [pc, #124]	; (800e990 <_ZN3USB4TaskEv+0x33c>)
 800e914:	6013      	str	r3, [r2, #0]
                        break;
 800e916:	e030      	b.n	800e97a <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e918:	f7f3 f9a0 	bl	8001c5c <HAL_GetTick>
 800e91c:	4602      	mov	r2, r0
 800e91e:	4b1c      	ldr	r3, [pc, #112]	; (800e990 <_ZN3USB4TaskEv+0x33c>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	43db      	mvns	r3, r3
 800e926:	0fdb      	lsrs	r3, r3, #31
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d027      	beq.n	800e97e <_ZN3USB4TaskEv+0x32a>
 800e92e:	4b17      	ldr	r3, [pc, #92]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e930:	2280      	movs	r2, #128	; 0x80
 800e932:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e934:	7bfb      	ldrb	r3, [r7, #15]
 800e936:	2200      	movs	r2, #0
 800e938:	2100      	movs	r1, #0
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f920 	bl	800eb80 <_ZN3USB11ConfiguringEhhb>
 800e940:	4603      	mov	r3, r0
 800e942:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d009      	beq.n	800e95e <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e94a:	7afb      	ldrb	r3, [r7, #11]
 800e94c:	2bd2      	cmp	r3, #210	; 0xd2
 800e94e:	d018      	beq.n	800e982 <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 800e950:	4a10      	ldr	r2, [pc, #64]	; (800e994 <_ZN3USB4TaskEv+0x340>)
 800e952:	7afb      	ldrb	r3, [r7, #11]
 800e954:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e956:	4b0d      	ldr	r3, [pc, #52]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e958:	22a0      	movs	r2, #160	; 0xa0
 800e95a:	701a      	strb	r2, [r3, #0]
                        break;
 800e95c:	e011      	b.n	800e982 <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 800e95e:	4b0b      	ldr	r3, [pc, #44]	; (800e98c <_ZN3USB4TaskEv+0x338>)
 800e960:	2290      	movs	r2, #144	; 0x90
 800e962:	701a      	strb	r2, [r3, #0]
                        break;
 800e964:	e00d      	b.n	800e982 <_ZN3USB4TaskEv+0x32e>
                        break;
 800e966:	bf00      	nop
 800e968:	e00c      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        break;
 800e96a:	bf00      	nop
 800e96c:	e00a      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        break;
 800e96e:	bf00      	nop
 800e970:	e008      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 800e972:	bf00      	nop
 800e974:	e006      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        break;
 800e976:	bf00      	nop
 800e978:	e004      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        break;
 800e97a:	bf00      	nop
 800e97c:	e002      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 800e97e:	bf00      	nop
 800e980:	e000      	b.n	800e984 <_ZN3USB4TaskEv+0x330>
                        break;
 800e982:	bf00      	nop
}
 800e984:	bf00      	nop
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20000671 	.word	0x20000671
 800e990:	20000674 	.word	0x20000674
 800e994:	20000670 	.word	0x20000670

0800e998 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	70fb      	strb	r3, [r7, #3]
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	70bb      	strb	r3, [r7, #2]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2100      	movs	r1, #0
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 fbc0 	bl	800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e9c4:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e9cc:	23d6      	movs	r3, #214	; 0xd6
 800e9ce:	e03a      	b.n	800ea46 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e9d8:	23d7      	movs	r3, #215	; 0xd7
 800e9da:	e034      	b.n	800ea46 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	787a      	ldrb	r2, [r7, #1]
 800e9e0:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	78bb      	ldrb	r3, [r7, #2]
 800e9e6:	78f9      	ldrb	r1, [r7, #3]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f000 fc5f 	bl	800f2ac <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e9f8:	23d4      	movs	r3, #212	; 0xd4
 800e9fa:	e024      	b.n	800ea46 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	7bfa      	ldrb	r2, [r7, #15]
 800ea00:	4611      	mov	r1, r2
 800ea02:	4618      	mov	r0, r3
 800ea04:	f000 fb9e 	bl	800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800ea08:	6138      	str	r0, [r7, #16]

        if(!p)
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ea10:	23d6      	movs	r3, #214	; 0xd6
 800ea12:	e018      	b.n	800ea46 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	787a      	ldrb	r2, [r7, #1]
 800ea18:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2100      	movs	r1, #0
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 fae3 	bl	800efec <_ZN3USB7setAddrEhhh>
 800ea26:	4603      	mov	r3, r0
 800ea28:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d009      	beq.n	800ea44 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7bfa      	ldrb	r2, [r7, #15]
 800ea34:	4611      	mov	r1, r2
 800ea36:	4618      	mov	r0, r3
 800ea38:	f000 fcd0 	bl	800f3dc <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	e000      	b.n	800ea46 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800ea44:	2300      	movs	r3, #0
};
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800ea4e:	b590      	push	{r4, r7, lr}
 800ea50:	b085      	sub	sp, #20
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	4608      	mov	r0, r1
 800ea58:	4611      	mov	r1, r2
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	70fb      	strb	r3, [r7, #3]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70bb      	strb	r3, [r7, #2]
 800ea64:	4613      	mov	r3, r2
 800ea66:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800ea6c:	78fa      	ldrb	r2, [r7, #3]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	321e      	adds	r2, #30
 800ea72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea76:	78fa      	ldrb	r2, [r7, #3]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	321e      	adds	r2, #30
 800ea7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3304      	adds	r3, #4
 800ea84:	681c      	ldr	r4, [r3, #0]
 800ea86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea8a:	787a      	ldrb	r2, [r7, #1]
 800ea8c:	78b9      	ldrb	r1, [r7, #2]
 800ea8e:	47a0      	blx	r4
 800ea90:	4603      	mov	r3, r0
 800ea92:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
 800ea96:	2be0      	cmp	r3, #224	; 0xe0
 800ea98:	d11c      	bne.n	800ead4 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800ea9a:	78bb      	ldrb	r3, [r7, #2]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d108      	bne.n	800eab2 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	21e8      	movs	r1, #232	; 0xe8
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7f2 fdd9 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800eaaa:	2066      	movs	r0, #102	; 0x66
 800eaac:	f7f3 f8e2 	bl	8001c74 <HAL_Delay>
 800eab0:	e022      	b.n	800eaf8 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800eab2:	78ba      	ldrb	r2, [r7, #2]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	321e      	adds	r2, #30
 800eab8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eabc:	78ba      	ldrb	r2, [r7, #2]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	321e      	adds	r2, #30
 800eac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	3314      	adds	r3, #20
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	787a      	ldrb	r2, [r7, #1]
 800eace:	4611      	mov	r1, r2
 800ead0:	4798      	blx	r3
 800ead2:	e011      	b.n	800eaf8 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800ead4:	7bbb      	ldrb	r3, [r7, #14]
 800ead6:	2b0d      	cmp	r3, #13
 800ead8:	d109      	bne.n	800eaee <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d806      	bhi.n	800eaee <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800eae0:	2064      	movs	r0, #100	; 0x64
 800eae2:	f7f3 f8c7 	bl	8001c74 <HAL_Delay>
                retries++;
 800eae6:	7bfb      	ldrb	r3, [r7, #15]
 800eae8:	3301      	adds	r3, #1
 800eaea:	73fb      	strb	r3, [r7, #15]
                goto again;
 800eaec:	e7be      	b.n	800ea6c <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800eaee:	7bbb      	ldrb	r3, [r7, #14]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800eaf4:	7bbb      	ldrb	r3, [r7, #14]
 800eaf6:	e03f      	b.n	800eb78 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800eaf8:	78fa      	ldrb	r2, [r7, #3]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	321e      	adds	r2, #30
 800eafe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb02:	78fa      	ldrb	r2, [r7, #3]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	321e      	adds	r2, #30
 800eb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681c      	ldr	r4, [r3, #0]
 800eb10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb14:	787a      	ldrb	r2, [r7, #1]
 800eb16:	78b9      	ldrb	r1, [r7, #2]
 800eb18:	47a0      	blx	r4
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800eb1e:	7bbb      	ldrb	r3, [r7, #14]
 800eb20:	2b0d      	cmp	r3, #13
 800eb22:	d109      	bne.n	800eb38 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d806      	bhi.n	800eb38 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800eb2a:	2064      	movs	r0, #100	; 0x64
 800eb2c:	f7f3 f8a2 	bl	8001c74 <HAL_Delay>
                retries++;
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
 800eb32:	3301      	adds	r3, #1
 800eb34:	73fb      	strb	r3, [r7, #15]
                goto again;
 800eb36:	e799      	b.n	800ea6c <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800eb38:	7bbb      	ldrb	r3, [r7, #14]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d01b      	beq.n	800eb76 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800eb3e:	78bb      	ldrb	r3, [r7, #2]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d108      	bne.n	800eb56 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800eb44:	2201      	movs	r2, #1
 800eb46:	21e8      	movs	r1, #232	; 0xe8
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7f2 fd87 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800eb4e:	2066      	movs	r0, #102	; 0x66
 800eb50:	f7f3 f890 	bl	8001c74 <HAL_Delay>
 800eb54:	e00f      	b.n	800eb76 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800eb56:	78ba      	ldrb	r2, [r7, #2]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	321e      	adds	r2, #30
 800eb5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb60:	78ba      	ldrb	r2, [r7, #2]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	321e      	adds	r2, #30
 800eb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3314      	adds	r3, #20
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	787a      	ldrb	r2, [r7, #1]
 800eb72:	4611      	mov	r1, r2
 800eb74:	4798      	blx	r3
                }
        }
        return rcode;
 800eb76:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3714      	adds	r7, #20
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd90      	pop	{r4, r7, pc}

0800eb80 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b090      	sub	sp, #64	; 0x40
 800eb84:	af02      	add	r7, sp, #8
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4603      	mov	r3, r0
 800eb90:	70fb      	strb	r3, [r7, #3]
 800eb92:	460b      	mov	r3, r1
 800eb94:	70bb      	strb	r3, [r7, #2]
 800eb96:	4613      	mov	r3, r2
 800eb98:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800eba0:	f107 030c 	add.w	r3, r7, #12
 800eba4:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800ebb2:	2308      	movs	r3, #8
 800ebb4:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800ebb6:	7abb      	ldrb	r3, [r7, #10]
 800ebb8:	f36f 0300 	bfc	r3, #0, #1
 800ebbc:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800ebbe:	7abb      	ldrb	r3, [r7, #10]
 800ebc0:	f36f 0341 	bfc	r3, #1, #1
 800ebc4:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800ebc6:	7abb      	ldrb	r3, [r7, #10]
 800ebc8:	220f      	movs	r2, #15
 800ebca:	f362 0387 	bfi	r3, r2, #2, #6
 800ebce:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7fa fd13 	bl	80095fc <_ZN3USB14GetAddressPoolEv>
 800ebd6:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2100      	movs	r1, #0
 800ebe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebe2:	4798      	blx	r3
 800ebe4:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800ebe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d101      	bne.n	800ebf0 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ebec:	23d6      	movs	r3, #214	; 0xd6
 800ebee:	e15c      	b.n	800eeaa <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	f107 0208 	add.w	r2, r7, #8
 800ebfc:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800ebfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec00:	787a      	ldrb	r2, [r7, #1]
 800ec02:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800ec04:	f107 030c 	add.w	r3, r7, #12
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	2312      	movs	r3, #18
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2100      	movs	r1, #0
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f94e 	bl	800eeb2 <_ZN3USB11getDevDescrEhhtPh>
 800ec16:	4603      	mov	r3, r0
 800ec18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec20:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800ec22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800ec2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec2e:	e13c      	b.n	800eeaa <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	7a1a      	ldrb	r2, [r3, #8]
 800ec34:	7a5b      	ldrb	r3, [r3, #9]
 800ec36:	021b      	lsls	r3, r3, #8
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3e:	7a9a      	ldrb	r2, [r3, #10]
 800ec40:	7adb      	ldrb	r3, [r3, #11]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	4313      	orrs	r3, r2
 800ec46:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800ec48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4a:	791b      	ldrb	r3, [r3, #4]
 800ec4c:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	795b      	ldrb	r3, [r3, #5]
 800ec52:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ec54:	2300      	movs	r3, #0
 800ec56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec5e:	2b0f      	cmp	r3, #15
 800ec60:	f200 8081 	bhi.w	800ed66 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ec64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	321e      	adds	r2, #30
 800ec6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d06e      	beq.n	800ed52 <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ec74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	321e      	adds	r2, #30
 800ec7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	321e      	adds	r2, #30
 800ec88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	3310      	adds	r3, #16
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4608      	mov	r0, r1
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	bf14      	ite	ne
 800ec9c:	2301      	movne	r3, #1
 800ec9e:	2300      	moveq	r3, #0
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d157      	bne.n	800ed56 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800eca6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	321e      	adds	r2, #30
 800ecae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecb2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	321e      	adds	r2, #30
 800ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3320      	adds	r3, #32
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	7fba      	ldrb	r2, [r7, #30]
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	4798      	blx	r3
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d02b      	beq.n	800ed28 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ecd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	321e      	adds	r2, #30
 800ecd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecdc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	321e      	adds	r2, #30
 800ece4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3318      	adds	r3, #24
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	8c3a      	ldrh	r2, [r7, #32]
 800ecf0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ecf2:	4798      	blx	r3
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d114      	bne.n	800ed24 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ecfa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	321e      	adds	r2, #30
 800ed02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	321e      	adds	r2, #30
 800ed0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	331c      	adds	r3, #28
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	7ffa      	ldrb	r2, [r7, #31]
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	4798      	blx	r3
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ed24:	2301      	movs	r3, #1
 800ed26:	e000      	b.n	800ed2a <_ZN3USB11ConfiguringEhhb+0x1aa>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d014      	beq.n	800ed58 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ed2e:	78b8      	ldrb	r0, [r7, #2]
 800ed30:	78fa      	ldrb	r2, [r7, #3]
 800ed32:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ed36:	787b      	ldrb	r3, [r7, #1]
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff fe86 	bl	800ea4e <_ZN3USB13AttemptConfigEhhhb>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ed48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed4c:	2bd1      	cmp	r3, #209	; 0xd1
 800ed4e:	d109      	bne.n	800ed64 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800ed50:	e002      	b.n	800ed58 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ed52:	bf00      	nop
 800ed54:	e000      	b.n	800ed58 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ed56:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ed58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed62:	e77a      	b.n	800ec5a <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800ed64:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800ed66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed6a:	2b0f      	cmp	r3, #15
 800ed6c:	d802      	bhi.n	800ed74 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800ed6e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed72:	e09a      	b.n	800eeaa <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ed74:	2300      	movs	r3, #0
 800ed76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed7e:	2b0f      	cmp	r3, #15
 800ed80:	f200 8088 	bhi.w	800ee94 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800ed84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	321e      	adds	r2, #30
 800ed8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d074      	beq.n	800ee7e <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ed94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	321e      	adds	r2, #30
 800ed9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eda0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	321e      	adds	r2, #30
 800eda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3310      	adds	r3, #16
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4608      	mov	r0, r1
 800edb4:	4798      	blx	r3
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	bf14      	ite	ne
 800edbc:	2301      	movne	r3, #1
 800edbe:	2300      	moveq	r3, #0
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d15d      	bne.n	800ee82 <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800edc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	321e      	adds	r2, #30
 800edce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800edd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	321e      	adds	r2, #30
 800edda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	3320      	adds	r3, #32
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	7fba      	ldrb	r2, [r7, #30]
 800ede6:	4611      	mov	r1, r2
 800ede8:	4798      	blx	r3
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d02b      	beq.n	800ee48 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800edf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	321e      	adds	r2, #30
 800edf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800edfc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	321e      	adds	r2, #30
 800ee04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3318      	adds	r3, #24
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	8c3a      	ldrh	r2, [r7, #32]
 800ee10:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ee12:	4798      	blx	r3
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d114      	bne.n	800ee44 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800ee1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	321e      	adds	r2, #30
 800ee22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ee26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	321e      	adds	r2, #30
 800ee2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	331c      	adds	r3, #28
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	7ffa      	ldrb	r2, [r7, #31]
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4798      	blx	r3
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d001      	beq.n	800ee48 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ee44:	2301      	movs	r3, #1
 800ee46:	e000      	b.n	800ee4a <_ZN3USB11ConfiguringEhhb+0x2ca>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d11b      	bne.n	800ee86 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ee4e:	78b8      	ldrb	r0, [r7, #2]
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ee56:	787b      	ldrb	r3, [r7, #1]
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7ff fdf6 	bl	800ea4e <_ZN3USB13AttemptConfigEhhhb>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ee68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee6c:	2bd1      	cmp	r3, #209	; 0xd1
 800ee6e:	d00b      	beq.n	800ee88 <_ZN3USB11ConfiguringEhhb+0x308>
 800ee70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee74:	2bd9      	cmp	r3, #217	; 0xd9
 800ee76:	d007      	beq.n	800ee88 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ee78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee7c:	e015      	b.n	800eeaa <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ee7e:	bf00      	nop
 800ee80:	e002      	b.n	800ee88 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ee82:	bf00      	nop
 800ee84:	e000      	b.n	800ee88 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ee86:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ee88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee92:	e772      	b.n	800ed7a <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ee94:	787b      	ldrb	r3, [r7, #1]
 800ee96:	78ba      	ldrb	r2, [r7, #2]
 800ee98:	78f9      	ldrb	r1, [r7, #3]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fd7c 	bl	800e998 <_ZN3USB17DefaultAddressingEhhb>
 800eea0:	4603      	mov	r3, r0
 800eea2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800eea6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3738      	adds	r7, #56	; 0x38
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b08a      	sub	sp, #40	; 0x28
 800eeb6:	af08      	add	r7, sp, #32
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	4608      	mov	r0, r1
 800eebc:	4611      	mov	r1, r2
 800eebe:	461a      	mov	r2, r3
 800eec0:	4603      	mov	r3, r0
 800eec2:	70fb      	strb	r3, [r7, #3]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70bb      	strb	r3, [r7, #2]
 800eec8:	4613      	mov	r3, r2
 800eeca:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800eecc:	78ba      	ldrb	r2, [r7, #2]
 800eece:	78f9      	ldrb	r1, [r7, #3]
 800eed0:	2300      	movs	r3, #0
 800eed2:	9307      	str	r3, [sp, #28]
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	9306      	str	r3, [sp, #24]
 800eed8:	883b      	ldrh	r3, [r7, #0]
 800eeda:	9305      	str	r3, [sp, #20]
 800eedc:	883b      	ldrh	r3, [r7, #0]
 800eede:	9304      	str	r3, [sp, #16]
 800eee0:	2300      	movs	r3, #0
 800eee2:	9303      	str	r3, [sp, #12]
 800eee4:	2301      	movs	r3, #1
 800eee6:	9302      	str	r3, [sp, #8]
 800eee8:	2300      	movs	r3, #0
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	2306      	movs	r3, #6
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	2380      	movs	r3, #128	; 0x80
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f7fe fffd 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800eef8:	4603      	mov	r3, r0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b08a      	sub	sp, #40	; 0x28
 800ef06:	af08      	add	r7, sp, #32
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	4608      	mov	r0, r1
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	461a      	mov	r2, r3
 800ef10:	4603      	mov	r3, r0
 800ef12:	70fb      	strb	r3, [r7, #3]
 800ef14:	460b      	mov	r3, r1
 800ef16:	70bb      	strb	r3, [r7, #2]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ef1c:	78ba      	ldrb	r2, [r7, #2]
 800ef1e:	78f9      	ldrb	r1, [r7, #3]
 800ef20:	2300      	movs	r3, #0
 800ef22:	9307      	str	r3, [sp, #28]
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	9306      	str	r3, [sp, #24]
 800ef28:	883b      	ldrh	r3, [r7, #0]
 800ef2a:	9305      	str	r3, [sp, #20]
 800ef2c:	883b      	ldrh	r3, [r7, #0]
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	2300      	movs	r3, #0
 800ef32:	9303      	str	r3, [sp, #12]
 800ef34:	2302      	movs	r3, #2
 800ef36:	9302      	str	r3, [sp, #8]
 800ef38:	7c3b      	ldrb	r3, [r7, #16]
 800ef3a:	9301      	str	r3, [sp, #4]
 800ef3c:	2306      	movs	r3, #6
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	2380      	movs	r3, #128	; 0x80
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fe ffd5 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef48:	4603      	mov	r3, r0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b09e      	sub	sp, #120	; 0x78
 800ef56:	af08      	add	r7, sp, #32
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	461a      	mov	r2, r3
 800ef60:	4603      	mov	r3, r0
 800ef62:	70fb      	strb	r3, [r7, #3]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70bb      	strb	r3, [r7, #2]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800ef72:	f107 030c 	add.w	r3, r7, #12
 800ef76:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800ef78:	78ba      	ldrb	r2, [r7, #2]
 800ef7a:	78f9      	ldrb	r1, [r7, #3]
 800ef7c:	f107 030c 	add.w	r3, r7, #12
 800ef80:	9301      	str	r3, [sp, #4]
 800ef82:	787b      	ldrb	r3, [r7, #1]
 800ef84:	9300      	str	r3, [sp, #0]
 800ef86:	2309      	movs	r3, #9
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7ff ffba 	bl	800ef02 <_ZN3USB12getConfDescrEhhthPh>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800ef94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800ef9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efa0:	e020      	b.n	800efe4 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800efa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efa4:	789a      	ldrb	r2, [r3, #2]
 800efa6:	78db      	ldrb	r3, [r3, #3]
 800efa8:	021b      	lsls	r3, r3, #8
 800efaa:	4313      	orrs	r3, r2
 800efac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800efb0:	78ba      	ldrb	r2, [r7, #2]
 800efb2:	78f9      	ldrb	r1, [r7, #3]
 800efb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efb6:	9307      	str	r3, [sp, #28]
 800efb8:	f107 030c 	add.w	r3, r7, #12
 800efbc:	9306      	str	r3, [sp, #24]
 800efbe:	2340      	movs	r3, #64	; 0x40
 800efc0:	9305      	str	r3, [sp, #20]
 800efc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	2300      	movs	r3, #0
 800efca:	9303      	str	r3, [sp, #12]
 800efcc:	2302      	movs	r3, #2
 800efce:	9302      	str	r3, [sp, #8]
 800efd0:	787b      	ldrb	r3, [r7, #1]
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	2306      	movs	r3, #6
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	2380      	movs	r3, #128	; 0x80
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7fe ff89 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800efe0:	4603      	mov	r3, r0
 800efe2:	bf00      	nop
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3758      	adds	r7, #88	; 0x58
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800efec:	b580      	push	{r7, lr}
 800efee:	b08c      	sub	sp, #48	; 0x30
 800eff0:	af08      	add	r7, sp, #32
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	461a      	mov	r2, r3
 800effa:	4603      	mov	r3, r0
 800effc:	70fb      	strb	r3, [r7, #3]
 800effe:	460b      	mov	r3, r1
 800f000:	70bb      	strb	r3, [r7, #2]
 800f002:	4613      	mov	r3, r2
 800f004:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800f006:	78ba      	ldrb	r2, [r7, #2]
 800f008:	78f9      	ldrb	r1, [r7, #3]
 800f00a:	2300      	movs	r3, #0
 800f00c:	9307      	str	r3, [sp, #28]
 800f00e:	2300      	movs	r3, #0
 800f010:	9306      	str	r3, [sp, #24]
 800f012:	2300      	movs	r3, #0
 800f014:	9305      	str	r3, [sp, #20]
 800f016:	2300      	movs	r3, #0
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	2300      	movs	r3, #0
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	2300      	movs	r3, #0
 800f020:	9302      	str	r3, [sp, #8]
 800f022:	787b      	ldrb	r3, [r7, #1]
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	2305      	movs	r3, #5
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	2300      	movs	r3, #0
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fe ff60 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f032:	4603      	mov	r3, r0
 800f034:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800f036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f03a:	f7f2 fe1b 	bl	8001c74 <HAL_Delay>
        return rcode;
 800f03e:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800f040:	4618      	mov	r0, r3
 800f042:	3710      	adds	r7, #16
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08a      	sub	sp, #40	; 0x28
 800f04c:	af08      	add	r7, sp, #32
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	4608      	mov	r0, r1
 800f052:	4611      	mov	r1, r2
 800f054:	461a      	mov	r2, r3
 800f056:	4603      	mov	r3, r0
 800f058:	70fb      	strb	r3, [r7, #3]
 800f05a:	460b      	mov	r3, r1
 800f05c:	70bb      	strb	r3, [r7, #2]
 800f05e:	4613      	mov	r3, r2
 800f060:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800f062:	78ba      	ldrb	r2, [r7, #2]
 800f064:	78f9      	ldrb	r1, [r7, #3]
 800f066:	2300      	movs	r3, #0
 800f068:	9307      	str	r3, [sp, #28]
 800f06a:	2300      	movs	r3, #0
 800f06c:	9306      	str	r3, [sp, #24]
 800f06e:	2300      	movs	r3, #0
 800f070:	9305      	str	r3, [sp, #20]
 800f072:	2300      	movs	r3, #0
 800f074:	9304      	str	r3, [sp, #16]
 800f076:	2300      	movs	r3, #0
 800f078:	9303      	str	r3, [sp, #12]
 800f07a:	2300      	movs	r3, #0
 800f07c:	9302      	str	r3, [sp, #8]
 800f07e:	787b      	ldrb	r3, [r7, #1]
 800f080:	9301      	str	r3, [sp, #4]
 800f082:	2309      	movs	r3, #9
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	2300      	movs	r3, #0
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7fe ff32 	bl	800def2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f08e:	4603      	mov	r3, r0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
};
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	370c      	adds	r7, #12
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
	...

0800f0b0 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	4a04      	ldr	r2, [pc, #16]	; (800f0cc <_ZN11AddressPoolC1Ev+0x1c>)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	0800fb44 	.word	0x0800fb44

0800f0d0 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff ffe8 	bl	800f0b0 <_ZN11AddressPoolC1Ev>
 800f0e0:	4a17      	ldr	r2, [pc, #92]	; (800f140 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f990 	bl	800f414 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	1d1a      	adds	r2, r3, #4
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2208      	movs	r2, #8
 800f10c:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	7993      	ldrb	r3, [r2, #6]
 800f112:	f36f 0300 	bfc	r3, #0, #1
 800f116:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	7993      	ldrb	r3, [r2, #6]
 800f11c:	f36f 0341 	bfc	r3, #1, #1
 800f120:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	7993      	ldrb	r3, [r2, #6]
 800f126:	210f      	movs	r1, #15
 800f128:	f361 0387 	bfi	r3, r1, #2, #6
 800f12c:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f9a1 	bl	800f476 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	0800fb30 	.word	0x0800fb30

0800f144 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d102      	bne.n	800f15c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3308      	adds	r3, #8
 800f15a:	e014      	b.n	800f186 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800f15c:	78fb      	ldrb	r3, [r7, #3]
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f9a1 	bl	800f4a8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f166:	4603      	mov	r3, r0
 800f168:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d008      	beq.n	800f182 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f103 0108 	add.w	r1, r3, #8
 800f176:	7bfa      	ldrb	r2, [r7, #15]
 800f178:	4613      	mov	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	1a9b      	subs	r3, r3, r2
 800f17e:	440b      	add	r3, r1
 800f180:	e000      	b.n	800f184 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800f182:	2300      	movs	r3, #0
 800f184:	bf00      	nop
        };
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	607b      	str	r3, [r7, #4]
 800f19a:	460b      	mov	r3, r1
 800f19c:	72fb      	strb	r3, [r7, #11]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f1a2:	f7f1 fb77 	bl	8000894 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800f1a6:	7afb      	ldrb	r3, [r7, #11]
 800f1a8:	f043 0302 	orr.w	r3, r3, #2
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f1b0:	f107 0117 	add.w	r1, r7, #23
 800f1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	480b      	ldr	r0, [pc, #44]	; (800f1e8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f1bc:	f7f5 fb45 	bl	800484a <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f1c0:	7abb      	ldrb	r3, [r7, #10]
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	4807      	ldr	r0, [pc, #28]	; (800f1e8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f1cc:	f7f5 fb3d 	bl	800484a <HAL_SPI_Transmit>
        data_p += nbytes;
 800f1d0:	7abb      	ldrb	r3, [r7, #10]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f1d8:	f7f1 fb50 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f1dc:	687b      	ldr	r3, [r7, #4]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20000304 	.word	0x20000304

0800f1ec <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	607b      	str	r3, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	72fb      	strb	r3, [r7, #11]
 800f212:	4613      	mov	r3, r2
 800f214:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f216:	f7f1 fb3d 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f21a:	f107 010b 	add.w	r1, r7, #11
 800f21e:	f04f 33ff 	mov.w	r3, #4294967295
 800f222:	2201      	movs	r2, #1
 800f224:	480d      	ldr	r0, [pc, #52]	; (800f25c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f226:	f7f5 fb10 	bl	800484a <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f22a:	7abb      	ldrb	r3, [r7, #10]
 800f22c:	461a      	mov	r2, r3
 800f22e:	2100      	movs	r1, #0
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fa91 	bl	800f758 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f236:	7abb      	ldrb	r3, [r7, #10]
 800f238:	b29a      	uxth	r2, r3
 800f23a:	f04f 33ff 	mov.w	r3, #4294967295
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	4806      	ldr	r0, [pc, #24]	; (800f25c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f242:	f7f5 fc3e 	bl	8004ac2 <HAL_SPI_Receive>
        data_p += nbytes;
 800f246:	7abb      	ldrb	r3, [r7, #10]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	4413      	add	r3, r2
 800f24c:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f24e:	f7f1 fb15 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f252:	687b      	ldr	r3, [r7, #4]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	20000304 	.word	0x20000304

0800f260 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800f26c:	f7fe fd46 	bl	800dcfc <_ZN2P95IsSetEv>
 800f270:	4603      	mov	r3, r0
 800f272:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d104      	bne.n	800f284 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f937 	bl	800f4ee <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800f284:	7bfb      	ldrb	r3, [r7, #15]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
                return vbusState;
 800f298:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
        };
 800f29c:	4618      	mov	r0, r3
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	20000657 	.word	0x20000657

0800f2ac <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	4608      	mov	r0, r1
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	70fb      	strb	r3, [r7, #3]
 800f2be:	460b      	mov	r3, r1
 800f2c0:	70bb      	strb	r3, [r7, #2]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f2ca:	7b3b      	ldrb	r3, [r7, #12]
 800f2cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d102      	bne.n	800f2dc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f2d6:	787b      	ldrb	r3, [r7, #1]
 800f2d8:	2b07      	cmp	r3, #7
 800f2da:	d901      	bls.n	800f2e0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e079      	b.n	800f3d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f2e0:	78bb      	ldrb	r3, [r7, #2]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d005      	beq.n	800f2f2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	79db      	ldrb	r3, [r3, #7]
 800f2ea:	2b07      	cmp	r3, #7
 800f2ec:	d101      	bne.n	800f2f2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e070      	b.n	800f3d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 f8d7 	bl	800f4a8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f2fe:	7bfb      	ldrb	r3, [r7, #15]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f304:	2300      	movs	r3, #0
 800f306:	e065      	b.n	800f3d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f308:	7b3b      	ldrb	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d124      	bne.n	800f358 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f30e:	78bb      	ldrb	r3, [r7, #2]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00f      	beq.n	800f334 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f314:	7bfa      	ldrb	r2, [r7, #15]
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	4613      	mov	r3, r2
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	1a9b      	subs	r3, r3, r2
 800f31e:	440b      	add	r3, r1
 800f320:	330c      	adds	r3, #12
 800f322:	2241      	movs	r2, #65	; 0x41
 800f324:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	79db      	ldrb	r3, [r3, #7]
 800f32a:	3301      	adds	r3, #1
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	71da      	strb	r2, [r3, #7]
 800f332:	e008      	b.n	800f346 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f334:	7bfa      	ldrb	r2, [r7, #15]
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	4613      	mov	r3, r2
 800f33a:	00db      	lsls	r3, r3, #3
 800f33c:	1a9b      	subs	r3, r3, r2
 800f33e:	440b      	add	r3, r1
 800f340:	330c      	adds	r3, #12
 800f342:	2201      	movs	r2, #1
 800f344:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f346:	7bfa      	ldrb	r2, [r7, #15]
 800f348:	6879      	ldr	r1, [r7, #4]
 800f34a:	4613      	mov	r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	1a9b      	subs	r3, r3, r2
 800f350:	440b      	add	r3, r1
 800f352:	330c      	adds	r3, #12
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	e03d      	b.n	800f3d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f358:	2300      	movs	r3, #0
 800f35a:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f35c:	7b3b      	ldrb	r3, [r7, #12]
 800f35e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f362:	b2da      	uxtb	r2, r3
 800f364:	7a3b      	ldrb	r3, [r7, #8]
 800f366:	f362 03c5 	bfi	r3, r2, #3, #3
 800f36a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f36c:	78bb      	ldrb	r3, [r7, #2]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d013      	beq.n	800f39a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f372:	7a3b      	ldrb	r3, [r7, #8]
 800f374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f378:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	79db      	ldrb	r3, [r3, #7]
 800f37e:	3301      	adds	r3, #1
 800f380:	b2da      	uxtb	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	71da      	strb	r2, [r3, #7]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	79db      	ldrb	r3, [r3, #7]
 800f38a:	f003 0307 	and.w	r3, r3, #7
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	7a3b      	ldrb	r3, [r7, #8]
 800f392:	f362 0302 	bfi	r3, r2, #0, #3
 800f396:	723b      	strb	r3, [r7, #8]
 800f398:	e00b      	b.n	800f3b2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f39a:	7a3b      	ldrb	r3, [r7, #8]
 800f39c:	f36f 1386 	bfc	r3, #6, #1
 800f3a0:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f3a2:	787b      	ldrb	r3, [r7, #1]
 800f3a4:	f003 0307 	and.w	r3, r3, #7
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	7a3b      	ldrb	r3, [r7, #8]
 800f3ac:	f362 0302 	bfi	r3, r2, #0, #3
 800f3b0:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f3b2:	7bfa      	ldrb	r2, [r7, #15]
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	00db      	lsls	r3, r3, #3
 800f3ba:	1a9b      	subs	r3, r3, r2
 800f3bc:	440b      	add	r3, r1
 800f3be:	330c      	adds	r3, #12
 800f3c0:	7a3a      	ldrb	r2, [r7, #8]
 800f3c2:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f3c4:	7bfa      	ldrb	r2, [r7, #15]
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	00db      	lsls	r3, r3, #3
 800f3cc:	1a9b      	subs	r3, r3, r2
 800f3ce:	440b      	add	r3, r1
 800f3d0:	330c      	adds	r3, #12
 800f3d2:	781b      	ldrb	r3, [r3, #0]
        };
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f3e8:	78fb      	ldrb	r3, [r7, #3]
 800f3ea:	2b41      	cmp	r3, #65	; 0x41
 800f3ec:	d103      	bne.n	800f3f6 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f841 	bl	800f476 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f3f4:	e00b      	b.n	800f40e <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f3f6:	78fb      	ldrb	r3, [r7, #3]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f854 	bl	800f4a8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f893 	bl	800f534 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	460b      	mov	r3, r1
 800f41e:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f420:	78fa      	ldrb	r2, [r7, #3]
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	4613      	mov	r3, r2
 800f426:	00db      	lsls	r3, r3, #3
 800f428:	1a9b      	subs	r3, r3, r2
 800f42a:	440b      	add	r3, r1
 800f42c:	330c      	adds	r3, #12
 800f42e:	2200      	movs	r2, #0
 800f430:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f432:	78fa      	ldrb	r2, [r7, #3]
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	4613      	mov	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	440b      	add	r3, r1
 800f43e:	330d      	adds	r3, #13
 800f440:	2201      	movs	r2, #1
 800f442:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f444:	78fa      	ldrb	r2, [r7, #3]
 800f446:	6879      	ldr	r1, [r7, #4]
 800f448:	4613      	mov	r3, r2
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	1a9b      	subs	r3, r3, r2
 800f44e:	440b      	add	r3, r1
 800f450:	330e      	adds	r3, #14
 800f452:	2200      	movs	r2, #0
 800f454:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f456:	78fa      	ldrb	r2, [r7, #3]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	1d19      	adds	r1, r3, #4
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	4613      	mov	r3, r2
 800f460:	00db      	lsls	r3, r3, #3
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	4403      	add	r3, r0
 800f466:	3308      	adds	r3, #8
 800f468:	6019      	str	r1, [r3, #0]
        };
 800f46a:	bf00      	nop
 800f46c:	370c      	adds	r7, #12
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr

0800f476 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f47e:	2301      	movs	r3, #1
 800f480:	73fb      	strb	r3, [r7, #15]
 800f482:	7bfb      	ldrb	r3, [r7, #15]
 800f484:	2b0f      	cmp	r3, #15
 800f486:	d808      	bhi.n	800f49a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ffc1 	bl	800f414 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f492:	7bfb      	ldrb	r3, [r7, #15]
 800f494:	3301      	adds	r3, #1
 800f496:	73fb      	strb	r3, [r7, #15]
 800f498:	e7f3      	b.n	800f482 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	71da      	strb	r2, [r3, #7]
        };
 800f4a0:	bf00      	nop
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	73fb      	strb	r3, [r7, #15]
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	2b0f      	cmp	r3, #15
 800f4bc:	d810      	bhi.n	800f4e0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f4be:	7bfa      	ldrb	r2, [r7, #15]
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	00db      	lsls	r3, r3, #3
 800f4c6:	1a9b      	subs	r3, r3, r2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	330c      	adds	r3, #12
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	78fa      	ldrb	r2, [r7, #3]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d101      	bne.n	800f4d8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
 800f4d6:	e004      	b.n	800f4e2 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	73fb      	strb	r3, [r7, #15]
 800f4de:	e7eb      	b.n	800f4b8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f4e0:	2300      	movs	r3, #0
        };
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b084      	sub	sp, #16
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f4fa:	21c8      	movs	r1, #200	; 0xc8
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f2 f8ff 	bl	8001700 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f502:	4603      	mov	r3, r0
 800f504:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f506:	7bbb      	ldrb	r3, [r7, #14]
 800f508:	f003 0320 	and.w	r3, r3, #32
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d006      	beq.n	800f51e <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7f2 f917 	bl	8001744 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	f043 0320 	orr.w	r3, r3, #32
 800f51c:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	461a      	mov	r2, r3
 800f522:	21c8      	movs	r1, #200	; 0xc8
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7f2 f899 	bl	800165c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	460b      	mov	r3, r1
 800f53e:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d03a      	beq.n	800f5bc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f546:	78fa      	ldrb	r2, [r7, #3]
 800f548:	6879      	ldr	r1, [r7, #4]
 800f54a:	4613      	mov	r3, r2
 800f54c:	00db      	lsls	r3, r3, #3
 800f54e:	1a9b      	subs	r3, r3, r2
 800f550:	440b      	add	r3, r1
 800f552:	330c      	adds	r3, #12
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f558:	7b3b      	ldrb	r3, [r7, #12]
 800f55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	2b00      	cmp	r3, #0
 800f562:	d025      	beq.n	800f5b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f564:	2301      	movs	r3, #1
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	461a      	mov	r2, r3
 800f56c:	7b39      	ldrb	r1, [r7, #12]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f828 	bl	800f5c4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f574:	4603      	mov	r3, r0
 800f576:	73fb      	strb	r3, [r7, #15]
 800f578:	7bfb      	ldrb	r3, [r7, #15]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	bf14      	ite	ne
 800f57e:	2301      	movne	r3, #1
 800f580:	2300      	moveq	r3, #0
 800f582:	b2db      	uxtb	r3, r3
 800f584:	2b00      	cmp	r3, #0
 800f586:	d005      	beq.n	800f594 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f588:	7bfb      	ldrb	r3, [r7, #15]
 800f58a:	4619      	mov	r1, r3
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ffd1 	bl	800f534 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f592:	e7e9      	b.n	800f568 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	79db      	ldrb	r3, [r3, #7]
 800f598:	7b3a      	ldrb	r2, [r7, #12]
 800f59a:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d105      	bne.n	800f5b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	79db      	ldrb	r3, [r3, #7]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7ff ff2d 	bl	800f414 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f5ba:	e000      	b.n	800f5be <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f5bc:	bf00      	nop
        }
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	7039      	strb	r1, [r7, #0]
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f5d2:	78fb      	ldrb	r3, [r7, #3]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d004      	beq.n	800f5e2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f5d8:	78fb      	ldrb	r3, [r7, #3]
 800f5da:	2b0f      	cmp	r3, #15
 800f5dc:	d801      	bhi.n	800f5e2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f5de:	78fb      	ldrb	r3, [r7, #3]
 800f5e0:	e000      	b.n	800f5e4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	73fb      	strb	r3, [r7, #15]
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
 800f5e8:	2b0f      	cmp	r3, #15
 800f5ea:	d816      	bhi.n	800f61a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f5ec:	7bfa      	ldrb	r2, [r7, #15]
 800f5ee:	6879      	ldr	r1, [r7, #4]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	1a9b      	subs	r3, r3, r2
 800f5f6:	440b      	add	r3, r1
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	791b      	ldrb	r3, [r3, #4]
 800f5fc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f600:	b2da      	uxtb	r2, r3
 800f602:	783b      	ldrb	r3, [r7, #0]
 800f604:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d101      	bne.n	800f612 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f60e:	7bfb      	ldrb	r3, [r7, #15]
 800f610:	e004      	b.n	800f61c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f612:	7bfb      	ldrb	r3, [r7, #15]
 800f614:	3301      	adds	r3, #1
 800f616:	73fb      	strb	r3, [r7, #15]
 800f618:	e7e5      	b.n	800f5e6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f61a:	2300      	movs	r3, #0
        };
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d101      	bne.n	800f640 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f63c:	2300      	movs	r3, #0
 800f63e:	e031      	b.n	800f6a4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	791b      	ldrb	r3, [r3, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d022      	beq.n	800f68e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d01e      	beq.n	800f68e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68f9      	ldr	r1, [r7, #12]
 800f65a:	7949      	ldrb	r1, [r1, #5]
 800f65c:	4608      	mov	r0, r1
 800f65e:	68f9      	ldr	r1, [r7, #12]
 800f660:	7909      	ldrb	r1, [r1, #4]
 800f662:	1a41      	subs	r1, r0, r1
 800f664:	440b      	add	r3, r1
 800f666:	7812      	ldrb	r2, [r2, #0]
 800f668:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	791b      	ldrb	r3, [r3, #4]
 800f66e:	3b01      	subs	r3, #1
 800f670:	b2da      	uxtb	r2, r3
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	711a      	strb	r2, [r3, #4]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	801a      	strh	r2, [r3, #0]
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	601a      	str	r2, [r3, #0]
 800f68c:	e7d8      	b.n	800f640 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	791b      	ldrb	r3, [r3, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f696:	2300      	movs	r3, #0
 800f698:	e004      	b.n	800f6a4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	795a      	ldrb	r2, [r3, #5]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	711a      	strb	r2, [r3, #4]
        return true;
 800f6a2:	2301      	movs	r3, #1
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <__cxa_pure_virtual>:
 800f6b0:	b508      	push	{r3, lr}
 800f6b2:	f000 f80d 	bl	800f6d0 <_ZSt9terminatev>

0800f6b6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f6b6:	b508      	push	{r3, lr}
 800f6b8:	4780      	blx	r0
 800f6ba:	f000 f80e 	bl	800f6da <abort>
	...

0800f6c0 <_ZSt13get_terminatev>:
 800f6c0:	4b02      	ldr	r3, [pc, #8]	; (800f6cc <_ZSt13get_terminatev+0xc>)
 800f6c2:	6818      	ldr	r0, [r3, #0]
 800f6c4:	f3bf 8f5b 	dmb	ish
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	20000174 	.word	0x20000174

0800f6d0 <_ZSt9terminatev>:
 800f6d0:	b508      	push	{r3, lr}
 800f6d2:	f7ff fff5 	bl	800f6c0 <_ZSt13get_terminatev>
 800f6d6:	f7ff ffee 	bl	800f6b6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f6da <abort>:
 800f6da:	b508      	push	{r3, lr}
 800f6dc:	2006      	movs	r0, #6
 800f6de:	f000 f86b 	bl	800f7b8 <raise>
 800f6e2:	2001      	movs	r0, #1
 800f6e4:	f7f2 fa0a 	bl	8001afc <_exit>

0800f6e8 <__errno>:
 800f6e8:	4b01      	ldr	r3, [pc, #4]	; (800f6f0 <__errno+0x8>)
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	20000178 	.word	0x20000178

0800f6f4 <__libc_init_array>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	4d0d      	ldr	r5, [pc, #52]	; (800f72c <__libc_init_array+0x38>)
 800f6f8:	4c0d      	ldr	r4, [pc, #52]	; (800f730 <__libc_init_array+0x3c>)
 800f6fa:	1b64      	subs	r4, r4, r5
 800f6fc:	10a4      	asrs	r4, r4, #2
 800f6fe:	2600      	movs	r6, #0
 800f700:	42a6      	cmp	r6, r4
 800f702:	d109      	bne.n	800f718 <__libc_init_array+0x24>
 800f704:	4d0b      	ldr	r5, [pc, #44]	; (800f734 <__libc_init_array+0x40>)
 800f706:	4c0c      	ldr	r4, [pc, #48]	; (800f738 <__libc_init_array+0x44>)
 800f708:	f000 f884 	bl	800f814 <_init>
 800f70c:	1b64      	subs	r4, r4, r5
 800f70e:	10a4      	asrs	r4, r4, #2
 800f710:	2600      	movs	r6, #0
 800f712:	42a6      	cmp	r6, r4
 800f714:	d105      	bne.n	800f722 <__libc_init_array+0x2e>
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	f855 3b04 	ldr.w	r3, [r5], #4
 800f71c:	4798      	blx	r3
 800f71e:	3601      	adds	r6, #1
 800f720:	e7ee      	b.n	800f700 <__libc_init_array+0xc>
 800f722:	f855 3b04 	ldr.w	r3, [r5], #4
 800f726:	4798      	blx	r3
 800f728:	3601      	adds	r6, #1
 800f72a:	e7f2      	b.n	800f712 <__libc_init_array+0x1e>
 800f72c:	0800fbb8 	.word	0x0800fbb8
 800f730:	0800fbb8 	.word	0x0800fbb8
 800f734:	0800fbb8 	.word	0x0800fbb8
 800f738:	0800fbc0 	.word	0x0800fbc0

0800f73c <memcpy>:
 800f73c:	440a      	add	r2, r1
 800f73e:	4291      	cmp	r1, r2
 800f740:	f100 33ff 	add.w	r3, r0, #4294967295
 800f744:	d100      	bne.n	800f748 <memcpy+0xc>
 800f746:	4770      	bx	lr
 800f748:	b510      	push	{r4, lr}
 800f74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f74e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f752:	4291      	cmp	r1, r2
 800f754:	d1f9      	bne.n	800f74a <memcpy+0xe>
 800f756:	bd10      	pop	{r4, pc}

0800f758 <memset>:
 800f758:	4402      	add	r2, r0
 800f75a:	4603      	mov	r3, r0
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d100      	bne.n	800f762 <memset+0xa>
 800f760:	4770      	bx	lr
 800f762:	f803 1b01 	strb.w	r1, [r3], #1
 800f766:	e7f9      	b.n	800f75c <memset+0x4>

0800f768 <_raise_r>:
 800f768:	291f      	cmp	r1, #31
 800f76a:	b538      	push	{r3, r4, r5, lr}
 800f76c:	4604      	mov	r4, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	d904      	bls.n	800f77c <_raise_r+0x14>
 800f772:	2316      	movs	r3, #22
 800f774:	6003      	str	r3, [r0, #0]
 800f776:	f04f 30ff 	mov.w	r0, #4294967295
 800f77a:	bd38      	pop	{r3, r4, r5, pc}
 800f77c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f77e:	b112      	cbz	r2, 800f786 <_raise_r+0x1e>
 800f780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f784:	b94b      	cbnz	r3, 800f79a <_raise_r+0x32>
 800f786:	4620      	mov	r0, r4
 800f788:	f000 f830 	bl	800f7ec <_getpid_r>
 800f78c:	462a      	mov	r2, r5
 800f78e:	4601      	mov	r1, r0
 800f790:	4620      	mov	r0, r4
 800f792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f796:	f000 b817 	b.w	800f7c8 <_kill_r>
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d00a      	beq.n	800f7b4 <_raise_r+0x4c>
 800f79e:	1c59      	adds	r1, r3, #1
 800f7a0:	d103      	bne.n	800f7aa <_raise_r+0x42>
 800f7a2:	2316      	movs	r3, #22
 800f7a4:	6003      	str	r3, [r0, #0]
 800f7a6:	2001      	movs	r0, #1
 800f7a8:	e7e7      	b.n	800f77a <_raise_r+0x12>
 800f7aa:	2400      	movs	r4, #0
 800f7ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	4798      	blx	r3
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	e7e0      	b.n	800f77a <_raise_r+0x12>

0800f7b8 <raise>:
 800f7b8:	4b02      	ldr	r3, [pc, #8]	; (800f7c4 <raise+0xc>)
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	f7ff bfd3 	b.w	800f768 <_raise_r>
 800f7c2:	bf00      	nop
 800f7c4:	20000178 	.word	0x20000178

0800f7c8 <_kill_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d07      	ldr	r5, [pc, #28]	; (800f7e8 <_kill_r+0x20>)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	602b      	str	r3, [r5, #0]
 800f7d6:	f7f2 f981 	bl	8001adc <_kill>
 800f7da:	1c43      	adds	r3, r0, #1
 800f7dc:	d102      	bne.n	800f7e4 <_kill_r+0x1c>
 800f7de:	682b      	ldr	r3, [r5, #0]
 800f7e0:	b103      	cbz	r3, 800f7e4 <_kill_r+0x1c>
 800f7e2:	6023      	str	r3, [r4, #0]
 800f7e4:	bd38      	pop	{r3, r4, r5, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20000f54 	.word	0x20000f54

0800f7ec <_getpid_r>:
 800f7ec:	f7f2 b96e 	b.w	8001acc <_getpid>

0800f7f0 <strncmp>:
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	b16a      	cbz	r2, 800f810 <strncmp+0x20>
 800f7f4:	3901      	subs	r1, #1
 800f7f6:	1884      	adds	r4, r0, r2
 800f7f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f7fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f800:	4293      	cmp	r3, r2
 800f802:	d103      	bne.n	800f80c <strncmp+0x1c>
 800f804:	42a0      	cmp	r0, r4
 800f806:	d001      	beq.n	800f80c <strncmp+0x1c>
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1f5      	bne.n	800f7f8 <strncmp+0x8>
 800f80c:	1a98      	subs	r0, r3, r2
 800f80e:	bd10      	pop	{r4, pc}
 800f810:	4610      	mov	r0, r2
 800f812:	e7fc      	b.n	800f80e <strncmp+0x1e>

0800f814 <_init>:
 800f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f816:	bf00      	nop
 800f818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81a:	bc08      	pop	{r3}
 800f81c:	469e      	mov	lr, r3
 800f81e:	4770      	bx	lr

0800f820 <_fini>:
 800f820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f822:	bf00      	nop
 800f824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f826:	bc08      	pop	{r3}
 800f828:	469e      	mov	lr, r3
 800f82a:	4770      	bx	lr
