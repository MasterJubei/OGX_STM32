
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f608  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb50  0800fb50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb50  0800fb50  0001fb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb58  0800fb58  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb60  0800fb60  0001fb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fb64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  200001dc  0800fd40  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f58  0800fd40  00020f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fdf7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e8f  00000000  00000000  00070003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00076e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00078b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc0e  00000000  00000000  0007a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a2a  00000000  00000000  000a6346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eafcc  00000000  00000000  000c9d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f8c  00000000  00000000  001b4d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f7b4 	.word	0x0800f7b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800f7b4 	.word	0x0800f7b4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78fa      	ldrb	r2, [r7, #3]
 80005dc:	4611      	mov	r1, r2
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f805 	bl	800060c <_ZN5Print5printEli>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <_ZN5Print5printEli+0x26>
    return write(n);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	e029      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d11d      	bne.n	8000674 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	da12      	bge.n	8000664 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800063e:	212d      	movs	r1, #45	; 0x2d
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffc1 	bl	80005c8 <_ZN5Print5printEc>
 8000646:	4603      	mov	r3, r0
 8000648:	617b      	str	r3, [r7, #20]
      n = -n;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	425b      	negs	r3, r3
 800064e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	220a      	movs	r2, #10
 8000654:	4619      	mov	r1, r3
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f819 	bl	800068e <_ZN5Print11printNumberEmh>
 800065c:	4602      	mov	r2, r0
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	e010      	b.n	8000686 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	220a      	movs	r2, #10
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 f80f 	bl	800068e <_ZN5Print11printNumberEmh>
 8000670:	4603      	mov	r3, r0
 8000672:	e008      	b.n	8000686 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f806 	bl	800068e <_ZN5Print11printNumberEmh>
 8000682:	4603      	mov	r3, r0
 8000684:	bf00      	nop
  }
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b090      	sub	sp, #64	; 0x40
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	4613      	mov	r3, r2
 800069a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	3320      	adds	r3, #32
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d801      	bhi.n	80006b4 <_ZN5Print11printNumberEmh+0x26>
 80006b0:	230a      	movs	r3, #10
 80006b2:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79f9      	ldrb	r1, [r7, #7]
 80006cc:	fb11 f303 	smulbb	r3, r1, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d804      	bhi.n	80006ea <_ZN5Print11printNumberEmh+0x5c>
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	3330      	adds	r3, #48	; 0x30
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	e003      	b.n	80006f2 <_ZN5Print11printNumberEmh+0x64>
 80006ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ee:	3337      	adds	r3, #55	; 0x37
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f4:	3a01      	subs	r2, #1
 80006f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fa:	7013      	strb	r3, [r2, #0]
  } while(n);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d000      	beq.n	8000704 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000702:	e7d7      	b.n	80006b4 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff00 	bl	800050c <_ZN5Print5writeEPKc>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2201      	movs	r2, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	4798      	blx	r3
 8000732:	4603      	mov	r3, r0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	f005 f856 	bl	800580a <HAL_UART_Transmit>
	return size;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6918      	ldr	r0, [r3, #16]
 8000774:	f107 010f 	add.w	r1, r7, #15
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2201      	movs	r2, #1
 800077e:	f005 f8d6 	bl	800592e <HAL_UART_Receive>
	return data;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return -1;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <_ZN5PrintC1Ev+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	0800f928 	.word	0x0800f928

080007f8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffe4 	bl	80007d0 <_ZN5PrintC1Ev>
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_ZN6StreamC1Ev+0x28>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800f9a0 	.word	0x0800f9a0

08000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffe1 	bl	80007f8 <_ZN6StreamC1Ev>
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	611a      	str	r2, [r3, #16]
	};
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800f938 	.word	0x0800f938

08000850 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	4903      	ldr	r1, [pc, #12]	; (8000874 <_ZN2P910SetDirReadEv+0x24>)
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <_ZN2P910SetDirReadEv+0x28>)
 800086a:	f001 fb25 	bl	8001eb8 <HAL_GPIO_Init>
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001f8 	.word	0x200001f8
 8000878:	40020800 	.word	0x40020800

0800087c <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <_ZN3P103SetEv+0x14>)
 8000886:	f001 fcc3 	bl	8002210 <HAL_GPIO_WritePin>
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400

08000894 <_ZN3P105ClearEv>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <_ZN3P105ClearEv+0x14>)
 800089e:	f001 fcb7 	bl	8002210 <HAL_GPIO_WritePin>
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020400 	.word	0x40020400

080008ac <_ZN3P1011SetDirWriteEv>:
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b2:	2240      	movs	r2, #64	; 0x40
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	4902      	ldr	r1, [pc, #8]	; (80008d4 <_ZN3P1011SetDirWriteEv+0x28>)
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <_ZN3P1011SetDirWriteEv+0x2c>)
 80008cc:	f001 faf4 	bl	8001eb8 <HAL_GPIO_Init>
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	40020400 	.word	0x40020400

080008dc <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2206      	movs	r2, #6
 80008f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffde 	bl	80008dc <_ZN3BTD11pairWithHIDEv>
        };
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3
                OnInitBTHID();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	331c      	adds	r3, #28
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	4798      	blx	r3
        };
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	460b      	mov	r3, r1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	72fb      	strb	r3, [r7, #11]
                return;
 8000960:	bf00      	nop
        }
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <_ZN9PS4ParserC1Ev+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
                Reset();
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f00d f8fc 	bl	800db78 <_ZN9PS4Parser5ResetEv>
        };
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	0800f994 	.word	0x0800f994

08000990 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
 800099c:	4613      	mov	r3, r2
 800099e:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 80009a0:	78ba      	ldrb	r2, [r7, #2]
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	0098      	lsls	r0, r3, #2
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	3320      	adds	r3, #32
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
        };
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f81c 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d105      	bne.n	8000a06 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f80a 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a04:	e004      	b.n	8000a10 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f804 	bl	8000a18 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
 8000a24:	4613      	mov	r3, r2
 8000a26:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	78fa      	ldrb	r2, [r7, #3]
 8000a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	78ba      	ldrb	r2, [r7, #2]
 8000a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	78ba      	ldrb	r2, [r7, #2]
 8000a72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	787a      	ldrb	r2, [r7, #1]
 8000a7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	141b      	asrs	r3, r3, #16
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffcd 	bl	8000a4c <_ZN9PS4Parser6setLedEhhh>
        };
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	f00b fe6a 	bl	800c7ac <_ZN5BTHIDC1EP3BTDbPKc>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3378      	adds	r3, #120	; 0x78
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff45 	bl	800096c <_ZN9PS4ParserC1Ev>
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3378      	adds	r3, #120	; 0x78
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00d f840 	bl	800db78 <_ZN9PS4Parser5ResetEv>
        };
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800f958 	.word	0x0800f958
 8000b08:	0800f988 	.word	0x0800f988

08000b0c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3378      	adds	r3, #120	; 0x78
 8000b36:	7af9      	ldrb	r1, [r7, #11]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c ff57 	bl	800d9ee <_ZN9PS4Parser5ParseEhPh>
        };
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3378      	adds	r3, #120	; 0x78
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00d f80f 	bl	800db78 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f855 	bl	8000c0a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3378      	adds	r3, #120	; 0x78
 8000b6c:	21ff      	movs	r1, #255	; 0xff
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8f 	bl	8000a92 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3378      	adds	r3, #120	; 0x78
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00c fff5 	bl	800db78 <_ZN9PS4Parser5ResetEv>
        };
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b096      	sub	sp, #88	; 0x58
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	224f      	movs	r2, #79	; 0x4f
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00e fda5 	bl	800f6f8 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bae:	2352      	movs	r3, #82	; 0x52
 8000bb0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000bb2:	2311      	movs	r3, #17
 8000bb4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	799b      	ldrb	r3, [r3, #6]
 8000be6:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	224f      	movs	r2, #79	; 0x4f
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f81a 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c04:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c08:	e7c5      	b.n	8000b96 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c0a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c12:	2343      	movs	r3, #67	; 0x43
 8000c14:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c16:	2302      	movs	r3, #2
 8000c18:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f804 	bl	8000c30 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6898      	ldr	r0, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	8999      	ldrh	r1, [r3, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	7d9b      	ldrb	r3, [r3, #22]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	7dd2      	ldrb	r2, [r2, #23]
 8000c4e:	79fc      	ldrb	r4, [r7, #7]
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f00a fe44 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 ff7d 	bl	8001b68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 fac9 	bl	8001204 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 fbf3 	bl	800145c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c76:	f000 fbc3 	bl	8001400 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c7a:	f000 fb85 	bl	8001388 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c7e:	f007 ff77 	bl	8008b70 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c82:	f000 fb57 	bl	8001334 <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c86:	4aba      	ldr	r2, [pc, #744]	; (8000f70 <main+0x30c>)
 8000c88:	4bba      	ldr	r3, [pc, #744]	; (8000f74 <main+0x310>)
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2358      	movs	r3, #88	; 0x58
 8000c90:	461a      	mov	r2, r3
 8000c92:	f00e fd23 	bl	800f6dc <memcpy>
  UART_Handle = huart2;
 8000c96:	4ab8      	ldr	r2, [pc, #736]	; (8000f78 <main+0x314>)
 8000c98:	4bb8      	ldr	r3, [pc, #736]	; (8000f7c <main+0x318>)
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2344      	movs	r3, #68	; 0x44
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f00e fd1b 	bl	800f6dc <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71bb      	strb	r3, [r7, #6]
  gameHID.JoyY = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
  gameHID.Joy2X = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	723b      	strb	r3, [r7, #8]
  gameHID.Joy2Y = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	727b      	strb	r3, [r7, #9]
  gameHID.Joy_LT = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	713b      	strb	r3, [r7, #4]
  gameHID.Joy_RT = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	717b      	strb	r3, [r7, #5]
  gameHID.ps4ButtonsTag.dummy = 0;
 8000cbe:	7abb      	ldrb	r3, [r7, #10]
 8000cc0:	f36f 0300 	bfc	r3, #0, #1
 8000cc4:	72bb      	strb	r3, [r7, #10]

  uint8_t LeftHatX_val;
  uint8_t LeftHatY_val;
  uint8_t RightHatX_val;
  uint8_t RightHatY_val;
  uint32_t cpu_freq = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]

  uint16_t timer_val = 0 ;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	82fb      	strh	r3, [r7, #22]
  uint16_t timer_val2 = 0 ;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	82bb      	strh	r3, [r7, #20]
  uint32_t hal_gettick = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start_IT(&htim14);
 8000cd6:	48aa      	ldr	r0, [pc, #680]	; (8000f80 <main+0x31c>)
 8000cd8:	f004 faf6 	bl	80052c8 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cdc:	49a9      	ldr	r1, [pc, #676]	; (8000f84 <main+0x320>)
 8000cde:	48aa      	ldr	r0, [pc, #680]	; (8000f88 <main+0x324>)
 8000ce0:	f7ff fc56 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000ce4:	f002 fd4a 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4aa8      	ldr	r2, [pc, #672]	; (8000f8c <main+0x328>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	61bb      	str	r3, [r7, #24]
  Serial.print((int)cpu_freq);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	220a      	movs	r2, #10
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	48a3      	ldr	r0, [pc, #652]	; (8000f88 <main+0x324>)
 8000cfc:	f7ff fc76 	bl	80005ec <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d00:	49a3      	ldr	r1, [pc, #652]	; (8000f90 <main+0x32c>)
 8000d02:	48a1      	ldr	r0, [pc, #644]	; (8000f88 <main+0x324>)
 8000d04:	f7ff fc52 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d08:	49a2      	ldr	r1, [pc, #648]	; (8000f94 <main+0x330>)
 8000d0a:	489f      	ldr	r0, [pc, #636]	; (8000f88 <main+0x324>)
 8000d0c:	f7ff fc4e 	bl	80005ac <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d10:	4b9b      	ldr	r3, [pc, #620]	; (8000f80 <main+0x31c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	82fb      	strh	r3, [r7, #22]
  HAL_Delay(500); //500ms
 8000d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1c:	f000 ff96 	bl	8001c4c <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d20:	4b97      	ldr	r3, [pc, #604]	; (8000f80 <main+0x31c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	8afb      	ldrh	r3, [r7, #22]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	82bb      	strh	r3, [r7, #20]
  Serial.print("\r\nTime Elapsed is: ");
 8000d2e:	499a      	ldr	r1, [pc, #616]	; (8000f98 <main+0x334>)
 8000d30:	4895      	ldr	r0, [pc, #596]	; (8000f88 <main+0x324>)
 8000d32:	f7ff fc3b 	bl	80005ac <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000d36:	8abb      	ldrh	r3, [r7, #20]
 8000d38:	4a98      	ldr	r2, [pc, #608]	; (8000f9c <main+0x338>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	220a      	movs	r2, #10
 8000d44:	4619      	mov	r1, r3
 8000d46:	4890      	ldr	r0, [pc, #576]	; (8000f88 <main+0x324>)
 8000d48:	f7ff fc50 	bl	80005ec <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d4c:	4994      	ldr	r1, [pc, #592]	; (8000fa0 <main+0x33c>)
 8000d4e:	488e      	ldr	r0, [pc, #568]	; (8000f88 <main+0x324>)
 8000d50:	f7ff fc2c 	bl	80005ac <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	220a      	movs	r2, #10
 8000d58:	4619      	mov	r1, r3
 8000d5a:	488b      	ldr	r0, [pc, #556]	; (8000f88 <main+0x324>)
 8000d5c:	f7ff fc46 	bl	80005ec <_ZN5Print5printEii>


  if (Usb.Init() == -1) {
 8000d60:	4890      	ldr	r0, [pc, #576]	; (8000fa4 <main+0x340>)
 8000d62:	f000 fc10 	bl	8001586 <_ZN8MAX3421eI3P102P9E4InitEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	bf0c      	ite	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	2300      	movne	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <main+0x11e>
  		Serial.print(F("\r\nOSC did not start"));
 8000d78:	498b      	ldr	r1, [pc, #556]	; (8000fa8 <main+0x344>)
 8000d7a:	4883      	ldr	r0, [pc, #524]	; (8000f88 <main+0x324>)
 8000d7c:	f7ff fc08 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000d80:	e7fe      	b.n	8000d80 <main+0x11c>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000d82:	498a      	ldr	r1, [pc, #552]	; (8000fac <main+0x348>)
 8000d84:	4880      	ldr	r0, [pc, #512]	; (8000f88 <main+0x324>)
 8000d86:	f7ff fc03 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000d8a:	4886      	ldr	r0, [pc, #536]	; (8000fa4 <main+0x340>)
 8000d8c:	f00d fc32 	bl	800e5f4 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2208      	movs	r2, #8
 8000d94:	4619      	mov	r1, r3
 8000d96:	4886      	ldr	r0, [pc, #536]	; (8000fb0 <main+0x34c>)
 8000d98:	f006 fcfa 	bl	8007790 <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000d9c:	4885      	ldr	r0, [pc, #532]	; (8000fb4 <main+0x350>)
 8000d9e:	f7ff feb5 	bl	8000b0c <_ZN5PS4BT9connectedEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 81f7 	beq.w	8001198 <main+0x534>
			ps4_connected = 1;
 8000daa:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <main+0x354>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000db0:	4b73      	ldr	r3, [pc, #460]	; (8000f80 <main+0x31c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f06f 0201 	mvn.w	r2, #1
 8000db8:	611a      	str	r2, [r3, #16]


			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	487f      	ldr	r0, [pc, #508]	; (8000fbc <main+0x358>)
 8000dbe:	f00c fe06 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	73fb      	strb	r3, [r7, #15]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	487c      	ldr	r0, [pc, #496]	; (8000fbc <main+0x358>)
 8000dca:	f00c fe00 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73bb      	strb	r3, [r7, #14]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	4879      	ldr	r0, [pc, #484]	; (8000fbc <main+0x358>)
 8000dd6:	f00c fdfa 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	737b      	strb	r3, [r7, #13]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000dde:	2103      	movs	r1, #3
 8000de0:	4876      	ldr	r0, [pc, #472]	; (8000fbc <main+0x358>)
 8000de2:	f00c fdf4 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000de6:	4603      	mov	r3, r0
 8000de8:	733b      	strb	r3, [r7, #12]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b89      	cmp	r3, #137	; 0x89
 8000dee:	d814      	bhi.n	8000e1a <main+0x1b6>
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b74      	cmp	r3, #116	; 0x74
 8000df4:	d911      	bls.n	8000e1a <main+0x1b6>
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	2b89      	cmp	r3, #137	; 0x89
 8000dfa:	d80e      	bhi.n	8000e1a <main+0x1b6>
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b74      	cmp	r3, #116	; 0x74
 8000e00:	d90b      	bls.n	8000e1a <main+0x1b6>
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	2b89      	cmp	r3, #137	; 0x89
 8000e06:	d808      	bhi.n	8000e1a <main+0x1b6>
 8000e08:	7b7b      	ldrb	r3, [r7, #13]
 8000e0a:	2b74      	cmp	r3, #116	; 0x74
 8000e0c:	d905      	bls.n	8000e1a <main+0x1b6>
 8000e0e:	7b3b      	ldrb	r3, [r7, #12]
 8000e10:	2b89      	cmp	r3, #137	; 0x89
 8000e12:	d802      	bhi.n	8000e1a <main+0x1b6>
 8000e14:	7b3b      	ldrb	r3, [r7, #12]
 8000e16:	2b74      	cmp	r3, #116	; 0x74
 8000e18:	d824      	bhi.n	8000e64 <main+0x200>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4867      	ldr	r0, [pc, #412]	; (8000fbc <main+0x358>)
 8000e1e:	f00c fdd6 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e22:	4603      	mov	r3, r0
 8000e24:	3b80      	subs	r3, #128	; 0x80
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4863      	ldr	r0, [pc, #396]	; (8000fbc <main+0x358>)
 8000e30:	f00c fdcd 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e34:	4603      	mov	r3, r0
 8000e36:	3b80      	subs	r3, #128	; 0x80
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000e3e:	2102      	movs	r1, #2
 8000e40:	485e      	ldr	r0, [pc, #376]	; (8000fbc <main+0x358>)
 8000e42:	f00c fdc4 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e46:	4603      	mov	r3, r0
 8000e48:	3b80      	subs	r3, #128	; 0x80
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000e50:	2103      	movs	r1, #3
 8000e52:	485a      	ldr	r0, [pc, #360]	; (8000fbc <main+0x358>)
 8000e54:	f00c fdbb 	bl	800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	3b80      	subs	r3, #128	; 0x80
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	727b      	strb	r3, [r7, #9]
 8000e62:	e007      	b.n	8000e74 <main+0x210>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71bb      	strb	r3, [r7, #6]
				gameHID.JoyY = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
				gameHID.Joy2X = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	723b      	strb	r3, [r7, #8]
				gameHID.Joy2Y = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	727b      	strb	r3, [r7, #9]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000e74:	2108      	movs	r1, #8
 8000e76:	4851      	ldr	r0, [pc, #324]	; (8000fbc <main+0x358>)
 8000e78:	f00c fd90 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	3b80      	subs	r3, #128	; 0x80
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	713b      	strb	r3, [r7, #4]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000e86:	2109      	movs	r1, #9
 8000e88:	484c      	ldr	r0, [pc, #304]	; (8000fbc <main+0x358>)
 8000e8a:	f00c fd87 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	3b80      	subs	r3, #128	; 0x80
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	717b      	strb	r3, [r7, #5]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) {
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4848      	ldr	r0, [pc, #288]	; (8000fbc <main+0x358>)
 8000e9c:	f00c fd7e 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <main+0x35c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d108      	bne.n	8000ebe <main+0x25a>
 8000eac:	2109      	movs	r1, #9
 8000eae:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x358>)
 8000eb0:	f00c fd74 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <main+0x360>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
				// Only write value if it's different
				//PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
			}

			oldL2Value = PS4.getAnalogButton(L2);
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	483e      	ldr	r0, [pc, #248]	; (8000fbc <main+0x358>)
 8000ec2:	f00c fd6b 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <main+0x35c>)
 8000ecc:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000ece:	2109      	movs	r1, #9
 8000ed0:	483a      	ldr	r0, [pc, #232]	; (8000fbc <main+0x358>)
 8000ed2:	f00c fd63 	bl	800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <main+0x360>)
 8000edc:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4836      	ldr	r0, [pc, #216]	; (8000fbc <main+0x358>)
 8000ee2:	f00c fd1b 	bl	800d91c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <main+0x292>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000eec:	7abb      	ldrb	r3, [r7, #10]
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	72bb      	strb	r3, [r7, #10]
 8000ef4:	e149      	b.n	800118a <main+0x526>
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				//PS4.disconnect();
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <main+0x358>)
 8000efa:	f00c fce7 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <main+0x2aa>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	72fb      	strb	r3, [r7, #11]
 8000f0c:	e003      	b.n	8000f16 <main+0x2b2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					//PS4.setRumbleOn(RumbleLow);
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	f36f 0300 	bfc	r3, #0, #1
 8000f14:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000f16:	210d      	movs	r1, #13
 8000f18:	4828      	ldr	r0, [pc, #160]	; (8000fbc <main+0x358>)
 8000f1a:	f00c fcd7 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <main+0x2ca>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000f24:	7abb      	ldrb	r3, [r7, #10]
 8000f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2a:	72bb      	strb	r3, [r7, #10]
 8000f2c:	e003      	b.n	8000f36 <main+0x2d2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					//PS4.setRumbleOn(RumbleHigh);
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000f2e:	7abb      	ldrb	r3, [r7, #10]
 8000f30:	f36f 13c7 	bfc	r3, #7, #1
 8000f34:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000f36:	210e      	movs	r1, #14
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x358>)
 8000f3a:	f00c fcc7 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <main+0x2ea>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000f44:	7abb      	ldrb	r3, [r7, #10]
 8000f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4a:	72bb      	strb	r3, [r7, #10]
 8000f4c:	e003      	b.n	8000f56 <main+0x2f2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					//PS4.setLedFlash(10, 10); // Set it to blink rapidly
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000f4e:	7abb      	ldrb	r3, [r7, #10]
 8000f50:	f36f 1386 	bfc	r3, #6, #1
 8000f54:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000f56:	210f      	movs	r1, #15
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <main+0x358>)
 8000f5a:	f00c fcb7 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d031      	beq.n	8000fc8 <main+0x364>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	72fb      	strb	r3, [r7, #11]
 8000f6c:	e030      	b.n	8000fd0 <main+0x36c>
 8000f6e:	bf00      	nop
 8000f70:	20000304 	.word	0x20000304
 8000f74:	20000220 	.word	0x20000220
 8000f78:	2000035c 	.word	0x2000035c
 8000f7c:	20000278 	.word	0x20000278
 8000f80:	200002bc 	.word	0x200002bc
 8000f84:	0800f7cc 	.word	0x0800f7cc
 8000f88:	200003a0 	.word	0x200003a0
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	0800f7e4 	.word	0x0800f7e4
 8000f94:	0800f7e8 	.word	0x0800f7e8
 8000f98:	0800f7f0 	.word	0x0800f7f0
 8000f9c:	cccccccd 	.word	0xcccccccd
 8000fa0:	0800f804 	.word	0x0800f804
 8000fa4:	200003b4 	.word	0x200003b4
 8000fa8:	0800f808 	.word	0x0800f808
 8000fac:	0800f81c 	.word	0x0800f81c
 8000fb0:	2000067c 	.word	0x2000067c
 8000fb4:	20000588 	.word	0x20000588
 8000fb8:	20000656 	.word	0x20000656
 8000fbc:	20000600 	.word	0x20000600
 8000fc0:	20000652 	.word	0x20000652
 8000fc4:	20000653 	.word	0x20000653
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					//PS4.setLedFlash(0, 0); // Turn off blinking
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	f36f 0341 	bfc	r3, #1, #1
 8000fce:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(UP)) {
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4883      	ldr	r0, [pc, #524]	; (80011e0 <main+0x57c>)
 8000fd4:	f00c fc7a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <main+0x384>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000fde:	7afb      	ldrb	r3, [r7, #11]
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	72fb      	strb	r3, [r7, #11]
 8000fe6:	e003      	b.n	8000ff0 <main+0x38c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					//PS4.setLed(Red);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	f36f 0382 	bfc	r3, #2, #1
 8000fee:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	487b      	ldr	r0, [pc, #492]	; (80011e0 <main+0x57c>)
 8000ff4:	f00c fc6a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <main+0x3a4>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	72fb      	strb	r3, [r7, #11]
 8001006:	e003      	b.n	8001010 <main+0x3ac>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					//PS4.setLed(Blue);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	f36f 03c3 	bfc	r3, #3, #1
 800100e:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(DOWN)) {
 8001010:	2102      	movs	r1, #2
 8001012:	4873      	ldr	r0, [pc, #460]	; (80011e0 <main+0x57c>)
 8001014:	f00c fc5a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <main+0x3c4>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	e003      	b.n	8001030 <main+0x3cc>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					//PS4.setLed(Yellow);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f36f 1345 	bfc	r3, #5, #1
 800102e:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(LEFT)) {
 8001030:	2103      	movs	r1, #3
 8001032:	486b      	ldr	r0, [pc, #428]	; (80011e0 <main+0x57c>)
 8001034:	f00c fc4a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d004      	beq.n	8001048 <main+0x3e4>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	72fb      	strb	r3, [r7, #11]
 8001046:	e003      	b.n	8001050 <main+0x3ec>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					//PS4.setLed(Green);
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	f36f 1304 	bfc	r3, #4, #1
 800104e:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(L1)) {
 8001050:	210a      	movs	r1, #10
 8001052:	4863      	ldr	r0, [pc, #396]	; (80011e0 <main+0x57c>)
 8001054:	f00c fc3a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <main+0x404>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 800105e:	7abb      	ldrb	r3, [r7, #10]
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	72bb      	strb	r3, [r7, #10]
 8001066:	e003      	b.n	8001070 <main+0x40c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001068:	7abb      	ldrb	r3, [r7, #10]
 800106a:	f36f 1345 	bfc	r3, #5, #1
 800106e:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(L3)) {
 8001070:	2106      	movs	r1, #6
 8001072:	485b      	ldr	r0, [pc, #364]	; (80011e0 <main+0x57c>)
 8001074:	f00c fc2a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <main+0x424>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001084:	72fb      	strb	r3, [r7, #11]
 8001086:	e003      	b.n	8001090 <main+0x42c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	f36f 1386 	bfc	r3, #6, #1
 800108e:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(R1)) {
 8001090:	210b      	movs	r1, #11
 8001092:	4853      	ldr	r0, [pc, #332]	; (80011e0 <main+0x57c>)
 8001094:	f00c fc1a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x444>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	72bb      	strb	r3, [r7, #10]
 80010a6:	e003      	b.n	80010b0 <main+0x44c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	f36f 1304 	bfc	r3, #4, #1
 80010ae:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(R3)) {
 80010b0:	2107      	movs	r1, #7
 80010b2:	484b      	ldr	r0, [pc, #300]	; (80011e0 <main+0x57c>)
 80010b4:	f00c fc0a 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <main+0x464>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	72fb      	strb	r3, [r7, #11]
 80010c6:	e003      	b.n	80010d0 <main+0x46c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	f36f 13c7 	bfc	r3, #7, #1
 80010ce:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(SHARE)) {
 80010d0:	2104      	movs	r1, #4
 80010d2:	4843      	ldr	r0, [pc, #268]	; (80011e0 <main+0x57c>)
 80010d4:	f00c fbfa 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <main+0x484>
					gameHID.ps4ButtonsTag.button_share = 1;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	72bb      	strb	r3, [r7, #10]
 80010e6:	e003      	b.n	80010f0 <main+0x48c>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	f36f 03c3 	bfc	r3, #3, #1
 80010ee:	72bb      	strb	r3, [r7, #10]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 80010f0:	2105      	movs	r1, #5
 80010f2:	483b      	ldr	r0, [pc, #236]	; (80011e0 <main+0x57c>)
 80010f4:	f00c fbea 	bl	800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <main+0x4b2>
					gameHID.ps4ButtonsTag.button_start = 1;
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	72bb      	strb	r3, [r7, #10]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <main+0x580>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f083 0301 	eor.w	r3, r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <main+0x580>)
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e003      	b.n	800111e <main+0x4ba>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	f36f 0382 	bfc	r3, #2, #1
 800111c:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 800111e:	2111      	movs	r1, #17
 8001120:	482f      	ldr	r0, [pc, #188]	; (80011e0 <main+0x57c>)
 8001122:	f00c fbfb 	bl	800d91c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <main+0x4d6>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <main+0x584>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <main+0x584>)
 8001138:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <main+0x584>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d023      	beq.n	800118a <main+0x526>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	4826      	ldr	r0, [pc, #152]	; (80011e0 <main+0x57c>)
 8001148:	f7ff fc22 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d107      	bne.n	8001162 <main+0x4fe>
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <main+0x57c>)
 8001158:	f7ff fc1a 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <main+0x502>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <main+0x504>
 8001166:	2300      	movs	r3, #0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <main+0x526>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d809      	bhi.n	800118a <main+0x526>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0x57c>)
 800117e:	f7ff fc07 	bl	8000990 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	3301      	adds	r3, #1
 8001186:	77fb      	strb	r3, [r7, #31]
 8001188:	e7f2      	b.n	8001170 <main+0x50c>
							//Serial.print(F("\t"));
						}
					}
				}
			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2208      	movs	r2, #8
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <main+0x588>)
 8001192:	f006 fafd 	bl	8007790 <USBD_HID_SendReport>
 8001196:	e5f8      	b.n	8000d8a <main+0x126>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	4814      	ldr	r0, [pc, #80]	; (80011f0 <main+0x58c>)
 800119e:	f001 f81f 	bl	80021e0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d011      	beq.n	80011d6 <main+0x572>
		    if (!buttonPressed) {
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <main+0x590>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <main+0x56a>
		    	Serial.print(F("\r\nButton Pressed"));
 80011c0:	490d      	ldr	r1, [pc, #52]	; (80011f8 <main+0x594>)
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <main+0x598>)
 80011c4:	f7ff f9e4 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
		        PS4.pair(); // Start paring routine if user button was just pressed
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <main+0x59c>)
 80011ca:	f7ff fb9c 	bl	8000906 <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <main+0x590>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e5d9      	b.n	8000d8a <main+0x126>
		} else
		    buttonPressed = false;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <main+0x590>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
  }
 80011dc:	e5d5      	b.n	8000d8a <main+0x126>
 80011de:	bf00      	nop
 80011e0:	20000600 	.word	0x20000600
 80011e4:	20000650 	.word	0x20000650
 80011e8:	20000651 	.word	0x20000651
 80011ec:	2000067c 	.word	0x2000067c
 80011f0:	40020800 	.word	0x40020800
 80011f4:	20000654 	.word	0x20000654
 80011f8:	0800f83c 	.word	0x0800f83c
 80011fc:	200003a0 	.word	0x200003a0
 8001200:	20000588 	.word	0x20000588

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	; 0xb0
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800120e:	2234      	movs	r2, #52	; 0x34
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00e fa70 	bl	800f6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	225c      	movs	r2, #92	; 0x5c
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00e fa61 	bl	800f6f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <SystemClock_Config+0x128>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a3b      	ldr	r2, [pc, #236]	; (800132c <SystemClock_Config+0x128>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <SystemClock_Config+0x128>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <SystemClock_Config+0x12c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a35      	ldr	r2, [pc, #212]	; (8001330 <SystemClock_Config+0x12c>)
 800125c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <SystemClock_Config+0x12c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126e:	2301      	movs	r3, #1
 8001270:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001288:	2304      	movs	r3, #4
 800128a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800128e:	23a8      	movs	r3, #168	; 0xa8
 8001290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 ff76 	bl	800419c <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012c0:	f000 f95c 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012e0:	2105      	movs	r1, #5
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 f964 	bl	80035b0 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80012f8:	f000 f940 	bl	800157c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001302:	2300      	movs	r3, #0
 8001304:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fa6a 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001320:	f000 f92c 	bl	800157c <Error_Handler>
//
//	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//
//	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration

}
 8001324:	bf00      	nop
 8001326:	37b0      	adds	r7, #176	; 0xb0
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_ZL13MX_TIM14_Initv+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1; //increment every 100us
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 8001340:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001344:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 800134e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001352:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <_ZL13MX_TIM14_Initv+0x4c>)
 8001362:	f003 ff61 	bl	8005228 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8001376:	f000 f901 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002bc 	.word	0x200002bc
 8001384:	40002000 	.word	0x40002000

08001388 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <_ZL12MX_SPI1_Initv+0x74>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013bc:	2218      	movs	r2, #24
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <_ZL12MX_SPI1_Initv+0x70>)
 80013da:	f003 f97d 	bl	80046d8 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80013ee:	f000 f8c5 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000220 	.word	0x20000220
 80013fc:	40013000 	.word	0x40013000

08001400 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001438:	f004 f99a 	bl	8005770 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800144c:	f000 f896 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000278 	.word	0x20000278
 8001458:	40004400 	.word	0x40004400

0800145c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <_ZL12MX_GPIO_Initv+0xa8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_ZL12MX_GPIO_Initv+0xac>)
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <_ZL12MX_GPIO_Initv+0xb0>)
 80014f8:	f000 fcde 	bl	8001eb8 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	10210000 	.word	0x10210000
 800150c:	40020800 	.word	0x40020800

08001510 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

	if(htim == &htim14) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d11d      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x4c>
		//Serial.print("\r\nTesting");
		if(!rumble_once && ps4_connected) {
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10f      	bne.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x38>
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x38>
			Serial.print("\r\nPS4 Controller Connected");
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001534:	f7ff f83a 	bl	80005ac <_ZN5Print5printEPKc>
			PS4.setRumbleOn(RumbleLow);
 8001538:	2120      	movs	r1, #32
 800153a:	480f      	ldr	r0, [pc, #60]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800153c:	f7ff fa54 	bl	80009e8 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
			rumble_once = 2;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001542:	2202      	movs	r2, #2
 8001544:	701a      	strb	r2, [r3, #0]
		else if(rumble_once == 2) {
			PS4.setRumbleOff();
			rumble_once = 1;
		}
	}
}
 8001546:	e009      	b.n	800155c <HAL_TIM_PeriodElapsedCallback+0x4c>
		else if(rumble_once == 2) {
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d105      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x4c>
			PS4.setRumbleOff();
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001552:	f7ff fa3c 	bl	80009ce <_ZN9PS4Parser12setRumbleOffEv>
			rumble_once = 1;
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002bc 	.word	0x200002bc
 8001568:	20000655 	.word	0x20000655
 800156c:	20000656 	.word	0x20000656
 8001570:	0800f850 	.word	0x0800f850
 8001574:	200003a0 	.word	0x200003a0
 8001578:	20000600 	.word	0x20000600

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>

08001586 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800158e:	f7ff f98d 	bl	80008ac <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001592:	f7ff f973 	bl	800087c <_ZN3P103SetEv>
        spi::init();
 8001596:	f000 f845 	bl	8001624 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 800159a:	f7ff f959 	bl	8000850 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800159e:	2218      	movs	r2, #24
 80015a0:	2188      	movs	r1, #136	; 0x88
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f846 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f865 	bl	8001678 <_ZN8MAX3421eI3P102P9E5resetEv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e02b      	b.n	800161c <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80015c4:	22c1      	movs	r2, #193	; 0xc1
 80015c6:	21d8      	movs	r1, #216	; 0xd8
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f833 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80015ce:	2260      	movs	r2, #96	; 0x60
 80015d0:	21d0      	movs	r1, #208	; 0xd0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f82e 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80015d8:	2204      	movs	r2, #4
 80015da:	21e8      	movs	r1, #232	; 0xe8
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f829 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80015e2:	21e8      	movs	r1, #232	; 0xe8
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f877 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d000      	beq.n	8001600 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80015fe:	e7f0      	b.n	80015e2 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f88b 	bl	800171c <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001606:	2220      	movs	r2, #32
 8001608:	21c8      	movs	r1, #200	; 0xc8
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f812 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001610:	2201      	movs	r2, #1
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f80d 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
        }
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
 8001640:	4613      	mov	r3, r2
 8001642:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001644:	f7ff f926 	bl	8000894 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001652:	78bb      	ldrb	r3, [r7, #2]
 8001654:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001656:	f107 010c 	add.w	r1, r7, #12
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2202      	movs	r2, #2
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001662:	f003 f8c2 	bl	80047ea <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001666:	f7ff f909 	bl	800087c <_ZN3P103SetEv>
        return;
 800166a:	bf00      	nop
};
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000304 	.word	0x20000304

08001678 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001684:	2220      	movs	r2, #32
 8001686:	2178      	movs	r1, #120	; 0x78
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffd3 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800168e:	2200      	movs	r2, #0
 8001690:	2178      	movs	r1, #120	; 0x78
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffce 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	3301      	adds	r3, #1
 800169c:	81fb      	strh	r3, [r7, #14]
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00f      	beq.n	80016ce <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 80016ae:	2168      	movs	r1, #104	; 0x68
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f811 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80016ca:	e7e5      	b.n	8001698 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80016cc:	bf00      	nop
        return ( i);
 80016ce:	89fb      	ldrh	r3, [r7, #14]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80016e4:	f7ff f8d6 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80016e8:	1cf9      	adds	r1, r7, #3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	2201      	movs	r2, #1
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80016f2:	f003 f87a 	bl	80047ea <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80016fa:	f107 010f 	add.w	r1, r7, #15
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	2201      	movs	r2, #1
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001706:	f003 f9ac 	bl	8004a62 <HAL_SPI_Receive>
        SPI_SS::Set();
 800170a:	f7ff f8b7 	bl	800087c <_ZN3P103SetEv>
        return (rv);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000304 	.word	0x20000304

0800171c <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001724:	21f8      	movs	r1, #248	; 0xf8
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffd6 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001736:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2bc0      	cmp	r3, #192	; 0xc0
 800173c:	d04a      	beq.n	80017d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800173e:	2bc0      	cmp	r3, #192	; 0xc0
 8001740:	dc55      	bgt.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001742:	2b80      	cmp	r3, #128	; 0x80
 8001744:	d006      	beq.n	8001754 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001746:	2b80      	cmp	r3, #128	; 0x80
 8001748:	dc51      	bgt.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d046      	beq.n	80017dc <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800174e:	2b40      	cmp	r3, #64	; 0x40
 8001750:	d020      	beq.n	8001794 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001752:	e04c      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001754:	21d8      	movs	r1, #216	; 0xd8
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffbe 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800175c:	4603      	mov	r3, r0
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf0c      	ite	eq
 8001766:	2301      	moveq	r3, #1
 8001768:	2300      	movne	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001770:	22c9      	movs	r2, #201	; 0xc9
 8001772:	21d8      	movs	r1, #216	; 0xd8
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff5d 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
                        break;
 8001780:	e035      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001782:	22cb      	movs	r2, #203	; 0xcb
 8001784:	21d8      	movs	r1, #216	; 0xd8
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff54 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800178e:	2203      	movs	r2, #3
 8001790:	701a      	strb	r2, [r3, #0]
                        break;
 8001792:	e02c      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001794:	21d8      	movs	r1, #216	; 0xd8
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff9e 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800179c:	4603      	mov	r3, r0
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80017b0:	22cb      	movs	r2, #203	; 0xcb
 80017b2:	21d8      	movs	r1, #216	; 0xd8
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff3d 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017bc:	2203      	movs	r2, #3
 80017be:	701a      	strb	r2, [r3, #0]
                        break;
 80017c0:	e015      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80017c2:	22c9      	movs	r2, #201	; 0xc9
 80017c4:	21d8      	movs	r1, #216	; 0xd8
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff34 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
                        break;
 80017d2:	e00c      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
                        break;
 80017da:	e008      	b.n	80017ee <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80017dc:	22d1      	movs	r2, #209	; 0xd1
 80017de:	21d8      	movs	r1, #216	; 0xd8
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff27 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
                        break;
 80017ec:	bf00      	nop
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000657 	.word	0x20000657

080017fc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d115      	bne.n	8001838 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	4293      	cmp	r3, r2
 8001814:	d110      	bne.n	8001838 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001818:	480a      	ldr	r0, [pc, #40]	; (8001844 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800181a:	f7ff f803 	bl	8000824 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001820:	f00c fa48 	bl	800dcb4 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001824:	4908      	ldr	r1, [pc, #32]	; (8001848 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001826:	4809      	ldr	r0, [pc, #36]	; (800184c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001828:	f008 f848 	bl	80098bc <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800182e:	2200      	movs	r2, #0
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001834:	f7ff f942 	bl	8000abc <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000278 	.word	0x20000278
 8001844:	200003a0 	.word	0x200003a0
 8001848:	200003b4 	.word	0x200003b4
 800184c:	20000470 	.word	0x20000470
 8001850:	0800f86c 	.word	0x0800f86c
 8001854:	20000588 	.word	0x20000588

08001858 <_GLOBAL__sub_I_hspi1>:
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
 800185c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff ffcb 	bl	80017fc <_Z41__static_initialization_and_destruction_0ii>
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a6:	2007      	movs	r0, #7
 80018a8:	f000 fac4 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_SPI_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12b      	bne.n	8001932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001912:	23e0      	movs	r3, #224	; 0xe0
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001922:	2305      	movs	r3, #5
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_SPI_MspInit+0x8c>)
 800192e:	f000 fac3 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40013000 	.word	0x40013000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_TIM_Base_MspInit+0x48>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d115      	bne.n	8001986 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_Base_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0x4c>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	202d      	movs	r0, #45	; 0x2d
 800197c:	f000 fa65 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001980:	202d      	movs	r0, #45	; 0x2d
 8001982:	f000 fa7e 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40002000 	.word	0x40002000
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 8001a0e:	f000 fa53 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <NMI_Handler+0x4>

08001a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 f8ca 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a82:	f003 fc91 	bl	80053a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002bc 	.word	0x200002bc

08001a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <OTG_FS_IRQHandler+0x10>)
 8001a96:	f000 fd2b 	bl	80024f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000b4c 	.word	0x20000b4c

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001abe:	f00d fde3 	bl	800f688 <__errno>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2216      	movs	r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_exit>:

void _exit (int status)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe7 	bl	8001ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ae6:	e7fe      	b.n	8001ae6 <_exit+0x12>

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <SystemInit+0x28>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <SystemInit+0x28>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SystemInit+0x28>)
 8001afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b02:	609a      	str	r2, [r3, #8]
#endif
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
  ldr  r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ffd3 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f00d fda7 	bl	800f694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff f88d 	bl	8000c64 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b50:	0800fb64 	.word	0x0800fb64
  ldr  r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b58:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001b5c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001b60:	20000f58 	.word	0x20000f58

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f94f 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fe64 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f967 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f92f 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000678 	.word	0x20000678

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000678 	.word	0x20000678

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e165      	b.n	80021a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8154 	bne.w	800219a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ae 	beq.w	800219a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_GPIO_Init+0x300>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a5c      	ldr	r2, [pc, #368]	; (80021b8 <HAL_GPIO_Init+0x300>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_GPIO_Init+0x300>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_GPIO_Init+0x304>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x308>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x310>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x314>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x318>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x20a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x31c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x206>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_GPIO_Init+0x320>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x202>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00c      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e00a      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020be:	2305      	movs	r3, #5
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x21c>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x304>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_GPIO_Init+0x324>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <HAL_GPIO_Init+0x324>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_GPIO_Init+0x324>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_GPIO_Init+0x324>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_GPIO_Init+0x324>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_GPIO_Init+0x324>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_GPIO_Init+0x324>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_GPIO_Init+0x324>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f ae96 	bls.w	8001ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002244:	b08f      	sub	sp, #60	; 0x3c
 8002246:	af0a      	add	r7, sp, #40	; 0x28
 8002248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e116      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f006 fdc6 	bl	8008e00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 ff15 	bl	80060c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	687e      	ldr	r6, [r7, #4]
 80022a0:	466d      	mov	r5, sp
 80022a2:	f106 0410 	add.w	r4, r6, #16
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b6:	1d33      	adds	r3, r6, #4
 80022b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ba:	6838      	ldr	r0, [r7, #0]
 80022bc:	f003 fdec 	bl	8005e98 <USB_CoreInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0d7      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 ff03 	bl	80060e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e04a      	b.n	800237a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	333d      	adds	r3, #61	; 0x3d
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333c      	adds	r3, #60	; 0x3c
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	b298      	uxth	r0, r3
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3342      	adds	r3, #66	; 0x42
 8002320:	4602      	mov	r2, r0
 8002322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	333f      	adds	r3, #63	; 0x3f
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	; 0x44
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3348      	adds	r3, #72	; 0x48
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3350      	adds	r3, #80	; 0x50
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d3af      	bcc.n	80022e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e044      	b.n	8002414 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3301      	adds	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b5      	bcc.n	800238a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	687e      	ldr	r6, [r7, #4]
 8002426:	466d      	mov	r5, sp
 8002428:	f106 0410 	add.w	r4, r6, #16
 800242c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002438:	e885 0003 	stmia.w	r5, {r0, r1}
 800243c:	1d33      	adds	r3, r6, #4
 800243e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f003 fe79 	bl	8006138 <USB_DevInit>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e014      	b.n	8002482 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f001 f879 	bl	8003568 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f004 feb4 	bl	80071e8 <USB_DevDisconnect>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800248a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_PCD_Start+0x1c>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e020      	b.n	80024e8 <HAL_PCD_Start+0x5e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d109      	bne.n	80024ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fde6 	bl	80060a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 fe64 	bl	80071a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b08d      	sub	sp, #52	; 0x34
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 ff22 	bl	8007350 <USB_GetMode>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 83ca 	bne.w	8002ca8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fe86 	bl	800722a <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 83c0 	beq.w	8002ca6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fe7d 	bl	800722a <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f002 0202 	and.w	r2, r2, #2
 8002548:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fe6b 	bl	800722a <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d161      	bne.n	8002622 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0210 	bic.w	r2, r2, #16
 800256c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	0c5b      	lsrs	r3, r3, #17
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2b02      	cmp	r3, #2
 8002598:	d124      	bne.n	80025e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d035      	beq.n	8002612 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a38      	ldr	r0, [r7, #32]
 80025ba:	f004 fcd1 	bl	8006f60 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ca:	441a      	add	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025dc:	441a      	add	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	e016      	b.n	8002612 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	0c5b      	lsrs	r3, r3, #17
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d110      	bne.n	8002612 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f6:	2208      	movs	r2, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	6a38      	ldr	r0, [r7, #32]
 80025fc:	f004 fcb0 	bl	8006f60 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260c:	441a      	add	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0210 	orr.w	r2, r2, #16
 8002620:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fdff 	bl	800722a <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002636:	d16e      	bne.n	8002716 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f004 fe05 	bl	8007250 <USB_ReadDevAllOutEpInterrupt>
 8002646:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002648:	e062      	b.n	8002710 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d057      	beq.n	8002704 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fe2a 	bl	80072b8 <USB_ReadDevOutEPInterrupt>
 8002664:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2301      	movs	r3, #1
 8002680:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fdc5 	bl	8003214 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	461a      	mov	r2, r3
 80026a2:	2308      	movs	r3, #8
 80026a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 febf 	bl	800342c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	2310      	movs	r3, #16
 80026c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	461a      	mov	r2, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fc:	461a      	mov	r2, r3
 80026fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002702:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	3301      	adds	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d199      	bne.n	800264a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fd85 	bl	800722a <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272a:	f040 80c0 	bne.w	80028ae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fda6 	bl	8007284 <USB_ReadDevAllInEpInterrupt>
 8002738:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800273e:	e0b2      	b.n	80028a6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a7 	beq.w	800289a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fdcc 	bl	80072f4 <USB_ReadDevInEPInterrupt>
 800275c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d057      	beq.n	8002818 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	2201      	movs	r2, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	69f9      	ldr	r1, [r7, #28]
 8002784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002788:	4013      	ands	r3, r2
 800278a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d132      	bne.n	800280c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3348      	adds	r3, #72	; 0x48
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	3344      	adds	r3, #68	; 0x44
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4419      	add	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4403      	add	r3, r0
 80027da:	3348      	adds	r3, #72	; 0x48
 80027dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d113      	bne.n	800280c <HAL_PCD_IRQHandler+0x31c>
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3350      	adds	r3, #80	; 0x50
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002804:	461a      	mov	r2, r3
 8002806:	2101      	movs	r1, #1
 8002808:	f004 fdd4 	bl	80073b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f006 fb75 	bl	8008f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282e:	461a      	mov	r2, r3
 8002830:	2308      	movs	r3, #8
 8002832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284a:	461a      	mov	r2, r3
 800284c:	2310      	movs	r3, #16
 800284e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002866:	461a      	mov	r2, r3
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002882:	461a      	mov	r2, r3
 8002884:	2302      	movs	r3, #2
 8002886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fc30 	bl	80030fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f af49 	bne.w	8002740 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fcb9 	bl	800722a <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028c2:	d122      	bne.n	800290a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d108      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028ea:	2100      	movs	r1, #0
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f006 fd45 	bl	800937c <HAL_PCDEx_LPM_Callback>
 80028f2:	e002      	b.n	80028fa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f006 fb7b 	bl	8008ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fc8b 	bl	800722a <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800291e:	d112      	bne.n	8002946 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f006 fb37 	bl	8008fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002944:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fc6d 	bl	800722a <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800295a:	d121      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800296a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d111      	bne.n	800299a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	f003 020f 	and.w	r2, r3, #15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002990:	2101      	movs	r1, #1
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 fcf2 	bl	800937c <HAL_PCDEx_LPM_Callback>
 8002998:	e002      	b.n	80029a0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f006 fb02 	bl	8008fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fc40 	bl	800722a <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	f040 80c7 	bne.w	8002b46 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2110      	movs	r1, #16
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fd0e 	bl	80063f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029dc:	e056      	b.n	8002a8c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ea:	461a      	mov	r2, r3
 80029ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a02:	0151      	lsls	r1, r2, #5
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	440a      	add	r2, r1
 8002a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a10:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	0151      	lsls	r1, r2, #5
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	440a      	add	r2, r1
 8002a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a56:	0151      	lsls	r1, r2, #5
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a76:	0151      	lsls	r1, r2, #5
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	3301      	adds	r3, #1
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3a3      	bcc.n	80029de <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac2:	f043 030b 	orr.w	r3, r3, #11
 8002ac6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad8:	f043 030b 	orr.w	r3, r3, #11
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	e015      	b.n	8002b0c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b06:	f043 030b 	orr.w	r3, r3, #11
 8002b0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b30:	461a      	mov	r2, r3
 8002b32:	f004 fc3f 	bl	80073b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fb6d 	bl	800722a <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	d124      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 fc03 	bl	800736c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fca3 	bl	80064b6 <USB_GetDevSpeed>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681c      	ldr	r4, [r3, #0]
 8002b7c:	f000 fdfe 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8002b80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f003 f9e6 	bl	8005f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f006 f9de 	bl	8008f52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fb3d 	bl	800722a <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f006 f9bb 	bl	8008f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f002 0208 	and.w	r2, r2, #8
 8002bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fb28 	bl	800722a <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be4:	d10f      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f006 fa1d 	bl	8009030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fb0d 	bl	800722a <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1a:	d10f      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 f9f0 	bl	800900c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 faf2 	bl	800722a <USB_ReadInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d10a      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f006 f9fe 	bl	8009054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fadc 	bl	800722a <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d115      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f006 f9ee 	bl	8009070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e000      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002ca6:	bf00      	nop
    }
  }
}
 8002ca8:	3734      	adds	r7, #52	; 0x34
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}

08002cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_PCD_SetAddress+0x1a>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e013      	b.n	8002cf0 <HAL_PCD_SetAddress+0x42>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fa3a 	bl	800715a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	70fb      	strb	r3, [r7, #3]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	803b      	strh	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0f      	bge.n	8002d3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	705a      	strb	r2, [r3, #1]
 8002d3c:	e00f      	b.n	8002d5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d6a:	883a      	ldrh	r2, [r7, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	78ba      	ldrb	r2, [r7, #2]
 8002d74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d88:	78bb      	ldrb	r3, [r7, #2]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d102      	bne.n	8002d94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_PCD_EP_Open+0xaa>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e00e      	b.n	8002dc0 <HAL_PCD_EP_Open+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fba5 	bl	8006500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da0f      	bge.n	8002dfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	705a      	strb	r2, [r3, #1]
 8002dfa:	e00f      	b.n	8002e1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Close+0x6e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Close+0x8c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fbe3 	bl	8006610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	f003 febe 	bl	8006c50 <USB_EP0StartXfer>
 8002ed4:	e008      	b.n	8002ee8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	f003 fc70 	bl	80067c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	460b      	mov	r3, r1
 8002f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3338      	adds	r3, #56	; 0x38
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	f003 fe74 	bl	8006c50 <USB_EP0StartXfer>
 8002f68:	e008      	b.n	8002f7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	f003 fc26 	bl	80067c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d901      	bls.n	8002fa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e050      	b.n	8003046 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da0f      	bge.n	8002fcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00d      	b.n	8002fe8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_PCD_EP_SetStall+0x82>
 8003004:	2302      	movs	r3, #2
 8003006:	e01e      	b.n	8003046 <HAL_PCD_EP_SetStall+0xc0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	4618      	mov	r0, r3
 8003018:	f003 ffcb 	bl	8006fb2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	b2d9      	uxtb	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003036:	461a      	mov	r2, r3
 8003038:	f004 f9bc 	bl	80073b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 020f 	and.w	r2, r3, #15
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d901      	bls.n	800306c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e042      	b.n	80030f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800306c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	da0f      	bge.n	8003094 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	3338      	adds	r3, #56	; 0x38
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	705a      	strb	r2, [r3, #1]
 8003092:	e00f      	b.n	80030b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_EP_ClrStall+0x86>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e00e      	b.n	80030f2 <HAL_PCD_EP_ClrStall+0xa4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 ffd3 	bl	800708e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b08a      	sub	sp, #40	; 0x28
 80030fe:	af02      	add	r7, sp, #8
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3338      	adds	r3, #56	; 0x38
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d901      	bls.n	8003132 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06c      	b.n	800320c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	429a      	cmp	r2, r3
 8003146:	d902      	bls.n	800314e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3303      	adds	r3, #3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003156:	e02b      	b.n	80031b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	429a      	cmp	r2, r3
 800316c:	d902      	bls.n	8003174 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3303      	adds	r3, #3
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800318c:	b2db      	uxtb	r3, r3
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4603      	mov	r3, r0
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f003 feaf 	bl	8006ef6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d809      	bhi.n	80031da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d203      	bcs.n	80031da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1be      	bne.n	8003158 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d811      	bhi.n	800320a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	2201      	movs	r2, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	43db      	mvns	r3, r3
 8003200:	6939      	ldr	r1, [r7, #16]
 8003202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003206:	4013      	ands	r3, r2
 8003208:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	333c      	adds	r3, #60	; 0x3c
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	f040 80a0 	bne.w	800338c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a72      	ldr	r2, [pc, #456]	; (8003424 <PCD_EP_OutXfrComplete_int+0x210>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f240 80dd 	bls.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80d7 	beq.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]
 8003280:	e0cb      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2320      	movs	r3, #32
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	e0bc      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 80b7 	bne.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <PCD_EP_OutXfrComplete_int+0x210>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d90f      	bls.n	80032d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d0:	6093      	str	r3, [r2, #8]
 80032d2:	e0a2      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4403      	add	r3, r0
 800330a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800330e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4419      	add	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800334c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <PCD_EP_OutXfrComplete_int+0x16a>
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d108      	bne.n	800337e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003376:	461a      	mov	r2, r3
 8003378:	2101      	movs	r1, #1
 800337a:	f004 f81b 	bl	80073b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f005 fda1 	bl	8008ecc <HAL_PCD_DataOutStageCallback>
 800338a:	e046      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <PCD_EP_OutXfrComplete_int+0x214>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d124      	bne.n	80033de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b0:	6093      	str	r3, [r2, #8]
 80033b2:	e032      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	461a      	mov	r2, r3
 80033cc:	2320      	movs	r3, #32
 80033ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f005 fd78 	bl	8008ecc <HAL_PCD_DataOutStageCallback>
 80033dc:	e01d      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d114      	bne.n	800340e <PCD_EP_OutXfrComplete_int+0x1fa>
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003406:	461a      	mov	r2, r3
 8003408:	2100      	movs	r1, #0
 800340a:	f003 ffd3 	bl	80073b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f005 fd59 	bl	8008ecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	4f54300a 	.word	0x4f54300a
 8003428:	4f54310a 	.word	0x4f54310a

0800342c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	333c      	adds	r3, #60	; 0x3c
 8003444:	3304      	adds	r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d90e      	bls.n	8003480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 fd11 	bl	8008ea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d90c      	bls.n	80034a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d108      	bne.n	80034a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034a0:	461a      	mov	r2, r3
 80034a2:	2101      	movs	r1, #1
 80034a4:	f003 ff86 	bl	80073b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	4f54300a 	.word	0x4f54300a

080034b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
 80034c4:	4613      	mov	r3, r2
 80034c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034d6:	883b      	ldrh	r3, [r7, #0]
 80034d8:	0419      	lsls	r1, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
 80034e4:	e028      	b.n	8003538 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4413      	add	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e00d      	b.n	8003516 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	3340      	adds	r3, #64	; 0x40
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	3301      	adds	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	3b01      	subs	r3, #1
 800351c:	429a      	cmp	r2, r3
 800351e:	d3ec      	bcc.n	80034fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	0418      	lsls	r0, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	3b01      	subs	r3, #1
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4302      	orrs	r2, r0
 8003530:	3340      	adds	r3, #64	; 0x40
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	f043 0303 	orr.w	r3, r3, #3
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0cc      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d90c      	bls.n	80035ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0b8      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003604:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800360e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	494d      	ldr	r1, [pc, #308]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d044      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d119      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e07f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d003      	beq.n	800366e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	2b03      	cmp	r3, #3
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e067      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fe fac8 	bl	8001c34 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fac4 	bl	8001c34 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04f      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d20c      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e032      	b.n	800375e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4916      	ldr	r1, [pc, #88]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	490e      	ldr	r1, [pc, #56]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003736:	f000 fb7f 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 800373a:	4602      	mov	r2, r0
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	490a      	ldr	r1, [pc, #40]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fa28 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00
 800376c:	40023800 	.word	0x40023800
 8003770:	0800f9b8 	.word	0x0800f9b8
 8003774:	20000000 	.word	0x20000000
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	0800f9c8 	.word	0x0800f9c8

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffdc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	0800f9c8 	.word	0x0800f9c8

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08c      	sub	sp, #48	; 0x30
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	496c      	ldr	r1, [pc, #432]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800383a:	2301      	movs	r3, #1
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800384a:	4b64      	ldr	r3, [pc, #400]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800384c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003850:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	4960      	ldr	r1, [pc, #384]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003868:	2301      	movs	r3, #1
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003878:	4b58      	ldr	r3, [pc, #352]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800387a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4955      	ldr	r1, [pc, #340]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003896:	d101      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038b4:	4b49      	ldr	r3, [pc, #292]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	4946      	ldr	r1, [pc, #280]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d2:	d101      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038e0:	2301      	movs	r3, #1
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 808a 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b39      	ldr	r3, [pc, #228]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a38      	ldr	r2, [pc, #224]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800391a:	f7fe f98b 	bl	8001c34 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fe f987 	bl	8001c34 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e278      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003948:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	429a      	cmp	r2, r3
 800395c:	d028      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d114      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003986:	f7fe f955 	bl	8001c34 <HAL_GetTick>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fe f951 	bl	8001c34 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e240      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039bc:	d114      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	4902      	ldr	r1, [pc, #8]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	e00c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000
 80039e4:	42470e40 	.word	0x42470e40
 80039e8:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a49      	ldr	r2, [pc, #292]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f2:	6093      	str	r3, [r2, #8]
 80039f4:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	4944      	ldr	r1, [pc, #272]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003a18:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a1a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	4937      	ldr	r1, [pc, #220]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a4a:	4b32      	ldr	r3, [pc, #200]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a50:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	492e      	ldr	r1, [pc, #184]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d011      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a72:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	4926      	ldr	r1, [pc, #152]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	491a      	ldr	r1, [pc, #104]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	4911      	ldr	r1, [pc, #68]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af0:	f040 80ff 	bne.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003afa:	f7fe f89b 	bl	8001c34 <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b00:	e00e      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b02:	f7fe f897 	bl	8001c34 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d907      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e188      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	424711e0 	.word	0x424711e0
 8003b1c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b20:	4b7e      	ldr	r3, [pc, #504]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ea      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d028      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d124      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b54:	4b71      	ldr	r3, [pc, #452]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	3301      	adds	r3, #1
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b66:	4b6d      	ldr	r3, [pc, #436]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	071b      	lsls	r3, r3, #28
 8003b96:	4961      	ldr	r1, [pc, #388]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d035      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d130      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bca:	4b54      	ldr	r3, [pc, #336]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	0f1b      	lsrs	r3, r3, #28
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	019b      	lsls	r3, r3, #6
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	431a      	orrs	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	071b      	lsls	r3, r3, #28
 8003c0c:	4943      	ldr	r1, [pc, #268]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1a:	f023 021f 	bic.w	r2, r3, #31
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	493d      	ldr	r1, [pc, #244]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d029      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c40:	d124      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	019b      	lsls	r3, r3, #6
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	071b      	lsls	r3, r3, #28
 8003c84:	4925      	ldr	r1, [pc, #148]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d016      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	4917      	ldr	r1, [pc, #92]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ccc:	f7fd ffb2 	bl	8001c34 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cd4:	f7fd ffae 	bl	8001c34 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e09f      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 8095 	bne.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fd ff98 	bl	8001c34 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d06:	e00f      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d08:	f7fd ff94 	bl	8001c34 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d908      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e085      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	42470068 	.word	0x42470068
 8003d24:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d34:	d0e8      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d127      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	061b      	lsls	r3, r3, #24
 8003d8c:	4928      	ldr	r1, [pc, #160]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	3b01      	subs	r3, #1
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	4922      	ldr	r1, [pc, #136]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01d      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	d118      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	0e1b      	lsrs	r3, r3, #24
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	019b      	lsls	r3, r3, #6
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	4910      	ldr	r1, [pc, #64]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd ff1a 	bl	8001c34 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e04:	f7fd ff16 	bl	8001c34 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e007      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e22:	d1ef      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470070 	.word	0x42470070

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e3c:	b088      	sub	sp, #32
 8003e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e54:	4bce      	ldr	r3, [pc, #824]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	f200 818d 	bhi.w	800417c <HAL_RCC_GetSysClockFreq+0x344>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	0800417d 	.word	0x0800417d
 8003e70:	0800417d 	.word	0x0800417d
 8003e74:	0800417d 	.word	0x0800417d
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	0800417d 	.word	0x0800417d
 8003e80:	0800417d 	.word	0x0800417d
 8003e84:	0800417d 	.word	0x0800417d
 8003e88:	08003ea9 	.word	0x08003ea9
 8003e8c:	0800417d 	.word	0x0800417d
 8003e90:	0800417d 	.word	0x0800417d
 8003e94:	0800417d 	.word	0x0800417d
 8003e98:	0800401d 	.word	0x0800401d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4bbd      	ldr	r3, [pc, #756]	; (8004194 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e9e:	61bb      	str	r3, [r7, #24]
       break;
 8003ea0:	e16f      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea2:	4bbd      	ldr	r3, [pc, #756]	; (8004198 <HAL_RCC_GetSysClockFreq+0x360>)
 8003ea4:	61bb      	str	r3, [r7, #24]
      break;
 8003ea6:	e16c      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4bb9      	ldr	r3, [pc, #740]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb2:	4bb7      	ldr	r3, [pc, #732]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d053      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4bb4      	ldr	r3, [pc, #720]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	ea02 0400 	and.w	r4, r2, r0
 8003ed6:	603c      	str	r4, [r7, #0]
 8003ed8:	400b      	ands	r3, r1
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	014b      	lsls	r3, r1, #5
 8003eee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ef2:	0142      	lsls	r2, r0, #5
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4623      	mov	r3, r4
 8003efa:	1ac0      	subs	r0, r0, r3
 8003efc:	462b      	mov	r3, r5
 8003efe:	eb61 0103 	sbc.w	r1, r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f10:	0182      	lsls	r2, r0, #6
 8003f12:	1a12      	subs	r2, r2, r0
 8003f14:	eb63 0301 	sbc.w	r3, r3, r1
 8003f18:	f04f 0000 	mov.w	r0, #0
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	00d9      	lsls	r1, r3, #3
 8003f22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f26:	00d0      	lsls	r0, r2, #3
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	1852      	adds	r2, r2, r1
 8003f30:	4629      	mov	r1, r5
 8003f32:	eb43 0101 	adc.w	r1, r3, r1
 8003f36:	460b      	mov	r3, r1
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0259      	lsls	r1, r3, #9
 8003f42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f46:	0250      	lsls	r0, r2, #9
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc f95c 	bl	8000214 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e04c      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f66:	4b8a      	ldr	r3, [pc, #552]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	ea02 0a00 	and.w	sl, r2, r0
 8003f7e:	ea03 0b01 	and.w	fp, r3, r1
 8003f82:	4650      	mov	r0, sl
 8003f84:	4659      	mov	r1, fp
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	014b      	lsls	r3, r1, #5
 8003f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f94:	0142      	lsls	r2, r0, #5
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	ebb0 000a 	subs.w	r0, r0, sl
 8003f9e:	eb61 010b 	sbc.w	r1, r1, fp
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	018b      	lsls	r3, r1, #6
 8003fac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fb0:	0182      	lsls	r2, r0, #6
 8003fb2:	1a12      	subs	r2, r2, r0
 8003fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	00d9      	lsls	r1, r3, #3
 8003fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc6:	00d0      	lsls	r0, r2, #3
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	eb12 020a 	adds.w	r2, r2, sl
 8003fd0:	eb43 030b 	adc.w	r3, r3, fp
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	0299      	lsls	r1, r3, #10
 8003fde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fe2:	0290      	lsls	r0, r2, #10
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f7fc f90e 	bl	8000214 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004000:	4b63      	ldr	r3, [pc, #396]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	3301      	adds	r3, #1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	61bb      	str	r3, [r7, #24]
      break;
 800401a:	e0b2      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800401c:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004024:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004026:	4b5a      	ldr	r3, [pc, #360]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04d      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	461a      	mov	r2, r3
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	ea02 0800 	and.w	r8, r2, r0
 800404a:	ea03 0901 	and.w	r9, r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	014b      	lsls	r3, r1, #5
 800405c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004060:	0142      	lsls	r2, r0, #5
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	ebb0 0008 	subs.w	r0, r0, r8
 800406a:	eb61 0109 	sbc.w	r1, r1, r9
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800407c:	0182      	lsls	r2, r0, #6
 800407e:	1a12      	subs	r2, r2, r0
 8004080:	eb63 0301 	sbc.w	r3, r3, r1
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	00d9      	lsls	r1, r3, #3
 800408e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004092:	00d0      	lsls	r0, r2, #3
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	eb12 0208 	adds.w	r2, r2, r8
 800409c:	eb43 0309 	adc.w	r3, r3, r9
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0259      	lsls	r1, r3, #9
 80040aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040ae:	0250      	lsls	r0, r2, #9
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f7fc f8a8 	bl	8000214 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e04a      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b30      	ldr	r3, [pc, #192]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	461a      	mov	r2, r3
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	ea02 0400 	and.w	r4, r2, r0
 80040e6:	ea03 0501 	and.w	r5, r3, r1
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	014b      	lsls	r3, r1, #5
 80040f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040fc:	0142      	lsls	r2, r0, #5
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	1b00      	subs	r0, r0, r4
 8004104:	eb61 0105 	sbc.w	r1, r1, r5
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	018b      	lsls	r3, r1, #6
 8004112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004116:	0182      	lsls	r2, r0, #6
 8004118:	1a12      	subs	r2, r2, r0
 800411a:	eb63 0301 	sbc.w	r3, r3, r1
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	00d9      	lsls	r1, r3, #3
 8004128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800412c:	00d0      	lsls	r0, r2, #3
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	1912      	adds	r2, r2, r4
 8004134:	eb45 0303 	adc.w	r3, r5, r3
 8004138:	f04f 0000 	mov.w	r0, #0
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	0299      	lsls	r1, r3, #10
 8004142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004146:	0290      	lsls	r0, r2, #10
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f7fc f85c 	bl	8000214 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4613      	mov	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCC_GetSysClockFreq+0x358>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0f1b      	lsrs	r3, r3, #28
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	61bb      	str	r3, [r7, #24]
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetSysClockFreq+0x35c>)
 800417e:	61bb      	str	r3, [r7, #24]
      break;
 8004180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004182:	69bb      	ldr	r3, [r7, #24]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	00f42400 	.word	0x00f42400
 8004198:	007a1200 	.word	0x007a1200

0800419c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e28d      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8083 	beq.w	80042c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041bc:	4b94      	ldr	r3, [pc, #592]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d019      	beq.n	80041fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c8:	4b91      	ldr	r3, [pc, #580]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041d4:	4b8e      	ldr	r3, [pc, #568]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e0:	d00c      	beq.n	80041fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b8b      	ldr	r3, [pc, #556]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d112      	bne.n	8004214 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fa:	d10b      	bne.n	8004214 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4b84      	ldr	r3, [pc, #528]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x124>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d157      	bne.n	80042c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e25a      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x90>
 800421e:	4b7c      	ldr	r3, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7b      	ldr	r2, [pc, #492]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xcc>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0xb4>
 8004236:	4b76      	ldr	r3, [pc, #472]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a75      	ldr	r2, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b73      	ldr	r3, [pc, #460]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a72      	ldr	r2, [pc, #456]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xcc>
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6e      	ldr	r2, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fce0 	bl	8001c34 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fcdc 	bl	8001c34 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e21f      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xdc>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fccc 	bl	8001c34 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fcc8 	bl	8001c34 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e20b      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x104>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d06f      	beq.n	80043ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ce:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d11c      	bne.n	8004338 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x186>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1d3      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4937      	ldr	r1, [pc, #220]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	e03a      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004340:	4b34      	ldr	r3, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x278>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd fc75 	bl	8001c34 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434e:	f7fd fc71 	bl	8001c34 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1b4      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4925      	ldr	r1, [pc, #148]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
 8004380:	e015      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x278>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fc54 	bl	8001c34 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004390:	f7fd fc50 	bl	8001c34 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e193      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d036      	beq.n	8004428 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fc34 	bl	8001c34 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fd fc30 	bl	8001c34 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e173      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x234>
 80043ee:	e01b      	b.n	8004428 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fd fc1d 	bl	8001c34 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	e00e      	b.n	800441c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fe:	f7fd fc19 	bl	8001c34 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d907      	bls.n	800441c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e15c      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
 8004410:	40023800 	.word	0x40023800
 8004414:	42470000 	.word	0x42470000
 8004418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	4b8a      	ldr	r3, [pc, #552]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ea      	bne.n	80043fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8097 	beq.w	8004564 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443a:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a7e      	ldr	r2, [pc, #504]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	4b79      	ldr	r3, [pc, #484]	; (800464c <HAL_RCC_OscConfig+0x4b0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004472:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x4b0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a75      	ldr	r2, [pc, #468]	; (800464c <HAL_RCC_OscConfig+0x4b0>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fd fbd9 	bl	8001c34 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fd fbd5 	bl	8001c34 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e118      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4b6c      	ldr	r3, [pc, #432]	; (800464c <HAL_RCC_OscConfig+0x4b0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x31e>
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a65      	ldr	r2, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	e01c      	b.n	80044f4 <HAL_RCC_OscConfig+0x358>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x340>
 80044c2:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a60      	ldr	r2, [pc, #384]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	4b5e      	ldr	r3, [pc, #376]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a5d      	ldr	r2, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0x358>
 80044dc:	4b5a      	ldr	r3, [pc, #360]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a59      	ldr	r2, [pc, #356]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	4b57      	ldr	r3, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a56      	ldr	r2, [pc, #344]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	f023 0304 	bic.w	r3, r3, #4
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fd fb9a 	bl	8001c34 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd fb96 	bl	8001c34 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0d7      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCC_OscConfig+0x368>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fd fb84 	bl	8001c34 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fd fb80 	bl	8001c34 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0c1      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	4b40      	ldr	r3, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ee      	bne.n	8004530 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4a3a      	ldr	r2, [pc, #232]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80ad 	beq.w	80046c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	d060      	beq.n	800463c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d145      	bne.n	800460e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b33      	ldr	r3, [pc, #204]	; (8004650 <HAL_RCC_OscConfig+0x4b4>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fb54 	bl	8001c34 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fb50 	bl	8001c34 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e093      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	3b01      	subs	r3, #1
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	071b      	lsls	r3, r3, #28
 80045da:	491b      	ldr	r1, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x4b4>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fb25 	bl	8001c34 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd fb21 	bl	8001c34 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e064      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x452>
 800460c:	e05c      	b.n	80046c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x4b4>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fb0e 	bl	8001c34 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fb0a 	bl	8001c34 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e04d      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x480>
 800463a:	e045      	b.n	80046c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e040      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004654:	4b1f      	ldr	r3, [pc, #124]	; (80046d4 <HAL_RCC_OscConfig+0x538>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d030      	beq.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d129      	bne.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d122      	bne.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	4293      	cmp	r3, r2
 800468e:	d119      	bne.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d10f      	bne.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e07b      	b.n	80047e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d108      	bne.n	8004704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fa:	d009      	beq.n	8004710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	61da      	str	r2, [r3, #28]
 8004702:	e005      	b.n	8004710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f8c4 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	ea42 0103 	orr.w	r1, r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0104 	and.w	r1, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0210 	and.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_SPI_Transmit+0x22>
 8004808:	2302      	movs	r3, #2
 800480a:	e126      	b.n	8004a5a <HAL_SPI_Transmit+0x270>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004814:	f7fd fa0e 	bl	8001c34 <HAL_GetTick>
 8004818:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800482e:	e10b      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x52>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004840:	e102      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004888:	d10f      	bne.n	80048aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d007      	beq.n	80048c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d0:	d14b      	bne.n	800496a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Transmit+0xf6>
 80048da:	8afb      	ldrh	r3, [r7, #22]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d13e      	bne.n	800495e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	881a      	ldrh	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	1c9a      	adds	r2, r3, #2
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004904:	e02b      	b.n	800495e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d112      	bne.n	800493a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	881a      	ldrh	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	1c9a      	adds	r2, r3, #2
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36
 8004938:	e011      	b.n	800495e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493a:	f7fd f97b 	bl	8001c34 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d803      	bhi.n	8004952 <HAL_SPI_Transmit+0x168>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d102      	bne.n	8004958 <HAL_SPI_Transmit+0x16e>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800495c:	e074      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ce      	bne.n	8004906 <HAL_SPI_Transmit+0x11c>
 8004968:	e04c      	b.n	8004a04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x18e>
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d140      	bne.n	80049fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800499e:	e02c      	b.n	80049fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d113      	bne.n	80049d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049d4:	e011      	b.n	80049fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d6:	f7fd f92d 	bl	8001c34 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d803      	bhi.n	80049ee <HAL_SPI_Transmit+0x204>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_Transmit+0x20a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049f8:	e026      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1cd      	bne.n	80049a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fbcb 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e000      	b.n	8004a48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d112      	bne.n	8004aa6 <HAL_SPI_Receive+0x44>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10e      	bne.n	8004aa6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8f1 	bl	8004c84 <HAL_SPI_TransmitReceive>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	e0ea      	b.n	8004c7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_SPI_Receive+0x52>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0e3      	b.n	8004c7c <HAL_SPI_Receive+0x21a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004abc:	f7fd f8ba 	bl	8001c34 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad2:	e0ca      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Receive+0x7e>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae4:	e0c1      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2c:	d10f      	bne.n	8004b4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d007      	beq.n	8004b6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d162      	bne.n	8004c3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b74:	e02e      	b.n	8004bd4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d115      	bne.n	8004bb0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f103 020c 	add.w	r2, r3, #12
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bae:	e011      	b.n	8004bd4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb0:	f7fd f840 	bl	8001c34 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_Receive+0x166>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Receive+0x16c>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd2:	e04a      	b.n	8004c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cb      	bne.n	8004b76 <HAL_SPI_Receive+0x114>
 8004bde:	e031      	b.n	8004c44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d113      	bne.n	8004c16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c14:	e011      	b.n	8004c3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c16:	f7fd f80d 	bl	8001c34 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d803      	bhi.n	8004c2e <HAL_SPI_Receive+0x1cc>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Receive+0x1d2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c38:	e017      	b.n	8004c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1cd      	bne.n	8004be0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fa45 	bl	80050d8 <SPI_EndRxTransaction>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
 8004c66:	e000      	b.n	8004c6a <HAL_SPI_Receive+0x208>
  }

error :
 8004c68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c92:	2301      	movs	r3, #1
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x26>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e18a      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x33c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fc ffbf 	bl	8001c34 <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d00f      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d107      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d003      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf2:	e15b      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d0c:	e14e      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d007      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d178      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x10a>
 8004d88:	8b7b      	ldrh	r3, [r7, #26]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d166      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db2:	e053      	b.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11b      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d113      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e3c:	f7fc fefa 	bl	8001c34 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d807      	bhi.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d003      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e5a:	e0a7      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1a6      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1a1      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e70:	e07c      	b.n	8004f6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1fc>
 8004e7a:	8b7b      	ldrh	r3, [r7, #26]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d16b      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea6:	e057      	b.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d114      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d119      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x2ae>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d014      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f32:	f7fc fe7f 	bl	8001c34 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d803      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x2c6>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x2cc>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f56:	e029      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1a2      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x224>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d19d      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f917 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f88:	e010      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	e000      	b.n	8004fac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fd8:	f7fc fe2c 	bl	8001c34 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fe8:	f7fc fe24 	bl	8001c34 <HAL_GetTick>
 8004fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fee:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	0d1b      	lsrs	r3, r3, #20
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	e054      	b.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d050      	beq.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005008:	f7fc fe14 	bl	8001c34 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d13d      	bne.n	800509a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800502c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005036:	d111      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005040:	d004      	beq.n	800504c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d107      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005064:	d10f      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e017      	b.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d19b      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000000 	.word	0x20000000

080050d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ec:	d111      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f6:	d004      	beq.n	8005102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005100:	d107      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511a:	d12a      	bne.n	8005172 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d012      	beq.n	800514c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	; 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff49 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02d      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e026      	b.n	800519a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	2101      	movs	r1, #1
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff36 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e013      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	2101      	movs	r1, #1
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff23 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e000      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051b0:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <SPI_EndRxTxTransaction+0x7c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <SPI_EndRxTxTransaction+0x80>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0d5b      	lsrs	r3, r3, #21
 80051bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ce:	d112      	bne.n	80051f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff fef4 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3b01      	subs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d0f2      	beq.n	80051f6 <SPI_EndRxTxTransaction+0x52>
 8005210:	e000      	b.n	8005214 <SPI_EndRxTxTransaction+0x70>
        break;
 8005212:	bf00      	nop
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000000 	.word	0x20000000
 8005224:	165e9f81 	.word	0x165e9f81

08005228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e041      	b.n	80052be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc fb7a 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f000 f9ce 	bl	8005608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e04e      	b.n	800537e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a23      	ldr	r2, [pc, #140]	; (800538c <HAL_TIM_Base_Start_IT+0xc4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d01d      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_TIM_Base_Start_IT+0xc8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <HAL_TIM_Base_Start_IT+0xcc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <HAL_TIM_Base_Start_IT+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1b      	ldr	r2, [pc, #108]	; (800539c <HAL_TIM_Base_Start_IT+0xd4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b06      	cmp	r3, #6
 8005358:	d010      	beq.n	800537c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	e007      	b.n	800537c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40010400 	.word	0x40010400
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40001800 	.word	0x40001800

080053a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0202 	mvn.w	r2, #2
 80053d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8ee 	bl	80055cc <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8e0 	bl	80055b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8f1 	bl	80055e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d122      	bne.n	8005458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b04      	cmp	r3, #4
 800541e:	d11b      	bne.n	8005458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0204 	mvn.w	r2, #4
 8005428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8c4 	bl	80055cc <HAL_TIM_IC_CaptureCallback>
 8005444:	e005      	b.n	8005452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8b6 	bl	80055b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f8c7 	bl	80055e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b08      	cmp	r3, #8
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0208 	mvn.w	r2, #8
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2204      	movs	r2, #4
 8005482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f89a 	bl	80055cc <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f88c 	bl	80055b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f89d 	bl	80055e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d122      	bne.n	8005500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d11b      	bne.n	8005500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0210 	mvn.w	r2, #16
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2208      	movs	r2, #8
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f870 	bl	80055cc <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f862 	bl	80055b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f873 	bl	80055e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0201 	mvn.w	r2, #1
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fff2 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f902 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f838 	bl	80055f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0220 	mvn.w	r2, #32
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8cc 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a40      	ldr	r2, [pc, #256]	; (800571c <TIM_Base_SetConfig+0x114>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d013      	beq.n	8005648 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d00f      	beq.n	8005648 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3d      	ldr	r2, [pc, #244]	; (8005720 <TIM_Base_SetConfig+0x118>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a3c      	ldr	r2, [pc, #240]	; (8005724 <TIM_Base_SetConfig+0x11c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3b      	ldr	r2, [pc, #236]	; (8005728 <TIM_Base_SetConfig+0x120>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3a      	ldr	r2, [pc, #232]	; (800572c <TIM_Base_SetConfig+0x124>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2f      	ldr	r2, [pc, #188]	; (800571c <TIM_Base_SetConfig+0x114>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d02b      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d027      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <TIM_Base_SetConfig+0x118>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d023      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <TIM_Base_SetConfig+0x11c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01f      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <TIM_Base_SetConfig+0x120>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01b      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a29      	ldr	r2, [pc, #164]	; (800572c <TIM_Base_SetConfig+0x124>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d017      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a28      	ldr	r2, [pc, #160]	; (8005730 <TIM_Base_SetConfig+0x128>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a27      	ldr	r2, [pc, #156]	; (8005734 <TIM_Base_SetConfig+0x12c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a26      	ldr	r2, [pc, #152]	; (8005738 <TIM_Base_SetConfig+0x130>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a25      	ldr	r2, [pc, #148]	; (800573c <TIM_Base_SetConfig+0x134>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <TIM_Base_SetConfig+0x138>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a23      	ldr	r2, [pc, #140]	; (8005744 <TIM_Base_SetConfig+0x13c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <TIM_Base_SetConfig+0x114>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0xf8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a0c      	ldr	r2, [pc, #48]	; (800572c <TIM_Base_SetConfig+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d103      	bne.n	8005708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	615a      	str	r2, [r3, #20]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40010400 	.word	0x40010400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800
 800573c:	40001800 	.word	0x40001800
 8005740:	40001c00 	.word	0x40001c00
 8005744:	40002000 	.word	0x40002000

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e03f      	b.n	8005802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc f8fe 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9a7 	bl	8005b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b08a      	sub	sp, #40	; 0x28
 800580e:	af02      	add	r7, sp, #8
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d17c      	bne.n	8005924 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_UART_Transmit+0x2c>
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e075      	b.n	8005926 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UART_Transmit+0x3e>
 8005844:	2302      	movs	r3, #2
 8005846:	e06e      	b.n	8005926 <HAL_UART_Transmit+0x11c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fc f9e9 	bl	8001c34 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d108      	bne.n	800588c <HAL_UART_Transmit+0x82>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e003      	b.n	8005894 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800589c:	e02a      	b.n	80058f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8e2 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e036      	b.n	8005926 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3302      	adds	r3, #2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1cf      	bne.n	800589e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	2140      	movs	r1, #64	; 0x40
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8b2 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08a      	sub	sp, #40	; 0x28
 8005932:	af02      	add	r7, sp, #8
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b20      	cmp	r3, #32
 800594c:	f040 808c 	bne.w	8005a68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Receive+0x2e>
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e084      	b.n	8005a6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UART_Receive+0x40>
 800596a:	2302      	movs	r3, #2
 800596c:	e07d      	b.n	8005a6a <HAL_UART_Receive+0x13c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2222      	movs	r2, #34	; 0x22
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800598a:	f7fc f953 	bl	8001c34 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	88fa      	ldrh	r2, [r7, #6]
 8005994:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d108      	bne.n	80059b8 <HAL_UART_Receive+0x8a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e003      	b.n	80059c0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80059c8:	e043      	b.n	8005a52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	2120      	movs	r1, #32
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f84c 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e042      	b.n	8005a6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	3302      	adds	r3, #2
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e01f      	b.n	8005a44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d007      	beq.n	8005a1e <HAL_UART_Receive+0xf0>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_UART_Receive+0xfe>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e008      	b.n	8005a3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1b6      	bne.n	80059ca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e000      	b.n	8005a6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	e02c      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d028      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a92:	f7fc f8cf 	bl	8001c34 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d21d      	bcs.n	8005ade <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ab0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d0c3      	beq.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	b09f      	sub	sp, #124	; 0x7c
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	68d9      	ldr	r1, [r3, #12]
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	ea40 0301 	orr.w	r3, r0, r1
 8005b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b4c:	f021 010c 	bic.w	r1, r1, #12
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b56:	430b      	orrs	r3, r1
 8005b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	6999      	ldr	r1, [r3, #24]
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	ea40 0301 	orr.w	r3, r0, r1
 8005b70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4bc5      	ldr	r3, [pc, #788]	; (8005e8c <UART_SetConfig+0x384>)
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d004      	beq.n	8005b86 <UART_SetConfig+0x7e>
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4bc3      	ldr	r3, [pc, #780]	; (8005e90 <UART_SetConfig+0x388>)
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d103      	bne.n	8005b8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b86:	f7fd fe19 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8005b8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005b8c:	e002      	b.n	8005b94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fd fe01 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8005b92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9c:	f040 80b6 	bne.w	8005d0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba2:	461c      	mov	r4, r3
 8005ba4:	f04f 0500 	mov.w	r5, #0
 8005ba8:	4622      	mov	r2, r4
 8005baa:	462b      	mov	r3, r5
 8005bac:	1891      	adds	r1, r2, r2
 8005bae:	6439      	str	r1, [r7, #64]	; 0x40
 8005bb0:	415b      	adcs	r3, r3
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb8:	1912      	adds	r2, r2, r4
 8005bba:	eb45 0303 	adc.w	r3, r5, r3
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	00d9      	lsls	r1, r3, #3
 8005bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bcc:	00d0      	lsls	r0, r2, #3
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	1911      	adds	r1, r2, r4
 8005bd4:	6639      	str	r1, [r7, #96]	; 0x60
 8005bd6:	416b      	adcs	r3, r5
 8005bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005be8:	415b      	adcs	r3, r3
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bf4:	f7fa fb0e 	bl	8000214 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4ba5      	ldr	r3, [pc, #660]	; (8005e94 <UART_SetConfig+0x38c>)
 8005bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	011e      	lsls	r6, r3, #4
 8005c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c08:	461c      	mov	r4, r3
 8005c0a:	f04f 0500 	mov.w	r5, #0
 8005c0e:	4622      	mov	r2, r4
 8005c10:	462b      	mov	r3, r5
 8005c12:	1891      	adds	r1, r2, r2
 8005c14:	6339      	str	r1, [r7, #48]	; 0x30
 8005c16:	415b      	adcs	r3, r3
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c1e:	1912      	adds	r2, r2, r4
 8005c20:	eb45 0303 	adc.w	r3, r5, r3
 8005c24:	f04f 0000 	mov.w	r0, #0
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	00d9      	lsls	r1, r3, #3
 8005c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c32:	00d0      	lsls	r0, r2, #3
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	1911      	adds	r1, r2, r4
 8005c3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c3c:	416b      	adcs	r3, r5
 8005c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c5a:	f7fa fadb 	bl	8000214 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4b8c      	ldr	r3, [pc, #560]	; (8005e94 <UART_SetConfig+0x38c>)
 8005c64:	fba3 1302 	umull	r1, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2164      	movs	r1, #100	; 0x64
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	3332      	adds	r3, #50	; 0x32
 8005c76:	4a87      	ldr	r2, [pc, #540]	; (8005e94 <UART_SetConfig+0x38c>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c84:	441e      	add	r6, r3
 8005c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	1894      	adds	r4, r2, r2
 8005c94:	623c      	str	r4, [r7, #32]
 8005c96:	415b      	adcs	r3, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9e:	1812      	adds	r2, r2, r0
 8005ca0:	eb41 0303 	adc.w	r3, r1, r3
 8005ca4:	f04f 0400 	mov.w	r4, #0
 8005ca8:	f04f 0500 	mov.w	r5, #0
 8005cac:	00dd      	lsls	r5, r3, #3
 8005cae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cb2:	00d4      	lsls	r4, r2, #3
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	1814      	adds	r4, r2, r0
 8005cba:	653c      	str	r4, [r7, #80]	; 0x50
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	61b9      	str	r1, [r7, #24]
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005cda:	f7fa fa9b 	bl	8000214 <__aeabi_uldivmod>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <UART_SetConfig+0x38c>)
 8005ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	2164      	movs	r1, #100	; 0x64
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	3332      	adds	r3, #50	; 0x32
 8005cf6:	4a67      	ldr	r2, [pc, #412]	; (8005e94 <UART_SetConfig+0x38c>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	f003 0207 	and.w	r2, r3, #7
 8005d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4432      	add	r2, r6
 8005d08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d0a:	e0b9      	b.n	8005e80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0e:	461c      	mov	r4, r3
 8005d10:	f04f 0500 	mov.w	r5, #0
 8005d14:	4622      	mov	r2, r4
 8005d16:	462b      	mov	r3, r5
 8005d18:	1891      	adds	r1, r2, r2
 8005d1a:	6139      	str	r1, [r7, #16]
 8005d1c:	415b      	adcs	r3, r3
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d24:	1912      	adds	r2, r2, r4
 8005d26:	eb45 0303 	adc.w	r3, r5, r3
 8005d2a:	f04f 0000 	mov.w	r0, #0
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	00d9      	lsls	r1, r3, #3
 8005d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d38:	00d0      	lsls	r0, r2, #3
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	eb12 0804 	adds.w	r8, r2, r4
 8005d42:	eb43 0905 	adc.w	r9, r3, r5
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f04f 0100 	mov.w	r1, #0
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	008b      	lsls	r3, r1, #2
 8005d5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d5e:	0082      	lsls	r2, r0, #2
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fa56 	bl	8000214 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <UART_SetConfig+0x38c>)
 8005d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	011e      	lsls	r6, r3, #4
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	1894      	adds	r4, r2, r2
 8005d84:	60bc      	str	r4, [r7, #8]
 8005d86:	415b      	adcs	r3, r3
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d8e:	1812      	adds	r2, r2, r0
 8005d90:	eb41 0303 	adc.w	r3, r1, r3
 8005d94:	f04f 0400 	mov.w	r4, #0
 8005d98:	f04f 0500 	mov.w	r5, #0
 8005d9c:	00dd      	lsls	r5, r3, #3
 8005d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005da2:	00d4      	lsls	r4, r2, #3
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	1814      	adds	r4, r2, r0
 8005daa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005dac:	414b      	adcs	r3, r1
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f04f 0100 	mov.w	r1, #0
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	008b      	lsls	r3, r1, #2
 8005dc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dc8:	0082      	lsls	r2, r0, #2
 8005dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dce:	f7fa fa21 	bl	8000214 <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <UART_SetConfig+0x38c>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2164      	movs	r1, #100	; 0x64
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	3332      	adds	r3, #50	; 0x32
 8005dea:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <UART_SetConfig+0x38c>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df6:	441e      	add	r6, r3
 8005df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f04f 0100 	mov.w	r1, #0
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	1894      	adds	r4, r2, r2
 8005e06:	603c      	str	r4, [r7, #0]
 8005e08:	415b      	adcs	r3, r3
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e10:	1812      	adds	r2, r2, r0
 8005e12:	eb41 0303 	adc.w	r3, r1, r3
 8005e16:	f04f 0400 	mov.w	r4, #0
 8005e1a:	f04f 0500 	mov.w	r5, #0
 8005e1e:	00dd      	lsls	r5, r3, #3
 8005e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e24:	00d4      	lsls	r4, r2, #3
 8005e26:	4622      	mov	r2, r4
 8005e28:	462b      	mov	r3, r5
 8005e2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005e2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	008b      	lsls	r3, r1, #2
 8005e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e4a:	0082      	lsls	r2, r0, #2
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	4659      	mov	r1, fp
 8005e50:	f7fa f9e0 	bl	8000214 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <UART_SetConfig+0x38c>)
 8005e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2164      	movs	r1, #100	; 0x64
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3332      	adds	r3, #50	; 0x32
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <UART_SetConfig+0x38c>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4432      	add	r2, r6
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	377c      	adds	r7, #124	; 0x7c
 8005e84:	46bd      	mov	sp, r7
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40011000 	.word	0x40011000
 8005e90:	40011400 	.word	0x40011400
 8005e94:	51eb851f 	.word	0x51eb851f

08005e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e98:	b084      	sub	sp, #16
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	f107 001c 	add.w	r0, r7, #28
 8005ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d122      	bne.n	8005ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fac0 	bl	8007470 <USB_CoreReset>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e01a      	b.n	8005f2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fab4 	bl	8007470 <USB_CoreReset>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f1e:	e005      	b.n	8005f2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d10b      	bne.n	8005f4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f043 0206 	orr.w	r2, r3, #6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f56:	b004      	add	sp, #16
 8005f58:	4770      	bx	lr
	...

08005f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d165      	bne.n	800603c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4a41      	ldr	r2, [pc, #260]	; (8006078 <USB_SetTurnaroundTime+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d906      	bls.n	8005f86 <USB_SetTurnaroundTime+0x2a>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4a40      	ldr	r2, [pc, #256]	; (800607c <USB_SetTurnaroundTime+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d202      	bcs.n	8005f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f80:	230f      	movs	r3, #15
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e062      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4a3c      	ldr	r2, [pc, #240]	; (800607c <USB_SetTurnaroundTime+0x120>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d306      	bcc.n	8005f9c <USB_SetTurnaroundTime+0x40>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4a3b      	ldr	r2, [pc, #236]	; (8006080 <USB_SetTurnaroundTime+0x124>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d202      	bcs.n	8005f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f96:	230e      	movs	r3, #14
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e057      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a38      	ldr	r2, [pc, #224]	; (8006080 <USB_SetTurnaroundTime+0x124>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d306      	bcc.n	8005fb2 <USB_SetTurnaroundTime+0x56>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4a37      	ldr	r2, [pc, #220]	; (8006084 <USB_SetTurnaroundTime+0x128>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d202      	bcs.n	8005fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fac:	230d      	movs	r3, #13
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e04c      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a33      	ldr	r2, [pc, #204]	; (8006084 <USB_SetTurnaroundTime+0x128>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d306      	bcc.n	8005fc8 <USB_SetTurnaroundTime+0x6c>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4a32      	ldr	r2, [pc, #200]	; (8006088 <USB_SetTurnaroundTime+0x12c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d802      	bhi.n	8005fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fc2:	230c      	movs	r3, #12
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e041      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4a2f      	ldr	r2, [pc, #188]	; (8006088 <USB_SetTurnaroundTime+0x12c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d906      	bls.n	8005fde <USB_SetTurnaroundTime+0x82>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	; (800608c <USB_SetTurnaroundTime+0x130>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d802      	bhi.n	8005fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fd8:	230b      	movs	r3, #11
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e036      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	; (800608c <USB_SetTurnaroundTime+0x130>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d906      	bls.n	8005ff4 <USB_SetTurnaroundTime+0x98>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a29      	ldr	r2, [pc, #164]	; (8006090 <USB_SetTurnaroundTime+0x134>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d802      	bhi.n	8005ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fee:	230a      	movs	r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	e02b      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4a26      	ldr	r2, [pc, #152]	; (8006090 <USB_SetTurnaroundTime+0x134>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d906      	bls.n	800600a <USB_SetTurnaroundTime+0xae>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4a25      	ldr	r2, [pc, #148]	; (8006094 <USB_SetTurnaroundTime+0x138>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d202      	bcs.n	800600a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006004:	2309      	movs	r3, #9
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e020      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a21      	ldr	r2, [pc, #132]	; (8006094 <USB_SetTurnaroundTime+0x138>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d306      	bcc.n	8006020 <USB_SetTurnaroundTime+0xc4>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a20      	ldr	r2, [pc, #128]	; (8006098 <USB_SetTurnaroundTime+0x13c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d802      	bhi.n	8006020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800601a:	2308      	movs	r3, #8
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e015      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <USB_SetTurnaroundTime+0x13c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d906      	bls.n	8006036 <USB_SetTurnaroundTime+0xda>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <USB_SetTurnaroundTime+0x140>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d202      	bcs.n	8006036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006030:	2307      	movs	r3, #7
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e00a      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006036:	2306      	movs	r3, #6
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e007      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006042:	2309      	movs	r3, #9
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e001      	b.n	800604c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006048:	2309      	movs	r3, #9
 800604a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006064:	431a      	orrs	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	00d8acbf 	.word	0x00d8acbf
 800607c:	00e4e1c0 	.word	0x00e4e1c0
 8006080:	00f42400 	.word	0x00f42400
 8006084:	01067380 	.word	0x01067380
 8006088:	011a499f 	.word	0x011a499f
 800608c:	01312cff 	.word	0x01312cff
 8006090:	014ca43f 	.word	0x014ca43f
 8006094:	016e3600 	.word	0x016e3600
 8006098:	01a6ab1f 	.word	0x01a6ab1f
 800609c:	01e84800 	.word	0x01e84800

080060a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f043 0201 	orr.w	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d106      	bne.n	8006110 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	e00b      	b.n	8006128 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	e001      	b.n	8006128 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e003      	b.n	8006130 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006128:	2032      	movs	r0, #50	; 0x32
 800612a:	f7fb fd8f 	bl	8001c4c <HAL_Delay>

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006138:	b084      	sub	sp, #16
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e009      	b.n	800616c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3340      	adds	r3, #64	; 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0e      	cmp	r3, #14
 8006170:	d9f2      	bls.n	8006158 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e005      	b.n	80061be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	4619      	mov	r1, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	461a      	mov	r2, r3
 80061da:	680b      	ldr	r3, [r1, #0]
 80061dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10c      	bne.n	80061fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061ea:	2100      	movs	r1, #0
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f949 	bl	8006484 <USB_SetDevSpeed>
 80061f2:	e008      	b.n	8006206 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061f4:	2101      	movs	r1, #1
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f944 	bl	8006484 <USB_SetDevSpeed>
 80061fc:	e003      	b.n	8006206 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061fe:	2103      	movs	r1, #3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f93f 	bl	8006484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006206:	2110      	movs	r1, #16
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8f3 	bl	80063f4 <USB_FlushTxFifo>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f911 	bl	8006440 <USB_FlushRxFifo>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	461a      	mov	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	e043      	b.n	80062da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006268:	d118      	bne.n	800629c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e013      	b.n	80062ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e008      	b.n	80062ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	461a      	mov	r2, r3
 80062ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	3301      	adds	r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3b7      	bcc.n	8006252 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e043      	b.n	8006370 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062fe:	d118      	bne.n	8006332 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	461a      	mov	r2, r3
 8006314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e013      	b.n	8006344 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e008      	b.n	8006344 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	2300      	movs	r3, #0
 8006354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3301      	adds	r3, #1
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3b7      	bcc.n	80062e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f043 0210 	orr.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <USB_DevInit+0x2b8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	f043 0304 	orr.w	r3, r3, #4
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr
 80063f0:	803c3800 	.word	0x803c3800

080063f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	019b      	lsls	r3, r3, #6
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <USB_FlushTxFifo+0x48>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b20      	cmp	r3, #32
 800642a:	d0f0      	beq.n	800640e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	00030d40 	.word	0x00030d40

08006440 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2210      	movs	r2, #16
 8006450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a09      	ldr	r2, [pc, #36]	; (8006480 <USB_FlushRxFifo+0x40>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e006      	b.n	8006472 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b10      	cmp	r3, #16
 800646e:	d0f0      	beq.n	8006452 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	00030d40 	.word	0x00030d40

08006484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0306 	and.w	r3, r3, #6
 80064ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
 80064da:	e00a      	b.n	80064f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d002      	beq.n	80064e8 <USB_GetDevSpeed+0x32>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d102      	bne.n	80064ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064e8:	2302      	movs	r3, #2
 80064ea:	75fb      	strb	r3, [r7, #23]
 80064ec:	e001      	b.n	80064f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064ee:	230f      	movs	r3, #15
 80064f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d13a      	bne.n	8006592 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653a:	4313      	orrs	r3, r2
 800653c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d155      	bne.n	8006600 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	78db      	ldrb	r3, [r3, #3]
 800656e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	059b      	lsls	r3, r3, #22
 8006576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006578:	4313      	orrs	r3, r2
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e036      	b.n	8006600 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	2101      	movs	r1, #1
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	041b      	lsls	r3, r3, #16
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11a      	bne.n	8006600 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065e6:	430b      	orrs	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d161      	bne.n	80066f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800663e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006642:	d11f      	bne.n	8006684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a4:	4013      	ands	r3, r2
 80066a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c8:	4013      	ands	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0159      	lsls	r1, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	440b      	add	r3, r1
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	4619      	mov	r1, r3
 80066e8:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <USB_DeactivateEndpoint+0x1b0>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
 80066ee:	e060      	b.n	80067b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006706:	d11f      	bne.n	8006748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	43db      	mvns	r3, r3
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006768:	4013      	ands	r3, r2
 800676a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2101      	movs	r1, #1
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	43db      	mvns	r3, r3
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800678c:	4013      	ands	r3, r2
 800678e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	0159      	lsls	r1, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	4619      	mov	r1, r3
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <USB_DeactivateEndpoint+0x1b4>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	ec337800 	.word	0xec337800
 80067c4:	eff37800 	.word	0xeff37800

080067c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f040 815c 	bne.w	8006aa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d132      	bne.n	8006858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006810:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	0cdb      	lsrs	r3, r3, #19
 8006852:	04db      	lsls	r3, r3, #19
 8006854:	6113      	str	r3, [r2, #16]
 8006856:	e074      	b.n	8006942 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	0cdb      	lsrs	r3, r3, #19
 8006874:	04db      	lsls	r3, r3, #19
 8006876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800689a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6959      	ldr	r1, [r3, #20]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	440b      	add	r3, r1
 80068b4:	1e59      	subs	r1, r3, #1
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80068be:	04d9      	lsls	r1, r3, #19
 80068c0:	4b9d      	ldr	r3, [pc, #628]	; (8006b38 <USB_EPStartXfer+0x370>)
 80068c2:	400b      	ands	r3, r1
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	0148      	lsls	r0, r1, #5
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	4401      	add	r1, r0
 80068cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068d0:	4313      	orrs	r3, r2
 80068d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ea:	69b9      	ldr	r1, [r7, #24]
 80068ec:	0148      	lsls	r0, r1, #5
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	4401      	add	r1, r0
 80068f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	78db      	ldrb	r3, [r3, #3]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d11f      	bne.n	8006942 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006920:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006940:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d14b      	bne.n	80069e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	461a      	mov	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d128      	bne.n	80069be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d110      	bne.n	800699e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e00f      	b.n	80069be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e12f      	b.n	8006c40 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d015      	beq.n	8006a34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8117 	beq.w	8006c40 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2101      	movs	r1, #1
 8006a24:	fa01 f303 	lsl.w	r3, r1, r3
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	634b      	str	r3, [r1, #52]	; 0x34
 8006a32:	e105      	b.n	8006c40 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d110      	bne.n	8006a66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	e00f      	b.n	8006a86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68d9      	ldr	r1, [r3, #12]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	b298      	uxth	r0, r3
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4603      	mov	r3, r0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fa2b 	bl	8006ef6 <USB_WritePacket>
 8006aa0:	e0ce      	b.n	8006c40 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abc:	0cdb      	lsrs	r3, r3, #19
 8006abe:	04db      	lsls	r3, r3, #19
 8006ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ae4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d126      	bne.n	8006b3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	0148      	lsls	r0, r1, #5
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	4401      	add	r1, r0
 8006b0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b10:	4313      	orrs	r3, r2
 8006b12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b32:	6113      	str	r3, [r2, #16]
 8006b34:	e036      	b.n	8006ba4 <USB_EPStartXfer+0x3dc>
 8006b36:	bf00      	nop
 8006b38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	1e5a      	subs	r2, r3, #1
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	8afb      	ldrh	r3, [r7, #22]
 8006b62:	04d9      	lsls	r1, r3, #19
 8006b64:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <USB_EPStartXfer+0x484>)
 8006b66:	400b      	ands	r3, r1
 8006b68:	69b9      	ldr	r1, [r7, #24]
 8006b6a:	0148      	lsls	r0, r1, #5
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	4401      	add	r1, r0
 8006b70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b74:	4313      	orrs	r3, r2
 8006b76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	8af9      	ldrh	r1, [r7, #22]
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b94:	69b9      	ldr	r1, [r7, #24]
 8006b96:	0148      	lsls	r0, r1, #5
 8006b98:	69f9      	ldr	r1, [r7, #28]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10d      	bne.n	8006bc6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	68d9      	ldr	r1, [r3, #12]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	78db      	ldrb	r3, [r3, #3]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d128      	bne.n	8006c20 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e00f      	b.n	8006c20 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	1ff80000 	.word	0x1ff80000

08006c50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	f040 80cd 	bne.w	8006e0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d132      	bne.n	8006ce0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd8:	0cdb      	lsrs	r3, r3, #19
 8006cda:	04db      	lsls	r3, r3, #19
 8006cdc:	6113      	str	r3, [r2, #16]
 8006cde:	e04e      	b.n	8006d7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfa:	0cdb      	lsrs	r3, r3, #19
 8006cfc:	04db      	lsls	r3, r3, #19
 8006cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6e:	6939      	ldr	r1, [r7, #16]
 8006d70:	0148      	lsls	r0, r1, #5
 8006d72:	6979      	ldr	r1, [r7, #20]
 8006d74:	4401      	add	r1, r0
 8006d76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d11e      	bne.n	8006dc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	e092      	b.n	8006ee8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006de0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d07e      	beq.n	8006ee8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	6979      	ldr	r1, [r7, #20]
 8006e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e06:	4313      	orrs	r3, r2
 8006e08:	634b      	str	r3, [r1, #52]	; 0x34
 8006e0a:	e06d      	b.n	8006ee8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e26:	0cdb      	lsrs	r3, r3, #19
 8006e28:	04db      	lsls	r3, r3, #19
 8006e2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e4e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e96:	6939      	ldr	r1, [r7, #16]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10d      	bne.n	8006ec8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68d9      	ldr	r1, [r3, #12]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b089      	sub	sp, #36	; 0x24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	460b      	mov	r3, r1
 8006f06:	71fb      	strb	r3, [r7, #7]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006f14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d11a      	bne.n	8006f52 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f1c:	88bb      	ldrh	r3, [r7, #4]
 8006f1e:	3303      	adds	r3, #3
 8006f20:	089b      	lsrs	r3, r3, #2
 8006f22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	e00f      	b.n	8006f4a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	031a      	lsls	r2, r3, #12
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f36:	461a      	mov	r2, r3
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3304      	adds	r3, #4
 8006f42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d3eb      	bcc.n	8006f2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3724      	adds	r7, #36	; 0x24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b089      	sub	sp, #36	; 0x24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	3303      	adds	r3, #3
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e00b      	b.n	8006f9c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3304      	adds	r3, #4
 8006f94:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d3ef      	bcc.n	8006f84 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3724      	adds	r7, #36	; 0x24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d12c      	bne.n	8007028 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	db12      	blt.n	8007006 <USB_EPSetStall+0x54>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007004:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e02b      	b.n	8007080 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db12      	blt.n	8007060 <USB_EPSetStall+0xae>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00f      	beq.n	8007060 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800705e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800707e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d128      	bne.n	80070fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	78db      	ldrb	r3, [r3, #3]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d003      	beq.n	80070da <USB_EPClearStall+0x4c>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	78db      	ldrb	r3, [r3, #3]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d138      	bne.n	800714c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e027      	b.n	800714c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	78db      	ldrb	r3, [r3, #3]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d003      	beq.n	800712c <USB_EPClearStall+0x9e>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	78db      	ldrb	r3, [r3, #3]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d10f      	bne.n	800714c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007178:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800717c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d4:	f023 0302 	bic.w	r3, r3, #2
 80071d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007216:	f043 0302 	orr.w	r3, r3, #2
 800721a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4013      	ands	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4013      	ands	r3, r2
 8007272:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	0c1b      	lsrs	r3, r3, #16
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	b29b      	uxth	r3, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	4013      	ands	r3, r2
 80072e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072e6:	68bb      	ldr	r3, [r7, #8]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	01db      	lsls	r3, r3, #7
 8007326:	b2db      	uxtb	r3, r3
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4013      	ands	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007342:	68bb      	ldr	r3, [r7, #8]
}
 8007344:	4618      	mov	r0, r3
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f003 0301 	and.w	r3, r3, #1
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007386:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	460b      	mov	r3, r1
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	333c      	adds	r3, #60	; 0x3c
 80073ca:	3304      	adds	r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4a26      	ldr	r2, [pc, #152]	; (800746c <USB_EP0_OutStart+0xb8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d90a      	bls.n	80073ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e8:	d101      	bne.n	80073ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e037      	b.n	800745e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f4:	461a      	mov	r2, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800740c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	f043 0318 	orr.w	r3, r3, #24
 8007420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007434:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007436:	7afb      	ldrb	r3, [r7, #11]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10f      	bne.n	800745c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007456:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800745a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	4f54300a 	.word	0x4f54300a

08007470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a13      	ldr	r2, [pc, #76]	; (80074d4 <USB_CoreReset+0x64>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e01b      	b.n	80074c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	daf2      	bge.n	800747c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f043 0201 	orr.w	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <USB_CoreReset+0x64>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d901      	bls.n	80074b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e006      	b.n	80074c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d0f0      	beq.n	80074a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	00030d40 	.word	0x00030d40

080074d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80074e4:	2010      	movs	r0, #16
 80074e6:	f001 ff97 	bl	8009418 <USBD_static_malloc>
 80074ea:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80074fa:	2302      	movs	r3, #2
 80074fc:	e01b      	b.n	8007536 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2207      	movs	r2, #7
 8007512:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007514:	e002      	b.n	800751c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	220a      	movs	r2, #10
 800751a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800751c:	2304      	movs	r3, #4
 800751e:	2203      	movs	r2, #3
 8007520:	2181      	movs	r1, #129	; 0x81
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 fe19 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800754a:	2181      	movs	r1, #129	; 0x81
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fe2a 	bl	80091a6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756e:	4618      	mov	r0, r3
 8007570:	f001 ff60 	bl	8009434 <USBD_static_free>
    pdev->pClassData = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007598:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e0e8      	b.n	800777e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d046      	beq.n	8007646 <USBD_HID_Setup+0xbe>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	f040 80d8 	bne.w	800776e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	3b02      	subs	r3, #2
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	d836      	bhi.n	8007636 <USBD_HID_Setup+0xae>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBD_HID_Setup+0x48>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007627 	.word	0x08007627
 80075d4:	08007607 	.word	0x08007607
 80075d8:	08007637 	.word	0x08007637
 80075dc:	08007637 	.word	0x08007637
 80075e0:	08007637 	.word	0x08007637
 80075e4:	08007637 	.word	0x08007637
 80075e8:	08007637 	.word	0x08007637
 80075ec:	08007637 	.word	0x08007637
 80075f0:	08007615 	.word	0x08007615
 80075f4:	080075f9 	.word	0x080075f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	885b      	ldrh	r3, [r3, #2]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	601a      	str	r2, [r3, #0]
          break;
 8007604:	e01e      	b.n	8007644 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fa4c 	bl	8008aaa <USBD_CtlSendData>
          break;
 8007612:	e017      	b.n	8007644 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	885b      	ldrh	r3, [r3, #2]
 8007618:	0a1b      	lsrs	r3, r3, #8
 800761a:	b29b      	uxth	r3, r3
 800761c:	b2db      	uxtb	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	605a      	str	r2, [r3, #4]
          break;
 8007624:	e00e      	b.n	8007644 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3304      	adds	r3, #4
 800762a:	2201      	movs	r2, #1
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fa3b 	bl	8008aaa <USBD_CtlSendData>
          break;
 8007634:	e006      	b.n	8007644 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f9c5 	bl	80089c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800763e:	2303      	movs	r3, #3
 8007640:	75fb      	strb	r3, [r7, #23]
          break;
 8007642:	bf00      	nop
      }
      break;
 8007644:	e09a      	b.n	800777c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b0b      	cmp	r3, #11
 800764c:	f200 8086 	bhi.w	800775c <USBD_HID_Setup+0x1d4>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <USBD_HID_Setup+0xd0>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	08007689 	.word	0x08007689
 800765c:	0800776b 	.word	0x0800776b
 8007660:	0800775d 	.word	0x0800775d
 8007664:	0800775d 	.word	0x0800775d
 8007668:	0800775d 	.word	0x0800775d
 800766c:	0800775d 	.word	0x0800775d
 8007670:	080076b3 	.word	0x080076b3
 8007674:	0800775d 	.word	0x0800775d
 8007678:	0800775d 	.word	0x0800775d
 800767c:	0800775d 	.word	0x0800775d
 8007680:	0800770b 	.word	0x0800770b
 8007684:	08007735 	.word	0x08007735
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b03      	cmp	r3, #3
 8007692:	d107      	bne.n	80076a4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007694:	f107 030a 	add.w	r3, r7, #10
 8007698:	2202      	movs	r2, #2
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fa04 	bl	8008aaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076a2:	e063      	b.n	800776c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 f98e 	bl	80089c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ac:	2303      	movs	r3, #3
 80076ae:	75fb      	strb	r3, [r7, #23]
          break;
 80076b0:	e05c      	b.n	800776c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b22      	cmp	r3, #34	; 0x22
 80076bc:	d108      	bne.n	80076d0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	2b4a      	cmp	r3, #74	; 0x4a
 80076c4:	bf28      	it	cs
 80076c6:	234a      	movcs	r3, #74	; 0x4a
 80076c8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80076ca:	4b2f      	ldr	r3, [pc, #188]	; (8007788 <USBD_HID_Setup+0x200>)
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	e015      	b.n	80076fc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	885b      	ldrh	r3, [r3, #2]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b21      	cmp	r3, #33	; 0x21
 80076da:	d108      	bne.n	80076ee <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80076dc:	4b2b      	ldr	r3, [pc, #172]	; (800778c <USBD_HID_Setup+0x204>)
 80076de:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	88db      	ldrh	r3, [r3, #6]
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	bf28      	it	cs
 80076e8:	2309      	movcs	r3, #9
 80076ea:	82bb      	strh	r3, [r7, #20]
 80076ec:	e006      	b.n	80076fc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f969 	bl	80089c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80076f6:	2303      	movs	r3, #3
 80076f8:	75fb      	strb	r3, [r7, #23]
            break;
 80076fa:	e037      	b.n	800776c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80076fc:	8abb      	ldrh	r3, [r7, #20]
 80076fe:	461a      	mov	r2, r3
 8007700:	6939      	ldr	r1, [r7, #16]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 f9d1 	bl	8008aaa <USBD_CtlSendData>
          break;
 8007708:	e030      	b.n	800776c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d107      	bne.n	8007726 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3308      	adds	r3, #8
 800771a:	2201      	movs	r2, #1
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f9c3 	bl	8008aaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007724:	e022      	b.n	800776c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 f94d 	bl	80089c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	75fb      	strb	r3, [r7, #23]
          break;
 8007732:	e01b      	b.n	800776c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b03      	cmp	r3, #3
 800773e:	d106      	bne.n	800774e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	885b      	ldrh	r3, [r3, #2]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	461a      	mov	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800774c:	e00e      	b.n	800776c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f939 	bl	80089c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	75fb      	strb	r3, [r7, #23]
          break;
 800775a:	e007      	b.n	800776c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f932 	bl	80089c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	75fb      	strb	r3, [r7, #23]
          break;
 8007768:	e000      	b.n	800776c <USBD_HID_Setup+0x1e4>
          break;
 800776a:	bf00      	nop
      }
      break;
 800776c:	e006      	b.n	800777c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f929 	bl	80089c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
      break;
 800777a:	bf00      	nop
  }

  return (uint8_t)ret;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200000c8 	.word	0x200000c8
 800778c:	200000b0 	.word	0x200000b0

08007790 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e013      	b.n	80077d8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d10c      	bne.n	80077d6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	7b1b      	ldrb	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2201      	movs	r2, #1
 80077c8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	2181      	movs	r1, #129	; 0x81
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fd90 	bl	80092f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2222      	movs	r2, #34	; 0x22
 80077ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	20000044 	.word	0x20000044

08007800 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2222      	movs	r2, #34	; 0x22
 800780c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20000068 	.word	0x20000068

08007820 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2222      	movs	r2, #34	; 0x22
 800782c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	2000008c 	.word	0x2000008c

08007840 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007852:	2200      	movs	r2, #0
 8007854:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	220a      	movs	r2, #10
 8007870:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007872:	4b03      	ldr	r3, [pc, #12]	; (8007880 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	200000bc 	.word	0x200000bc

08007884 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e01f      	b.n	80078dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f001 fbdb 	bl	800908c <USBD_LL_Init>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e016      	b.n	800792a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	f107 020e 	add.w	r2, r7, #14
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	4602      	mov	r2, r0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fbf2 	bl	8009124 <USBD_LL_Start>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
  }

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 ffba 	bl	8008954 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d01a      	beq.n	8007a3a <USBD_LL_SetupStage+0x72>
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d822      	bhi.n	8007a4e <USBD_LL_SetupStage+0x86>
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <USBD_LL_SetupStage+0x4a>
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d00a      	beq.n	8007a26 <USBD_LL_SetupStage+0x5e>
 8007a10:	e01d      	b.n	8007a4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa62 	bl	8007ee4 <USBD_StdDevReq>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
      break;
 8007a24:	e020      	b.n	8007a68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fac6 	bl	8007fc0 <USBD_StdItfReq>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
      break;
 8007a38:	e016      	b.n	8007a68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fb05 	bl	8008052 <USBD_StdEPReq>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e00c      	b.n	8007a68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fbc1 	bl	80091e4 <USBD_LL_StallEP>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	bf00      	nop
  }

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d138      	bne.n	8007af8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d14a      	bne.n	8007b2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d913      	bls.n	8007acc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	1ad2      	subs	r2, r2, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	bf28      	it	cs
 8007abe:	4613      	movcs	r3, r2
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 f81c 	bl	8008b02 <USBD_CtlContinueRx>
 8007aca:	e030      	b.n	8007b2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d10b      	bne.n	8007af0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 f817 	bl	8008b24 <USBD_CtlSendStatus>
 8007af6:	e01a      	b.n	8007b2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d114      	bne.n	8007b2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00e      	beq.n	8007b2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	4798      	blx	r3
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	e000      	b.n	8007b30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d16b      	bne.n	8007c24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3314      	adds	r3, #20
 8007b50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d156      	bne.n	8007c0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d914      	bls.n	8007b92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 ffae 	bl	8008ae0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f001 fbd4 	bl	8009338 <USBD_LL_PrepareReceive>
 8007b90:	e03b      	b.n	8007c0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d11c      	bne.n	8007bd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d316      	bcc.n	8007bd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d20f      	bcs.n	8007bd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 ff8f 	bl	8008ae0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f001 fbb1 	bl	8009338 <USBD_LL_PrepareReceive>
 8007bd6:	e018      	b.n	8007c0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d10b      	bne.n	8007bfc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bfc:	2180      	movs	r1, #128	; 0x80
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f001 faf0 	bl	80091e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 ffa0 	bl	8008b4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d122      	bne.n	8007c5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fe98 	bl	800794a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c22:	e01a      	b.n	8007c5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d114      	bne.n	8007c5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00e      	beq.n	8007c5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	7afa      	ldrb	r2, [r7, #11]
 8007c46:	4611      	mov	r1, r2
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	4798      	blx	r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	e000      	b.n	8007c5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e02f      	b.n	8007cf8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6852      	ldr	r2, [r2, #4]
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fa46 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2240      	movs	r2, #64	; 0x40
 8007cda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cde:	2340      	movs	r3, #64	; 0x40
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2180      	movs	r1, #128	; 0x80
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fa38 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2240      	movs	r2, #64	; 0x40
 8007cf4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2204      	movs	r2, #4
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d106      	bne.n	8007d6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e012      	b.n	8007db8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d10b      	bne.n	8007db6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e014      	b.n	8007e04 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d10d      	bne.n	8007e02 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e014      	b.n	8007e50 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d10d      	bne.n	8007e4e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6852      	ldr	r2, [r2, #4]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	4611      	mov	r1, r2
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
  }

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b087      	sub	sp, #28
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ec4:	8a3b      	ldrh	r3, [r7, #16]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b21a      	sxth	r2, r3
 8007eca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	b21b      	sxth	r3, r3
 8007ed2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
	...

08007ee4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d005      	beq.n	8007f0a <USBD_StdDevReq+0x26>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d853      	bhi.n	8007faa <USBD_StdDevReq+0xc6>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <USBD_StdDevReq+0x3a>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d14f      	bne.n	8007faa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e04a      	b.n	8007fb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d83b      	bhi.n	8007f9e <USBD_StdDevReq+0xba>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <USBD_StdDevReq+0x48>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007f95 	.word	0x08007f95
 8007f34:	08007f9f 	.word	0x08007f9f
 8007f38:	08007f8b 	.word	0x08007f8b
 8007f3c:	08007f9f 	.word	0x08007f9f
 8007f40:	08007f5f 	.word	0x08007f5f
 8007f44:	08007f55 	.word	0x08007f55
 8007f48:	08007f9f 	.word	0x08007f9f
 8007f4c:	08007f77 	.word	0x08007f77
 8007f50:	08007f69 	.word	0x08007f69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9de 	bl	8008318 <USBD_GetDescriptor>
          break;
 8007f5c:	e024      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fb6d 	bl	8008640 <USBD_SetAddress>
          break;
 8007f66:	e01f      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fbac 	bl	80086c8 <USBD_SetConfig>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
          break;
 8007f74:	e018      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fc4b 	bl	8008814 <USBD_GetConfig>
          break;
 8007f7e:	e013      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc7c 	bl	8008880 <USBD_GetStatus>
          break;
 8007f88:	e00e      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fcab 	bl	80088e8 <USBD_SetFeature>
          break;
 8007f92:	e009      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fcba 	bl	8008910 <USBD_ClrFeature>
          break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fd11 	bl	80089c8 <USBD_CtlError>
          break;
 8007fa6:	bf00      	nop
      }
      break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fd0b 	bl	80089c8 <USBD_CtlError>
      break;
 8007fb2:	bf00      	nop
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop

08007fc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdItfReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d82f      	bhi.n	800803e <USBD_StdItfReq+0x7e>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <USBD_StdItfReq+0x26>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d12b      	bne.n	800803e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d81d      	bhi.n	8008030 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	889b      	ldrh	r3, [r3, #4]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d813      	bhi.n	8008026 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	88db      	ldrh	r3, [r3, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d110      	bne.n	800803a <USBD_StdItfReq+0x7a>
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fd80 	bl	8008b24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008024:	e009      	b.n	800803a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fccd 	bl	80089c8 <USBD_CtlError>
          break;
 800802e:	e004      	b.n	800803a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fcc8 	bl	80089c8 <USBD_CtlError>
          break;
 8008038:	e000      	b.n	800803c <USBD_StdItfReq+0x7c>
          break;
 800803a:	bf00      	nop
      }
      break;
 800803c:	e004      	b.n	8008048 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fcc1 	bl	80089c8 <USBD_CtlError>
      break;
 8008046:	bf00      	nop
  }

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	889b      	ldrh	r3, [r3, #4]
 8008064:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d007      	beq.n	8008082 <USBD_StdEPReq+0x30>
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	f200 8145 	bhi.w	8008302 <USBD_StdEPReq+0x2b0>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <USBD_StdEPReq+0x44>
 800807c:	2b20      	cmp	r3, #32
 800807e:	f040 8140 	bne.w	8008302 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e13a      	b.n	800830c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d007      	beq.n	80080ae <USBD_StdEPReq+0x5c>
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f300 8129 	bgt.w	80082f6 <USBD_StdEPReq+0x2a4>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d07f      	beq.n	80081a8 <USBD_StdEPReq+0x156>
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d03c      	beq.n	8008126 <USBD_StdEPReq+0xd4>
 80080ac:	e123      	b.n	80082f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <USBD_StdEPReq+0x6e>
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d016      	beq.n	80080ec <USBD_StdEPReq+0x9a>
 80080be:	e02c      	b.n	800811a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <USBD_StdEPReq+0x90>
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b80      	cmp	r3, #128	; 0x80
 80080ca:	d00a      	beq.n	80080e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 f887 	bl	80091e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d6:	2180      	movs	r1, #128	; 0x80
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f883 	bl	80091e4 <USBD_LL_StallEP>
 80080de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080e0:	e020      	b.n	8008124 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc6f 	bl	80089c8 <USBD_CtlError>
              break;
 80080ea:	e01b      	b.n	8008124 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	885b      	ldrh	r3, [r3, #2]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10e      	bne.n	8008112 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00b      	beq.n	8008112 <USBD_StdEPReq+0xc0>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d008      	beq.n	8008112 <USBD_StdEPReq+0xc0>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	88db      	ldrh	r3, [r3, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f869 	bl	80091e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fd06 	bl	8008b24 <USBD_CtlSendStatus>

              break;
 8008118:	e004      	b.n	8008124 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fc53 	bl	80089c8 <USBD_CtlError>
              break;
 8008122:	bf00      	nop
          }
          break;
 8008124:	e0ec      	b.n	8008300 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d002      	beq.n	8008138 <USBD_StdEPReq+0xe6>
 8008132:	2b03      	cmp	r3, #3
 8008134:	d016      	beq.n	8008164 <USBD_StdEPReq+0x112>
 8008136:	e030      	b.n	800819a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <USBD_StdEPReq+0x108>
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d00a      	beq.n	800815a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 f84b 	bl	80091e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800814e:	2180      	movs	r1, #128	; 0x80
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f847 	bl	80091e4 <USBD_LL_StallEP>
 8008156:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008158:	e025      	b.n	80081a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc33 	bl	80089c8 <USBD_CtlError>
              break;
 8008162:	e020      	b.n	80081a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	885b      	ldrh	r3, [r3, #2]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11b      	bne.n	80081a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 f851 	bl	8009222 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fccf 	bl	8008b24 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008198:	e004      	b.n	80081a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fc13 	bl	80089c8 <USBD_CtlError>
              break;
 80081a2:	e000      	b.n	80081a6 <USBD_StdEPReq+0x154>
              break;
 80081a4:	bf00      	nop
          }
          break;
 80081a6:	e0ab      	b.n	8008300 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d002      	beq.n	80081ba <USBD_StdEPReq+0x168>
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d032      	beq.n	800821e <USBD_StdEPReq+0x1cc>
 80081b8:	e097      	b.n	80082ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d007      	beq.n	80081d0 <USBD_StdEPReq+0x17e>
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d004      	beq.n	80081d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fbfd 	bl	80089c8 <USBD_CtlError>
                break;
 80081ce:	e091      	b.n	80082f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da0b      	bge.n	80081f0 <USBD_StdEPReq+0x19e>
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	3310      	adds	r3, #16
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	e00b      	b.n	8008208 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2202      	movs	r2, #2
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fc47 	bl	8008aaa <USBD_CtlSendData>
              break;
 800821c:	e06a      	b.n	80082f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800821e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	da11      	bge.n	800824a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	3324      	adds	r3, #36	; 0x24
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d117      	bne.n	8008270 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fbc0 	bl	80089c8 <USBD_CtlError>
                  break;
 8008248:	e054      	b.n	80082f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fbad 	bl	80089c8 <USBD_CtlError>
                  break;
 800826e:	e041      	b.n	80082f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008274:	2b00      	cmp	r3, #0
 8008276:	da0b      	bge.n	8008290 <USBD_StdEPReq+0x23e>
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	3310      	adds	r3, #16
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	3304      	adds	r3, #4
 800828e:	e00b      	b.n	80082a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	3304      	adds	r3, #4
 80082a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <USBD_StdEPReq+0x264>
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d103      	bne.n	80082be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	e00e      	b.n	80082dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 ffcc 	bl	8009260 <USBD_LL_IsStallEP>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e002      	b.n	80082dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2202      	movs	r2, #2
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fbe1 	bl	8008aaa <USBD_CtlSendData>
              break;
 80082e8:	e004      	b.n	80082f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fb6b 	bl	80089c8 <USBD_CtlError>
              break;
 80082f2:	bf00      	nop
          }
          break;
 80082f4:	e004      	b.n	8008300 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fb65 	bl	80089c8 <USBD_CtlError>
          break;
 80082fe:	bf00      	nop
      }
      break;
 8008300:	e004      	b.n	800830c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fb5f 	bl	80089c8 <USBD_CtlError>
      break;
 800830a:	bf00      	nop
  }

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	2b0e      	cmp	r3, #14
 800833a:	f200 8152 	bhi.w	80085e2 <USBD_GetDescriptor+0x2ca>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <USBD_GetDescriptor+0x2c>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	080083b5 	.word	0x080083b5
 8008348:	080083cd 	.word	0x080083cd
 800834c:	0800840d 	.word	0x0800840d
 8008350:	080085e3 	.word	0x080085e3
 8008354:	080085e3 	.word	0x080085e3
 8008358:	08008583 	.word	0x08008583
 800835c:	080085af 	.word	0x080085af
 8008360:	080085e3 	.word	0x080085e3
 8008364:	080085e3 	.word	0x080085e3
 8008368:	080085e3 	.word	0x080085e3
 800836c:	080085e3 	.word	0x080085e3
 8008370:	080085e3 	.word	0x080085e3
 8008374:	080085e3 	.word	0x080085e3
 8008378:	080085e3 	.word	0x080085e3
 800837c:	08008381 	.word	0x08008381
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7c12      	ldrb	r2, [r2, #16]
 8008398:	f107 0108 	add.w	r1, r7, #8
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a2:	e126      	b.n	80085f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fb0e 	bl	80089c8 <USBD_CtlError>
        err++;
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	3301      	adds	r3, #1
 80083b0:	72fb      	strb	r3, [r7, #11]
      break;
 80083b2:	e11e      	b.n	80085f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
      break;
 80083ca:	e112      	b.n	80085f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	7c1b      	ldrb	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10d      	bne.n	80083f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f107 0208 	add.w	r2, r7, #8
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	2202      	movs	r2, #2
 80083ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083ee:	e100      	b.n	80085f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f107 0208 	add.w	r2, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	2202      	movs	r2, #2
 8008408:	701a      	strb	r2, [r3, #0]
      break;
 800840a:	e0f2      	b.n	80085f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	885b      	ldrh	r3, [r3, #2]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b05      	cmp	r3, #5
 8008414:	f200 80ac 	bhi.w	8008570 <USBD_GetDescriptor+0x258>
 8008418:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <USBD_GetDescriptor+0x108>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008439 	.word	0x08008439
 8008424:	0800846d 	.word	0x0800846d
 8008428:	080084a1 	.word	0x080084a1
 800842c:	080084d5 	.word	0x080084d5
 8008430:	08008509 	.word	0x08008509
 8008434:	0800853d 	.word	0x0800853d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845a:	e091      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fab2 	bl	80089c8 <USBD_CtlError>
            err++;
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	3301      	adds	r3, #1
 8008468:	72fb      	strb	r3, [r7, #11]
          break;
 800846a:	e089      	b.n	8008580 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7c12      	ldrb	r2, [r2, #16]
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848e:	e077      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fa98 	bl	80089c8 <USBD_CtlError>
            err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
          break;
 800849e:	e06f      	b.n	8008580 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7c12      	ldrb	r2, [r2, #16]
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c2:	e05d      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa7e 	bl	80089c8 <USBD_CtlError>
            err++;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	3301      	adds	r3, #1
 80084d0:	72fb      	strb	r3, [r7, #11]
          break;
 80084d2:	e055      	b.n	8008580 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7c12      	ldrb	r2, [r2, #16]
 80084ec:	f107 0108 	add.w	r1, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f6:	e043      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa64 	bl	80089c8 <USBD_CtlError>
            err++;
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	3301      	adds	r3, #1
 8008504:	72fb      	strb	r3, [r7, #11]
          break;
 8008506:	e03b      	b.n	8008580 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852a:	e029      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa4a 	bl	80089c8 <USBD_CtlError>
            err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
          break;
 800853a:	e021      	b.n	8008580 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855e:	e00f      	b.n	8008580 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa30 	bl	80089c8 <USBD_CtlError>
            err++;
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	3301      	adds	r3, #1
 800856c:	72fb      	strb	r3, [r7, #11]
          break;
 800856e:	e007      	b.n	8008580 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa28 	bl	80089c8 <USBD_CtlError>
          err++;
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	3301      	adds	r3, #1
 800857c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800857e:	bf00      	nop
      }
      break;
 8008580:	e037      	b.n	80085f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7c1b      	ldrb	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	f107 0208 	add.w	r2, r7, #8
 8008596:	4610      	mov	r0, r2
 8008598:	4798      	blx	r3
 800859a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800859c:	e029      	b.n	80085f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa11 	bl	80089c8 <USBD_CtlError>
        err++;
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	3301      	adds	r3, #1
 80085aa:	72fb      	strb	r3, [r7, #11]
      break;
 80085ac:	e021      	b.n	80085f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7c1b      	ldrb	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10d      	bne.n	80085d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f107 0208 	add.w	r2, r7, #8
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
 80085c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3301      	adds	r3, #1
 80085cc:	2207      	movs	r2, #7
 80085ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085d0:	e00f      	b.n	80085f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9f7 	bl	80089c8 <USBD_CtlError>
        err++;
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	3301      	adds	r3, #1
 80085de:	72fb      	strb	r3, [r7, #11]
      break;
 80085e0:	e007      	b.n	80085f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9ef 	bl	80089c8 <USBD_CtlError>
      err++;
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	3301      	adds	r3, #1
 80085ee:	72fb      	strb	r3, [r7, #11]
      break;
 80085f0:	bf00      	nop
  }

  if (err != 0U)
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11e      	bne.n	8008636 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	88db      	ldrh	r3, [r3, #6]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d016      	beq.n	800862e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008600:	893b      	ldrh	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88da      	ldrh	r2, [r3, #6]
 800860a:	893b      	ldrh	r3, [r7, #8]
 800860c:	4293      	cmp	r3, r2
 800860e:	bf28      	it	cs
 8008610:	4613      	movcs	r3, r2
 8008612:	b29b      	uxth	r3, r3
 8008614:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008616:	893b      	ldrh	r3, [r7, #8]
 8008618:	461a      	mov	r2, r3
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fa44 	bl	8008aaa <USBD_CtlSendData>
 8008622:	e009      	b.n	8008638 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9ce 	bl	80089c8 <USBD_CtlError>
 800862c:	e004      	b.n	8008638 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa78 	bl	8008b24 <USBD_CtlSendStatus>
 8008634:	e000      	b.n	8008638 <USBD_GetDescriptor+0x320>
    return;
 8008636:	bf00      	nop
  }
}
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop

08008640 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d131      	bne.n	80086b6 <USBD_SetAddress+0x76>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d12d      	bne.n	80086b6 <USBD_SetAddress+0x76>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	885b      	ldrh	r3, [r3, #2]
 800865e:	2b7f      	cmp	r3, #127	; 0x7f
 8008660:	d829      	bhi.n	80086b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b03      	cmp	r3, #3
 8008678:	d104      	bne.n	8008684 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9a3 	bl	80089c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008682:	e01d      	b.n	80086c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7bfa      	ldrb	r2, [r7, #15]
 8008688:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fe11 	bl	80092b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa44 	bl	8008b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	e009      	b.n	80086c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086b4:	e004      	b.n	80086c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f985 	bl	80089c8 <USBD_CtlError>
  }
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	4b4c      	ldr	r3, [pc, #304]	; (8008810 <USBD_SetConfig+0x148>)
 80086de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086e0:	4b4b      	ldr	r3, [pc, #300]	; (8008810 <USBD_SetConfig+0x148>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d905      	bls.n	80086f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f96c 	bl	80089c8 <USBD_CtlError>
    return USBD_FAIL;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e088      	b.n	8008806 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d002      	beq.n	8008706 <USBD_SetConfig+0x3e>
 8008700:	2b03      	cmp	r3, #3
 8008702:	d025      	beq.n	8008750 <USBD_SetConfig+0x88>
 8008704:	e071      	b.n	80087ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008706:	4b42      	ldr	r3, [pc, #264]	; (8008810 <USBD_SetConfig+0x148>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01c      	beq.n	8008748 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800870e:	4b40      	ldr	r3, [pc, #256]	; (8008810 <USBD_SetConfig+0x148>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008718:	4b3d      	ldr	r3, [pc, #244]	; (8008810 <USBD_SetConfig+0x148>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff f91e 	bl	8007960 <USBD_SetClassConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f949 	bl	80089c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008736:	e065      	b.n	8008804 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f9f3 	bl	8008b24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2203      	movs	r2, #3
 8008742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008746:	e05d      	b.n	8008804 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f9eb 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 800874e:	e059      	b.n	8008804 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008750:	4b2f      	ldr	r3, [pc, #188]	; (8008810 <USBD_SetConfig+0x148>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d112      	bne.n	800877e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008760:	4b2b      	ldr	r3, [pc, #172]	; (8008810 <USBD_SetConfig+0x148>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800876a:	4b29      	ldr	r3, [pc, #164]	; (8008810 <USBD_SetConfig+0x148>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff f911 	bl	8007998 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9d4 	bl	8008b24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800877c:	e042      	b.n	8008804 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <USBD_SetConfig+0x148>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d02a      	beq.n	80087e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff f8ff 	bl	8007998 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800879a:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <USBD_SetConfig+0x148>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087a4:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <USBD_SetConfig+0x148>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff f8d8 	bl	8007960 <USBD_SetClassConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00f      	beq.n	80087da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f903 	bl	80089c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff f8e4 	bl	8007998 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087d8:	e014      	b.n	8008804 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f9a2 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 80087e0:	e010      	b.n	8008804 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f99e 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 80087e8:	e00c      	b.n	8008804 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8eb 	bl	80089c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <USBD_SetConfig+0x148>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff f8cd 	bl	8007998 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087fe:	2303      	movs	r3, #3
 8008800:	73fb      	strb	r3, [r7, #15]
      break;
 8008802:	bf00      	nop
  }

  return ret;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000658 	.word	0x20000658

08008814 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d004      	beq.n	8008830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f8cd 	bl	80089c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800882e:	e023      	b.n	8008878 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	dc02      	bgt.n	8008842 <USBD_GetConfig+0x2e>
 800883c:	2b00      	cmp	r3, #0
 800883e:	dc03      	bgt.n	8008848 <USBD_GetConfig+0x34>
 8008840:	e015      	b.n	800886e <USBD_GetConfig+0x5a>
 8008842:	2b03      	cmp	r3, #3
 8008844:	d00b      	beq.n	800885e <USBD_GetConfig+0x4a>
 8008846:	e012      	b.n	800886e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3308      	adds	r3, #8
 8008852:	2201      	movs	r2, #1
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f927 	bl	8008aaa <USBD_CtlSendData>
        break;
 800885c:	e00c      	b.n	8008878 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	2201      	movs	r2, #1
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f91f 	bl	8008aaa <USBD_CtlSendData>
        break;
 800886c:	e004      	b.n	8008878 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f8a9 	bl	80089c8 <USBD_CtlError>
        break;
 8008876:	bf00      	nop
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	b2db      	uxtb	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	2b02      	cmp	r3, #2
 8008896:	d81e      	bhi.n	80088d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	88db      	ldrh	r3, [r3, #6]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d004      	beq.n	80088aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f890 	bl	80089c8 <USBD_CtlError>
        break;
 80088a8:	e01a      	b.n	80088e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f043 0202 	orr.w	r2, r3, #2
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	330c      	adds	r3, #12
 80088ca:	2202      	movs	r2, #2
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f8eb 	bl	8008aaa <USBD_CtlSendData>
      break;
 80088d4:	e004      	b.n	80088e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f875 	bl	80089c8 <USBD_CtlError>
      break;
 80088de:	bf00      	nop
  }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d106      	bne.n	8008908 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f90e 	bl	8008b24 <USBD_CtlSendStatus>
  }
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	2b02      	cmp	r3, #2
 8008926:	d80b      	bhi.n	8008940 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10c      	bne.n	800894a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f8f3 	bl	8008b24 <USBD_CtlSendStatus>
      }
      break;
 800893e:	e004      	b.n	800894a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f840 	bl	80089c8 <USBD_CtlError>
      break;
 8008948:	e000      	b.n	800894c <USBD_ClrFeature+0x3c>
      break;
 800894a:	bf00      	nop
  }
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	781a      	ldrb	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3301      	adds	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff fa91 	bl	8007ea6 <SWAPBYTE>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7ff fa84 	bl	8007ea6 <SWAPBYTE>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7ff fa77 	bl	8007ea6 <SWAPBYTE>
 80089b8:	4603      	mov	r3, r0
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	80da      	strh	r2, [r3, #6]
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc05 	bl	80091e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc01 	bl	80091e4 <USBD_LL_StallEP>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d036      	beq.n	8008a6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a04:	6938      	ldr	r0, [r7, #16]
 8008a06:	f000 f836 	bl	8008a76 <USBD_GetLen>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	7812      	ldrb	r2, [r2, #0]
 8008a22:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	3301      	adds	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4413      	add	r3, r2
 8008a30:	2203      	movs	r2, #3
 8008a32:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	3301      	adds	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a3a:	e013      	b.n	8008a64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	7812      	ldrb	r2, [r2, #0]
 8008a46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
    idx++;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	3301      	adds	r3, #1
 8008a52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	4413      	add	r3, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	3301      	adds	r3, #1
 8008a62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e7      	bne.n	8008a3c <USBD_GetString+0x52>
 8008a6c:	e000      	b.n	8008a70 <USBD_GetString+0x86>
    return;
 8008a6e:	bf00      	nop
  }
}
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a86:	e005      	b.n	8008a94 <USBD_GetLen+0x1e>
  {
    len++;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f5      	bne.n	8008a88 <USBD_GetLen+0x12>
  }

  return len;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	2100      	movs	r1, #0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fc10 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	2100      	movs	r1, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fbff 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fc0f 	bl	8009338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fbdb 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2205      	movs	r2, #5
 8008b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbe9 	bl	8009338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b74:	2200      	movs	r2, #0
 8008b76:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <MX_USB_DEVICE_Init+0x40>)
 8008b78:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <MX_USB_DEVICE_Init+0x44>)
 8008b7a:	f7fe fe83 	bl	8007884 <USBD_Init>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b84:	f7f8 fcfa 	bl	800157c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008b88:	490b      	ldr	r1, [pc, #44]	; (8008bb8 <MX_USB_DEVICE_Init+0x48>)
 8008b8a:	480a      	ldr	r0, [pc, #40]	; (8008bb4 <MX_USB_DEVICE_Init+0x44>)
 8008b8c:	f7fe feaa 	bl	80078e4 <USBD_RegisterClass>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b96:	f7f8 fcf1 	bl	800157c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b9a:	4806      	ldr	r0, [pc, #24]	; (8008bb4 <MX_USB_DEVICE_Init+0x44>)
 8008b9c:	f7fe fec9 	bl	8007932 <USBD_Start>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008ba6:	f7f8 fce9 	bl	800157c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000114 	.word	0x20000114
 8008bb4:	2000067c 	.word	0x2000067c
 8008bb8:	2000000c 	.word	0x2000000c

08008bbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2212      	movs	r2, #18
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000134 	.word	0x20000134

08008be0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000154 	.word	0x20000154

08008c04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c1a:	4808      	ldr	r0, [pc, #32]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c1c:	f7ff fee5 	bl	80089ea <USBD_GetString>
 8008c20:	e004      	b.n	8008c2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4904      	ldr	r1, [pc, #16]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c28:	f7ff fedf 	bl	80089ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000094c 	.word	0x2000094c
 8008c3c:	0800f874 	.word	0x0800f874

08008c40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4904      	ldr	r1, [pc, #16]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c52:	f7ff feca 	bl	80089ea <USBD_GetString>
  return USBD_StrDesc;
 8008c56:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	2000094c 	.word	0x2000094c
 8008c64:	0800f88c 	.word	0x0800f88c

08008c68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	221a      	movs	r2, #26
 8008c78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c7a:	f000 f855 	bl	8008d28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c7e:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000158 	.word	0x20000158

08008c8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ca4:	f7ff fea1 	bl	80089ea <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb0:	f7ff fe9b 	bl	80089ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	2000094c 	.word	0x2000094c
 8008cc4:	0800f8a0 	.word	0x0800f8a0

08008cc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	4907      	ldr	r1, [pc, #28]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cde:	4808      	ldr	r0, [pc, #32]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ce0:	f7ff fe83 	bl	80089ea <USBD_GetString>
 8008ce4:	e004      	b.n	8008cf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4904      	ldr	r1, [pc, #16]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cec:	f7ff fe7d 	bl	80089ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf0:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	2000094c 	.word	0x2000094c
 8008d00:	0800f8ac 	.word	0x0800f8ac

08008d04 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	220c      	movs	r2, #12
 8008d14:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008d16:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20000148 	.word	0x20000148

08008d28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <Get_SerialNum+0x44>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d34:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <Get_SerialNum+0x48>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <Get_SerialNum+0x4c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d4e:	2208      	movs	r2, #8
 8008d50:	4909      	ldr	r1, [pc, #36]	; (8008d78 <Get_SerialNum+0x50>)
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f814 	bl	8008d80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d58:	2204      	movs	r2, #4
 8008d5a:	4908      	ldr	r1, [pc, #32]	; (8008d7c <Get_SerialNum+0x54>)
 8008d5c:	68b8      	ldr	r0, [r7, #8]
 8008d5e:	f000 f80f 	bl	8008d80 <IntToUnicode>
  }
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	1fff7a10 	.word	0x1fff7a10
 8008d70:	1fff7a14 	.word	0x1fff7a14
 8008d74:	1fff7a18 	.word	0x1fff7a18
 8008d78:	2000015a 	.word	0x2000015a
 8008d7c:	2000016a 	.word	0x2000016a

08008d80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
 8008d96:	e027      	b.n	8008de8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0f1b      	lsrs	r3, r3, #28
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	d80b      	bhi.n	8008db8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	0f1b      	lsrs	r3, r3, #28
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4619      	mov	r1, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	440b      	add	r3, r1
 8008db0:	3230      	adds	r2, #48	; 0x30
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e00a      	b.n	8008dce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	0f1b      	lsrs	r3, r3, #28
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	440b      	add	r3, r1
 8008dc8:	3237      	adds	r2, #55	; 0x37
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	3301      	adds	r3, #1
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	4413      	add	r3, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	3301      	adds	r3, #1
 8008de6:	75fb      	strb	r3, [r7, #23]
 8008de8:	7dfa      	ldrb	r2, [r7, #23]
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d3d3      	bcc.n	8008d98 <IntToUnicode+0x18>
  }
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e08:	f107 0314 	add.w	r3, r7, #20
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	609a      	str	r2, [r3, #8]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e20:	d13a      	bne.n	8008e98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	4a1d      	ldr	r2, [pc, #116]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	6313      	str	r3, [r2, #48]	; 0x30
 8008e32:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e44:	2302      	movs	r3, #2
 8008e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e50:	230a      	movs	r3, #10
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4812      	ldr	r0, [pc, #72]	; (8008ea4 <HAL_PCD_MspInit+0xa4>)
 8008e5c:	f7f9 f82c 	bl	8001eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e60:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e64:	4a0e      	ldr	r2, [pc, #56]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6a:	6353      	str	r3, [r2, #52]	; 0x34
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e74:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_PCD_MspInit+0xa0>)
 8008e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	2043      	movs	r0, #67	; 0x43
 8008e8e:	f7f8 ffdc 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e92:	2043      	movs	r0, #67	; 0x43
 8008e94:	f7f8 fff5 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3728      	adds	r7, #40	; 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40023800 	.word	0x40023800
 8008ea4:	40020000 	.word	0x40020000

08008ea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7fe fd82 	bl	80079c8 <USBD_LL_SetupStage>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	440b      	add	r3, r1
 8008eec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f7fe fdbc 	bl	8007a72 <USBD_LL_DataOutStage>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	3348      	adds	r3, #72	; 0x48
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f7fe fe05 	bl	8007b38 <USBD_LL_DataInStage>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe ff19 	bl	8007d7c <USBD_LL_SOF>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
 8008f6a:	e008      	b.n	8008f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d102      	bne.n	8008f7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
 8008f78:	e001      	b.n	8008f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f7a:	f7f8 faff 	bl	800157c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f84:	7bfa      	ldrb	r2, [r7, #15]
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe feb9 	bl	8007d00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe fe65 	bl	8007c64 <USBD_LL_Reset>
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe feb4 	bl	8007d20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <HAL_PCD_SuspendCallback+0x48>)
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	4a03      	ldr	r2, [pc, #12]	; (8008fec <HAL_PCD_SuspendCallback+0x48>)
 8008fde:	f043 0306 	orr.w	r3, r3, #6
 8008fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fea4 	bl	8007d4c <USBD_LL_Resume>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fef2 	bl	8007e0c <USBD_LL_IsoOUTIncomplete>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009042:	78fa      	ldrb	r2, [r7, #3]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe feba 	bl	8007dc0 <USBD_LL_IsoINIncomplete>
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fef8 	bl	8007e58 <USBD_LL_DevConnected>
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fef5 	bl	8007e6e <USBD_LL_DevDisconnected>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d13c      	bne.n	8009116 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800909c:	4a20      	ldr	r2, [pc, #128]	; (8009120 <USBD_LL_Init+0x94>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1e      	ldr	r2, [pc, #120]	; (8009120 <USBD_LL_Init+0x94>)
 80090a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090ac:	4b1c      	ldr	r3, [pc, #112]	; (8009120 <USBD_LL_Init+0x94>)
 80090ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80090b4:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <USBD_LL_Init+0x94>)
 80090b6:	2206      	movs	r2, #6
 80090b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090ba:	4b19      	ldr	r3, [pc, #100]	; (8009120 <USBD_LL_Init+0x94>)
 80090bc:	2202      	movs	r2, #2
 80090be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <USBD_LL_Init+0x94>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090c6:	4b16      	ldr	r3, [pc, #88]	; (8009120 <USBD_LL_Init+0x94>)
 80090c8:	2202      	movs	r2, #2
 80090ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090cc:	4b14      	ldr	r3, [pc, #80]	; (8009120 <USBD_LL_Init+0x94>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <USBD_LL_Init+0x94>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090d8:	4b11      	ldr	r3, [pc, #68]	; (8009120 <USBD_LL_Init+0x94>)
 80090da:	2200      	movs	r2, #0
 80090dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090de:	4b10      	ldr	r3, [pc, #64]	; (8009120 <USBD_LL_Init+0x94>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090e4:	4b0e      	ldr	r3, [pc, #56]	; (8009120 <USBD_LL_Init+0x94>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090ea:	480d      	ldr	r0, [pc, #52]	; (8009120 <USBD_LL_Init+0x94>)
 80090ec:	f7f9 f8a9 	bl	8002242 <HAL_PCD_Init>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090f6:	f7f8 fa41 	bl	800157c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	4808      	ldr	r0, [pc, #32]	; (8009120 <USBD_LL_Init+0x94>)
 80090fe:	f7fa fa22 	bl	8003546 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009102:	2240      	movs	r2, #64	; 0x40
 8009104:	2100      	movs	r1, #0
 8009106:	4806      	ldr	r0, [pc, #24]	; (8009120 <USBD_LL_Init+0x94>)
 8009108:	f7fa f9d6 	bl	80034b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800910c:	2280      	movs	r2, #128	; 0x80
 800910e:	2101      	movs	r1, #1
 8009110:	4803      	ldr	r0, [pc, #12]	; (8009120 <USBD_LL_Init+0x94>)
 8009112:	f7fa f9d1 	bl	80034b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20000b4c 	.word	0x20000b4c

08009124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800913a:	4618      	mov	r0, r3
 800913c:	f7f9 f9a5 	bl	800248a <HAL_PCD_Start>
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f97e 	bl	8009448 <USBD_Get_USB_Status>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009150:	7bbb      	ldrb	r3, [r7, #14]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	461a      	mov	r2, r3
 8009168:	4603      	mov	r3, r0
 800916a:	70fb      	strb	r3, [r7, #3]
 800916c:	460b      	mov	r3, r1
 800916e:	70bb      	strb	r3, [r7, #2]
 8009170:	4613      	mov	r3, r2
 8009172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009182:	78bb      	ldrb	r3, [r7, #2]
 8009184:	883a      	ldrh	r2, [r7, #0]
 8009186:	78f9      	ldrb	r1, [r7, #3]
 8009188:	f7f9 fdb6 	bl	8002cf8 <HAL_PCD_EP_Open>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f958 	bl	8009448 <USBD_Get_USB_Status>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919c:	7bbb      	ldrb	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f9 fdff 	bl	8002dc8 <HAL_PCD_EP_Close>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f939 	bl	8009448 <USBD_Get_USB_Status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091da:	7bbb      	ldrb	r3, [r7, #14]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7f9 febf 	bl	8002f86 <HAL_PCD_EP_SetStall>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 f91a 	bl	8009448 <USBD_Get_USB_Status>
 8009214:	4603      	mov	r3, r0
 8009216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009218:	7bbb      	ldrb	r3, [r7, #14]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7f9 ff04 	bl	800304e <HAL_PCD_EP_ClrStall>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f8fb 	bl	8009448 <USBD_Get_USB_Status>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009256:	7bbb      	ldrb	r3, [r7, #14]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da0b      	bge.n	8009294 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	333e      	adds	r3, #62	; 0x3e
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	e00b      	b.n	80092ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f9 fce9 	bl	8002cae <HAL_PCD_SetAddress>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f8b0 	bl	8009448 <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	460b      	mov	r3, r1
 8009304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009314:	7af9      	ldrb	r1, [r7, #11]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f7f9 fdea 	bl	8002ef2 <HAL_PCD_EP_Transmit>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f88f 	bl	8009448 <USBD_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800932e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	460b      	mov	r3, r1
 8009346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009356:	7af9      	ldrb	r1, [r7, #11]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	f7f9 fd7e 	bl	8002e5c <HAL_PCD_EP_Receive>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f86e 	bl	8009448 <USBD_Get_USB_Status>
 800936c:	4603      	mov	r3, r0
 800936e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009370:	7dbb      	ldrb	r3, [r7, #22]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <HAL_PCDEx_LPM_Callback+0x18>
 800938e:	2b01      	cmp	r3, #1
 8009390:	d01f      	beq.n	80093d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009392:	e03b      	b.n	800940c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800939c:	f7f7 ff32 	bl	8001204 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <HAL_PCDEx_LPM_Callback+0x98>)
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	4a1b      	ldr	r2, [pc, #108]	; (8009414 <HAL_PCDEx_LPM_Callback+0x98>)
 80093a6:	f023 0306 	bic.w	r3, r3, #6
 80093aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fcbe 	bl	8007d4c <USBD_LL_Resume>
    break;
 80093d0:	e01c      	b.n	800940c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093e4:	f043 0301 	orr.w	r3, r3, #1
 80093e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fc95 	bl	8007d20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_PCDEx_LPM_Callback+0x98>)
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	4a04      	ldr	r2, [pc, #16]	; (8009414 <HAL_PCDEx_LPM_Callback+0x98>)
 8009404:	f043 0306 	orr.w	r3, r3, #6
 8009408:	6113      	str	r3, [r2, #16]
    break;
 800940a:	bf00      	nop
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009420:	4b03      	ldr	r3, [pc, #12]	; (8009430 <USBD_static_malloc+0x18>)
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	2000065c 	.word	0x2000065c

08009434 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]

}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d817      	bhi.n	800948c <USBD_Get_USB_Status+0x44>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <USBD_Get_USB_Status+0x1c>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009475 	.word	0x08009475
 8009468:	0800947b 	.word	0x0800947b
 800946c:	08009481 	.word	0x08009481
 8009470:	08009487 	.word	0x08009487
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
    break;
 8009478:	e00b      	b.n	8009492 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	73fb      	strb	r3, [r7, #15]
    break;
 800947e:	e008      	b.n	8009492 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
    break;
 8009484:	e005      	b.n	8009492 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009486:	2303      	movs	r3, #3
 8009488:	73fb      	strb	r3, [r7, #15]
    break;
 800948a:	e002      	b.n	8009492 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800948c:	2303      	movs	r3, #3
 800948e:	73fb      	strb	r3, [r7, #15]
    break;
 8009490:	bf00      	nop
  }
  return usb_status;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	461a      	mov	r2, r3
 80094ae:	4603      	mov	r3, r0
 80094b0:	70fb      	strb	r3, [r7, #3]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70bb      	strb	r3, [r7, #2]
 80094b6:	4613      	mov	r3, r2
 80094b8:	707b      	strb	r3, [r7, #1]
                return 0;
 80094ba:	2300      	movs	r3, #0
        }
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	70fb      	strb	r3, [r7, #3]
 80094da:	460b      	mov	r3, r1
 80094dc:	70bb      	strb	r3, [r7, #2]
 80094de:	4613      	mov	r3, r2
 80094e0:	707b      	strb	r3, [r7, #1]
                return 0;
 80094e2:	2300      	movs	r3, #0
        }
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
                return 0;
 80094f8:	2300      	movs	r3, #0
        }
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
                return 0;
 800950e:	2300      	movs	r3, #0
        }
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
                return 0;
 8009524:	2300      	movs	r3, #0
        }
 8009526:	4618      	mov	r0, r3
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
                return;
 800953e:	bf00      	nop
        } // Note used for hubs only!
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	807b      	strh	r3, [r7, #2]
 8009556:	4613      	mov	r3, r2
 8009558:	803b      	strh	r3, [r7, #0]
                return false;
 800955a:	2300      	movs	r3, #0
        }
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
                return false;
 8009574:	2300      	movs	r3, #0
        }
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
                return true;
 800958e:	2301      	movs	r3, #1
        }
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 80095a4:	687b      	ldr	r3, [r7, #4]
        };
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b0f      	cmp	r3, #15
 80095c4:	d812      	bhi.n	80095ec <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 80095c6:	7bfa      	ldrb	r2, [r7, #15]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	321e      	adds	r2, #30
 80095cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d107      	bne.n	80095e4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	321e      	adds	r2, #30
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e004      	b.n	80095ee <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	3301      	adds	r3, #1
 80095e8:	73fb      	strb	r3, [r7, #15]
 80095ea:	e7e9      	b.n	80095c0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 80095ec:	23d3      	movs	r3, #211	; 0xd3
        };
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	705a      	strb	r2, [r3, #1]
 800960e:	2200      	movs	r2, #0
 8009610:	709a      	strb	r2, [r3, #2]
 8009612:	2200      	movs	r2, #0
 8009614:	70da      	strb	r2, [r3, #3]
 8009616:	2200      	movs	r2, #0
 8009618:	711a      	strb	r2, [r3, #4]
        };
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	711a      	strb	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	715a      	strb	r2, [r3, #5]
        };
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	715a      	strb	r2, [r3, #5]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	795a      	ldrb	r2, [r3, #5]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	711a      	strb	r2, [r3, #4]
        };
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	711a      	strb	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	80da      	strh	r2, [r3, #6]
        };
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	601a      	str	r2, [r3, #0]
                countDown = 0;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	80da      	strh	r2, [r3, #6]
        };
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d009      	beq.n	80096fc <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 80096e8:	e029      	b.n	800973e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	887a      	ldrh	r2, [r7, #2]
 80096ee:	80da      	strh	r2, [r3, #6]
                                nStage++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	791b      	ldrb	r3, [r3, #4]
 80096f4:	3301      	adds	r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	88db      	ldrh	r3, [r3, #6]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d015      	beq.n	8009730 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d011      	beq.n	8009730 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	80da      	strh	r2, [r3, #6]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	e7e5      	b.n	80096fc <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	88db      	ldrh	r3, [r3, #6]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2b00      	cmp	r3, #0
 8009744:	bf0c      	ite	eq
 8009746:	2301      	moveq	r3, #1
 8009748:	2300      	movne	r3, #0
 800974a:	b2db      	uxtb	r3, r3
        };
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	4608      	mov	r0, r1
 8009762:	4611      	mov	r1, r2
 8009764:	461a      	mov	r2, r3
 8009766:	4603      	mov	r3, r0
 8009768:	70fb      	strb	r3, [r7, #3]
 800976a:	460b      	mov	r3, r1
 800976c:	70bb      	strb	r3, [r7, #2]
 800976e:	4613      	mov	r3, r2
 8009770:	707b      	strb	r3, [r7, #1]
        };
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	4a04      	ldr	r2, [pc, #16]	; (800979c <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	0800fa48 	.word	0x0800fa48

080097a0 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	4a04      	ldr	r2, [pc, #16]	; (80097bc <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	0800fa30 	.word	0x0800fa30

080097c0 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
                return bAddress;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	2be0      	cmp	r3, #224	; 0xe0
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
        };
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
 8009824:	4613      	mov	r3, r2
 8009826:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	f640 225c 	movw	r2, #2652	; 0xa5c
 800982e:	4293      	cmp	r3, r2
 8009830:	d104      	bne.n	800983c <_ZN3BTD8VIDPIDOKEtt+0x24>
 8009832:	883b      	ldrh	r3, [r7, #0]
 8009834:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009838:	4293      	cmp	r3, r2
 800983a:	d009      	beq.n	8009850 <_ZN3BTD8VIDPIDOKEtt+0x38>
 800983c:	887b      	ldrh	r3, [r7, #2]
 800983e:	f240 520d 	movw	r2, #1293	; 0x50d
 8009842:	4293      	cmp	r3, r2
 8009844:	d106      	bne.n	8009854 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 8009846:	883b      	ldrh	r3, [r7, #0]
 8009848:	f240 625a 	movw	r2, #1626	; 0x65a
 800984c:	4293      	cmp	r3, r2
 800984e:	d101      	bne.n	8009854 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 8009850:	2301      	movs	r3, #1
 8009852:	e02d      	b.n	80098b0 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7d1b      	ldrb	r3, [r3, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d113      	bne.n	8009884 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7d5b      	ldrb	r3, [r3, #21]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10f      	bne.n	8009884 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7d9b      	ldrb	r3, [r3, #22]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7ddb      	ldrb	r3, [r3, #23]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d107      	bne.n	8009884 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7e1b      	ldrb	r3, [r3, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d103      	bne.n	8009884 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	7e5b      	ldrb	r3, [r3, #25]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d014      	beq.n	80098ae <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 8009884:	887b      	ldrh	r3, [r7, #2]
 8009886:	f240 524c 	movw	r2, #1356	; 0x54c
 800988a:	4293      	cmp	r3, r2
 800988c:	d10f      	bne.n	80098ae <_ZN3BTD8VIDPIDOKEtt+0x96>
 800988e:	883b      	ldrh	r3, [r7, #0]
 8009890:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009894:	d009      	beq.n	80098aa <_ZN3BTD8VIDPIDOKEtt+0x92>
 8009896:	883b      	ldrh	r3, [r7, #0]
 8009898:	f240 422f 	movw	r2, #1071	; 0x42f
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <_ZN3BTD8VIDPIDOKEtt+0x92>
 80098a0:	883b      	ldrh	r3, [r7, #0]
 80098a2:	f240 32d5 	movw	r2, #981	; 0x3d5
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d101      	bne.n	80098ae <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e000      	b.n	80098b0 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 80098ae:	2300      	movs	r3, #0
        };
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff ff59 	bl	8009780 <_ZN15USBDeviceConfigC1Ev>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff ff64 	bl	80097a0 <_ZN17UsbConfigXtracterC1Ev>
 80098d8:	4a2b      	ldr	r2, [pc, #172]	; (8009988 <_ZN3BTDC1EP3USB+0xcc>)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	4a2b      	ldr	r2, [pc, #172]	; (800998c <_ZN3BTDC1EP3USB+0xd0>)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	64da      	str	r2, [r3, #76]	; 0x4c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	661a      	str	r2, [r3, #96]	; 0x60
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	2b03      	cmp	r3, #3
 8009948:	d80a      	bhi.n	8009960 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	3318      	adds	r3, #24
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	3301      	adds	r3, #1
 800995c:	73fb      	strb	r3, [r7, #15]
 800995e:	e7f1      	b.n	8009944 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fa7d 	bl	8009e60 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fe1b 	bl	80095b2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	0800f9f0 	.word	0x0800f9f0
 800998c:	0800fa24 	.word	0x0800fa24

08009990 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b08f      	sub	sp, #60	; 0x3c
 8009994:	af02      	add	r7, sp, #8
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4603      	mov	r3, r0
 80099a0:	70fb      	strb	r3, [r7, #3]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70bb      	strb	r3, [r7, #2]
 80099a6:	4613      	mov	r3, r2
 80099a8:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 80099aa:	2312      	movs	r3, #18
 80099ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa4e 	bl	8009e60 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fde7 	bl	800959c <_ZN3USB14GetAddressPoolEv>
 80099ce:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 80099da:	23d9      	movs	r3, #217	; 0xd9
 80099dc:	e087      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2100      	movs	r1, #0
 80099e6:	69f8      	ldr	r0, [r7, #28]
 80099e8:	4798      	blx	r3
 80099ea:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80099f2:	23d6      	movs	r3, #214	; 0xd6
 80099f4:	e07b      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 80099fe:	23d7      	movs	r3, #215	; 0xd7
 8009a00:	e075      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	787a      	ldrb	r2, [r7, #1]
 8009a16:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	2312      	movs	r3, #18
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	f005 fa13 	bl	800ee52 <_ZN3USB11getDevDescrEhhtPh>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	601a      	str	r2, [r3, #0]

        if(rcode)
 8009a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d146      	bne.n	8009ace <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3304      	adds	r3, #4
 8009a46:	681c      	ldr	r4, [r3, #0]
 8009a48:	78bb      	ldrb	r3, [r7, #2]
 8009a4a:	78f9      	ldrb	r1, [r7, #3]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	69f8      	ldr	r0, [r7, #28]
 8009a50:	47a0      	blx	r4
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8009a66:	23d4      	movs	r3, #212	; 0xd4
 8009a68:	e041      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	2b09      	cmp	r3, #9
 8009a70:	d017      	beq.n	8009aa2 <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	79da      	ldrb	r2, [r3, #7]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	7c5a      	ldrb	r2, [r3, #17]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	891b      	ldrh	r3, [r3, #8]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	895b      	ldrh	r3, [r3, #10]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 8009a9e:	23e0      	movs	r3, #224	; 0xe0
 8009aa0:	e025      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 8009aa2:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f005 fa6b 	bl	800ef8c <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009ab6:	23d1      	movs	r3, #209	; 0xd1
 8009ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
        return rcode;
 8009ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009acc:	e00f      	b.n	8009aee <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 8009ace:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 8009ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad4:	2b0d      	cmp	r3, #13
 8009ad6:	d002      	beq.n	8009ade <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 8009ad8:	23e1      	movs	r3, #225	; 0xe1
 8009ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
        return rcode;
 8009aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 8009aee:	4618      	mov	r0, r3
 8009af0:	3734      	adds	r7, #52	; 0x34
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd90      	pop	{r4, r7, pc}

08009af6 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b096      	sub	sp, #88	; 0x58
 8009afa:	af02      	add	r7, sp, #8
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	461a      	mov	r2, r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	70fb      	strb	r3, [r7, #3]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70bb      	strb	r3, [r7, #2]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009b16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fd38 	bl	800959c <_ZN3USB14GetAddressPoolEv>
 8009b2c:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b3e:	4798      	blx	r3
 8009b40:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 8009b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009b48:	23d6      	movs	r3, #214	; 0xd6
 8009b4a:	e185      	b.n	8009e58 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 8009b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b50:	f7f8 f87c 	bl	8001c4c <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2100      	movs	r1, #0
 8009b62:	f005 fa13 	bl	800ef8c <_ZN3USB7setAddrEhhh>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 8009b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 8009b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b76:	2200      	movs	r2, #0
 8009b78:	719a      	strb	r2, [r3, #6]
                goto Fail;
 8009b7a:	e165      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b7e:	2200      	movs	r2, #0
 8009b80:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009b8e:	4611      	mov	r1, r2
 8009b90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b92:	4798      	blx	r3
 8009b94:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 8009b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009b9c:	23d6      	movs	r3, #214	; 0xd6
 8009b9e:	e15b      	b.n	8009e58 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 8009ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba2:	787a      	ldrb	r2, [r7, #1]
 8009ba4:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3351      	adds	r3, #81	; 0x51
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f004 f8dc 	bl	800dd72 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 8009bc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 8128 	bne.w	8009e1a <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009bd0:	f240 524c 	movw	r2, #1356	; 0x54c
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d177      	bne.n	8009cc8 <_ZN3BTD4InitEhhb+0x1d2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009bde:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009be2:	d00d      	beq.n	8009c00 <_ZN3BTD4InitEhhb+0x10a>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009bea:	f240 422f 	movw	r2, #1071	; 0x42f
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d006      	beq.n	8009c00 <_ZN3BTD4InitEhhb+0x10a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009bf8:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d163      	bne.n	8009cc8 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 8009c00:	2064      	movs	r0, #100	; 0x64
 8009c02:	f7f8 f823 	bl	8001c4c <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009c16:	2301      	movs	r3, #1
 8009c18:	f005 f9e6 	bl	800efe8 <_ZN3USB7setConfEhhh>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 80f9 	bne.w	8009e1e <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d113      	bne.n	8009c5c <_ZN3BTD4InitEhhb+0x166>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7d5b      	ldrb	r3, [r3, #21]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10f      	bne.n	8009c5c <_ZN3BTD4InitEhhb+0x166>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	7d9b      	ldrb	r3, [r3, #22]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <_ZN3BTD4InitEhhb+0x166>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7ddb      	ldrb	r3, [r3, #23]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d107      	bne.n	8009c5c <_ZN3BTD4InitEhhb+0x166>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	7e1b      	ldrb	r3, [r3, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <_ZN3BTD4InitEhhb+0x166>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7e5b      	ldrb	r3, [r3, #25]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d019      	beq.n	8009c90 <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c62:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009c66:	d006      	beq.n	8009c76 <_ZN3BTD4InitEhhb+0x180>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009c6e:	f240 422f 	movw	r2, #1071	; 0x42f
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d106      	bne.n	8009c84 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 f8b0 	bl	800bde2 <_ZN3BTD9setBdaddrEPh>
 8009c82:	e005      	b.n	8009c90 <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3314      	adds	r3, #20
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f002 f8e9 	bl	800be62 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f005 f9a1 	bl	800efe8 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f005 f96a 	bl	800ef8c <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009cc4:	23d1      	movs	r3, #209	; 0xd1
 8009cc6:	e0c7      	b.n	8009e58 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009cce:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009cd2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d25e      	bcs.n	8009d98 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009ce0:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d106      	bne.n	8009cf6 <_ZN3BTD4InitEhhb+0x200>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009cee:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00d      	beq.n	8009d12 <_ZN3BTD4InitEhhb+0x21c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009cfc:	f240 520d 	movw	r2, #1293	; 0x50d
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d120      	bne.n	8009d46 <_ZN3BTD4InitEhhb+0x250>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009d0a:	f240 625a 	movw	r2, #1626	; 0x65a
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d119      	bne.n	8009d46 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	1d1a      	adds	r2, r3, #4
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f002 f8f3 	bl	800bf08 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d2c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d30:	f107 0308 	add.w	r3, r7, #8
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	4613      	mov	r3, r2
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f005 f8da 	bl	800eef2 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009d44:	e018      	b.n	8009d78 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	f107 0308 	add.w	r3, r7, #8
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f002 f927 	bl	800bfa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d60:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f005 f8c0 	bl	800eef2 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009d78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d150      	bne.n	8009e22 <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d805      	bhi.n	8009d96 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009d8a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009d8e:	3301      	adds	r3, #1
 8009d90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009d94:	e79b      	b.n	8009cce <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 8009d96:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d945      	bls.n	8009e2e <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3351      	adds	r3, #81	; 0x51
 8009db6:	f003 ffdc 	bl	800dd72 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009dc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d12e      	bne.n	8009e26 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009dde:	f005 f903 	bl	800efe8 <_ZN3USB7setConfEhhh>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009de8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11c      	bne.n	8009e2a <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2264      	movs	r2, #100	; 0x64
 8009df4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009e16:	2300      	movs	r3, #0
 8009e18:	e01e      	b.n	8009e58 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 8009e1a:	bf00      	nop
 8009e1c:	e014      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 8009e1e:	bf00      	nop
 8009e20:	e012      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 8009e22:	bf00      	nop
 8009e24:	e010      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 8009e26:	bf00      	nop
 8009e28:	e00e      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 8009e2a:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009e2c:	e00c      	b.n	8009e48 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 8009e2e:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f005 f8a5 	bl	800ef8c <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009e42:	23d1      	movs	r3, #209	; 0xd1
 8009e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
        return rcode;
 8009e54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3750      	adds	r7, #80	; 0x50
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d845      	bhi.n	8009efe <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009e72:	7bfa      	ldrb	r2, [r7, #15]
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	440b      	add	r3, r1
 8009e7e:	3351      	adds	r3, #81	; 0x51
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <_ZN3BTD10InitializeEv+0x2e>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e000      	b.n	8009e90 <_ZN3BTD10InitializeEv+0x30>
 8009e8e:	2008      	movs	r0, #8
 8009e90:	7bfa      	ldrb	r2, [r7, #15]
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	4613      	mov	r3, r2
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3352      	adds	r3, #82	; 0x52
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	440b      	add	r3, r1
 8009eae:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009eb2:	78d3      	ldrb	r3, [r2, #3]
 8009eb4:	f36f 0300 	bfc	r3, #0, #1
 8009eb8:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009eba:	7bfa      	ldrb	r2, [r7, #15]
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009eca:	78d3      	ldrb	r3, [r2, #3]
 8009ecc:	f36f 0341 	bfc	r3, #1, #1
 8009ed0:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <_ZN3BTD10InitializeEv+0x7c>
 8009ed8:	2101      	movs	r1, #1
 8009eda:	e000      	b.n	8009ede <_ZN3BTD10InitializeEv+0x7e>
 8009edc:	210f      	movs	r1, #15
 8009ede:	7bfa      	ldrb	r2, [r7, #15]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	4403      	add	r3, r0
 8009eea:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009eee:	78d3      	ldrb	r3, [r2, #3]
 8009ef0:	f361 0387 	bfi	r3, r1, #2, #6
 8009ef4:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
 8009efc:	e7b6      	b.n	8009e6c <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d81c      	bhi.n	8009f42 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d010      	beq.n	8009f3a <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	6859      	ldr	r1, [r3, #4]
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	3318      	adds	r3, #24
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4608      	mov	r0, r1
 8009f38:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e7df      	b.n	8009f02 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	461a      	mov	r2, r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	70fb      	strb	r3, [r7, #3]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70bb      	strb	r3, [r7, #2]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 8009fba:	787b      	ldrb	r3, [r7, #1]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d15d      	bne.n	800a07c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d114      	bne.n	8009ffe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	789b      	ldrb	r3, [r3, #2]
 8009fd8:	b25b      	sxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	da0f      	bge.n	8009ffe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 8009fe2:	7bfa      	ldrb	r2, [r7, #15]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4413      	add	r3, r2
 8009fec:	440b      	add	r3, r1
 8009fee:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009ff2:	78d3      	ldrb	r3, [r2, #3]
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	f361 0387 	bfi	r3, r1, #2, #6
 8009ffa:	70d3      	strb	r3, [r2, #3]
 8009ffc:	e00e      	b.n	800a01c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	78db      	ldrb	r3, [r3, #3]
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d13a      	bne.n	800a080 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	789b      	ldrb	r3, [r3, #2]
 800a00e:	b25b      	sxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	da01      	bge.n	800a018 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800a014:	2302      	movs	r3, #2
 800a016:	e000      	b.n	800a01a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800a018:	2303      	movs	r3, #3
 800a01a:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	789b      	ldrb	r3, [r3, #2]
 800a020:	7bfa      	ldrb	r2, [r7, #15]
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	b2d8      	uxtb	r0, r3
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	440b      	add	r3, r1
 800a032:	3351      	adds	r3, #81	; 0x51
 800a034:	4602      	mov	r2, r0
 800a036:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	889b      	ldrh	r3, [r3, #4]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	7bfa      	ldrb	r2, [r7, #15]
 800a040:	b2d8      	uxtb	r0, r3
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	4613      	mov	r3, r2
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	4413      	add	r3, r2
 800a04a:	440b      	add	r3, r1
 800a04c:	3352      	adds	r3, #82	; 0x52
 800a04e:	4602      	mov	r2, r0
 800a050:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	799b      	ldrb	r3, [r3, #6]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d204      	bcs.n	800a06a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	799a      	ldrb	r2, [r3, #6]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a070:	3301      	adds	r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800a07a:	e002      	b.n	800a082 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800a07c:	bf00      	nop
 800a07e:	e000      	b.n	800a082 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800a080:	bf00      	nop
}
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800a08c:	f1a0 0004 	sub.w	r0, r0, #4
 800a090:	f7ff bf86 	b.w	8009fa0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800a094 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff fedf 	bl	8009e60 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fa78 	bl	800959c <_ZN3USB14GetAddressPoolEv>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	3208      	adds	r2, #8
 800a0b2:	6812      	ldr	r2, [r2, #0]
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	4790      	blx	r2
        return 0;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800a0d6:	f083 0301 	eor.w	r3, r3, #1
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e01d      	b.n	800a120 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800a0e4:	f7f7 fda6 	bl	8001c34 <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	0fdb      	lsrs	r3, r3, #31
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800a0fa:	f7f7 fd9b 	bl	8001c34 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a106:	441a      	add	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f80b 	bl	800a128 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fb22 	bl	800a75c <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fe4b 	bl	800adb4 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800a128:	b5b0      	push	{r4, r5, r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3389      	adds	r3, #137	; 0x89
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a14e:	f107 050c 	add.w	r5, r7, #12
 800a152:	9201      	str	r2, [sp, #4]
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	462b      	mov	r3, r5
 800a158:	4622      	mov	r2, r4
 800a15a:	f003 ff72 	bl	800e042 <_ZN3USB10inTransferEhhPtPhh>
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <_ZN3BTD14HCI_event_taskEv+0x48>
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	f040 82f1 	bne.w	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a176:	3b01      	subs	r3, #1
 800a178:	2b35      	cmp	r3, #53	; 0x35
 800a17a:	f200 82ea 	bhi.w	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a365 	.word	0x0800a365
 800a188:	0800a3c5 	.word	0x0800a3c5
 800a18c:	0800a51d 	.word	0x0800a51d
 800a190:	0800a607 	.word	0x0800a607
 800a194:	0800a579 	.word	0x0800a579
 800a198:	0800a6c5 	.word	0x0800a6c5
 800a19c:	0800a5ab 	.word	0x0800a5ab
 800a1a0:	0800a73d 	.word	0x0800a73d
 800a1a4:	0800a73d 	.word	0x0800a73d
 800a1a8:	0800a753 	.word	0x0800a753
 800a1ac:	0800a753 	.word	0x0800a753
 800a1b0:	0800a73d 	.word	0x0800a73d
 800a1b4:	0800a73d 	.word	0x0800a73d
 800a1b8:	0800a25d 	.word	0x0800a25d
 800a1bc:	0800a73d 	.word	0x0800a73d
 800a1c0:	0800a753 	.word	0x0800a753
 800a1c4:	0800a753 	.word	0x0800a753
 800a1c8:	0800a73d 	.word	0x0800a73d
 800a1cc:	0800a73d 	.word	0x0800a73d
 800a1d0:	0800a753 	.word	0x0800a753
 800a1d4:	0800a753 	.word	0x0800a753
 800a1d8:	0800a693 	.word	0x0800a693
 800a1dc:	0800a6bd 	.word	0x0800a6bd
 800a1e0:	0800a73d 	.word	0x0800a73d
 800a1e4:	0800a73d 	.word	0x0800a73d
 800a1e8:	0800a73d 	.word	0x0800a73d
 800a1ec:	0800a73d 	.word	0x0800a73d
 800a1f0:	0800a753 	.word	0x0800a753
 800a1f4:	0800a753 	.word	0x0800a753
 800a1f8:	0800a753 	.word	0x0800a753
 800a1fc:	0800a753 	.word	0x0800a753
 800a200:	0800a73d 	.word	0x0800a73d
 800a204:	0800a753 	.word	0x0800a753
 800a208:	0800a753 	.word	0x0800a753
 800a20c:	0800a753 	.word	0x0800a753
 800a210:	0800a753 	.word	0x0800a753
 800a214:	0800a753 	.word	0x0800a753
 800a218:	0800a753 	.word	0x0800a753
 800a21c:	0800a753 	.word	0x0800a753
 800a220:	0800a753 	.word	0x0800a753
 800a224:	0800a753 	.word	0x0800a753
 800a228:	0800a753 	.word	0x0800a753
 800a22c:	0800a753 	.word	0x0800a753
 800a230:	0800a753 	.word	0x0800a753
 800a234:	0800a753 	.word	0x0800a753
 800a238:	0800a753 	.word	0x0800a753
 800a23c:	0800a753 	.word	0x0800a753
 800a240:	0800a753 	.word	0x0800a753
 800a244:	0800a72d 	.word	0x0800a72d
 800a248:	0800a73d 	.word	0x0800a73d
 800a24c:	0800a735 	.word	0x0800a735
 800a250:	0800a753 	.word	0x0800a753
 800a254:	0800a753 	.word	0x0800a753
 800a258:	0800a73d 	.word	0x0800a73d
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a262:	2b00      	cmp	r3, #0
 800a264:	f040 826c 	bne.w	800a740 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d114      	bne.n	800a2ae <_ZN3BTD14HCI_event_taskEv+0x186>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a28a:	2b10      	cmp	r3, #16
 800a28c:	d10f      	bne.n	800a2ae <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a2ac:	e059      	b.n	800a362 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d12a      	bne.n	800a30e <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2be:	2b10      	cmp	r3, #16
 800a2c0:	d125      	bne.n	800a30e <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a2c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d114      	bne.n	800a2fa <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10f      	bne.n	800a2fa <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a2f0:	e003      	b.n	800a2fa <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a30c:	e029      	b.n	800a362 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a314:	2b09      	cmp	r3, #9
 800a316:	f040 8213 	bne.w	800a740 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a320:	2b10      	cmp	r3, #16
 800a322:	f040 820d 	bne.w	800a740 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	2b05      	cmp	r3, #5
 800a32e:	d80e      	bhi.n	800a34e <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	1d9a      	adds	r2, r3, #6
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	440a      	add	r2, r1
 800a33a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	4413      	add	r3, r2
 800a342:	460a      	mov	r2, r1
 800a344:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	3301      	adds	r3, #1
 800a34a:	75fb      	strb	r3, [r7, #23]
 800a34c:	e7ed      	b.n	800a32a <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a354:	f043 0320 	orr.w	r3, r3, #32
 800a358:	b29a      	uxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a360:	e1ee      	b.n	800a740 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a362:	e1ed      	b.n	800a740 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d921      	bls.n	800a3b2 <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d017      	beq.n	800a3b2 <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	220a      	movs	r2, #10
 800a3ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a3c2:	e1c6      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 81ba 	beq.w	800a744 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75bb      	strb	r3, [r7, #22]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a3da:	7dba      	ldrb	r2, [r7, #22]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f080 81b1 	bcs.w	800a744 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	7dbb      	ldrb	r3, [r7, #22]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	0049      	lsls	r1, r1, #1
 800a3f2:	440b      	add	r3, r1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	757b      	strb	r3, [r7, #21]
 800a3fe:	7d7b      	ldrb	r3, [r7, #21]
 800a400:	2b02      	cmp	r3, #2
 800a402:	d811      	bhi.n	800a428 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a404:	7d7b      	ldrb	r3, [r7, #21]
 800a406:	1d1a      	adds	r2, r3, #4
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	441a      	add	r2, r3
 800a40c:	7d7b      	ldrb	r3, [r7, #21]
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	440a      	add	r2, r1
 800a412:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	4413      	add	r3, r2
 800a41a:	460a      	mov	r2, r1
 800a41c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a420:	7d7b      	ldrb	r3, [r7, #21]
 800a422:	3301      	adds	r3, #1
 800a424:	757b      	strb	r3, [r7, #21]
 800a426:	e7ea      	b.n	800a3fe <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d038      	beq.n	800a4a4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d133      	bne.n	800a4a4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a442:	2b05      	cmp	r3, #5
 800a444:	d12e      	bne.n	800a4a4 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a44c:	f003 030c 	and.w	r3, r3, #12
 800a450:	2b00      	cmp	r3, #0
 800a452:	d027      	beq.n	800a4a4 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a45c:	2300      	movs	r3, #0
 800a45e:	753b      	strb	r3, [r7, #20]
 800a460:	7d3b      	ldrb	r3, [r7, #20]
 800a462:	2b05      	cmp	r3, #5
 800a464:	d814      	bhi.n	800a490 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a466:	7d3b      	ldrb	r3, [r7, #20]
 800a468:	1cd9      	adds	r1, r3, #3
 800a46a:	7dba      	ldrb	r2, [r7, #22]
 800a46c:	4613      	mov	r3, r2
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	4413      	add	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	18ca      	adds	r2, r1, r3
 800a476:	7d3b      	ldrb	r3, [r7, #20]
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	440a      	add	r2, r1
 800a47c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	4413      	add	r3, r2
 800a484:	460a      	mov	r2, r1
 800a486:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a488:	7d3b      	ldrb	r3, [r7, #20]
 800a48a:	3301      	adds	r3, #1
 800a48c:	753b      	strb	r3, [r7, #20]
 800a48e:	e7e7      	b.n	800a460 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a4a2:	e03a      	b.n	800a51a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d031      	beq.n	800a512 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	2b05      	cmp	r3, #5
 800a4ba:	d12a      	bne.n	800a512 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a4c2:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d023      	beq.n	800a512 <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	74fb      	strb	r3, [r7, #19]
 800a4ce:	7cfb      	ldrb	r3, [r7, #19]
 800a4d0:	2b05      	cmp	r3, #5
 800a4d2:	d814      	bhi.n	800a4fe <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a4d4:	7cfb      	ldrb	r3, [r7, #19]
 800a4d6:	1cd9      	adds	r1, r3, #3
 800a4d8:	7dba      	ldrb	r2, [r7, #22]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4413      	add	r3, r2
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	18ca      	adds	r2, r1, r3
 800a4e4:	7cfb      	ldrb	r3, [r7, #19]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	460a      	mov	r2, r1
 800a4f4:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a4f6:	7cfb      	ldrb	r3, [r7, #19]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	74fb      	strb	r3, [r7, #19]
 800a4fc:	e7e7      	b.n	800a4ce <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a510:	e003      	b.n	800a51a <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a512:	7dbb      	ldrb	r3, [r7, #22]
 800a514:	3301      	adds	r3, #1
 800a516:	75bb      	strb	r3, [r7, #22]
 800a518:	e75c      	b.n	800a3d4 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a51a:	e113      	b.n	800a744 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a534:	2b00      	cmp	r3, #0
 800a536:	d11a      	bne.n	800a56e <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a53e:	b21a      	sxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	b21b      	sxth	r3, r3
 800a54a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a54e:	b21b      	sxth	r3, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	b21b      	sxth	r3, r3
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a560:	f043 0302 	orr.w	r3, r3, #2
 800a564:	b29a      	uxth	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a56c:	e0f1      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2206      	movs	r2, #6
 800a572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a576:	e0ec      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f040 80e2 	bne.w	800a748 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a58a:	f043 0304 	orr.w	r3, r3, #4
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a59c:	f023 0302 	bic.w	r3, r3, #2
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a5a8:	e0ce      	b.n	800a748 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 80cb 	bne.w	800a74c <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	74bb      	strb	r3, [r7, #18]
 800a5ba:	7cbb      	ldrb	r3, [r7, #18]
 800a5bc:	2b1d      	cmp	r3, #29
 800a5be:	d818      	bhi.n	800a5f2 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a5c0:	7cbb      	ldrb	r3, [r7, #18]
 800a5c2:	f103 0209 	add.w	r2, r3, #9
 800a5c6:	7cbb      	ldrb	r3, [r7, #18]
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	440a      	add	r2, r1
 800a5cc:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a5da:	7cbb      	ldrb	r3, [r7, #18]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a5e8:	7cbb      	ldrb	r3, [r7, #18]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	74bb      	strb	r3, [r7, #18]
 800a5ee:	e7e4      	b.n	800a5ba <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a5f0:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a5f8:	f043 0308 	orr.w	r3, r3, #8
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a604:	e0a2      	b.n	800a74c <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a606:	2300      	movs	r3, #0
 800a608:	747b      	strb	r3, [r7, #17]
 800a60a:	7c7b      	ldrb	r3, [r7, #17]
 800a60c:	2b05      	cmp	r3, #5
 800a60e:	d80e      	bhi.n	800a62e <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a610:	7c7b      	ldrb	r3, [r7, #17]
 800a612:	1c9a      	adds	r2, r3, #2
 800a614:	7c7b      	ldrb	r3, [r7, #17]
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	440a      	add	r2, r1
 800a61a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4413      	add	r3, r2
 800a622:	460a      	mov	r2, r1
 800a624:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a626:	7c7b      	ldrb	r3, [r7, #17]
 800a628:	3301      	adds	r3, #1
 800a62a:	747b      	strb	r3, [r7, #17]
 800a62c:	e7ed      	b.n	800a60a <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a62e:	2300      	movs	r3, #0
 800a630:	743b      	strb	r3, [r7, #16]
 800a632:	7c3b      	ldrb	r3, [r7, #16]
 800a634:	2b02      	cmp	r3, #2
 800a636:	d810      	bhi.n	800a65a <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a638:	7c3b      	ldrb	r3, [r7, #16]
 800a63a:	f103 0208 	add.w	r2, r3, #8
 800a63e:	7c3b      	ldrb	r3, [r7, #16]
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	440a      	add	r2, r1
 800a644:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	460a      	mov	r2, r1
 800a64e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a652:	7c3b      	ldrb	r3, [r7, #16]
 800a654:	3301      	adds	r3, #1
 800a656:	743b      	strb	r3, [r7, #16]
 800a658:	e7eb      	b.n	800a632 <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a660:	f003 030f 	and.w	r3, r3, #15
 800a664:	2b05      	cmp	r3, #5
 800a666:	d10a      	bne.n	800a67e <_ZN3BTD14HCI_event_taskEv+0x556>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a66e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a684:	f043 0310 	orr.w	r3, r3, #16
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a690:	e05f      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 feec 	bl	800b47a <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a6a2:	e056      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fee4 	bl	800b47a <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a6b2:	e04e      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 ff93 	bl	800b5e0 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a6ba:	e04a      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 ffca 	bl	800b656 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a6c2:	e046      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d123      	bne.n	800a716 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00c      	beq.n	800a6f2 <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6de:	f083 0301 	eor.w	r3, r3, #1
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a6f0:	e02e      	b.n	800a750 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d029      	beq.n	800a750 <_ZN3BTD14HCI_event_taskEv+0x628>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a702:	f083 0301 	eor.w	r3, r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d021      	beq.n	800a750 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a714:	e01c      	b.n	800a750 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	8b5b      	ldrh	r3, [r3, #26]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 f882 	bl	800b826 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2210      	movs	r2, #16
 800a726:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a72a:	e011      	b.n	800a750 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 ffcd 	bl	800b6cc <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a732:	e00e      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 f810 	bl	800b75a <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a73a:	e00a      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a73c:	bf00      	nop
 800a73e:	e008      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a740:	bf00      	nop
 800a742:	e006      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a744:	bf00      	nop
 800a746:	e004      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a748:	bf00      	nop
 800a74a:	e002      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a74c:	bf00      	nop
 800a74e:	e000      	b.n	800a752 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a750:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a752:	bf00      	nop
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bdb0      	pop	{r4, r5, r7, pc}
 800a75a:	bf00      	nop

0800a75c <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a76a:	2b13      	cmp	r3, #19
 800a76c:	f200 82ef 	bhi.w	800ad4e <_ZN3BTD8HCI_taskEv+0x5f2>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <_ZN3BTD8HCI_taskEv+0x1c>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a7c9 	.word	0x0800a7c9
 800a77c:	0800a803 	.word	0x0800a803
 800a780:	0800a889 	.word	0x0800a889
 800a784:	0800a8a9 	.word	0x0800a8a9
 800a788:	0800a8c9 	.word	0x0800a8c9
 800a78c:	0800a91d 	.word	0x0800a91d
 800a790:	0800a9c3 	.word	0x0800a9c3
 800a794:	0800a9f1 	.word	0x0800a9f1
 800a798:	0800aa2b 	.word	0x0800aa2b
 800a79c:	0800aa53 	.word	0x0800aa53
 800a7a0:	0800aa89 	.word	0x0800aa89
 800a7a4:	0800aae7 	.word	0x0800aae7
 800a7a8:	0800ab25 	.word	0x0800ab25
 800a7ac:	0800ac4b 	.word	0x0800ac4b
 800a7b0:	0800ad4f 	.word	0x0800ad4f
 800a7b4:	0800ac91 	.word	0x0800ac91
 800a7b8:	0800acbf 	.word	0x0800acbf
 800a7bc:	0800a953 	.word	0x0800a953
 800a7c0:	0800a989 	.word	0x0800a989
 800a7c4:	0800a9a9 	.word	0x0800a9a9
                case HCI_INIT_STATE:
                        hci_counter++;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	f240 82b4 	bls.w	800ad52 <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fb7d 	bl	800aeea <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a800:	e2a7      	b.n	800ad52 <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a808:	3301      	adds	r3, #1
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 f830 	bl	800b896 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a836:	e28e      	b.n	800ad56 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a844:	429a      	cmp	r2, r3
 800a846:	f240 8286 	bls.w	800ad56 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a850:	461a      	mov	r2, r3
 800a852:	0092      	lsls	r2, r2, #2
 800a854:	4413      	add	r3, r2
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	b29a      	uxth	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a866:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a86a:	d904      	bls.n	800a876 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a872:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a886:	e266      	b.n	800ad56 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 8261 	beq.w	800ad5a <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2203      	movs	r2, #3
 800a89c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fb72 	bl	800af8a <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a8a6:	e258      	b.n	800ad5a <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 8253 	beq.w	800ad5e <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fb8a 	bl	800afd2 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2204      	movs	r2, #4
 800a8c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a8c6:	e24a      	b.n	800ad5e <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 8245 	beq.w	800ad62 <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00a      	beq.n	800a8f6 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fc5d 	bl	800b1a6 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2205      	movs	r2, #5
 800a8f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a8f4:	e235      	b.n	800ad62 <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d008      	beq.n	800a912 <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a900:	2100      	movs	r1, #0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fb89 	bl	800b01a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2211      	movs	r2, #17
 800a90c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a910:	e227      	b.n	800ad62 <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2206      	movs	r2, #6
 800a916:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a91a:	e222      	b.n	800ad62 <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 821d 	beq.w	800ad66 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a932:	2b00      	cmp	r3, #0
 800a934:	d008      	beq.n	800a948 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fb6e 	bl	800b01a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2211      	movs	r2, #17
 800a942:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a946:	e20e      	b.n	800ad66 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2206      	movs	r2, #6
 800a94c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a950:	e209      	b.n	800ad66 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8204 	beq.w	800ad6a <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a96c:	2101      	movs	r1, #1
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fc9d 	bl	800b2ae <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2212      	movs	r2, #18
 800a978:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a97c:	e1f5      	b.n	800ad6a <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2206      	movs	r2, #6
 800a982:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a986:	e1f0      	b.n	800ad6a <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 81eb 	beq.w	800ad6e <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fc4d 	bl	800b238 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2213      	movs	r2, #19
 800a9a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a9a6:	e1e2      	b.n	800ad6e <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 81dd 	beq.w	800ad72 <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2206      	movs	r2, #6
 800a9bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a9c0:	e1d7      	b.n	800ad72 <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <_ZN3BTD8HCI_taskEv+0x27a>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fc8f 	bl	800b2fa <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2207      	movs	r2, #7
 800a9e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800a9e4:	e1d8      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	220a      	movs	r2, #10
 800a9ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9ee:	e1d3      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 81bb 	beq.w	800ad76 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fcb2 	bl	800b36a <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d007      	beq.n	800aa20 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fb74 	bl	800b0fe <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	220c      	movs	r2, #12
 800aa1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800aa1e:	e1aa      	b.n	800ad76 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2208      	movs	r2, #8
 800aa24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa28:	e1a5      	b.n	800ad76 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 81a0 	beq.w	800ad7a <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fcac 	bl	800b3a0 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2209      	movs	r2, #9
 800aa4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aa50:	e193      	b.n	800ad7a <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 818e 	beq.w	800ad7e <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fead 	bl	800b7d0 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	220a      	movs	r2, #10
 800aa7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800aa7e:	e17e      	b.n	800ad7e <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fc8d 	bl	800b3a0 <_ZN3BTD11hci_connectEv>
                        break;
 800aa86:	e17a      	b.n	800ad7e <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa8e:	f083 0301 	eor.w	r3, r3, #1
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8174 	beq.w	800ad82 <_ZN3BTD8HCI_taskEv+0x626>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aaa0:	f083 0301 	eor.w	r3, r3, #1
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 816b 	beq.w	800ad82 <_ZN3BTD8HCI_taskEv+0x626>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aab2:	f083 0301 	eor.w	r3, r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8162 	beq.w	800ad82 <_ZN3BTD8HCI_taskEv+0x626>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aac4:	f083 0301 	eor.w	r3, r3, #1
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8159 	beq.w	800ad82 <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fa29 	bl	800af28 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	220b      	movs	r2, #11
 800aae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800aae4:	e14d      	b.n	800ad82 <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00a      	beq.n	800ab0a <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 faff 	bl	800b0fe <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	220c      	movs	r2, #12
 800ab04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ab08:	e13d      	b.n	800ad86 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8136 	beq.w	800ad86 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2210      	movs	r2, #16
 800ab1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ab22:	e130      	b.n	800ad86 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 812b 	beq.w	800ad8a <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3322      	adds	r3, #34	; 0x22
 800ab38:	2208      	movs	r2, #8
 800ab3a:	4999      	ldr	r1, [pc, #612]	; (800ada0 <_ZN3BTD8HCI_taskEv+0x644>)
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f004 fe27 	bl	800f790 <strncmp>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d147      	bne.n	800abd8 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3322      	adds	r3, #34	; 0x22
 800ab6c:	2216      	movs	r2, #22
 800ab6e:	498d      	ldr	r1, [pc, #564]	; (800ada4 <_ZN3BTD8HCI_taskEv+0x648>)
 800ab70:	4618      	mov	r0, r3
 800ab72:	f004 fe0d 	bl	800f790 <strncmp>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab84:	e028      	b.n	800abd8 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3322      	adds	r3, #34	; 0x22
 800ab8a:	2216      	movs	r2, #22
 800ab8c:	4986      	ldr	r1, [pc, #536]	; (800ada8 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f004 fdfe 	bl	800f790 <strncmp>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d110      	bne.n	800abbc <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abba:	e00d      	b.n	800abd8 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3322      	adds	r3, #34	; 0x22
 800abc0:	2213      	movs	r2, #19
 800abc2:	497a      	ldr	r1, [pc, #488]	; (800adac <_ZN3BTD8HCI_taskEv+0x650>)
 800abc4:	4618      	mov	r0, r3
 800abc6:	f004 fde3 	bl	800f790 <strncmp>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d103      	bne.n	800abd8 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d117      	bne.n	800ac12 <_ZN3BTD8HCI_taskEv+0x4b6>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800abe8:	2b25      	cmp	r3, #37	; 0x25
 800abea:	d112      	bne.n	800ac12 <_ZN3BTD8HCI_taskEv+0x4b6>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800abf2:	2b08      	cmp	r3, #8
 800abf4:	d10d      	bne.n	800ac12 <_ZN3BTD8HCI_taskEv+0x4b6>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	3322      	adds	r3, #34	; 0x22
 800abfa:	2213      	movs	r2, #19
 800abfc:	496c      	ldr	r1, [pc, #432]	; (800adb0 <_ZN3BTD8HCI_taskEv+0x654>)
 800abfe:	4618      	mov	r0, r3
 800ac00:	f004 fdc6 	bl	800f790 <strncmp>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d103      	bne.n	800ac12 <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d104      	bne.n	800ac26 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <_ZN3BTD8HCI_taskEv+0x4de>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2208      	movs	r2, #8
 800ac34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ac38:	e0a7      	b.n	800ad8a <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa17 	bl	800b06e <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	220d      	movs	r2, #13
 800ac44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ac48:	e09f      	b.n	800ad8a <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 809a 	beq.w	800ad8e <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	220f      	movs	r2, #15
 800ac8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ac8e:	e07e      	b.n	800ad8e <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ac96:	3301      	adds	r3, #1
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800aca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acaa:	d972      	bls.n	800ad92 <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	220a      	movs	r2, #10
 800acb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800acbc:	e069      	b.n	800ad92 <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d064      	beq.n	800ad96 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3389      	adds	r3, #137	; 0x89
 800acd8:	2240      	movs	r2, #64	; 0x40
 800acda:	2100      	movs	r1, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f004 fd0b 	bl	800f6f8 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	33c9      	adds	r3, #201	; 0xc9
 800ace6:	2240      	movs	r2, #64	; 0x40
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f004 fd04 	bl	800f6f8 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	220a      	movs	r2, #10
 800ad48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ad4c:	e023      	b.n	800ad96 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800ad4e:	bf00      	nop
 800ad50:	e022      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad52:	bf00      	nop
 800ad54:	e020      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad56:	bf00      	nop
 800ad58:	e01e      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad5a:	bf00      	nop
 800ad5c:	e01c      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad5e:	bf00      	nop
 800ad60:	e01a      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad62:	bf00      	nop
 800ad64:	e018      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad66:	bf00      	nop
 800ad68:	e016      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad6a:	bf00      	nop
 800ad6c:	e014      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad6e:	bf00      	nop
 800ad70:	e012      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad72:	bf00      	nop
 800ad74:	e010      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad76:	bf00      	nop
 800ad78:	e00e      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad7a:	bf00      	nop
 800ad7c:	e00c      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad7e:	bf00      	nop
 800ad80:	e00a      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad82:	bf00      	nop
 800ad84:	e008      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad86:	bf00      	nop
 800ad88:	e006      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad8a:	bf00      	nop
 800ad8c:	e004      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad8e:	bf00      	nop
 800ad90:	e002      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad92:	bf00      	nop
 800ad94:	e000      	b.n	800ad98 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ad96:	bf00      	nop
        }
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	0800f8bc 	.word	0x0800f8bc
 800ada4:	0800f8c8 	.word	0x0800f8c8
 800ada8:	0800f8e0 	.word	0x0800f8e0
 800adac:	0800f8f8 	.word	0x0800f8f8
 800adb0:	0800f90c 	.word	0x0800f90c

0800adb4 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800adb4:	b5b0      	push	{r4, r5, r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af02      	add	r7, sp, #8
 800adba:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800adbc:	2340      	movs	r3, #64	; 0x40
 800adbe:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	33c9      	adds	r3, #201	; 0xc9
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800adda:	f107 050a 	add.w	r5, r7, #10
 800adde:	9201      	str	r2, [sp, #4]
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	462b      	mov	r3, r5
 800ade4:	4622      	mov	r2, r4
 800ade6:	f003 f92c 	bl	800e042 <_ZN3USB10inTransferEhhPtPhh>
 800adea:	4603      	mov	r3, r0
 800adec:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800adee:	7b7b      	ldrb	r3, [r7, #13]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d125      	bne.n	800ae40 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800adf4:	897b      	ldrh	r3, [r7, #10]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d022      	beq.n	800ae40 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d81d      	bhi.n	800ae40 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	3318      	adds	r3, #24
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d011      	beq.n	800ae38 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	3318      	adds	r3, #24
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	6858      	ldr	r0, [r3, #4]
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	3318      	adds	r3, #24
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	32c9      	adds	r2, #201	; 0xc9
 800ae34:	4611      	mov	r1, r2
 800ae36:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	73fb      	strb	r3, [r7, #15]
 800ae3e:	e7de      	b.n	800adfe <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ae40:	2300      	movs	r3, #0
 800ae42:	73bb      	strb	r3, [r7, #14]
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d81c      	bhi.n	800ae84 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	3318      	adds	r3, #24
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d010      	beq.n	800ae7c <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800ae5a:	7bbb      	ldrb	r3, [r7, #14]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	6859      	ldr	r1, [r3, #4]
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	3318      	adds	r3, #24
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3304      	adds	r3, #4
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	73bb      	strb	r3, [r7, #14]
 800ae82:	e7df      	b.n	800ae44 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae8c <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08c      	sub	sp, #48	; 0x30
 800ae90:	af08      	add	r7, sp, #32
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	4613      	mov	r3, r2
 800ae98:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800aebc:	2300      	movs	r3, #0
 800aebe:	9307      	str	r3, [sp, #28]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	9305      	str	r3, [sp, #20]
 800aec8:	88fb      	ldrh	r3, [r7, #6]
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	2300      	movs	r3, #0
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9302      	str	r3, [sp, #8]
 800aed4:	2300      	movs	r3, #0
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	2320      	movs	r3, #32
 800aede:	f002 ffd8 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2203      	movs	r2, #3
 800aefe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	220c      	movs	r2, #12
 800af06:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3389      	adds	r3, #137	; 0x89
 800af16:	2203      	movs	r2, #3
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff ffb6 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af36:	f023 0310 	bic.w	r3, r3, #16
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	221a      	movs	r2, #26
 800af46:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	220c      	movs	r2, #12
 800af4e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2203      	movs	r2, #3
 800af66:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800af6a:	e003      	b.n	800af74 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3389      	adds	r3, #137	; 0x89
 800af78:	2204      	movs	r2, #4
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff ff85 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af98:	f023 0320 	bic.w	r3, r3, #32
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2209      	movs	r2, #9
 800afa8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2210      	movs	r2, #16
 800afb0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3389      	adds	r3, #137	; 0x89
 800afc0:	2203      	movs	r2, #3
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff ff61 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800afe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2210      	movs	r2, #16
 800aff8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3389      	adds	r3, #137	; 0x89
 800b008:	2203      	movs	r2, #3
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff ff3d 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2204      	movs	r2, #4
 800b03c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2210      	movs	r2, #16
 800b044:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	78fa      	ldrb	r2, [r7, #3]
 800b054:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3389      	adds	r3, #137	; 0x89
 800b05c:	2204      	movs	r2, #4
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff ff13 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b066:	bf00      	nop
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b07c:	f023 0302 	bic.w	r3, r3, #2
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2209      	movs	r2, #9
 800b08c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2204      	movs	r2, #4
 800b094:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2207      	movs	r2, #7
 800b09c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7f1a      	ldrb	r2, [r3, #28]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	7f5a      	ldrb	r2, [r3, #29]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7f9a      	ldrb	r2, [r3, #30]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7fda      	ldrb	r2, [r3, #31]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3389      	adds	r3, #137	; 0x89
 800b0ec:	220a      	movs	r2, #10
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff fecb 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b10c:	f023 0308 	bic.w	r3, r3, #8
 800b110:	b29a      	uxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2219      	movs	r2, #25
 800b11c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2204      	movs	r2, #4
 800b124:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	220a      	movs	r2, #10
 800b12c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7f1a      	ldrb	r2, [r3, #28]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	7f5a      	ldrb	r2, [r3, #29]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7f9a      	ldrb	r2, [r3, #30]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7fda      	ldrb	r2, [r3, #31]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3389      	adds	r3, #137	; 0x89
 800b194:	220d      	movs	r2, #13
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff fe77 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b19e:	bf00      	nop
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800b1a6:	b590      	push	{r4, r7, lr}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2213      	movs	r2, #19
 800b1b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	220c      	movs	r2, #12
 800b1bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800b1c0:	6838      	ldr	r0, [r7, #0]
 800b1c2:	f7f5 f81f 	bl	8000204 <strlen>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	7bfc      	ldrb	r4, [r7, #15]
 800b1da:	6838      	ldr	r0, [r7, #0]
 800b1dc:	f7f5 f812 	bl	8000204 <strlen>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	429c      	cmp	r4, r3
 800b1e4:	d20e      	bcs.n	800b204 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	441a      	add	r2, r3
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	3303      	adds	r3, #3
 800b1f0:	7811      	ldrb	r1, [r2, #0]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	460a      	mov	r2, r1
 800b1f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	3301      	adds	r3, #1
 800b200:	73fb      	strb	r3, [r7, #15]
 800b202:	e7e9      	b.n	800b1d8 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	3303      	adds	r3, #3
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	4413      	add	r3, r2
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800b218:	6838      	ldr	r0, [r7, #0]
 800b21a:	f7f4 fff3 	bl	8000204 <strlen>
 800b21e:	4603      	mov	r3, r0
 800b220:	b29b      	uxth	r3, r3
 800b222:	3304      	adds	r3, #4
 800b224:	b29b      	uxth	r3, r3
 800b226:	461a      	mov	r2, r3
 800b228:	4621      	mov	r1, r4
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fe2e 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b230:	bf00      	nop
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	bd90      	pop	{r4, r7, pc}

0800b238 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	220c      	movs	r2, #12
 800b24c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2208      	movs	r2, #8
 800b254:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	22ff      	movs	r2, #255	; 0xff
 800b25c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	22ff      	movs	r2, #255	; 0xff
 800b264:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	22ff      	movs	r2, #255	; 0xff
 800b26c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	22ff      	movs	r2, #255	; 0xff
 800b274:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	22ff      	movs	r2, #255	; 0xff
 800b27c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	221f      	movs	r2, #31
 800b284:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3389      	adds	r3, #137	; 0x89
 800b29c:	220b      	movs	r2, #11
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff fdf3 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2256      	movs	r2, #86	; 0x56
 800b2be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	220c      	movs	r2, #12
 800b2c6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800b2d2:	78fb      	ldrb	r3, [r7, #3]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800b2d8:	2201      	movs	r2, #1
 800b2da:	e000      	b.n	800b2de <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3389      	adds	r3, #137	; 0x89
 800b2e8:	2204      	movs	r2, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fdcd 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2205      	movs	r2, #5
 800b328:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2233      	movs	r2, #51	; 0x33
 800b330:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	228b      	movs	r2, #139	; 0x8b
 800b338:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	229e      	movs	r2, #158	; 0x9e
 800b340:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2230      	movs	r2, #48	; 0x30
 800b348:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	220a      	movs	r2, #10
 800b350:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3389      	adds	r3, #137	; 0x89
 800b358:	2208      	movs	r2, #8
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fd95 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2204      	movs	r2, #4
 800b37e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3389      	adds	r3, #137	; 0x89
 800b38e:	2203      	movs	r2, #3
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fd7a 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	331c      	adds	r3, #28
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f804 	bl	800b3bc <_ZN3BTD11hci_connectEPh>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b3cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2205      	movs	r2, #5
 800b3dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	220d      	movs	r2, #13
 800b3ec:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	785a      	ldrb	r2, [r3, #1]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	789a      	ldrb	r2, [r3, #2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	78da      	ldrb	r2, [r3, #3]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	791a      	ldrb	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	795a      	ldrb	r2, [r3, #5]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2218      	movs	r2, #24
 800b430:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	22cc      	movs	r2, #204	; 0xcc
 800b438:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3389      	adds	r3, #137	; 0x89
 800b468:	2210      	movs	r2, #16
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7ff fd0d 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b47a:	b590      	push	{r4, r7, lr}
 800b47c:	b085      	sub	sp, #20
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	220d      	movs	r2, #13
 800b486:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2204      	movs	r2, #4
 800b48e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2217      	movs	r2, #23
 800b496:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7f1a      	ldrb	r2, [r3, #28]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7f5a      	ldrb	r2, [r3, #29]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	7f9a      	ldrb	r2, [r3, #30]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7fda      	ldrb	r2, [r3, #31]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d03f      	beq.n	800b564 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2206      	movs	r2, #6
 800b4e8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d013      	beq.n	800b51e <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	73fb      	strb	r3, [r7, #15]
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d822      	bhi.n	800b546 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b500:	7bfa      	ldrb	r2, [r7, #15]
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	330a      	adds	r3, #10
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	440a      	add	r2, r1
 800b50a:	7d11      	ldrb	r1, [r2, #20]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	4413      	add	r3, r2
 800b510:	460a      	mov	r2, r1
 800b512:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	3301      	adds	r3, #1
 800b51a:	73fb      	strb	r3, [r7, #15]
 800b51c:	e7ed      	b.n	800b4fa <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b51e:	2300      	movs	r3, #0
 800b520:	73bb      	strb	r3, [r7, #14]
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	2b05      	cmp	r3, #5
 800b526:	d80e      	bhi.n	800b546 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b528:	7bba      	ldrb	r2, [r7, #14]
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	330a      	adds	r3, #10
 800b52e:	6879      	ldr	r1, [r7, #4]
 800b530:	440a      	add	r2, r1
 800b532:	7f11      	ldrb	r1, [r2, #28]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	4413      	add	r3, r2
 800b538:	460a      	mov	r2, r1
 800b53a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	3301      	adds	r3, #1
 800b542:	73bb      	strb	r3, [r7, #14]
 800b544:	e7ed      	b.n	800b522 <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b546:	2310      	movs	r3, #16
 800b548:	737b      	strb	r3, [r7, #13]
 800b54a:	7b7b      	ldrb	r3, [r7, #13]
 800b54c:	2b19      	cmp	r3, #25
 800b54e:	d83c      	bhi.n	800b5ca <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b550:	7b7b      	ldrb	r3, [r7, #13]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	4413      	add	r3, r2
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b55c:	7b7b      	ldrb	r3, [r7, #13]
 800b55e:	3301      	adds	r3, #1
 800b560:	737b      	strb	r3, [r7, #13]
 800b562:	e7f2      	b.n	800b54a <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f4 fe4b 	bl	8000204 <strlen>
 800b56e:	4603      	mov	r3, r0
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b578:	2300      	movs	r3, #0
 800b57a:	733b      	strb	r3, [r7, #12]
 800b57c:	7b3c      	ldrb	r4, [r7, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	4618      	mov	r0, r3
 800b584:	f7f4 fe3e 	bl	8000204 <strlen>
 800b588:	4603      	mov	r3, r0
 800b58a:	429c      	cmp	r4, r3
 800b58c:	d20f      	bcs.n	800b5ae <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	7b3b      	ldrb	r3, [r7, #12]
 800b594:	441a      	add	r2, r3
 800b596:	7b3b      	ldrb	r3, [r7, #12]
 800b598:	330a      	adds	r3, #10
 800b59a:	7811      	ldrb	r1, [r2, #0]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	4413      	add	r3, r2
 800b5a0:	460a      	mov	r2, r1
 800b5a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b5a6:	7b3b      	ldrb	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	733b      	strb	r3, [r7, #12]
 800b5ac:	e7e6      	b.n	800b57c <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b5ae:	7b3b      	ldrb	r3, [r7, #12]
 800b5b0:	2b0f      	cmp	r3, #15
 800b5b2:	d80a      	bhi.n	800b5ca <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b5b4:	7b3b      	ldrb	r3, [r7, #12]
 800b5b6:	330a      	adds	r3, #10
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b5c2:	7b3b      	ldrb	r3, [r7, #12]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	733b      	strb	r3, [r7, #12]
 800b5c8:	e7f1      	b.n	800b5ae <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3389      	adds	r3, #137	; 0x89
 800b5ce:	221a      	movs	r2, #26
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fc5a 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd90      	pop	{r4, r7, pc}

0800b5e0 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	220e      	movs	r2, #14
 800b5ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2204      	movs	r2, #4
 800b5f4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2206      	movs	r2, #6
 800b5fc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7f1a      	ldrb	r2, [r3, #28]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	7f5a      	ldrb	r2, [r3, #29]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7f9a      	ldrb	r2, [r3, #30]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7fda      	ldrb	r2, [r3, #31]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3389      	adds	r3, #137	; 0x89
 800b644:	2209      	movs	r2, #9
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fc1f 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	220c      	movs	r2, #12
 800b662:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2204      	movs	r2, #4
 800b66a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2206      	movs	r2, #6
 800b672:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7f1a      	ldrb	r2, [r3, #28]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7f5a      	ldrb	r2, [r3, #29]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7f9a      	ldrb	r2, [r3, #30]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7fda      	ldrb	r2, [r3, #31]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3389      	adds	r3, #137	; 0x89
 800b6ba:	2209      	movs	r2, #9
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fbe4 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	222b      	movs	r2, #43	; 0x2b
 800b6d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2209      	movs	r2, #9
 800b6e8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	7f1a      	ldrb	r2, [r3, #28]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7f5a      	ldrb	r2, [r3, #29]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7f9a      	ldrb	r2, [r3, #30]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7fda      	ldrb	r2, [r3, #31]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2203      	movs	r2, #3
 800b730:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3389      	adds	r3, #137	; 0x89
 800b748:	220c      	movs	r2, #12
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fb9d 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b752:	bf00      	nop
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	222c      	movs	r2, #44	; 0x2c
 800b766:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2206      	movs	r2, #6
 800b776:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	7f1a      	ldrb	r2, [r3, #28]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7f5a      	ldrb	r2, [r3, #29]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7f9a      	ldrb	r2, [r3, #30]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	7fda      	ldrb	r2, [r3, #31]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3389      	adds	r3, #137	; 0x89
 800b7be:	2209      	movs	r2, #9
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fb62 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2211      	movs	r2, #17
 800b7dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2204      	movs	r2, #4
 800b7e4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8b5b      	ldrh	r3, [r3, #26]
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	8b5b      	ldrh	r3, [r3, #26]
 800b800:	121b      	asrs	r3, r3, #8
 800b802:	b2db      	uxtb	r3, r3
 800b804:	f003 030f 	and.w	r3, r3, #15
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3389      	adds	r3, #137	; 0x89
 800b814:	2205      	movs	r2, #5
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fb37 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	460b      	mov	r3, r1
 800b830:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b838:	f023 0304 	bic.w	r3, r3, #4
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2206      	movs	r2, #6
 800b848:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2204      	movs	r2, #4
 800b850:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2203      	movs	r2, #3
 800b858:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b85c:	887b      	ldrh	r3, [r7, #2]
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b866:	887b      	ldrh	r3, [r7, #2]
 800b868:	121b      	asrs	r3, r3, #8
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 030f 	and.w	r3, r3, #15
 800b870:	b2da      	uxtb	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2213      	movs	r2, #19
 800b87c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3389      	adds	r3, #137	; 0x89
 800b884:	2206      	movs	r2, #6
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff faff 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2224      	movs	r2, #36	; 0x24
 800b8a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	220c      	movs	r2, #12
 800b8aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2203      	movs	r2, #3
 800b8b2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2204      	movs	r2, #4
 800b8ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3389      	adds	r3, #137	; 0x89
 800b8d2:	2206      	movs	r2, #6
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fad8 	bl	800ae8c <_ZN3BTD11HCI_CommandEPht>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b8e4:	b5b0      	push	{r4, r5, r7, lr}
 800b8e6:	b08a      	sub	sp, #40	; 0x28
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	817b      	strh	r3, [r7, #10]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b8f8:	466b      	mov	r3, sp
 800b8fa:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b8fc:	7a7b      	ldrb	r3, [r7, #9]
 800b8fe:	1ddc      	adds	r4, r3, #7
 800b900:	61bc      	str	r4, [r7, #24]
 800b902:	4623      	mov	r3, r4
 800b904:	3301      	adds	r3, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f04f 0100 	mov.w	r1, #0
 800b90c:	f04f 0200 	mov.w	r2, #0
 800b910:	f04f 0300 	mov.w	r3, #0
 800b914:	00cb      	lsls	r3, r1, #3
 800b916:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b91a:	00c2      	lsls	r2, r0, #3
 800b91c:	4623      	mov	r3, r4
 800b91e:	3301      	adds	r3, #1
 800b920:	4618      	mov	r0, r3
 800b922:	f04f 0100 	mov.w	r1, #0
 800b926:	f04f 0200 	mov.w	r2, #0
 800b92a:	f04f 0300 	mov.w	r3, #0
 800b92e:	00cb      	lsls	r3, r1, #3
 800b930:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b934:	00c2      	lsls	r2, r0, #3
 800b936:	4623      	mov	r3, r4
 800b938:	3301      	adds	r3, #1
 800b93a:	3307      	adds	r3, #7
 800b93c:	08db      	lsrs	r3, r3, #3
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	ebad 0d03 	sub.w	sp, sp, r3
 800b944:	ab02      	add	r3, sp, #8
 800b946:	3300      	adds	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b94a:	897b      	ldrh	r3, [r7, #10]
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b952:	897b      	ldrh	r3, [r7, #10]
 800b954:	121b      	asrs	r3, r3, #8
 800b956:	b25b      	sxtb	r3, r3
 800b958:	f003 030f 	and.w	r3, r3, #15
 800b95c:	b25b      	sxtb	r3, r3
 800b95e:	f043 0320 	orr.w	r3, r3, #32
 800b962:	b25b      	sxtb	r3, r3
 800b964:	b2da      	uxtb	r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b96a:	7a7b      	ldrb	r3, [r7, #9]
 800b96c:	3304      	adds	r3, #4
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b974:	7a7b      	ldrb	r3, [r7, #9]
 800b976:	3304      	adds	r3, #4
 800b978:	121b      	asrs	r3, r3, #8
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	7a7a      	ldrb	r2, [r7, #9]
 800b984:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b986:	7a7b      	ldrb	r3, [r7, #9]
 800b988:	121b      	asrs	r3, r3, #8
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b996:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b99e:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	83fb      	strh	r3, [r7, #30]
 800b9a4:	7a7b      	ldrb	r3, [r7, #9]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	8bfa      	ldrh	r2, [r7, #30]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d20b      	bcs.n	800b9c6 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800b9ae:	8bfb      	ldrh	r3, [r7, #30]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	441a      	add	r2, r3
 800b9b4:	8bfb      	ldrh	r3, [r7, #30]
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	7811      	ldrb	r1, [r2, #0]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b9be:	8bfb      	ldrh	r3, [r7, #30]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	83fb      	strh	r3, [r7, #30]
 800b9c4:	e7ee      	b.n	800b9a4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800b9d6:	7a7b      	ldrb	r3, [r7, #9]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	3308      	adds	r3, #8
 800b9dc:	b29c      	uxth	r4, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	f002 fc34 	bl	800e250 <_ZN3USB11outTransferEhhtPh>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800b9ec:	7cfb      	ldrb	r3, [r7, #19]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800b9f2:	2064      	movs	r0, #100	; 0x64
 800b9f4:	f7f6 f92a 	bl	8001c4c <HAL_Delay>
 800b9f8:	46ad      	mov	sp, r5
}
 800b9fa:	bf00      	nop
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bdb0      	pop	{r4, r5, r7, pc}

0800ba02 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b086      	sub	sp, #24
 800ba06:	af02      	add	r7, sp, #8
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	817b      	strh	r3, [r7, #10]
 800ba10:	4613      	mov	r3, r2
 800ba12:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2202      	movs	r2, #2
 800ba18:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	7a7a      	ldrb	r2, [r7, #9]
 800ba20:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2204      	movs	r2, #4
 800ba28:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800ba34:	8b3b      	ldrh	r3, [r7, #24]
 800ba36:	b2da      	uxtb	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800ba3e:	8b3b      	ldrh	r3, [r7, #24]
 800ba40:	121b      	asrs	r3, r3, #8
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	781a      	ldrb	r2, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	785a      	ldrb	r2, [r3, #1]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ba64:	8979      	ldrh	r1, [r7, #10]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	2308      	movs	r3, #8
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff ff37 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ba76:	bf00      	nop
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b086      	sub	sp, #24
 800ba82:	af02      	add	r7, sp, #8
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	607b      	str	r3, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	817b      	strh	r3, [r7, #10]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2203      	movs	r2, #3
 800ba94:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	7a7a      	ldrb	r2, [r7, #9]
 800ba9c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2208      	movs	r2, #8
 800baa4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	781a      	ldrb	r2, [r3, #0]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	785a      	ldrb	r2, [r3, #1]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	785a      	ldrb	r2, [r3, #1]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	7f3a      	ldrb	r2, [r7, #28]
 800badc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bafe:	8979      	ldrh	r1, [r7, #10]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	2301      	movs	r3, #1
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	230c      	movs	r3, #12
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff feea 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb10:	bf00      	nop
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	817b      	strh	r3, [r7, #10]
 800bb26:	4613      	mov	r3, r2
 800bb28:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	7a7a      	ldrb	r2, [r7, #9]
 800bb36:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2208      	movs	r2, #8
 800bb3e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	781a      	ldrb	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	785a      	ldrb	r2, [r3, #1]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2202      	movs	r2, #2
 800bb7a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	22ff      	movs	r2, #255	; 0xff
 800bb8a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bb94:	8979      	ldrh	r1, [r7, #10]
 800bb96:	2300      	movs	r3, #0
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	230c      	movs	r3, #12
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f7ff fe9f 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b086      	sub	sp, #24
 800bbb2:	af02      	add	r7, sp, #8
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	607b      	str	r3, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	817b      	strh	r3, [r7, #10]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	7a7a      	ldrb	r2, [r7, #9]
 800bbcc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	220a      	movs	r2, #10
 800bbd4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	781a      	ldrb	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	785a      	ldrb	r2, [r3, #1]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	22a0      	movs	r2, #160	; 0xa0
 800bc28:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bc3a:	8979      	ldrh	r1, [r7, #10]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	2301      	movs	r3, #1
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	230e      	movs	r3, #14
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff fe4c 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	607b      	str	r3, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	817b      	strh	r3, [r7, #10]
 800bc62:	4613      	mov	r3, r2
 800bc64:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2206      	movs	r2, #6
 800bc6a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	7a7a      	ldrb	r2, [r7, #9]
 800bc72:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2204      	movs	r2, #4
 800bc7a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	781a      	ldrb	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	785a      	ldrb	r2, [r3, #1]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	781a      	ldrb	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	785a      	ldrb	r2, [r3, #1]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bcb4:	8979      	ldrh	r1, [r7, #10]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9301      	str	r3, [sp, #4]
 800bcba:	2301      	movs	r3, #1
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2308      	movs	r3, #8
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fe0f 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bcc6:	bf00      	nop
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b086      	sub	sp, #24
 800bcd2:	af02      	add	r7, sp, #8
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	817b      	strh	r3, [r7, #10]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2207      	movs	r2, #7
 800bce4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	7a7a      	ldrb	r2, [r7, #9]
 800bcec:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2204      	movs	r2, #4
 800bcf4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	785a      	ldrb	r2, [r3, #1]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	785a      	ldrb	r2, [r3, #1]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bd2e:	8979      	ldrh	r1, [r7, #10]
 800bd30:	2300      	movs	r3, #0
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	2301      	movs	r3, #1
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	2308      	movs	r3, #8
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff fdd2 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	807b      	strh	r3, [r7, #2]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	707b      	strb	r3, [r7, #1]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	220b      	movs	r2, #11
 800bd66:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	787a      	ldrb	r2, [r7, #1]
 800bd6e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2208      	movs	r2, #8
 800bd76:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	783a      	ldrb	r2, [r7, #0]
 800bd86:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	7c3a      	ldrb	r2, [r7, #16]
 800bd8e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bdc8:	8879      	ldrh	r1, [r7, #2]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	2301      	movs	r3, #1
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff fd85 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b08e      	sub	sp, #56	; 0x38
 800bde6:	af08      	add	r7, sp, #32
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800bdec:	2301      	movs	r3, #1
 800bdee:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	2b05      	cmp	r3, #5
 800bdfc:	d811      	bhi.n	800be22 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	f1c3 0305 	rsb	r3, r3, #5
 800be04:	461a      	mov	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	441a      	add	r2, r3
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	3302      	adds	r3, #2
 800be0e:	7812      	ldrb	r2, [r2, #0]
 800be10:	f107 0118 	add.w	r1, r7, #24
 800be14:	440b      	add	r3, r1
 800be16:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	3301      	adds	r3, #1
 800be1e:	75fb      	strb	r3, [r7, #23]
 800be20:	e7ea      	b.n	800bdf8 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800be32:	2300      	movs	r3, #0
 800be34:	9307      	str	r3, [sp, #28]
 800be36:	f107 030c 	add.w	r3, r7, #12
 800be3a:	9306      	str	r3, [sp, #24]
 800be3c:	2308      	movs	r3, #8
 800be3e:	9305      	str	r3, [sp, #20]
 800be40:	2308      	movs	r3, #8
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	2300      	movs	r3, #0
 800be46:	9303      	str	r3, [sp, #12]
 800be48:	2303      	movs	r3, #3
 800be4a:	9302      	str	r3, [sp, #8]
 800be4c:	23f5      	movs	r3, #245	; 0xf5
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	2309      	movs	r3, #9
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	2321      	movs	r3, #33	; 0x21
 800be56:	f002 f81c 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800be62:	b580      	push	{r7, lr}
 800be64:	b08e      	sub	sp, #56	; 0x38
 800be66:	af08      	add	r7, sp, #32
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800be6c:	2305      	movs	r3, #5
 800be6e:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800be70:	2310      	movs	r3, #16
 800be72:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800be74:	2301      	movs	r3, #1
 800be76:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800be78:	2302      	movs	r3, #2
 800be7a:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800be7c:	2312      	movs	r3, #18
 800be7e:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800be80:	2300      	movs	r3, #0
 800be82:	75fb      	strb	r3, [r7, #23]
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	2b05      	cmp	r3, #5
 800be88:	d80e      	bhi.n	800bea8 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	441a      	add	r2, r3
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	3301      	adds	r3, #1
 800be94:	7812      	ldrb	r2, [r2, #0]
 800be96:	f107 0118 	add.w	r1, r7, #24
 800be9a:	440b      	add	r3, r1
 800be9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	3301      	adds	r3, #1
 800bea4:	75fb      	strb	r3, [r7, #23]
 800bea6:	e7ed      	b.n	800be84 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800beb8:	2300      	movs	r3, #0
 800beba:	9307      	str	r3, [sp, #28]
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	9306      	str	r3, [sp, #24]
 800bec2:	230b      	movs	r3, #11
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	230b      	movs	r3, #11
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	2300      	movs	r3, #0
 800becc:	9303      	str	r3, [sp, #12]
 800bece:	2303      	movs	r3, #3
 800bed0:	9302      	str	r3, [sp, #8]
 800bed2:	2305      	movs	r3, #5
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	2309      	movs	r3, #9
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	2321      	movs	r3, #33	; 0x21
 800bedc:	f001 ffd9 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bee0:	bf00      	nop
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	4a04      	ldr	r2, [pc, #16]	; (800bf04 <_ZN13USBReadParserC1Ev+0x1c>)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	0800fa3c 	.word	0x0800fa3c

0800bf08 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff ffe7 	bl	800bee8 <_ZN13USBReadParserC1Ev>
 800bf1a:	4a21      	ldr	r2, [pc, #132]	; (800bfa0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fd fb65 	bl	80095fa <_ZN16MultiValueBufferC1Ev>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3310      	adds	r3, #16
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fd fb77 	bl	8009628 <_ZN20MultiByteValueParserC1Ev>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3318      	adds	r3, #24
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fd fb9e 	bl	8009680 <_ZN11ByteSkipperC1Ev>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f103 0220 	add.w	r2, r3, #32
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f103 0210 	add.w	r2, r3, #16
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3308      	adds	r3, #8
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fd fb67 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f103 0218 	add.w	r2, r3, #24
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f7fd fb8a 	bl	80096a8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	0800f9e4 	.word	0x0800f9e4

0800bfa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff ff99 	bl	800bee8 <_ZN13USBReadParserC1Ev>
 800bfb6:	4a21      	ldr	r2, [pc, #132]	; (800c03c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fb17 	bl	80095fa <_ZN16MultiValueBufferC1Ev>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3310      	adds	r3, #16
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fd fb29 	bl	8009628 <_ZN20MultiByteValueParserC1Ev>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3318      	adds	r3, #24
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fd fb50 	bl	8009680 <_ZN11ByteSkipperC1Ev>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f103 0220 	add.w	r2, r3, #32
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f103 0210 	add.w	r2, r3, #16
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3308      	adds	r3, #8
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f7fd fb19 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f103 0218 	add.w	r2, r3, #24
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3308      	adds	r3, #8
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f7fd fb3c 	bl	80096a8 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	0800f9d8 	.word	0x0800f9d8

0800c040 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	607a      	str	r2, [r7, #4]
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	460b      	mov	r3, r1
 800c04e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c050:	897b      	ldrh	r3, [r7, #10]
 800c052:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800c058:	8afb      	ldrh	r3, [r7, #22]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00f      	beq.n	800c07e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c05e:	f107 0216 	add.w	r2, r7, #22
 800c062:	f107 0310 	add.w	r3, r7, #16
 800c066:	4619      	mov	r1, r3
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f82d 	bl	800c0c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c06e:	4603      	mov	r3, r0
 800c070:	f083 0301 	eor.w	r3, r3, #1
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b00      	cmp	r3, #0
 800c078:	d100      	bne.n	800c07c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c07a:	e7ed      	b.n	800c058 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c07c:	bf00      	nop
}
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	460b      	mov	r3, r1
 800c092:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800c094:	897b      	ldrh	r3, [r7, #10]
 800c096:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800c09c:	8afb      	ldrh	r3, [r7, #22]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00f      	beq.n	800c0c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800c0a2:	f107 0216 	add.w	r2, r7, #22
 800c0a6:	f107 0310 	add.w	r3, r7, #16
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 f981 	bl	800c3b4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	f083 0301 	eor.w	r3, r3, #1
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d100      	bne.n	800c0c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800c0be:	e7ed      	b.n	800c09c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800c0c0:	bf00      	nop
}
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ca:	b089      	sub	sp, #36	; 0x24
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3320      	adds	r3, #32
 800c0d8:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3320      	adds	r3, #32
 800c0de:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	f200 815e 	bhi.w	800c3a8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c109 	.word	0x0800c109
 800c0f8:	0800c129 	.word	0x0800c129
 800c0fc:	0800c16b 	.word	0x0800c16b
 800c100:	0800c17f 	.word	0x0800c17f
 800c104:	0800c243 	.word	0x0800c243
                case 0:
                        theBuffer.valueSize = 2;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2202      	movs	r2, #2
 800c10c:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f103 0210 	add.w	r2, r3, #16
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3308      	adds	r3, #8
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f7fd fa98 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3310      	adds	r3, #16
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	68b9      	ldr	r1, [r7, #8]
 800c130:	4618      	mov	r0, r3
 800c132:	f003 fa49 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c136:	4603      	mov	r3, r0
 800c138:	f083 0301 	eor.w	r3, r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c142:	2300      	movs	r3, #0
 800c144:	e131      	b.n	800c3aa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c15a:	785a      	ldrb	r2, [r3, #1]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2202      	movs	r2, #2
 800c166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3320      	adds	r3, #32
 800c16e:	1c9a      	adds	r2, r3, #2
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2203      	movs	r2, #3
 800c17a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c184:	3b02      	subs	r3, #2
 800c186:	2b1f      	cmp	r3, #31
 800c188:	d847      	bhi.n	800c21a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c18a:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c21b 	.word	0x0800c21b
 800c194:	0800c21b 	.word	0x0800c21b
 800c198:	0800c211 	.word	0x0800c211
 800c19c:	0800c21b 	.word	0x0800c21b
 800c1a0:	0800c21b 	.word	0x0800c21b
 800c1a4:	0800c21b 	.word	0x0800c21b
 800c1a8:	0800c21b 	.word	0x0800c21b
 800c1ac:	0800c21b 	.word	0x0800c21b
 800c1b0:	0800c21b 	.word	0x0800c21b
 800c1b4:	0800c21b 	.word	0x0800c21b
 800c1b8:	0800c21b 	.word	0x0800c21b
 800c1bc:	0800c21b 	.word	0x0800c21b
 800c1c0:	0800c21b 	.word	0x0800c21b
 800c1c4:	0800c21b 	.word	0x0800c21b
 800c1c8:	0800c21b 	.word	0x0800c21b
 800c1cc:	0800c21b 	.word	0x0800c21b
 800c1d0:	0800c21b 	.word	0x0800c21b
 800c1d4:	0800c21b 	.word	0x0800c21b
 800c1d8:	0800c21b 	.word	0x0800c21b
 800c1dc:	0800c21b 	.word	0x0800c21b
 800c1e0:	0800c21b 	.word	0x0800c21b
 800c1e4:	0800c21b 	.word	0x0800c21b
 800c1e8:	0800c21b 	.word	0x0800c21b
 800c1ec:	0800c21b 	.word	0x0800c21b
 800c1f0:	0800c21b 	.word	0x0800c21b
 800c1f4:	0800c21b 	.word	0x0800c21b
 800c1f8:	0800c21b 	.word	0x0800c21b
 800c1fc:	0800c21b 	.word	0x0800c21b
 800c200:	0800c21b 	.word	0x0800c21b
 800c204:	0800c21b 	.word	0x0800c21b
 800c208:	0800c21b 	.word	0x0800c21b
 800c20c:	0800c21b 	.word	0x0800c21b
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c218:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c220:	3b02      	subs	r3, #2
 800c222:	b2da      	uxtb	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f103 0210 	add.w	r2, r3, #16
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3308      	adds	r3, #8
 800c232:	4619      	mov	r1, r3
 800c234:	4610      	mov	r0, r2
 800c236:	f7fd fa0b 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2204      	movs	r2, #4
 800c23e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c248:	2b05      	cmp	r3, #5
 800c24a:	d055      	beq.n	800c2f8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c24c:	2b05      	cmp	r3, #5
 800c24e:	f300 8085 	bgt.w	800c35c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c252:	2b02      	cmp	r3, #2
 800c254:	d002      	beq.n	800c25c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c256:	2b04      	cmp	r3, #4
 800c258:	d015      	beq.n	800c286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c25a:	e07f      	b.n	800c35c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3310      	adds	r3, #16
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	4618      	mov	r0, r3
 800c266:	f003 f9af 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f083 0301 	eor.w	r3, r3, #1
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c276:	2300      	movs	r3, #0
 800c278:	e097      	b.n	800c3aa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	795a      	ldrb	r2, [r3, #5]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c284:	e086      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3310      	adds	r3, #16
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	4618      	mov	r0, r3
 800c290:	f003 f99a 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c294:	4603      	mov	r3, r0
 800c296:	f083 0301 	eor.w	r3, r3, #1
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e082      	b.n	800c3aa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	795b      	ldrb	r3, [r3, #5]
 800c2a8:	2be0      	cmp	r3, #224	; 0xe0
 800c2aa:	d16c      	bne.n	800c386 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	799b      	ldrb	r3, [r3, #6]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d16a      	bne.n	800c38a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d004      	beq.n	800c2c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	79db      	ldrb	r3, [r3, #7]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c2c6:	e065      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	79db      	ldrb	r3, [r3, #7]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d15e      	bne.n	800c38e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	789a      	ldrb	r2, [r3, #2]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	78da      	ldrb	r2, [r3, #3]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	79da      	ldrb	r2, [r3, #7]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c2f6:	e04d      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	3310      	adds	r3, #16
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	4618      	mov	r0, r3
 800c302:	f003 f961 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c306:	4603      	mov	r3, r0
 800c308:	f083 0301 	eor.w	r3, r3, #1
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c312:	2300      	movs	r3, #0
 800c314:	e049      	b.n	800c3aa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d038      	beq.n	800c392 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d034      	beq.n	800c392 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6858      	ldr	r0, [r3, #4]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681c      	ldr	r4, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	3220      	adds	r2, #32
 800c350:	9201      	str	r2, [sp, #4]
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	4633      	mov	r3, r6
 800c356:	462a      	mov	r2, r5
 800c358:	47a0      	blx	r4
                                        break;
 800c35a:	e01a      	b.n	800c392 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f103 0018 	add.w	r0, r3, #24
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3b02      	subs	r3, #2
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	68b9      	ldr	r1, [r7, #8]
 800c372:	f7fd f9ac 	bl	80096ce <_ZN11ByteSkipper4SkipEPPhPtt>
 800c376:	4603      	mov	r3, r0
 800c378:	f083 0301 	eor.w	r3, r3, #1
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d008      	beq.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c382:	2300      	movs	r3, #0
 800c384:	e011      	b.n	800c3aa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c386:	bf00      	nop
 800c388:	e004      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c38a:	bf00      	nop
 800c38c:	e002      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c38e:	bf00      	nop
 800c390:	e000      	b.n	800c394 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c392:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f103 0220 	add.w	r2, r3, #32
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c3a8:	2301      	movs	r3, #1
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	371c      	adds	r7, #28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b2:	bf00      	nop

0800c3b4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b6:	b089      	sub	sp, #36	; 0x24
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3320      	adds	r3, #32
 800c3c4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3320      	adds	r3, #32
 800c3ca:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	f200 815e 	bhi.w	800c694 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c3d8:	a201      	add	r2, pc, #4	; (adr r2, 800c3e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3de:	bf00      	nop
 800c3e0:	0800c3f5 	.word	0x0800c3f5
 800c3e4:	0800c415 	.word	0x0800c415
 800c3e8:	0800c457 	.word	0x0800c457
 800c3ec:	0800c46b 	.word	0x0800c46b
 800c3f0:	0800c52f 	.word	0x0800c52f
                        theBuffer.valueSize = 2;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f103 0210 	add.w	r2, r3, #16
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3308      	adds	r3, #8
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7fd f922 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3310      	adds	r3, #16
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	68b9      	ldr	r1, [r7, #8]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f003 f8d3 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c422:	4603      	mov	r3, r0
 800c424:	f083 0301 	eor.w	r3, r3, #1
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c42e:	2300      	movs	r3, #0
 800c430:	e131      	b.n	800c696 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c438:	781a      	ldrb	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c446:	785a      	ldrb	r2, [r3, #1]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2202      	movs	r2, #2
 800c452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3320      	adds	r3, #32
 800c45a:	1c9a      	adds	r2, r3, #2
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2203      	movs	r2, #3
 800c466:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c470:	3b02      	subs	r3, #2
 800c472:	2b1f      	cmp	r3, #31
 800c474:	d847      	bhi.n	800c506 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c476:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c507 	.word	0x0800c507
 800c480:	0800c507 	.word	0x0800c507
 800c484:	0800c4fd 	.word	0x0800c4fd
 800c488:	0800c507 	.word	0x0800c507
 800c48c:	0800c507 	.word	0x0800c507
 800c490:	0800c507 	.word	0x0800c507
 800c494:	0800c507 	.word	0x0800c507
 800c498:	0800c507 	.word	0x0800c507
 800c49c:	0800c507 	.word	0x0800c507
 800c4a0:	0800c507 	.word	0x0800c507
 800c4a4:	0800c507 	.word	0x0800c507
 800c4a8:	0800c507 	.word	0x0800c507
 800c4ac:	0800c507 	.word	0x0800c507
 800c4b0:	0800c507 	.word	0x0800c507
 800c4b4:	0800c507 	.word	0x0800c507
 800c4b8:	0800c507 	.word	0x0800c507
 800c4bc:	0800c507 	.word	0x0800c507
 800c4c0:	0800c507 	.word	0x0800c507
 800c4c4:	0800c507 	.word	0x0800c507
 800c4c8:	0800c507 	.word	0x0800c507
 800c4cc:	0800c507 	.word	0x0800c507
 800c4d0:	0800c507 	.word	0x0800c507
 800c4d4:	0800c507 	.word	0x0800c507
 800c4d8:	0800c507 	.word	0x0800c507
 800c4dc:	0800c507 	.word	0x0800c507
 800c4e0:	0800c507 	.word	0x0800c507
 800c4e4:	0800c507 	.word	0x0800c507
 800c4e8:	0800c507 	.word	0x0800c507
 800c4ec:	0800c507 	.word	0x0800c507
 800c4f0:	0800c507 	.word	0x0800c507
 800c4f4:	0800c507 	.word	0x0800c507
 800c4f8:	0800c507 	.word	0x0800c507
                                        isGoodInterface = false;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c504:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c50c:	3b02      	subs	r3, #2
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f103 0210 	add.w	r2, r3, #16
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3308      	adds	r3, #8
 800c51e:	4619      	mov	r1, r3
 800c520:	4610      	mov	r0, r2
 800c522:	f7fd f895 	bl	8009650 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2204      	movs	r2, #4
 800c52a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c534:	2b05      	cmp	r3, #5
 800c536:	d055      	beq.n	800c5e4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c538:	2b05      	cmp	r3, #5
 800c53a:	f300 8085 	bgt.w	800c648 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d002      	beq.n	800c548 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c542:	2b04      	cmp	r3, #4
 800c544:	d015      	beq.n	800c572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c546:	e07f      	b.n	800c648 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	3310      	adds	r3, #16
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	4618      	mov	r0, r3
 800c552:	f003 f839 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c556:	4603      	mov	r3, r0
 800c558:	f083 0301 	eor.w	r3, r3, #1
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c562:	2300      	movs	r3, #0
 800c564:	e097      	b.n	800c696 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	795a      	ldrb	r2, [r3, #5]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c570:	e086      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3310      	adds	r3, #16
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f003 f824 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c580:	4603      	mov	r3, r0
 800c582:	f083 0301 	eor.w	r3, r3, #1
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c58c:	2300      	movs	r3, #0
 800c58e:	e082      	b.n	800c696 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	795b      	ldrb	r3, [r3, #5]
 800c594:	2bff      	cmp	r3, #255	; 0xff
 800c596:	d16c      	bne.n	800c672 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	799b      	ldrb	r3, [r3, #6]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d16a      	bne.n	800c676 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d004      	beq.n	800c5b4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	79db      	ldrb	r3, [r3, #7]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c5b2:	e065      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	79db      	ldrb	r3, [r3, #7]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d15e      	bne.n	800c67a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	789a      	ldrb	r2, [r3, #2]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	78da      	ldrb	r2, [r3, #3]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	79da      	ldrb	r2, [r3, #7]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c5e2:	e04d      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3310      	adds	r3, #16
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f002 ffeb 	bl	800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f083 0301 	eor.w	r3, r3, #1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c5fe:	2300      	movs	r3, #0
 800c600:	e049      	b.n	800c696 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d038      	beq.n	800c67e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d034      	beq.n	800c67e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6858      	ldr	r0, [r3, #4]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681c      	ldr	r4, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	3220      	adds	r2, #32
 800c63c:	9201      	str	r2, [sp, #4]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	4633      	mov	r3, r6
 800c642:	462a      	mov	r2, r5
 800c644:	47a0      	blx	r4
                                        break;
 800c646:	e01a      	b.n	800c67e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f103 0018 	add.w	r0, r3, #24
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c654:	b29b      	uxth	r3, r3
 800c656:	3b02      	subs	r3, #2
 800c658:	b29b      	uxth	r3, r3
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	f7fd f836 	bl	80096ce <_ZN11ByteSkipper4SkipEPPhPtt>
 800c662:	4603      	mov	r3, r0
 800c664:	f083 0301 	eor.w	r3, r3, #1
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c66e:	2300      	movs	r3, #0
 800c670:	e011      	b.n	800c696 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c672:	bf00      	nop
 800c674:	e004      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c676:	bf00      	nop
 800c678:	e002      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c67a:	bf00      	nop
 800c67c:	e000      	b.n	800c680 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c67e:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f103 0220 	add.w	r2, r3, #32
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c694:	2301      	movs	r3, #1
}
 800c696:	4618      	mov	r0, r3
 800c698:	371c      	adds	r7, #28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c69e:	bf00      	nop

0800c6a0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d815      	bhi.n	800c6e0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	3318      	adds	r3, #24
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d109      	bne.n	800c6d8 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	3318      	adds	r3, #24
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d6:	e005      	b.n	800c6e4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	73fb      	strb	r3, [r7, #15]
 800c6de:	e7e6      	b.n	800c6ae <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3714      	adds	r7, #20
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d005      	beq.n	800c71a <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff ffc3 	bl	800c6a0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	0800faa0 	.word	0x0800faa0

0800c728 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	88fb      	ldrh	r3, [r7, #6]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	429a      	cmp	r2, r3
 800c742:	d10b      	bne.n	800c75c <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	3301      	adds	r3, #1
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	88fb      	ldrh	r3, [r7, #6]
 800c74e:	121b      	asrs	r3, r3, #8
 800c750:	f043 0320 	orr.w	r3, r3, #32
 800c754:	429a      	cmp	r2, r3
 800c756:	d101      	bne.n	800c75c <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c75c:	2300      	movs	r3, #0
        }
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c76a:	b480      	push	{r7}
 800c76c:	b085      	sub	sp, #20
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	460b      	mov	r3, r1
 800c774:	607a      	str	r2, [r7, #4]
 800c776:	72fb      	strb	r3, [r7, #11]
                return;
 800c778:	bf00      	nop
        };
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
                return;
 800c78c:	bf00      	nop
        };
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
                return;
 800c7a0:	bf00      	nop
        }
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	68b9      	ldr	r1, [r7, #8]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff ff95 	bl	800c6f0 <_ZN16BluetoothServiceC1EP3BTD>
 800c7c6:	4a1f      	ldr	r2, [pc, #124]	; (800c844 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	75fb      	strb	r3, [r7, #23]
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d809      	bhi.n	800c7f2 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c7de:	7dfa      	ldrb	r2, [r7, #23]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3208      	adds	r2, #8
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
 800c7f0:	e7f2      	b.n	800c7d8 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	79fa      	ldrb	r2, [r7, #7]
 800c7f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2250      	movs	r2, #80	; 0x50
 800c808:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2270      	movs	r2, #112	; 0x70
 800c818:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2271      	movs	r2, #113	; 0x71
 800c828:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 f807 	bl	800c848 <_ZN5BTHID5ResetEv>
}
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	0800fa74 	.word	0x0800fa74

0800c848 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
        connected = false;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	220a      	movs	r2, #10
 800c870:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3320      	adds	r3, #32
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4798      	blx	r3
}
 800c886:	bf00      	nop
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c88e:	b590      	push	{r4, r7, lr}
 800c890:	b085      	sub	sp, #20
 800c892:	af02      	add	r7, sp, #8
 800c894:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d014      	beq.n	800c8ca <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6898      	ldr	r0, [r3, #8]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8999      	ldrh	r1, [r3, #12]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7d1b      	ldrb	r3, [r3, #20]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	751a      	strb	r2, [r3, #20]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	7d1a      	ldrb	r2, [r3, #20]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f103 041b 	add.w	r4, r3, #27
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	336f      	adds	r3, #111	; 0x6f
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	f7ff f9c5 	bl	800bc54 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6898      	ldr	r0, [r3, #8]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8999      	ldrh	r1, [r3, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7d1b      	ldrb	r3, [r3, #20]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	751a      	strb	r2, [r3, #20]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7d1a      	ldrb	r2, [r3, #20]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f103 0418 	add.w	r4, r3, #24
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	336d      	adds	r3, #109	; 0x6d
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	f7ff f9b0 	bl	800bc54 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	220e      	movs	r2, #14
 800c904:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2209      	movs	r2, #9
 800c90a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c90e:	bf00      	nop
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	bd90      	pop	{r4, r7, pc}

0800c916 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c916:	b590      	push	{r4, r7, lr}
 800c918:	b087      	sub	sp, #28
 800c91a:	af02      	add	r7, sp, #8
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	7d5b      	ldrb	r3, [r3, #21]
 800c924:	f083 0301 	eor.w	r3, r3, #1
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d023      	beq.n	800c976 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	3308      	adds	r3, #8
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d11e      	bne.n	800c976 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	330c      	adds	r3, #12
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	330d      	adds	r3, #13
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	021b      	lsls	r3, r3, #8
 800c948:	4313      	orrs	r3, r2
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d113      	bne.n	800c976 <_ZN5BTHID7ACLDataEPh+0x60>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	7a9b      	ldrb	r3, [r3, #10]
 800c954:	f083 0301 	eor.w	r3, r3, #1
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2201      	movs	r2, #1
 800c964:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	8b5a      	ldrh	r2, [r3, #26]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	220a      	movs	r2, #10
 800c974:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	7a5b      	ldrb	r3, [r3, #9]
 800c97c:	f083 0301 	eor.w	r3, r3, #1
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d03a      	beq.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d034      	beq.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	7d5b      	ldrb	r3, [r3, #21]
 800c996:	f083 0301 	eor.w	r3, r3, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d02d      	beq.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c9a6:	f083 0301 	eor.w	r3, r3, #1
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d025      	beq.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d120      	bne.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	330c      	adds	r3, #12
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	330d      	adds	r3, #13
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	2b11      	cmp	r3, #17
 800c9ce:	d115      	bne.n	800c9fc <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	8b5a      	ldrh	r2, [r3, #26]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	899b      	ldrh	r3, [r3, #12]
 800ca02:	461a      	mov	r2, r3
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	f7ff fe8f 	bl	800c728 <_ZN16BluetoothService14checkHciHandleEPht>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f000 83d9 	beq.w	800d1c4 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	3306      	adds	r3, #6
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	3307      	adds	r3, #7
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	4313      	orrs	r3, r2
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	f040 829b 	bne.w	800cf60 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	f000 83c1 	beq.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b03      	cmp	r3, #3
 800ca3e:	f040 808d 	bne.w	800cb5c <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	3310      	adds	r3, #16
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	3311      	adds	r3, #17
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	4313      	orrs	r3, r2
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f040 83af 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	3312      	adds	r3, #18
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	3313      	adds	r3, #19
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	021b      	lsls	r3, r3, #8
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f040 83a3 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	330e      	adds	r3, #14
 800ca76:	781a      	ldrb	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d124      	bne.n	800cacc <_ZN5BTHID7ACLDataEPh+0x1b6>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	330f      	adds	r3, #15
 800ca86:	781a      	ldrb	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d11c      	bne.n	800cacc <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	7a5a      	ldrb	r2, [r3, #9]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	7b1a      	ldrb	r2, [r3, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	7b5a      	ldrb	r2, [r3, #13]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7d1b      	ldrb	r3, [r3, #20]
 800caae:	3301      	adds	r3, #1
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6898      	ldr	r0, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	8999      	ldrh	r1, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7d1a      	ldrb	r2, [r3, #20]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	331b      	adds	r3, #27
 800cac6:	f7ff f827 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>
 800caca:	e375      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	330e      	adds	r3, #14
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cad8:	429a      	cmp	r2, r3
 800cada:	d11a      	bne.n	800cb12 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	330f      	adds	r3, #15
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cae8:	429a      	cmp	r2, r3
 800caea:	d112      	bne.n	800cb12 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	7a5a      	ldrb	r2, [r3, #9]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	7b1a      	ldrb	r2, [r3, #12]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	7b5a      	ldrb	r2, [r3, #13]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	f043 0204 	orr.w	r2, r3, #4
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	611a      	str	r2, [r3, #16]
 800cb10:	e352      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	330e      	adds	r3, #14
 800cb16:	781a      	ldrb	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	f040 834a 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	330f      	adds	r3, #15
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cb30:	429a      	cmp	r2, r3
 800cb32:	f040 8341 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	7a5a      	ldrb	r2, [r3, #9]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	7b1a      	ldrb	r2, [r3, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	7b5a      	ldrb	r2, [r3, #13]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	611a      	str	r2, [r3, #16]
 800cb5a:	e32d      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	3308      	adds	r3, #8
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d15a      	bne.n	800cc1c <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	330c      	adds	r3, #12
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	330d      	adds	r3, #13
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	021b      	lsls	r3, r3, #8
 800cb76:	4313      	orrs	r3, r2
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d112      	bne.n	800cba2 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	7a5a      	ldrb	r2, [r3, #9]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	7b9a      	ldrb	r2, [r3, #14]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	7bda      	ldrb	r2, [r3, #15]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	611a      	str	r2, [r3, #16]
 800cba0:	e30a      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	330c      	adds	r3, #12
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	461a      	mov	r2, r3
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	330d      	adds	r3, #13
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	2b11      	cmp	r3, #17
 800cbb6:	d112      	bne.n	800cbde <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	7a5a      	ldrb	r2, [r3, #9]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	7b9a      	ldrb	r2, [r3, #14]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	7bda      	ldrb	r2, [r3, #15]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f043 0201 	orr.w	r2, r3, #1
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	611a      	str	r2, [r3, #16]
 800cbdc:	e2ec      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	330d      	adds	r3, #13
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	2b13      	cmp	r3, #19
 800cbf2:	f040 82e1 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	7a5a      	ldrb	r2, [r3, #9]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	7b9a      	ldrb	r2, [r3, #14]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	7bda      	ldrb	r2, [r3, #15]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	f043 0210 	orr.w	r2, r3, #16
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	611a      	str	r2, [r3, #16]
 800cc1a:	e2cd      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	3308      	adds	r3, #8
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b05      	cmp	r3, #5
 800cc24:	d15e      	bne.n	800cce4 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	3310      	adds	r3, #16
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	3311      	adds	r3, #17
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	021b      	lsls	r3, r3, #8
 800cc36:	4313      	orrs	r3, r2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f040 82bd 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	330c      	adds	r3, #12
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d112      	bne.n	800cc74 <_ZN5BTHID7ACLDataEPh+0x35e>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	330d      	adds	r3, #13
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d10a      	bne.n	800cc74 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	7a5a      	ldrb	r2, [r3, #9]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	611a      	str	r2, [r3, #16]
 800cc72:	e2a1      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	330c      	adds	r3, #12
 800cc78:	781a      	ldrb	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d112      	bne.n	800ccaa <_ZN5BTHID7ACLDataEPh+0x394>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	330d      	adds	r3, #13
 800cc88:	781a      	ldrb	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d10a      	bne.n	800ccaa <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	7a5a      	ldrb	r2, [r3, #9]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	f043 0202 	orr.w	r2, r3, #2
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	611a      	str	r2, [r3, #16]
 800cca8:	e286      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	330c      	adds	r3, #12
 800ccae:	781a      	ldrb	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	f040 827e 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	330d      	adds	r3, #13
 800ccc0:	781a      	ldrb	r2, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	f040 8275 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	7a5a      	ldrb	r2, [r3, #9]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f043 0220 	orr.w	r2, r3, #32
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	611a      	str	r2, [r3, #16]
 800cce2:	e269      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	d155      	bne.n	800cd9a <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	781a      	ldrb	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d113      	bne.n	800cd26 <_ZN5BTHID7ACLDataEPh+0x410>
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	330d      	adds	r3, #13
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d10b      	bne.n	800cd26 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6898      	ldr	r0, [r3, #8]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8999      	ldrh	r1, [r3, #12]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	3309      	adds	r3, #9
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	331b      	adds	r3, #27
 800cd20:	f7fe ff45 	bl	800bbae <_ZN3BTD21l2cap_config_responseEthPh>
 800cd24:	e248      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	330c      	adds	r3, #12
 800cd2a:	781a      	ldrb	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d113      	bne.n	800cd5e <_ZN5BTHID7ACLDataEPh+0x448>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	330d      	adds	r3, #13
 800cd3a:	781a      	ldrb	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d10b      	bne.n	800cd5e <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6898      	ldr	r0, [r3, #8]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8999      	ldrh	r1, [r3, #12]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	3309      	adds	r3, #9
 800cd52:	781a      	ldrb	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3316      	adds	r3, #22
 800cd58:	f7fe ff29 	bl	800bbae <_ZN3BTD21l2cap_config_responseEthPh>
 800cd5c:	e22c      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	330c      	adds	r3, #12
 800cd62:	781a      	ldrb	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	f040 8224 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	330d      	adds	r3, #13
 800cd74:	781a      	ldrb	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	f040 821b 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6898      	ldr	r0, [r3, #8]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	8999      	ldrh	r1, [r3, #12]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	3309      	adds	r3, #9
 800cd8e:	781a      	ldrb	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3318      	adds	r3, #24
 800cd94:	f7fe ff0b 	bl	800bbae <_ZN3BTD21l2cap_config_responseEthPh>
 800cd98:	e20e      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	3308      	adds	r3, #8
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b06      	cmp	r3, #6
 800cda2:	d170      	bne.n	800ce86 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	330c      	adds	r3, #12
 800cda8:	781a      	ldrb	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d112      	bne.n	800cdda <_ZN5BTHID7ACLDataEPh+0x4c4>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	330d      	adds	r3, #13
 800cdb8:	781a      	ldrb	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d10a      	bne.n	800cdda <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	7a5a      	ldrb	r2, [r3, #9]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	611a      	str	r2, [r3, #16]
 800cdd8:	e1ee      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	330c      	adds	r3, #12
 800cdde:	781a      	ldrb	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d121      	bne.n	800ce2e <_ZN5BTHID7ACLDataEPh+0x518>
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	330d      	adds	r3, #13
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d119      	bne.n	800ce2e <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	7a5a      	ldrb	r2, [r3, #9]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6898      	ldr	r0, [r3, #8]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8999      	ldrh	r1, [r3, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7d1a      	ldrb	r2, [r3, #20]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3316      	adds	r3, #22
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	4623      	mov	r3, r4
 800ce1c:	f7fe ff57 	bl	800bcce <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3308      	adds	r3, #8
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	4798      	blx	r3
 800ce2c:	e1c4      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	330c      	adds	r3, #12
 800ce32:	781a      	ldrb	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	f040 81bc 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	330d      	adds	r3, #13
 800ce44:	781a      	ldrb	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	f040 81b3 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	7a5a      	ldrb	r2, [r3, #9]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6898      	ldr	r0, [r3, #8]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	8999      	ldrh	r1, [r3, #12]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	7d1a      	ldrb	r2, [r3, #20]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	3318      	adds	r3, #24
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4623      	mov	r3, r4
 800ce74:	f7fe ff2b 	bl	800bcce <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3308      	adds	r3, #8
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
 800ce84:	e198      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	3308      	adds	r3, #8
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b07      	cmp	r3, #7
 800ce8e:	d14c      	bne.n	800cf2a <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	330c      	adds	r3, #12
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7edb      	ldrb	r3, [r3, #27]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d111      	bne.n	800cec2 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	330d      	adds	r3, #13
 800cea2:	781a      	ldrb	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7f1b      	ldrb	r3, [r3, #28]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d10a      	bne.n	800cec2 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	7a5a      	ldrb	r2, [r3, #9]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	611a      	str	r2, [r3, #16]
 800cec0:	e17a      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	330c      	adds	r3, #12
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7d9b      	ldrb	r3, [r3, #22]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d111      	bne.n	800cef4 <_ZN5BTHID7ACLDataEPh+0x5de>
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	330d      	adds	r3, #13
 800ced4:	781a      	ldrb	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7ddb      	ldrb	r3, [r3, #23]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d10a      	bne.n	800cef4 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	7a5a      	ldrb	r2, [r3, #9]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	f043 0208 	orr.w	r2, r3, #8
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	611a      	str	r2, [r3, #16]
 800cef2:	e161      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	330c      	adds	r3, #12
 800cef8:	781a      	ldrb	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	7e1b      	ldrb	r3, [r3, #24]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	f040 815a 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	330d      	adds	r3, #13
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7e5b      	ldrb	r3, [r3, #25]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	f040 8152 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	7a5a      	ldrb	r2, [r3, #9]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	611a      	str	r2, [r3, #16]
 800cf28:	e146      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b0a      	cmp	r3, #10
 800cf32:	f040 8141 	bne.w	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	7a5a      	ldrb	r2, [r3, #9]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6898      	ldr	r0, [r3, #8]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8999      	ldrh	r1, [r3, #12]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7d1a      	ldrb	r2, [r3, #20]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	330c      	adds	r3, #12
 800cf4e:	781c      	ldrb	r4, [r3, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	330d      	adds	r3, #13
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	4623      	mov	r3, r4
 800cf5a:	f7fe fef5 	bl	800bd48 <_ZN3BTD26l2cap_information_responseEthhh>
 800cf5e:	e12b      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	3306      	adds	r3, #6
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	f040 8087 	bne.w	800d080 <_ZN5BTHID7ACLDataEPh+0x76a>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	3307      	adds	r3, #7
 800cf76:	781a      	ldrb	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d17e      	bne.n	800d080 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	3308      	adds	r3, #8
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d131      	bne.n	800cff0 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	7a5a      	ldrb	r2, [r3, #9]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	7a9a      	ldrb	r2, [r3, #10]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2205      	movs	r2, #5
 800cfb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3328      	adds	r3, #40	; 0x28
 800cfe4:	220a      	movs	r2, #10
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fb6d 	bl	800d6c8 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cfee:	e0e0      	b.n	800d1b2 <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	3308      	adds	r3, #8
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	2b04      	cmp	r3, #4
 800cff8:	d131      	bne.n	800d05e <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2205      	movs	r2, #5
 800cffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	7a5a      	ldrb	r2, [r3, #9]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	7a9a      	ldrb	r2, [r3, #10]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2205      	movs	r2, #5
 800d022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2202      	movs	r2, #2
 800d032:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2235      	movs	r2, #53	; 0x35
 800d03a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3328      	adds	r3, #40	; 0x28
 800d052:	220a      	movs	r2, #10
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fb36 	bl	800d6c8 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d05c:	e0a9      	b.n	800d1b2 <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	3308      	adds	r3, #8
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b06      	cmp	r3, #6
 800d066:	f040 80a4 	bne.w	800d1b2 <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	3309      	adds	r3, #9
 800d06e:	7819      	ldrb	r1, [r3, #0]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	330a      	adds	r3, #10
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fb3f 	bl	800d6fc <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d07e:	e098      	b.n	800d1b2 <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	3306      	adds	r3, #6
 800d084:	781a      	ldrb	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d162      	bne.n	800d156 <_ZN5BTHID7ACLDataEPh+0x840>
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	3307      	adds	r3, #7
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d15a      	bne.n	800d156 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2ba1      	cmp	r3, #161	; 0xa1
 800d0a8:	f040 8085 	bne.w	800d1b6 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800d0ac:	f7f4 fdc2 	bl	8001c34 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	3305      	adds	r3, #5
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	b21a      	sxth	r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	b21b      	sxth	r3, r3
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3314      	adds	r3, #20
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	89fa      	ldrh	r2, [r7, #14]
 800d0d8:	b2d2      	uxtb	r2, r2
 800d0da:	3a01      	subs	r2, #1
 800d0dc:	b2d1      	uxtb	r1, r2
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	3209      	adds	r2, #9
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	3309      	adds	r3, #9
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d002      	beq.n	800d0f6 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d016      	beq.n	800d122 <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800d0f4:	e05f      	b.n	800d1b6 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d027      	beq.n	800d14e <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a18      	ldr	r0, [r3, #32]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681c      	ldr	r4, [r3, #0]
 800d10a:	89fb      	ldrh	r3, [r7, #14]
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	3b02      	subs	r3, #2
 800d110:	b2da      	uxtb	r2, r3
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	330a      	adds	r3, #10
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	4613      	mov	r3, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	47a0      	blx	r4
                                                break;
 800d120:	e015      	b.n	800d14e <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d126:	2b00      	cmp	r3, #0
 800d128:	d013      	beq.n	800d152 <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681c      	ldr	r4, [r3, #0]
 800d136:	89fb      	ldrh	r3, [r7, #14]
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	3b02      	subs	r3, #2
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	330a      	adds	r3, #10
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	4613      	mov	r3, r2
 800d146:	2200      	movs	r2, #0
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	47a0      	blx	r4
                                                break;
 800d14c:	e001      	b.n	800d152 <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800d14e:	bf00      	nop
 800d150:	e031      	b.n	800d1b6 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800d152:	bf00      	nop
                        }
 800d154:	e02f      	b.n	800d1b6 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	3306      	adds	r3, #6
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800d162:	429a      	cmp	r2, r3
 800d164:	d128      	bne.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	3307      	adds	r3, #7
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d172:	429a      	cmp	r2, r3
 800d174:	d120      	bne.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	3308      	adds	r3, #8
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2ba3      	cmp	r3, #163	; 0xa3
 800d17e:	d11b      	bne.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	3305      	adds	r3, #5
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	021b      	lsls	r3, r3, #8
 800d188:	b21a      	sxth	r2, r3
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	3304      	adds	r3, #4
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	b21b      	sxth	r3, r3
 800d192:	4313      	orrs	r3, r2
 800d194:	b21b      	sxth	r3, r3
 800d196:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3318      	adds	r3, #24
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	89ba      	ldrh	r2, [r7, #12]
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	3a01      	subs	r2, #1
 800d1a6:	b2d1      	uxtb	r1, r2
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	3209      	adds	r2, #9
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	4798      	blx	r3
 800d1b0:	e002      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d1b2:	bf00      	nop
 800d1b4:	e000      	b.n	800d1b8 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800d1b6:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f807 	bl	800d1cc <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f8b4 	bl	800d32c <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800d1c4:	bf00      	nop
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd90      	pop	{r4, r7, pc}

0800d1cc <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800d1cc:	b5b0      	push	{r4, r5, r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7e9b      	ldrb	r3, [r3, #26]
 800d1d8:	2b0e      	cmp	r3, #14
 800d1da:	f000 8084 	beq.w	800d2e6 <_ZN5BTHID8SDP_taskEv+0x11a>
 800d1de:	2b0e      	cmp	r3, #14
 800d1e0:	f300 809f 	bgt.w	800d322 <_ZN5BTHID8SDP_taskEv+0x156>
 800d1e4:	2b0a      	cmp	r3, #10
 800d1e6:	d002      	beq.n	800d1ee <_ZN5BTHID8SDP_taskEv+0x22>
 800d1e8:	2b0b      	cmp	r3, #11
 800d1ea:	d068      	beq.n	800d2be <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800d1ec:	e099      	b.n	800d322 <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d041      	beq.n	800d27e <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6898      	ldr	r0, [r3, #8]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8999      	ldrh	r1, [r3, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	7d1a      	ldrb	r2, [r3, #20]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	331b      	adds	r3, #27
 800d21c:	2501      	movs	r5, #1
 800d21e:	9501      	str	r5, [sp, #4]
 800d220:	9300      	str	r3, [sp, #0]
 800d222:	4623      	mov	r3, r4
 800d224:	f7fe fc2b 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d228:	2001      	movs	r0, #1
 800d22a:	f7f4 fd0f 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6898      	ldr	r0, [r3, #8]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8999      	ldrh	r1, [r3, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7d1a      	ldrb	r2, [r3, #20]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	331b      	adds	r3, #27
 800d244:	2500      	movs	r5, #0
 800d246:	9501      	str	r5, [sp, #4]
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	4623      	mov	r3, r4
 800d24c:	f7fe fc17 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	7d1b      	ldrb	r3, [r3, #20]
 800d254:	3301      	adds	r3, #1
 800d256:	b2da      	uxtb	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d25c:	2001      	movs	r0, #1
 800d25e:	f7f4 fcf5 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6898      	ldr	r0, [r3, #8]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	8999      	ldrh	r1, [r3, #12]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7d1a      	ldrb	r2, [r3, #20]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	331b      	adds	r3, #27
 800d272:	f7fe fc51 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	220b      	movs	r2, #11
 800d27a:	769a      	strb	r2, [r3, #26]
                        break;
 800d27c:	e04c      	b.n	800d318 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d286:	2b00      	cmp	r3, #0
 800d288:	d046      	beq.n	800d318 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6898      	ldr	r0, [r3, #8]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	8999      	ldrh	r1, [r3, #12]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7d1a      	ldrb	r2, [r3, #20]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	331b      	adds	r3, #27
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	4623      	mov	r3, r4
 800d2b8:	f7fe fd09 	bl	800bcce <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800d2bc:	e02c      	b.n	800d318 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d028      	beq.n	800d31c <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	769a      	strb	r2, [r3, #26]
                        break;
 800d2e4:	e01a      	b.n	800d31c <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d016      	beq.n	800d320 <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	689a      	ldr	r2, [r3, #8]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	899b      	ldrh	r3, [r3, #12]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fe fa92 	bl	800b826 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d308:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	3308      	adds	r3, #8
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	4798      	blx	r3
                        break;
 800d316:	e003      	b.n	800d320 <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 800d318:	bf00      	nop
 800d31a:	e002      	b.n	800d322 <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800d31c:	bf00      	nop
 800d31e:	e000      	b.n	800d322 <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 800d320:	bf00      	nop
}
 800d322:	bf00      	nop
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d32c <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d32c:	b5b0      	push	{r4, r5, r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af02      	add	r7, sp, #8
 800d332:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d33a:	3b01      	subs	r3, #1
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	f200 812c 	bhi.w	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
 800d342:	a201      	add	r2, pc, #4	; (adr r2, 800d348 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d579 	.word	0x0800d579
 800d34c:	0800d413 	.word	0x0800d413
 800d350:	0800d44b 	.word	0x0800d44b
 800d354:	0800d36d 	.word	0x0800d36d
 800d358:	0800d545 	.word	0x0800d545
 800d35c:	0800d38b 	.word	0x0800d38b
 800d360:	0800d493 	.word	0x0800d493
 800d364:	0800d4c9 	.word	0x0800d4c9
 800d368:	0800d505 	.word	0x0800d505
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	f003 0302 	and.w	r3, r3, #2
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 8101 	beq.w	800d57c <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f9f9 	bl	800d772 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2206      	movs	r2, #6
 800d384:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d388:	e0f8      	b.n	800d57c <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	f003 0310 	and.w	r3, r3, #16
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80f4 	beq.w	800d580 <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6898      	ldr	r0, [r3, #8]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	8999      	ldrh	r1, [r3, #12]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	7d1a      	ldrb	r2, [r3, #20]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3318      	adds	r3, #24
 800d3ae:	2501      	movs	r5, #1
 800d3b0:	9501      	str	r5, [sp, #4]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	4623      	mov	r3, r4
 800d3b6:	f7fe fb62 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f7f4 fc46 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6898      	ldr	r0, [r3, #8]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	8999      	ldrh	r1, [r3, #12]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	7d1a      	ldrb	r2, [r3, #20]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3318      	adds	r3, #24
 800d3d6:	2500      	movs	r5, #0
 800d3d8:	9501      	str	r5, [sp, #4]
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	4623      	mov	r3, r4
 800d3de:	f7fe fb4e 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	7d1b      	ldrb	r3, [r3, #20]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	f7f4 fc2c 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6898      	ldr	r0, [r3, #8]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	8999      	ldrh	r1, [r3, #12]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7d1a      	ldrb	r2, [r3, #20]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3318      	adds	r3, #24
 800d404:	f7fe fb88 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2208      	movs	r2, #8
 800d40c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d410:	e0b6      	b.n	800d580 <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	f003 0304 	and.w	r3, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80b2 	beq.w	800d584 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7d1b      	ldrb	r3, [r3, #20]
 800d424:	3301      	adds	r3, #1
 800d426:	b2da      	uxtb	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6898      	ldr	r0, [r3, #8]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	8999      	ldrh	r1, [r3, #12]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7d1a      	ldrb	r2, [r3, #20]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3316      	adds	r3, #22
 800d43c:	f7fe fb6c 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2203      	movs	r2, #3
 800d444:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d448:	e09c      	b.n	800d584 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 8098 	beq.w	800d588 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f98a 	bl	800d772 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d45e:	2001      	movs	r0, #1
 800d460:	f7f4 fbf4 	bl	8001c4c <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7d1b      	ldrb	r3, [r3, #20]
 800d468:	3301      	adds	r3, #1
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6898      	ldr	r0, [r3, #8]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	8999      	ldrh	r1, [r3, #12]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7d1a      	ldrb	r2, [r3, #20]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	336d      	adds	r3, #109	; 0x6d
 800d480:	2413      	movs	r4, #19
 800d482:	9400      	str	r4, [sp, #0]
 800d484:	f7fe fabd 	bl	800ba02 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2207      	movs	r2, #7
 800d48c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d490:	e07a      	b.n	800d588 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d076      	beq.n	800d58c <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7d1b      	ldrb	r3, [r3, #20]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6898      	ldr	r0, [r3, #8]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	8999      	ldrh	r1, [r3, #12]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	7d1a      	ldrb	r2, [r3, #20]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3318      	adds	r3, #24
 800d4ba:	f7fe fb2d 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2208      	movs	r2, #8
 800d4c2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d4c6:	e061      	b.n	800d58c <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	f003 0320 	and.w	r3, r3, #32
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d05d      	beq.n	800d590 <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3310      	adds	r3, #16
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d502:	e045      	b.n	800d590 <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d041      	beq.n	800d594 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	7d1b      	ldrb	r3, [r3, #20]
 800d514:	3301      	adds	r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6898      	ldr	r0, [r3, #8]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	8999      	ldrh	r1, [r3, #12]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	7d1a      	ldrb	r2, [r3, #20]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f103 0416 	add.w	r4, r3, #22
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	336b      	adds	r3, #107	; 0x6b
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	4623      	mov	r3, r4
 800d536:	f7fe fb8d 	bl	800bc54 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2205      	movs	r2, #5
 800d53e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d542:	e027      	b.n	800d594 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	f003 0308 	and.w	r3, r3, #8
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d023      	beq.n	800d598 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	689a      	ldr	r2, [r3, #8]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	899b      	ldrh	r3, [r3, #12]
 800d558:	4619      	mov	r1, r3
 800d55a:	4610      	mov	r0, r2
 800d55c:	f7fe f963 	bl	800b826 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d566:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d576:	e00f      	b.n	800d598 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 800d578:	bf00      	nop
 800d57a:	e00e      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d57c:	bf00      	nop
 800d57e:	e00c      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d580:	bf00      	nop
 800d582:	e00a      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d584:	bf00      	nop
 800d586:	e008      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d588:	bf00      	nop
 800d58a:	e006      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d58c:	bf00      	nop
 800d58e:	e004      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d590:	bf00      	nop
 800d592:	e002      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d594:	bf00      	nop
 800d596:	e000      	b.n	800d59a <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 800d598:	bf00      	nop
        }
}
 800d59a:	bf00      	nop
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a2:	bf00      	nop

0800d5a4 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d5a4:	b5b0      	push	{r4, r5, r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af02      	add	r7, sp, #8
 800d5aa:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f040 8084 	bne.w	800d6c0 <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d03a      	beq.n	800d63a <_ZN5BTHID3RunEv+0x96>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	7a5b      	ldrb	r3, [r3, #9]
 800d5ca:	f083 0301 	eor.w	r3, r3, #1
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d032      	beq.n	800d63a <_ZN5BTHID3RunEv+0x96>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	7d5b      	ldrb	r3, [r3, #21]
 800d5d8:	f083 0301 	eor.w	r3, r3, #1
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d02b      	beq.n	800d63a <_ZN5BTHID3RunEv+0x96>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d5e8:	f083 0301 	eor.w	r3, r3, #1
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d023      	beq.n	800d63a <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	8b5a      	ldrh	r2, [r3, #26]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6898      	ldr	r0, [r3, #8]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	8999      	ldrh	r1, [r3, #12]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	7d1a      	ldrb	r2, [r3, #20]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	336b      	adds	r3, #107	; 0x6b
 800d628:	2411      	movs	r4, #17
 800d62a:	9400      	str	r4, [sp, #0]
 800d62c:	f7fe f9e9 	bl	800ba02 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2202      	movs	r2, #2
 800d634:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d638:	e041      	b.n	800d6be <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d03b      	beq.n	800d6be <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6898      	ldr	r0, [r3, #8]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	8999      	ldrh	r1, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7d1a      	ldrb	r2, [r3, #20]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3316      	adds	r3, #22
 800d65c:	2501      	movs	r5, #1
 800d65e:	9501      	str	r5, [sp, #4]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	4623      	mov	r3, r4
 800d664:	f7fe fa0b 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d668:	2001      	movs	r0, #1
 800d66a:	f7f4 faef 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6898      	ldr	r0, [r3, #8]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	8999      	ldrh	r1, [r3, #12]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7d1a      	ldrb	r2, [r3, #20]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3316      	adds	r3, #22
 800d684:	2500      	movs	r5, #0
 800d686:	9501      	str	r5, [sp, #4]
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	4623      	mov	r3, r4
 800d68c:	f7fe f9f7 	bl	800ba7e <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	3301      	adds	r3, #1
 800d696:	b2da      	uxtb	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d69c:	2001      	movs	r0, #1
 800d69e:	f7f4 fad5 	bl	8001c4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6898      	ldr	r0, [r3, #8]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	8999      	ldrh	r1, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	7d1a      	ldrb	r2, [r3, #20]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3316      	adds	r3, #22
 800d6b2:	f7fe fa31 	bl	800bb18 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2204      	movs	r2, #4
 800d6ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d6be:	bf00      	nop
        }
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bdb0      	pop	{r4, r5, r7, pc}

0800d6c8 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d6c8:	b590      	push	{r4, r7, lr}
 800d6ca:	b087      	sub	sp, #28
 800d6cc:	af02      	add	r7, sp, #8
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6898      	ldr	r0, [r3, #8]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	8999      	ldrh	r1, [r3, #12]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	7edb      	ldrb	r3, [r3, #27]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	7f12      	ldrb	r2, [r2, #28]
 800d6e6:	79fc      	ldrb	r4, [r7, #7]
 800d6e8:	9201      	str	r2, [sp, #4]
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	f7fe f8f8 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d6f4:	bf00      	nop
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd90      	pop	{r4, r7, pc}

0800d6fc <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
 800d708:	4613      	mov	r3, r2
 800d70a:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2207      	movs	r2, #7
 800d710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	78fa      	ldrb	r2, [r7, #3]
 800d718:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	78ba      	ldrb	r2, [r7, #2]
 800d720:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2205      	movs	r2, #5
 800d730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2235      	movs	r2, #53	; 0x35
 800d748:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3328      	adds	r3, #40	; 0x28
 800d760:	220a      	movs	r2, #10
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7ff ffaf 	bl	800d6c8 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d76a:	bf00      	nop
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d772:	b590      	push	{r4, r7, lr}
 800d774:	b087      	sub	sp, #28
 800d776:	af02      	add	r7, sp, #8
 800d778:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d780:	2b00      	cmp	r3, #0
 800d782:	d008      	beq.n	800d796 <_ZN5BTHID11setProtocolEv+0x24>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d003      	beq.n	800d796 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d79c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6898      	ldr	r0, [r3, #8]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8999      	ldrh	r1, [r3, #12]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	7d9b      	ldrb	r3, [r3, #22]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	7dd2      	ldrb	r2, [r2, #23]
 800d7b4:	f107 040f 	add.w	r4, r7, #15
 800d7b8:	9201      	str	r2, [sp, #4]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	2301      	movs	r3, #1
 800d7be:	4622      	mov	r2, r4
 800d7c0:	f7fe f890 	bl	800b8e4 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d7c4:	bf00      	nop
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd90      	pop	{r4, r7, pc}

0800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d86e      	bhi.n	800d8bc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d7de:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d7f5 	.word	0x0800d7f5
 800d7e8:	0800d827 	.word	0x0800d827
 800d7ec:	0800d859 	.word	0x0800d859
 800d7f0:	0800d88b 	.word	0x0800d88b
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7a1b      	ldrb	r3, [r3, #8]
 800d7f8:	f003 030f 	and.w	r3, r3, #15
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b07      	cmp	r3, #7
 800d800:	d00d      	beq.n	800d81e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7a1b      	ldrb	r3, [r3, #8]
 800d806:	f003 030f 	and.w	r3, r3, #15
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d006      	beq.n	800d81e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7a1b      	ldrb	r3, [r3, #8]
 800d814:	f003 030f 	and.w	r3, r3, #15
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d101      	bne.n	800d822 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d81e:	2301      	movs	r3, #1
 800d820:	e04d      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d822:	2300      	movs	r3, #0
 800d824:	e04b      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7a1b      	ldrb	r3, [r3, #8]
 800d82a:	f003 030f 	and.w	r3, r3, #15
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b01      	cmp	r3, #1
 800d832:	d00d      	beq.n	800d850 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7a1b      	ldrb	r3, [r3, #8]
 800d838:	f003 030f 	and.w	r3, r3, #15
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d006      	beq.n	800d850 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7a1b      	ldrb	r3, [r3, #8]
 800d846:	f003 030f 	and.w	r3, r3, #15
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d101      	bne.n	800d854 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d850:	2301      	movs	r3, #1
 800d852:	e034      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d854:	2300      	movs	r3, #0
 800d856:	e032      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	7a1b      	ldrb	r3, [r3, #8]
 800d85c:	f003 030f 	and.w	r3, r3, #15
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b03      	cmp	r3, #3
 800d864:	d00d      	beq.n	800d882 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7a1b      	ldrb	r3, [r3, #8]
 800d86a:	f003 030f 	and.w	r3, r3, #15
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b04      	cmp	r3, #4
 800d872:	d006      	beq.n	800d882 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7a1b      	ldrb	r3, [r3, #8]
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b05      	cmp	r3, #5
 800d880:	d101      	bne.n	800d886 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d882:	2301      	movs	r3, #1
 800d884:	e01b      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d886:	2300      	movs	r3, #0
 800d888:	e019      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	7a1b      	ldrb	r3, [r3, #8]
 800d88e:	f003 030f 	and.w	r3, r3, #15
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b05      	cmp	r3, #5
 800d896:	d00d      	beq.n	800d8b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7a1b      	ldrb	r3, [r3, #8]
 800d89c:	f003 030f 	and.w	r3, r3, #15
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b06      	cmp	r3, #6
 800d8a4:	d006      	beq.n	800d8b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	7a1b      	ldrb	r3, [r3, #8]
 800d8aa:	f003 030f 	and.w	r3, r3, #15
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b07      	cmp	r3, #7
 800d8b2:	d101      	bne.n	800d8b8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e002      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e000      	b.n	800d8be <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d8bc:	2300      	movs	r3, #0
        }
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop

0800d8cc <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d806      	bhi.n	800d8ec <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d8de:	78fb      	ldrb	r3, [r7, #3]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff ff72 	bl	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	e011      	b.n	800d910 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	4a07      	ldr	r2, [pc, #28]	; (800d918 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d8fa:	4413      	add	r3, r2
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	fa21 f303 	lsr.w	r3, r1, r3
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	2b00      	cmp	r3, #0
 800d908:	bf14      	ite	ne
 800d90a:	2301      	movne	r3, #1
 800d90c:	2300      	moveq	r3, #0
 800d90e:	b2db      	uxtb	r3, r3
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	0800fab4 	.word	0x0800fab4

0800d91c <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d928:	78fb      	ldrb	r3, [r7, #3]
 800d92a:	4a1b      	ldr	r2, [pc, #108]	; (800d998 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d92c:	4413      	add	r3, r2
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	461a      	mov	r2, r3
 800d932:	2301      	movs	r3, #1
 800d934:	4093      	lsls	r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d93e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	4313      	orrs	r3, r2
 800d946:	461a      	mov	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	4013      	ands	r3, r2
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bf14      	ite	ne
 800d950:	2301      	movne	r3, #1
 800d952:	2300      	moveq	r3, #0
 800d954:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d95c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d960:	021b      	lsls	r3, r3, #8
 800d962:	4313      	orrs	r3, r2
 800d964:	461a      	mov	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	43db      	mvns	r3, r3
 800d96a:	4013      	ands	r3, r2
 800d96c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	b2d1      	uxtb	r1, r2
 800d974:	2000      	movs	r0, #0
 800d976:	4301      	orrs	r1, r0
 800d978:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d97c:	0a12      	lsrs	r2, r2, #8
 800d97e:	b292      	uxth	r2, r2
 800d980:	2100      	movs	r1, #0
 800d982:	430a      	orrs	r2, r1
 800d984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d988:	7afb      	ldrb	r3, [r7, #11]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	0800fab4 	.word	0x0800fab4

0800d99c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	2b08      	cmp	r3, #8
 800d9ac:	d102      	bne.n	800d9b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7adb      	ldrb	r3, [r3, #11]
 800d9b2:	e006      	b.n	800d9c2 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	2b09      	cmp	r3, #9
 800d9b8:	d102      	bne.n	800d9c0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7b1b      	ldrb	r3, [r3, #12]
 800d9be:	e000      	b.n	800d9c2 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800d9ce:	b480      	push	{r7}
 800d9d0:	b083      	sub	sp, #12
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800d9da:	78fb      	ldrb	r3, [r7, #3]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	4413      	add	r3, r2
 800d9e0:	791b      	ldrb	r3, [r3, #4]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b086      	sub	sp, #24
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800d9fc:	7afb      	ldrb	r3, [r7, #11]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	f240 80a6 	bls.w	800db50 <_ZN9PS4Parser5ParseEhPh+0x162>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f000 80a2 	beq.w	800db50 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d10e      	bne.n	800da32 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	1d18      	adds	r0, r3, #4
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	1c59      	adds	r1, r3, #1
 800da1c:	7afb      	ldrb	r3, [r7, #11]
 800da1e:	3b01      	subs	r3, #1
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b3c      	cmp	r3, #60	; 0x3c
 800da24:	bf28      	it	cs
 800da26:	233c      	movcs	r3, #60	; 0x3c
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	461a      	mov	r2, r3
 800da2c:	f001 fe56 	bl	800f6dc <memcpy>
 800da30:	e016      	b.n	800da60 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b11      	cmp	r3, #17
 800da38:	f040 8098 	bne.w	800db6c <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	f240 8096 	bls.w	800db70 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	1d18      	adds	r0, r3, #4
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	1cd9      	adds	r1, r3, #3
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	3b03      	subs	r3, #3
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b3c      	cmp	r3, #60	; 0x3c
 800da54:	bf28      	it	cs
 800da56:	233c      	movcs	r3, #60	; 0x3c
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	461a      	mov	r2, r3
 800da5c:	f001 fe3e 	bl	800f6dc <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800da70:	429a      	cmp	r2, r3
 800da72:	d06d      	beq.n	800db50 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800da7c:	461a      	mov	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da82:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800da86:	43db      	mvns	r3, r3
 800da88:	4013      	ands	r3, r2
 800da8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	b2d1      	uxtb	r1, r2
 800da92:	2000      	movs	r0, #0
 800da94:	4301      	orrs	r1, r0
 800da96:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800da9a:	0a12      	lsrs	r2, r2, #8
 800da9c:	b292      	uxth	r2, r2
 800da9e:	2100      	movs	r1, #0
 800daa0:	430a      	orrs	r2, r1
 800daa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800dab2:	f361 0317 	bfi	r3, r1, #0, #24
 800dab6:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800dabc:	2100      	movs	r1, #0
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f7ff fe84 	bl	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800daca:	7dfb      	ldrb	r3, [r7, #23]
 800dacc:	f043 0301 	orr.w	r3, r3, #1
 800dad0:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800dad2:	2101      	movs	r1, #1
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff fe79 	bl	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	f043 0302 	orr.w	r3, r3, #2
 800dae6:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800dae8:	2102      	movs	r1, #2
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f7ff fe6e 	bl	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
 800daf8:	f043 0304 	orr.w	r3, r3, #4
 800dafc:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800dafe:	2103      	movs	r1, #3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fe63 	bl	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d003      	beq.n	800db14 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	f043 0308 	orr.w	r3, r3, #8
 800db12:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800db1a:	7dfa      	ldrb	r2, [r7, #23]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d017      	beq.n	800db50 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800db26:	b25b      	sxtb	r3, r3
 800db28:	43db      	mvns	r3, r3
 800db2a:	b25a      	sxtb	r2, r3
 800db2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db30:	4013      	ands	r3, r2
 800db32:	b25b      	sxtb	r3, r3
 800db34:	f003 030f 	and.w	r3, r3, #15
 800db38:	b2d9      	uxtb	r1, r3
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800db40:	f361 0303 	bfi	r3, r1, #0, #4
 800db44:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	7dfa      	ldrb	r2, [r7, #23]
 800db4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00b      	beq.n	800db72 <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	3246      	adds	r2, #70	; 0x46
 800db64:	4611      	mov	r1, r2
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	4798      	blx	r3
 800db6a:	e002      	b.n	800db72 <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800db6c:	bf00      	nop
 800db6e:	e000      	b.n	800db72 <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800db70:	bf00      	nop
}
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800db80:	2300      	movs	r3, #0
 800db82:	73fb      	strb	r3, [r7, #15]
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	2b03      	cmp	r3, #3
 800db88:	d808      	bhi.n	800db9c <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	4413      	add	r3, r2
 800db90:	227f      	movs	r2, #127	; 0x7f
 800db92:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800db94:	7bfb      	ldrb	r3, [r7, #15]
 800db96:	3301      	adds	r3, #1
 800db98:	73fb      	strb	r3, [r7, #15]
 800db9a:	e7f3      	b.n	800db84 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	6893      	ldr	r3, [r2, #8]
 800dba0:	f36f 0317 	bfc	r3, #0, #24
 800dba4:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800dbaa:	f36f 0317 	bfc	r3, #0, #24
 800dbae:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73fb      	strb	r3, [r7, #15]
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d808      	bhi.n	800dbcc <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	73fb      	strb	r3, [r7, #15]
 800dbca:	e7f3      	b.n	800dbb4 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d81b      	bhi.n	800dc0e <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73bb      	strb	r3, [r7, #14]
 800dbda:	7bbb      	ldrb	r3, [r7, #14]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d812      	bhi.n	800dc06 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800dbe0:	7bfa      	ldrb	r2, [r7, #15]
 800dbe2:	7bbb      	ldrb	r3, [r7, #14]
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	0098      	lsls	r0, r3, #2
 800dbe8:	4613      	mov	r3, r2
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	4413      	add	r3, r2
 800dbee:	4403      	add	r3, r0
 800dbf0:	440b      	add	r3, r1
 800dbf2:	f103 0220 	add.w	r2, r3, #32
 800dbf6:	7993      	ldrb	r3, [r2, #6]
 800dbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbfc:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
 800dc00:	3301      	adds	r3, #1
 800dc02:	73bb      	strb	r3, [r7, #14]
 800dc04:	e7e9      	b.n	800dbda <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
 800dc0c:	e7e0      	b.n	800dbd0 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	7a13      	ldrb	r3, [r2, #8]
 800dc12:	2108      	movs	r1, #8
 800dc14:	f361 0303 	bfi	r3, r1, #0, #4
 800dc18:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dc20:	2108      	movs	r1, #8
 800dc22:	f361 0303 	bfi	r3, r1, #0, #4
 800dc26:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dc30:	f36f 0303 	bfc	r3, #0, #4
 800dc34:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800dc90:	bf00      	nop
 800dc92:	3714      	adds	r7, #20
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	2180      	movs	r1, #128	; 0x80
 800dca2:	4803      	ldr	r0, [pc, #12]	; (800dcb0 <_ZN2P95IsSetEv+0x14>)
 800dca4:	f7f4 fa9c 	bl	80021e0 <HAL_GPIO_ReadPin>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	4618      	mov	r0, r3
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	40020800 	.word	0x40020800

0800dcb4 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f001 f9bb 	bl	800f038 <_ZN8MAX3421eI3P102P9EC1Ev>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 f9d3 	bl	800f070 <_ZN15AddressPoolImplILh16EEC1Ev>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800dcd2:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <_ZN3USBC1Ev+0x34>)
 800dcd4:	2211      	movs	r2, #17
 800dcd6:	701a      	strb	r2, [r3, #0]
        init();
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f807 	bl	800dcec <_ZN3USB4initEv>
}
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	20000671 	.word	0x20000671

0800dcec <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
 800dd14:	4613      	mov	r3, r2
 800dd16:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	78fa      	ldrb	r2, [r7, #3]
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 f9e0 	bl	800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dd24:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d003      	beq.n	800dd34 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e018      	b.n	800dd6a <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800dd3e:	2300      	movs	r3, #0
 800dd40:	74fb      	strb	r3, [r7, #19]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	795b      	ldrb	r3, [r3, #5]
 800dd46:	7cfa      	ldrb	r2, [r7, #19]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d20d      	bcs.n	800dd68 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	78ba      	ldrb	r2, [r7, #2]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d101      	bne.n	800dd5a <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	e007      	b.n	800dd6a <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	3303      	adds	r3, #3
 800dd5e:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800dd60:	7cfb      	ldrb	r3, [r7, #19]
 800dd62:	3301      	adds	r3, #1
 800dd64:	74fb      	strb	r3, [r7, #19]
 800dd66:	e7ec      	b.n	800dd42 <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b086      	sub	sp, #24
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	60f8      	str	r0, [r7, #12]
 800dd7a:	607b      	str	r3, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	72fb      	strb	r3, [r7, #11]
 800dd80:	4613      	mov	r3, r2
 800dd82:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d101      	bne.n	800dd8e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800dd8a:	23d8      	movs	r3, #216	; 0xd8
 800dd8c:	e015      	b.n	800ddba <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	7afa      	ldrb	r2, [r7, #11]
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f001 f9a5 	bl	800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dd9a:	6178      	str	r0, [r7, #20]

        if(!p)
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dda2:	23d6      	movs	r3, #214	; 0xd6
 800dda4:	e009      	b.n	800ddba <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	7afa      	ldrb	r2, [r7, #11]
 800ddaa:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	7aba      	ldrb	r2, [r7, #10]
 800ddb6:	715a      	strb	r2, [r3, #5]

        return 0;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b086      	sub	sp, #24
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	607b      	str	r3, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	72fb      	strb	r3, [r7, #11]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	7afa      	ldrb	r2, [r7, #11]
 800ddd8:	4611      	mov	r1, r2
 800ddda:	4618      	mov	r0, r3
 800dddc:	f001 f982 	bl	800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dde0:	6178      	str	r0, [r7, #20]

        if(!p)
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dde8:	23d6      	movs	r3, #214	; 0xd6
 800ddea:	e04e      	b.n	800de8a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d101      	bne.n	800ddf8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800ddf4:	23d7      	movs	r3, #215	; 0xd7
 800ddf6:	e048      	b.n	800de8a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800ddf8:	7aba      	ldrb	r2, [r7, #10]
 800ddfa:	7afb      	ldrb	r3, [r7, #11]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff ff82 	bl	800dd08 <_ZN3USB14getEpInfoEntryEhh>
 800de04:	4602      	mov	r2, r0
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800de12:	23db      	movs	r3, #219	; 0xdb
 800de14:	e039      	b.n	800de8a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	789b      	ldrb	r3, [r3, #2]
 800de1c:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b0f      	cmp	r3, #15
 800de24:	bf28      	it	cs
 800de26:	230f      	movcs	r3, #15
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	461a      	mov	r2, r3
 800de2c:	2301      	movs	r3, #1
 800de2e:	4093      	lsls	r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	6a3b      	ldr	r3, [r7, #32]
 800de34:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	3b01      	subs	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800de42:	7afb      	ldrb	r3, [r7, #11]
 800de44:	461a      	mov	r2, r3
 800de46:	21e0      	movs	r1, #224	; 0xe0
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7f3 fbf3 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800de4e:	21d8      	movs	r1, #216	; 0xd8
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7f3 fc41 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800de56:	4603      	mov	r3, r0
 800de58:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	799b      	ldrb	r3, [r3, #6]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d009      	beq.n	800de76 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800de68:	7cfb      	ldrb	r3, [r7, #19]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f043 0302 	orr.w	r3, r3, #2
 800de72:	b2db      	uxtb	r3, r3
 800de74:	e003      	b.n	800de7e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800de76:	7cfb      	ldrb	r3, [r7, #19]
 800de78:	f023 0306 	bic.w	r3, r3, #6
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	461a      	mov	r2, r3
 800de80:	21d8      	movs	r1, #216	; 0xd8
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7f3 fbd6 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800de92:	b590      	push	{r4, r7, lr}
 800de94:	b08b      	sub	sp, #44	; 0x2c
 800de96:	af02      	add	r7, sp, #8
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	4608      	mov	r0, r1
 800de9c:	4611      	mov	r1, r2
 800de9e:	461a      	mov	r2, r3
 800dea0:	4603      	mov	r3, r0
 800dea2:	70fb      	strb	r3, [r7, #3]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70bb      	strb	r3, [r7, #2]
 800dea8:	4613      	mov	r3, r2
 800deaa:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800deac:	2300      	movs	r3, #0
 800deae:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800deb8:	f107 000c 	add.w	r0, r7, #12
 800debc:	78ba      	ldrb	r2, [r7, #2]
 800debe:	78f9      	ldrb	r1, [r7, #3]
 800dec0:	f107 030a 	add.w	r3, r7, #10
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4603      	mov	r3, r0
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7ff ff7a 	bl	800ddc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800dece:	4603      	mov	r3, r0
 800ded0:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800ded2:	7ffb      	ldrb	r3, [r7, #31]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800ded8:	7ffb      	ldrb	r3, [r7, #31]
 800deda:	e0ae      	b.n	800e03a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800dedc:	787b      	ldrb	r3, [r7, #1]
 800dede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	bfcc      	ite	gt
 800dee6:	2301      	movgt	r3, #1
 800dee8:	2300      	movle	r3, #0
 800deea:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800deec:	787b      	ldrb	r3, [r7, #1]
 800deee:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800def0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800def4:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800def6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800defa:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800defc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800df00:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800df02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df04:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800df06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df0a:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800df0c:	f107 0310 	add.w	r3, r7, #16
 800df10:	2208      	movs	r2, #8
 800df12:	2120      	movs	r1, #32
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 f90b 	bl	800f130 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800df1a:	897b      	ldrh	r3, [r7, #10]
 800df1c:	78ba      	ldrb	r2, [r7, #2]
 800df1e:	2110      	movs	r1, #16
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 faf2 	bl	800e50a <_ZN3USB11dispatchPktEhht>
 800df26:	4603      	mov	r3, r0
 800df28:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800df2a:	7ffb      	ldrb	r3, [r7, #31]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800df30:	7ffb      	ldrb	r3, [r7, #31]
 800df32:	e082      	b.n	800e03a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800df34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df36:	2b00      	cmp	r3, #0
 800df38:	d072      	beq.n	800e020 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800df3a:	7efb      	ldrb	r3, [r7, #27]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d057      	beq.n	800dff0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800df40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df44:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	7893      	ldrb	r3, [r2, #2]
 800df4a:	f043 0302 	orr.w	r3, r3, #2
 800df4e:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800df50:	8bbb      	ldrh	r3, [r7, #28]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d05f      	beq.n	800e016 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800df56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df5a:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800df5c:	68f9      	ldr	r1, [r7, #12]
 800df5e:	897a      	ldrh	r2, [r7, #10]
 800df60:	f107 0008 	add.w	r0, r7, #8
 800df64:	2300      	movs	r3, #0
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df6a:	9300      	str	r3, [sp, #0]
 800df6c:	4603      	mov	r3, r0
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f8a6 	bl	800e0c0 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800df74:	4603      	mov	r3, r0
 800df76:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800df78:	7ffb      	ldrb	r3, [r7, #31]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d114      	bne.n	800dfa8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800df7e:	21f8      	movs	r1, #248	; 0xf8
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7f3 fba9 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800df86:	4603      	mov	r3, r0
 800df88:	f003 0320 	and.w	r3, r3, #32
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	bf0c      	ite	eq
 800df90:	2301      	moveq	r3, #1
 800df92:	2300      	movne	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	f003 0301 	and.w	r3, r3, #1
 800df9c:	b2d9      	uxtb	r1, r3
 800df9e:	7893      	ldrb	r3, [r2, #2]
 800dfa0:	f361 0341 	bfi	r3, r1, #1, #1
 800dfa4:	7093      	strb	r3, [r2, #2]
 800dfa6:	e7d3      	b.n	800df50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800dfa8:	7ffb      	ldrb	r3, [r7, #31]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800dfae:	7ffb      	ldrb	r3, [r7, #31]
 800dfb0:	e043      	b.n	800e03a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800dfb2:	7ffb      	ldrb	r3, [r7, #31]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d111      	bne.n	800dfdc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800dfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00e      	beq.n	800dfdc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800dfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681c      	ldr	r4, [r3, #0]
 800dfc4:	8939      	ldrh	r1, [r7, #8]
 800dfc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dfca:	8bbb      	ldrh	r3, [r7, #28]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	833b      	strh	r3, [r7, #24]
 800dfd2:	f107 0318 	add.w	r3, r7, #24
 800dfd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dfda:	47a0      	blx	r4

                                left -= read;
 800dfdc:	893b      	ldrh	r3, [r7, #8]
 800dfde:	8bba      	ldrh	r2, [r7, #28]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800dfe4:	893b      	ldrh	r3, [r7, #8]
 800dfe6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d812      	bhi.n	800e014 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800dfee:	e7af      	b.n	800df50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	7893      	ldrb	r3, [r2, #2]
 800dff4:	f043 0301 	orr.w	r3, r3, #1
 800dff8:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800dffa:	68f9      	ldr	r1, [r7, #12]
 800dffc:	897a      	ldrh	r2, [r7, #10]
 800dffe:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800e002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4603      	mov	r3, r0
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f953 	bl	800e2b4 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e00e:	4603      	mov	r3, r0
 800e010:	77fb      	strb	r3, [r7, #31]
 800e012:	e000      	b.n	800e016 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800e014:	bf00      	nop
                }
                if(rcode) //return error
 800e016:	7ffb      	ldrb	r3, [r7, #31]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800e01c:	7ffb      	ldrb	r3, [r7, #31]
 800e01e:	e00c      	b.n	800e03a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800e020:	7efb      	ldrb	r3, [r7, #27]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800e026:	21a0      	movs	r1, #160	; 0xa0
 800e028:	e000      	b.n	800e02c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800e02a:	2180      	movs	r1, #128	; 0x80
 800e02c:	897b      	ldrh	r3, [r7, #10]
 800e02e:	78ba      	ldrb	r2, [r7, #2]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fa6a 	bl	800e50a <_ZN3USB11dispatchPktEhht>
 800e036:	4603      	mov	r3, r0
 800e038:	bf00      	nop
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3724      	adds	r7, #36	; 0x24
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd90      	pop	{r4, r7, pc}

0800e042 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e042:	b580      	push	{r7, lr}
 800e044:	b08a      	sub	sp, #40	; 0x28
 800e046:	af02      	add	r7, sp, #8
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	607b      	str	r3, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	72fb      	strb	r3, [r7, #11]
 800e050:	4613      	mov	r3, r2
 800e052:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800e054:	2300      	movs	r3, #0
 800e056:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800e058:	2300      	movs	r3, #0
 800e05a:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e05c:	f107 0018 	add.w	r0, r7, #24
 800e060:	7aba      	ldrb	r2, [r7, #10]
 800e062:	7af9      	ldrb	r1, [r7, #11]
 800e064:	f107 0316 	add.w	r3, r7, #22
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	4603      	mov	r3, r0
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff fea8 	bl	800ddc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e072:	4603      	mov	r3, r0
 800e074:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800e076:	7ffb      	ldrb	r3, [r7, #31]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d010      	beq.n	800e09e <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800e07c:	7ffb      	ldrb	r3, [r7, #31]
 800e07e:	2181      	movs	r1, #129	; 0x81
 800e080:	4618      	mov	r0, r3
 800e082:	f001 f883 	bl	800f18c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800e086:	7afb      	ldrb	r3, [r7, #11]
 800e088:	2181      	movs	r1, #129	; 0x81
 800e08a:	4618      	mov	r0, r3
 800e08c:	f001 f87e 	bl	800f18c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800e090:	7abb      	ldrb	r3, [r7, #10]
 800e092:	2181      	movs	r1, #129	; 0x81
 800e094:	4618      	mov	r0, r3
 800e096:	f001 f879 	bl	800f18c <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800e09a:	7ffb      	ldrb	r3, [r7, #31]
 800e09c:	e00c      	b.n	800e0b8 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800e09e:	69b9      	ldr	r1, [r7, #24]
 800e0a0:	8afa      	ldrh	r2, [r7, #22]
 800e0a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f000 f806 	bl	800e0c0 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	bf00      	nop
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	603b      	str	r3, [r7, #0]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	785b      	ldrb	r3, [r3, #1]
 800e0de:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	789b      	ldrb	r3, [r3, #2]
 800e0ea:	f003 0302 	and.w	r3, r3, #2
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800e0f4:	2320      	movs	r3, #32
 800e0f6:	e000      	b.n	800e0fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	21e8      	movs	r1, #232	; 0xe8
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7f3 fa98 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	781a      	ldrb	r2, [r3, #0]
 800e108:	88fb      	ldrh	r3, [r7, #6]
 800e10a:	2100      	movs	r1, #0
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f9fc 	bl	800e50a <_ZN3USB11dispatchPktEhht>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800e116:	7dfb      	ldrb	r3, [r7, #23]
 800e118:	2b06      	cmp	r3, #6
 800e11a:	d123      	bne.n	800e164 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800e11c:	21f8      	movs	r1, #248	; 0xf8
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7f3 fada 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e124:	4603      	mov	r3, r0
 800e126:	f003 0310 	and.w	r3, r3, #16
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	bf0c      	ite	eq
 800e12e:	2301      	moveq	r3, #1
 800e130:	2300      	movne	r3, #0
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	b2d9      	uxtb	r1, r3
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	7893      	ldrb	r3, [r2, #2]
 800e13e:	f361 0341 	bfi	r3, r1, #1, #1
 800e142:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	789b      	ldrb	r3, [r3, #2]
 800e148:	f003 0302 	and.w	r3, r3, #2
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800e152:	2320      	movs	r3, #32
 800e154:	e000      	b.n	800e158 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800e156:	2310      	movs	r3, #16
 800e158:	461a      	mov	r2, r3
 800e15a:	21e8      	movs	r1, #232	; 0xe8
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7f3 fa69 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800e162:	e06e      	b.n	800e242 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d16c      	bne.n	800e244 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800e16a:	21c8      	movs	r1, #200	; 0xc8
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7f3 fab3 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e172:	4603      	mov	r3, r0
 800e174:	f003 0304 	and.w	r3, r3, #4
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bf0c      	ite	eq
 800e17c:	2301      	moveq	r3, #1
 800e17e:	2300      	movne	r3, #0
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800e186:	23f0      	movs	r3, #240	; 0xf0
 800e188:	75fb      	strb	r3, [r7, #23]
                        break;
 800e18a:	e05c      	b.n	800e246 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800e18c:	2130      	movs	r1, #48	; 0x30
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7f3 faa2 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e194:	4603      	mov	r3, r0
 800e196:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800e198:	7dba      	ldrb	r2, [r7, #22]
 800e19a:	8a7b      	ldrh	r3, [r7, #18]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	dd01      	ble.n	800e1a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800e1a0:	8a7b      	ldrh	r3, [r7, #18]
 800e1a2:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	8a7a      	ldrh	r2, [r7, #18]
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800e1b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	da01      	bge.n	800e1c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800e1c0:	7dba      	ldrb	r2, [r7, #22]
 800e1c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	bfa8      	it	ge
 800e1ca:	4613      	movge	r3, r2
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	6a3b      	ldr	r3, [r7, #32]
 800e1d0:	2108      	movs	r1, #8
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 ffe6 	bl	800f1a4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800e1d8:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800e1da:	2204      	movs	r2, #4
 800e1dc:	21c8      	movs	r1, #200	; 0xc8
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7f3 fa28 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	881a      	ldrh	r2, [r3, #0]
 800e1e8:	7dbb      	ldrb	r3, [r7, #22]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	4413      	add	r3, r2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800e1f4:	7dba      	ldrb	r2, [r7, #22]
 800e1f6:	7c7b      	ldrb	r3, [r7, #17]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d304      	bcc.n	800e206 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	8a7a      	ldrh	r2, [r7, #18]
 800e202:	429a      	cmp	r2, r3
 800e204:	d813      	bhi.n	800e22e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800e206:	21f8      	movs	r1, #248	; 0xf8
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7f3 fa65 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e20e:	4603      	mov	r3, r0
 800e210:	f003 0310 	and.w	r3, r3, #16
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800e218:	2101      	movs	r1, #1
 800e21a:	e000      	b.n	800e21e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800e21c:	2100      	movs	r1, #0
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	7893      	ldrb	r3, [r2, #2]
 800e222:	f361 0341 	bfi	r3, r1, #1, #1
 800e226:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	75fb      	strb	r3, [r7, #23]
                        break;
 800e22c:	e00b      	b.n	800e246 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 800e22e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e232:	2b00      	cmp	r3, #0
 800e234:	f43f af66 	beq.w	800e104 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800e238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7f3 fd05 	bl	8001c4c <HAL_Delay>
        } //while( 1 )
 800e242:	e75f      	b.n	800e104 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800e244:	bf00      	nop
        return ( rcode);
 800e246:	7dfb      	ldrb	r3, [r7, #23]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af02      	add	r7, sp, #8
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	4608      	mov	r0, r1
 800e25a:	4611      	mov	r1, r2
 800e25c:	461a      	mov	r2, r3
 800e25e:	4603      	mov	r3, r0
 800e260:	70fb      	strb	r3, [r7, #3]
 800e262:	460b      	mov	r3, r1
 800e264:	70bb      	strb	r3, [r7, #2]
 800e266:	4613      	mov	r3, r2
 800e268:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e272:	f107 0010 	add.w	r0, r7, #16
 800e276:	78ba      	ldrb	r2, [r7, #2]
 800e278:	78f9      	ldrb	r1, [r7, #3]
 800e27a:	f107 030e 	add.w	r3, r7, #14
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	4603      	mov	r3, r0
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff fd9d 	bl	800ddc2 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	e00a      	b.n	800e2ac <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800e296:	6939      	ldr	r1, [r7, #16]
 800e298:	89fa      	ldrh	r2, [r7, #14]
 800e29a:	8838      	ldrh	r0, [r7, #0]
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f806 	bl	800e2b4 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	bf00      	nop
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b08a      	sub	sp, #40	; 0x28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	4611      	mov	r1, r2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	80fb      	strh	r3, [r7, #6]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e2d4:	88bb      	ldrh	r3, [r7, #4]
 800e2d6:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	785b      	ldrb	r3, [r3, #1]
 800e2dc:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e2de:	7efb      	ldrb	r3, [r7, #27]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e2e4:	7efb      	ldrb	r3, [r7, #27]
 800e2e6:	2b40      	cmp	r3, #64	; 0x40
 800e2e8:	d901      	bls.n	800e2ee <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e2ea:	23da      	movs	r3, #218	; 0xda
 800e2ec:	e109      	b.n	800e502 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e2ee:	f7f3 fca1 	bl	8001c34 <HAL_GetTick>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	789b      	ldrb	r3, [r3, #2]
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 800e30a:	2380      	movs	r3, #128	; 0x80
 800e30c:	e000      	b.n	800e310 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 800e30e:	2340      	movs	r3, #64	; 0x40
 800e310:	461a      	mov	r2, r3
 800e312:	21e8      	movs	r1, #232	; 0xe8
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f7f3 f98d 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e31a:	8bbb      	ldrh	r3, [r7, #28]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 80da 	beq.w	800e4d6 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e32c:	7efb      	ldrb	r3, [r7, #27]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	8bba      	ldrh	r2, [r7, #28]
 800e332:	4293      	cmp	r3, r2
 800e334:	bf28      	it	cs
 800e336:	4613      	movcs	r3, r2
 800e338:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e33a:	8a7b      	ldrh	r3, [r7, #18]
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	2110      	movs	r1, #16
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 fef4 	bl	800f130 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e348:	8a7b      	ldrh	r3, [r7, #18]
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	461a      	mov	r2, r3
 800e34e:	2138      	movs	r1, #56	; 0x38
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7f3 f96f 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	f043 0320 	orr.w	r3, r3, #32
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	461a      	mov	r2, r3
 800e362:	21f0      	movs	r1, #240	; 0xf0
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f7f3 f965 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e36a:	21c8      	movs	r1, #200	; 0xc8
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7f3 f9b3 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e372:	4603      	mov	r3, r0
 800e374:	b25b      	sxtb	r3, r3
 800e376:	43db      	mvns	r3, r3
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	09db      	lsrs	r3, r3, #7
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d000      	beq.n	800e384 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 800e382:	e7f2      	b.n	800e36a <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e384:	2280      	movs	r2, #128	; 0x80
 800e386:	21c8      	movs	r1, #200	; 0xc8
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7f3 f953 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e38e:	21f8      	movs	r1, #248	; 0xf8
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f7f3 f9a1 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e396:	4603      	mov	r3, r0
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d008      	beq.n	800e3ba <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 800e3a8:	f7f3 fc44 	bl	8001c34 <HAL_GetTick>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	da01      	bge.n	800e3ba <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e000      	b.n	800e3bc <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 8081 	beq.w	800e4c4 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3c6:	2b0e      	cmp	r3, #14
 800e3c8:	d012      	beq.n	800e3f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 800e3ca:	2b0e      	cmp	r3, #14
 800e3cc:	f300 8085 	bgt.w	800e4da <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	d002      	beq.n	800e3da <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 800e3d4:	2b06      	cmp	r3, #6
 800e3d6:	d015      	beq.n	800e404 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e3d8:	e07f      	b.n	800e4da <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 800e3da:	8bfb      	ldrh	r3, [r7, #30]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e3e0:	88fb      	ldrh	r3, [r7, #6]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d032      	beq.n	800e44c <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 800e3e6:	8bfa      	ldrh	r2, [r7, #30]
 800e3e8:	88fb      	ldrh	r3, [r7, #6]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d12e      	bne.n	800e44c <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 800e3ee:	e075      	b.n	800e4dc <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 800e3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e3fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d126      	bne.n	800e450 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 800e402:	e06b      	b.n	800e4dc <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e404:	21f8      	movs	r1, #248	; 0xf8
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7f3 f966 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b00      	cmp	r3, #0
 800e414:	bf0c      	ite	eq
 800e416:	2301      	moveq	r3, #1
 800e418:	2300      	movne	r3, #0
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f003 0301 	and.w	r3, r3, #1
 800e420:	b2d9      	uxtb	r1, r3
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	7893      	ldrb	r3, [r2, #2]
 800e426:	f361 0300 	bfi	r3, r1, #0, #1
 800e42a:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	789b      	ldrb	r3, [r3, #2]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	b2db      	uxtb	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 800e43a:	2380      	movs	r3, #128	; 0x80
 800e43c:	e000      	b.n	800e440 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 800e43e:	2340      	movs	r3, #64	; 0x40
 800e440:	461a      	mov	r2, r3
 800e442:	21e8      	movs	r1, #232	; 0xe8
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7f3 f8f5 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e44a:	e002      	b.n	800e452 <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 800e44c:	bf00      	nop
 800e44e:	e000      	b.n	800e452 <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 800e450:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e452:	2200      	movs	r2, #0
 800e454:	2138      	movs	r1, #56	; 0x38
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f7f3 f8ec 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e45c:	6a3b      	ldr	r3, [r7, #32]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	461a      	mov	r2, r3
 800e462:	2110      	movs	r1, #16
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f7f3 f8e5 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e46a:	8a7b      	ldrh	r3, [r7, #18]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	461a      	mov	r2, r3
 800e470:	2138      	movs	r1, #56	; 0x38
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7f3 f8de 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f043 0320 	orr.w	r3, r3, #32
 800e480:	b2db      	uxtb	r3, r3
 800e482:	461a      	mov	r2, r3
 800e484:	21f0      	movs	r1, #240	; 0xf0
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7f3 f8d4 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e48c:	21c8      	movs	r1, #200	; 0xc8
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7f3 f922 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e494:	4603      	mov	r3, r0
 800e496:	b25b      	sxtb	r3, r3
 800e498:	43db      	mvns	r3, r3
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	09db      	lsrs	r3, r3, #7
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d000      	beq.n	800e4a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 800e4a4:	e7f2      	b.n	800e48c <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e4a6:	2280      	movs	r2, #128	; 0x80
 800e4a8:	21c8      	movs	r1, #200	; 0xc8
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7f3 f8c2 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e4b0:	21f8      	movs	r1, #248	; 0xf8
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7f3 f910 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f003 030f 	and.w	r3, r3, #15
 800e4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e4c2:	e76d      	b.n	800e3a0 <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e4c4:	8bba      	ldrh	r2, [r7, #28]
 800e4c6:	8a7b      	ldrh	r3, [r7, #18]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e4cc:	8a7b      	ldrh	r3, [r7, #18]
 800e4ce:	6a3a      	ldr	r2, [r7, #32]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e4d4:	e721      	b.n	800e31a <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 800e4d6:	bf00      	nop
 800e4d8:	e000      	b.n	800e4dc <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 800e4da:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e4dc:	21f8      	movs	r1, #248	; 0xf8
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f7f3 f8fa 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f003 0320 	and.w	r3, r3, #32
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	e000      	b.n	800e4f4 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	68ba      	ldr	r2, [r7, #8]
 800e4f6:	7893      	ldrb	r3, [r2, #2]
 800e4f8:	f361 0300 	bfi	r3, r1, #0, #1
 800e4fc:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e502:	4618      	mov	r0, r3
 800e504:	3728      	adds	r7, #40	; 0x28
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b086      	sub	sp, #24
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	4608      	mov	r0, r1
 800e514:	4611      	mov	r1, r2
 800e516:	461a      	mov	r2, r3
 800e518:	4603      	mov	r3, r0
 800e51a:	70fb      	strb	r3, [r7, #3]
 800e51c:	460b      	mov	r3, r1
 800e51e:	70bb      	strb	r3, [r7, #2]
 800e520:	4613      	mov	r3, r2
 800e522:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e524:	f7f3 fb86 	bl	8001c34 <HAL_GetTick>
 800e528:	4603      	mov	r3, r0
 800e52a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e52e:	3308      	adds	r3, #8
 800e530:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e532:	2300      	movs	r3, #0
 800e534:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e53e:	f7f3 fb79 	bl	8001c34 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	0fdb      	lsrs	r3, r3, #31
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d04c      	beq.n	800e5ea <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e550:	78fa      	ldrb	r2, [r7, #3]
 800e552:	78bb      	ldrb	r3, [r7, #2]
 800e554:	4313      	orrs	r3, r2
 800e556:	b2db      	uxtb	r3, r3
 800e558:	461a      	mov	r2, r3
 800e55a:	21f0      	movs	r1, #240	; 0xf0
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7f3 f869 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e562:	23ff      	movs	r3, #255	; 0xff
 800e564:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e566:	f7f3 fb65 	bl	8001c34 <HAL_GetTick>
 800e56a:	4602      	mov	r2, r0
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	0fdb      	lsrs	r3, r3, #31
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d010      	beq.n	800e59a <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e578:	21c8      	movs	r1, #200	; 0xc8
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f3 f8ac 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	daec      	bge.n	800e566 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e58c:	2280      	movs	r2, #128	; 0x80
 800e58e:	21c8      	movs	r1, #200	; 0xc8
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7f3 f84f 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e596:	2300      	movs	r3, #0
 800e598:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e59a:	21f8      	movs	r1, #248	; 0xf8
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7f3 f89b 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f003 030f 	and.w	r3, r3, #15
 800e5a8:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	d002      	beq.n	800e5b6 <_ZN3USB11dispatchPktEhht+0xac>
 800e5b0:	2b0e      	cmp	r3, #14
 800e5b2:	d00c      	beq.n	800e5ce <_ZN3USB11dispatchPktEhht+0xc4>
 800e5b4:	e013      	b.n	800e5de <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 800e5b6:	8abb      	ldrh	r3, [r7, #20]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e5bc:	883b      	ldrh	r3, [r7, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00f      	beq.n	800e5e2 <_ZN3USB11dispatchPktEhht+0xd8>
 800e5c2:	8aba      	ldrh	r2, [r7, #20]
 800e5c4:	883b      	ldrh	r3, [r7, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d10b      	bne.n	800e5e2 <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 800e5ca:	7dfb      	ldrb	r3, [r7, #23]
 800e5cc:	e00e      	b.n	800e5ec <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e5ce:	7dbb      	ldrb	r3, [r7, #22]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e5d4:	7dbb      	ldrb	r3, [r7, #22]
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	d105      	bne.n	800e5e6 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	e006      	b.n	800e5ec <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 800e5de:	7dfb      	ldrb	r3, [r7, #23]
 800e5e0:	e004      	b.n	800e5ec <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 800e5e2:	bf00      	nop
 800e5e4:	e7ab      	b.n	800e53e <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 800e5e6:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e5e8:	e7a9      	b.n	800e53e <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 fdfd 	bl	800f200 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fe12 	bl	800f230 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e60c:	4603      	mov	r3, r0
 800e60e:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e610:	7b3b      	ldrb	r3, [r7, #12]
 800e612:	2b03      	cmp	r3, #3
 800e614:	d82e      	bhi.n	800e674 <_ZN3USB4TaskEv+0x80>
 800e616:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <_ZN3USB4TaskEv+0x28>)
 800e618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61c:	0800e639 	.word	0x0800e639
 800e620:	0800e62d 	.word	0x0800e62d
 800e624:	0800e655 	.word	0x0800e655
 800e628:	0800e651 	.word	0x0800e651
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e62c:	4bbf      	ldr	r3, [pc, #764]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e62e:	2213      	movs	r2, #19
 800e630:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e632:	2300      	movs	r3, #0
 800e634:	73fb      	strb	r3, [r7, #15]
                        break;
 800e636:	e01d      	b.n	800e674 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e638:	4bbc      	ldr	r3, [pc, #752]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e640:	2b10      	cmp	r3, #16
 800e642:	d002      	beq.n	800e64a <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e644:	4bb9      	ldr	r3, [pc, #740]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e646:	2211      	movs	r2, #17
 800e648:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]
                        break;
 800e64e:	e011      	b.n	800e674 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 800e650:	2301      	movs	r3, #1
 800e652:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e654:	4bb5      	ldr	r3, [pc, #724]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e65c:	2b10      	cmp	r3, #16
 800e65e:	d108      	bne.n	800e672 <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e660:	f7f3 fae8 	bl	8001c34 <HAL_GetTick>
 800e664:	4603      	mov	r3, r0
 800e666:	33c8      	adds	r3, #200	; 0xc8
 800e668:	4ab1      	ldr	r2, [pc, #708]	; (800e930 <_ZN3USB4TaskEv+0x33c>)
 800e66a:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e66c:	4baf      	ldr	r3, [pc, #700]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e66e:	2220      	movs	r2, #32
 800e670:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e672:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e674:	2300      	movs	r3, #0
 800e676:	73bb      	strb	r3, [r7, #14]
 800e678:	7bbb      	ldrb	r3, [r7, #14]
 800e67a:	2b0f      	cmp	r3, #15
 800e67c:	d81b      	bhi.n	800e6b6 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 800e67e:	7bba      	ldrb	r2, [r7, #14]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	321e      	adds	r2, #30
 800e684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d010      	beq.n	800e6ae <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 800e68c:	7bba      	ldrb	r2, [r7, #14]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	321e      	adds	r2, #30
 800e692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e696:	7bba      	ldrb	r2, [r7, #14]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	321e      	adds	r2, #30
 800e69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	330c      	adds	r3, #12
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4608      	mov	r0, r1
 800e6a8:	4798      	blx	r3
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e6ae:	7bbb      	ldrb	r3, [r7, #14]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	73bb      	strb	r3, [r7, #14]
 800e6b4:	e7e0      	b.n	800e678 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 800e6b6:	4b9d      	ldr	r3, [pc, #628]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2ba0      	cmp	r3, #160	; 0xa0
 800e6bc:	f000 8123 	beq.w	800e906 <_ZN3USB4TaskEv+0x312>
 800e6c0:	2ba0      	cmp	r3, #160	; 0xa0
 800e6c2:	f300 812f 	bgt.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6c6:	2b90      	cmp	r3, #144	; 0x90
 800e6c8:	f000 811f 	beq.w	800e90a <_ZN3USB4TaskEv+0x316>
 800e6cc:	2b90      	cmp	r3, #144	; 0x90
 800e6ce:	f300 8129 	bgt.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6d2:	2b80      	cmp	r3, #128	; 0x80
 800e6d4:	f000 80fe 	beq.w	800e8d4 <_ZN3USB4TaskEv+0x2e0>
 800e6d8:	2b80      	cmp	r3, #128	; 0x80
 800e6da:	f300 8123 	bgt.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6de:	2b51      	cmp	r3, #81	; 0x51
 800e6e0:	f000 80ea 	beq.w	800e8b8 <_ZN3USB4TaskEv+0x2c4>
 800e6e4:	2b51      	cmp	r3, #81	; 0x51
 800e6e6:	f300 811d 	bgt.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6ea:	2b40      	cmp	r3, #64	; 0x40
 800e6ec:	dc6a      	bgt.n	800e7c4 <_ZN3USB4TaskEv+0x1d0>
 800e6ee:	2b11      	cmp	r3, #17
 800e6f0:	f2c0 8118 	blt.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6f4:	3b11      	subs	r3, #17
 800e6f6:	2b2f      	cmp	r3, #47	; 0x2f
 800e6f8:	f200 8114 	bhi.w	800e924 <_ZN3USB4TaskEv+0x330>
 800e6fc:	a201      	add	r2, pc, #4	; (adr r2, 800e704 <_ZN3USB4TaskEv+0x110>)
 800e6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e702:	bf00      	nop
 800e704:	0800e7cb 	.word	0x0800e7cb
 800e708:	0800e90f 	.word	0x0800e90f
 800e70c:	0800e90f 	.word	0x0800e90f
 800e710:	0800e925 	.word	0x0800e925
 800e714:	0800e925 	.word	0x0800e925
 800e718:	0800e925 	.word	0x0800e925
 800e71c:	0800e925 	.word	0x0800e925
 800e720:	0800e925 	.word	0x0800e925
 800e724:	0800e925 	.word	0x0800e925
 800e728:	0800e925 	.word	0x0800e925
 800e72c:	0800e925 	.word	0x0800e925
 800e730:	0800e925 	.word	0x0800e925
 800e734:	0800e925 	.word	0x0800e925
 800e738:	0800e925 	.word	0x0800e925
 800e73c:	0800e925 	.word	0x0800e925
 800e740:	0800e81b 	.word	0x0800e81b
 800e744:	0800e925 	.word	0x0800e925
 800e748:	0800e925 	.word	0x0800e925
 800e74c:	0800e925 	.word	0x0800e925
 800e750:	0800e925 	.word	0x0800e925
 800e754:	0800e925 	.word	0x0800e925
 800e758:	0800e925 	.word	0x0800e925
 800e75c:	0800e925 	.word	0x0800e925
 800e760:	0800e925 	.word	0x0800e925
 800e764:	0800e925 	.word	0x0800e925
 800e768:	0800e925 	.word	0x0800e925
 800e76c:	0800e925 	.word	0x0800e925
 800e770:	0800e925 	.word	0x0800e925
 800e774:	0800e925 	.word	0x0800e925
 800e778:	0800e925 	.word	0x0800e925
 800e77c:	0800e925 	.word	0x0800e925
 800e780:	0800e837 	.word	0x0800e837
 800e784:	0800e925 	.word	0x0800e925
 800e788:	0800e925 	.word	0x0800e925
 800e78c:	0800e925 	.word	0x0800e925
 800e790:	0800e925 	.word	0x0800e925
 800e794:	0800e925 	.word	0x0800e925
 800e798:	0800e925 	.word	0x0800e925
 800e79c:	0800e925 	.word	0x0800e925
 800e7a0:	0800e925 	.word	0x0800e925
 800e7a4:	0800e925 	.word	0x0800e925
 800e7a8:	0800e925 	.word	0x0800e925
 800e7ac:	0800e925 	.word	0x0800e925
 800e7b0:	0800e925 	.word	0x0800e925
 800e7b4:	0800e925 	.word	0x0800e925
 800e7b8:	0800e925 	.word	0x0800e925
 800e7bc:	0800e925 	.word	0x0800e925
 800e7c0:	0800e849 	.word	0x0800e849
 800e7c4:	2b50      	cmp	r3, #80	; 0x50
 800e7c6:	d05f      	beq.n	800e888 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e7c8:	e0ac      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        init();
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff fa8e 	bl	800dcec <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	737b      	strb	r3, [r7, #13]
 800e7d4:	7b7b      	ldrb	r3, [r7, #13]
 800e7d6:	2b0f      	cmp	r3, #15
 800e7d8:	d81b      	bhi.n	800e812 <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 800e7da:	7b7a      	ldrb	r2, [r7, #13]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	321e      	adds	r2, #30
 800e7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d010      	beq.n	800e80a <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 800e7e8:	7b7a      	ldrb	r2, [r7, #13]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	321e      	adds	r2, #30
 800e7ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7f2:	7b7a      	ldrb	r2, [r7, #13]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	321e      	adds	r2, #30
 800e7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3308      	adds	r3, #8
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4608      	mov	r0, r1
 800e804:	4798      	blx	r3
 800e806:	4603      	mov	r3, r0
 800e808:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e80a:	7b7b      	ldrb	r3, [r7, #13]
 800e80c:	3301      	adds	r3, #1
 800e80e:	737b      	strb	r3, [r7, #13]
 800e810:	e7e0      	b.n	800e7d4 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e812:	4b46      	ldr	r3, [pc, #280]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e814:	2212      	movs	r2, #18
 800e816:	701a      	strb	r2, [r3, #0]
                        break;
 800e818:	e084      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e81a:	f7f3 fa0b 	bl	8001c34 <HAL_GetTick>
 800e81e:	4602      	mov	r2, r0
 800e820:	4b43      	ldr	r3, [pc, #268]	; (800e930 <_ZN3USB4TaskEv+0x33c>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	43db      	mvns	r3, r3
 800e828:	0fdb      	lsrs	r3, r3, #31
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d070      	beq.n	800e912 <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e830:	4b3e      	ldr	r3, [pc, #248]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e832:	2230      	movs	r2, #48	; 0x30
 800e834:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e836:	2201      	movs	r2, #1
 800e838:	21e8      	movs	r1, #232	; 0xe8
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7f2 fefa 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e840:	4b3a      	ldr	r3, [pc, #232]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e842:	2240      	movs	r2, #64	; 0x40
 800e844:	701a      	strb	r2, [r3, #0]
                        break;
 800e846:	e06d      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e848:	21e8      	movs	r1, #232	; 0xe8
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7f2 ff44 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e850:	4603      	mov	r3, r0
 800e852:	f003 0301 	and.w	r3, r3, #1
 800e856:	2b00      	cmp	r3, #0
 800e858:	bf0c      	ite	eq
 800e85a:	2301      	moveq	r3, #1
 800e85c:	2300      	movne	r3, #0
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	d058      	beq.n	800e916 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e864:	21d8      	movs	r1, #216	; 0xd8
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f2 ff36 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f043 0308 	orr.w	r3, r3, #8
 800e872:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e874:	7b3b      	ldrb	r3, [r7, #12]
 800e876:	461a      	mov	r2, r3
 800e878:	21d8      	movs	r1, #216	; 0xd8
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7f2 feda 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e880:	4b2a      	ldr	r3, [pc, #168]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e882:	2250      	movs	r2, #80	; 0x50
 800e884:	701a      	strb	r2, [r3, #0]
                        break;
 800e886:	e046      	b.n	800e916 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e888:	21c8      	movs	r1, #200	; 0xc8
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7f2 ff24 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e890:	4603      	mov	r3, r0
 800e892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e896:	2b00      	cmp	r3, #0
 800e898:	bf14      	ite	ne
 800e89a:	2301      	movne	r3, #1
 800e89c:	2300      	moveq	r3, #0
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d03a      	beq.n	800e91a <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e8a4:	4b21      	ldr	r3, [pc, #132]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e8a6:	2251      	movs	r2, #81	; 0x51
 800e8a8:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e8aa:	f7f3 f9c3 	bl	8001c34 <HAL_GetTick>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	3314      	adds	r3, #20
 800e8b2:	4a1f      	ldr	r2, [pc, #124]	; (800e930 <_ZN3USB4TaskEv+0x33c>)
 800e8b4:	6013      	str	r3, [r2, #0]
                        break;
 800e8b6:	e030      	b.n	800e91a <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e8b8:	f7f3 f9bc 	bl	8001c34 <HAL_GetTick>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	4b1c      	ldr	r3, [pc, #112]	; (800e930 <_ZN3USB4TaskEv+0x33c>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	0fdb      	lsrs	r3, r3, #31
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d027      	beq.n	800e91e <_ZN3USB4TaskEv+0x32a>
 800e8ce:	4b17      	ldr	r3, [pc, #92]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e8d0:	2280      	movs	r2, #128	; 0x80
 800e8d2:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e8d4:	7bfb      	ldrb	r3, [r7, #15]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2100      	movs	r1, #0
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 f920 	bl	800eb20 <_ZN3USB11ConfiguringEhhb>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e8e4:	7afb      	ldrb	r3, [r7, #11]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d009      	beq.n	800e8fe <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	2bd2      	cmp	r3, #210	; 0xd2
 800e8ee:	d018      	beq.n	800e922 <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 800e8f0:	4a10      	ldr	r2, [pc, #64]	; (800e934 <_ZN3USB4TaskEv+0x340>)
 800e8f2:	7afb      	ldrb	r3, [r7, #11]
 800e8f4:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e8f6:	4b0d      	ldr	r3, [pc, #52]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e8f8:	22a0      	movs	r2, #160	; 0xa0
 800e8fa:	701a      	strb	r2, [r3, #0]
                        break;
 800e8fc:	e011      	b.n	800e922 <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 800e8fe:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <_ZN3USB4TaskEv+0x338>)
 800e900:	2290      	movs	r2, #144	; 0x90
 800e902:	701a      	strb	r2, [r3, #0]
                        break;
 800e904:	e00d      	b.n	800e922 <_ZN3USB4TaskEv+0x32e>
                        break;
 800e906:	bf00      	nop
 800e908:	e00c      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        break;
 800e90a:	bf00      	nop
 800e90c:	e00a      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        break;
 800e90e:	bf00      	nop
 800e910:	e008      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 800e912:	bf00      	nop
 800e914:	e006      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        break;
 800e916:	bf00      	nop
 800e918:	e004      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        break;
 800e91a:	bf00      	nop
 800e91c:	e002      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 800e91e:	bf00      	nop
 800e920:	e000      	b.n	800e924 <_ZN3USB4TaskEv+0x330>
                        break;
 800e922:	bf00      	nop
}
 800e924:	bf00      	nop
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20000671 	.word	0x20000671
 800e930:	20000674 	.word	0x20000674
 800e934:	20000670 	.word	0x20000670

0800e938 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	4608      	mov	r0, r1
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	4603      	mov	r3, r0
 800e948:	70fb      	strb	r3, [r7, #3]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70bb      	strb	r3, [r7, #2]
 800e94e:	4613      	mov	r3, r2
 800e950:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e952:	2300      	movs	r3, #0
 800e954:	617b      	str	r3, [r7, #20]
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2100      	movs	r1, #0
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 fbc0 	bl	800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e964:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e96c:	23d6      	movs	r3, #214	; 0xd6
 800e96e:	e03a      	b.n	800e9e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d101      	bne.n	800e97c <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e978:	23d7      	movs	r3, #215	; 0xd7
 800e97a:	e034      	b.n	800e9e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	787a      	ldrb	r2, [r7, #1]
 800e980:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	78bb      	ldrb	r3, [r7, #2]
 800e986:	78f9      	ldrb	r1, [r7, #3]
 800e988:	2200      	movs	r2, #0
 800e98a:	f000 fc5f 	bl	800f24c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e98e:	4603      	mov	r3, r0
 800e990:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e992:	7bfb      	ldrb	r3, [r7, #15]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e998:	23d4      	movs	r3, #212	; 0xd4
 800e99a:	e024      	b.n	800e9e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7bfa      	ldrb	r2, [r7, #15]
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 fb9e 	bl	800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e9a8:	6138      	str	r0, [r7, #16]

        if(!p)
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e9b0:	23d6      	movs	r3, #214	; 0xd6
 800e9b2:	e018      	b.n	800e9e6 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	787a      	ldrb	r2, [r7, #1]
 800e9b8:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800e9ba:	7bfb      	ldrb	r3, [r7, #15]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2100      	movs	r1, #0
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 fae3 	bl	800ef8c <_ZN3USB7setAddrEhhh>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800e9ca:	7bbb      	ldrb	r3, [r7, #14]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	7bfa      	ldrb	r2, [r7, #15]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fcd0 	bl	800f37c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800e9e0:	7bbb      	ldrb	r3, [r7, #14]
 800e9e2:	e000      	b.n	800e9e6 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800e9e4:	2300      	movs	r3, #0
};
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800e9ee:	b590      	push	{r4, r7, lr}
 800e9f0:	b085      	sub	sp, #20
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	4608      	mov	r0, r1
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	70fb      	strb	r3, [r7, #3]
 800ea00:	460b      	mov	r3, r1
 800ea02:	70bb      	strb	r3, [r7, #2]
 800ea04:	4613      	mov	r3, r2
 800ea06:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800ea0c:	78fa      	ldrb	r2, [r7, #3]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	321e      	adds	r2, #30
 800ea12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea16:	78fa      	ldrb	r2, [r7, #3]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	321e      	adds	r2, #30
 800ea1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3304      	adds	r3, #4
 800ea24:	681c      	ldr	r4, [r3, #0]
 800ea26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea2a:	787a      	ldrb	r2, [r7, #1]
 800ea2c:	78b9      	ldrb	r1, [r7, #2]
 800ea2e:	47a0      	blx	r4
 800ea30:	4603      	mov	r3, r0
 800ea32:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
 800ea36:	2be0      	cmp	r3, #224	; 0xe0
 800ea38:	d11c      	bne.n	800ea74 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800ea3a:	78bb      	ldrb	r3, [r7, #2]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d108      	bne.n	800ea52 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800ea40:	2201      	movs	r2, #1
 800ea42:	21e8      	movs	r1, #232	; 0xe8
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7f2 fdf5 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800ea4a:	2066      	movs	r0, #102	; 0x66
 800ea4c:	f7f3 f8fe 	bl	8001c4c <HAL_Delay>
 800ea50:	e022      	b.n	800ea98 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800ea52:	78ba      	ldrb	r2, [r7, #2]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	321e      	adds	r2, #30
 800ea58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea5c:	78ba      	ldrb	r2, [r7, #2]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	321e      	adds	r2, #30
 800ea62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3314      	adds	r3, #20
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	787a      	ldrb	r2, [r7, #1]
 800ea6e:	4611      	mov	r1, r2
 800ea70:	4798      	blx	r3
 800ea72:	e011      	b.n	800ea98 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	2b0d      	cmp	r3, #13
 800ea78:	d109      	bne.n	800ea8e <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d806      	bhi.n	800ea8e <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800ea80:	2064      	movs	r0, #100	; 0x64
 800ea82:	f7f3 f8e3 	bl	8001c4c <HAL_Delay>
                retries++;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ea8c:	e7be      	b.n	800ea0c <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
 800ea96:	e03f      	b.n	800eb18 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800ea98:	78fa      	ldrb	r2, [r7, #3]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	321e      	adds	r2, #30
 800ea9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eaa2:	78fa      	ldrb	r2, [r7, #3]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	321e      	adds	r2, #30
 800eaa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681c      	ldr	r4, [r3, #0]
 800eab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eab4:	787a      	ldrb	r2, [r7, #1]
 800eab6:	78b9      	ldrb	r1, [r7, #2]
 800eab8:	47a0      	blx	r4
 800eaba:	4603      	mov	r3, r0
 800eabc:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800eabe:	7bbb      	ldrb	r3, [r7, #14]
 800eac0:	2b0d      	cmp	r3, #13
 800eac2:	d109      	bne.n	800ead8 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d806      	bhi.n	800ead8 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800eaca:	2064      	movs	r0, #100	; 0x64
 800eacc:	f7f3 f8be 	bl	8001c4c <HAL_Delay>
                retries++;
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	3301      	adds	r3, #1
 800ead4:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ead6:	e799      	b.n	800ea0c <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800ead8:	7bbb      	ldrb	r3, [r7, #14]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d01b      	beq.n	800eb16 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800eade:	78bb      	ldrb	r3, [r7, #2]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d108      	bne.n	800eaf6 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800eae4:	2201      	movs	r2, #1
 800eae6:	21e8      	movs	r1, #232	; 0xe8
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7f2 fda3 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800eaee:	2066      	movs	r0, #102	; 0x66
 800eaf0:	f7f3 f8ac 	bl	8001c4c <HAL_Delay>
 800eaf4:	e00f      	b.n	800eb16 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800eaf6:	78ba      	ldrb	r2, [r7, #2]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	321e      	adds	r2, #30
 800eafc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb00:	78ba      	ldrb	r2, [r7, #2]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	321e      	adds	r2, #30
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3314      	adds	r3, #20
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	787a      	ldrb	r2, [r7, #1]
 800eb12:	4611      	mov	r1, r2
 800eb14:	4798      	blx	r3
                }
        }
        return rcode;
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b090      	sub	sp, #64	; 0x40
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	4608      	mov	r0, r1
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	4603      	mov	r3, r0
 800eb30:	70fb      	strb	r3, [r7, #3]
 800eb32:	460b      	mov	r3, r1
 800eb34:	70bb      	strb	r3, [r7, #2]
 800eb36:	4613      	mov	r3, r2
 800eb38:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800eb40:	f107 030c 	add.w	r3, r7, #12
 800eb44:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800eb52:	2308      	movs	r3, #8
 800eb54:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800eb56:	7abb      	ldrb	r3, [r7, #10]
 800eb58:	f36f 0300 	bfc	r3, #0, #1
 800eb5c:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800eb5e:	7abb      	ldrb	r3, [r7, #10]
 800eb60:	f36f 0341 	bfc	r3, #1, #1
 800eb64:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800eb66:	7abb      	ldrb	r3, [r7, #10]
 800eb68:	220f      	movs	r2, #15
 800eb6a:	f362 0387 	bfi	r3, r2, #2, #6
 800eb6e:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7fa fd13 	bl	800959c <_ZN3USB14GetAddressPoolEv>
 800eb76:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2100      	movs	r1, #0
 800eb80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb82:	4798      	blx	r3
 800eb84:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800eb8c:	23d6      	movs	r3, #214	; 0xd6
 800eb8e:	e15c      	b.n	800ee4a <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	f107 0208 	add.w	r2, r7, #8
 800eb9c:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	787a      	ldrb	r2, [r7, #1]
 800eba2:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800eba4:	f107 030c 	add.w	r3, r7, #12
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	2312      	movs	r3, #18
 800ebac:	2200      	movs	r2, #0
 800ebae:	2100      	movs	r1, #0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f94e 	bl	800ee52 <_ZN3USB11getDevDescrEhhtPh>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebc0:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800ebc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d002      	beq.n	800ebd0 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800ebca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebce:	e13c      	b.n	800ee4a <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	7a1a      	ldrb	r2, [r3, #8]
 800ebd4:	7a5b      	ldrb	r3, [r3, #9]
 800ebd6:	021b      	lsls	r3, r3, #8
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	7a9a      	ldrb	r2, [r3, #10]
 800ebe0:	7adb      	ldrb	r3, [r3, #11]
 800ebe2:	021b      	lsls	r3, r3, #8
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	791b      	ldrb	r3, [r3, #4]
 800ebec:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	795b      	ldrb	r3, [r3, #5]
 800ebf2:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ebfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebfe:	2b0f      	cmp	r3, #15
 800ec00:	f200 8081 	bhi.w	800ed06 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ec04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	321e      	adds	r2, #30
 800ec0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d06e      	beq.n	800ecf2 <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ec14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	321e      	adds	r2, #30
 800ec1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	321e      	adds	r2, #30
 800ec28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3310      	adds	r3, #16
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4608      	mov	r0, r1
 800ec34:	4798      	blx	r3
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bf14      	ite	ne
 800ec3c:	2301      	movne	r3, #1
 800ec3e:	2300      	moveq	r3, #0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d157      	bne.n	800ecf6 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800ec46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	321e      	adds	r2, #30
 800ec4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ec52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	321e      	adds	r2, #30
 800ec5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3320      	adds	r3, #32
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	7fba      	ldrb	r2, [r7, #30]
 800ec66:	4611      	mov	r1, r2
 800ec68:	4798      	blx	r3
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d02b      	beq.n	800ecc8 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ec70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	321e      	adds	r2, #30
 800ec78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ec7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	321e      	adds	r2, #30
 800ec84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3318      	adds	r3, #24
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	8c3a      	ldrh	r2, [r7, #32]
 800ec90:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ec92:	4798      	blx	r3
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d114      	bne.n	800ecc4 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ec9a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	321e      	adds	r2, #30
 800eca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eca6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	321e      	adds	r2, #30
 800ecae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	331c      	adds	r3, #28
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	7ffa      	ldrb	r2, [r7, #31]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	4798      	blx	r3
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d001      	beq.n	800ecc8 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e000      	b.n	800ecca <_ZN3USB11ConfiguringEhhb+0x1aa>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d014      	beq.n	800ecf8 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ecce:	78b8      	ldrb	r0, [r7, #2]
 800ecd0:	78fa      	ldrb	r2, [r7, #3]
 800ecd2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ecd6:	787b      	ldrb	r3, [r7, #1]
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	4603      	mov	r3, r0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff fe86 	bl	800e9ee <_ZN3USB13AttemptConfigEhhhb>
 800ece2:	4603      	mov	r3, r0
 800ece4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ece8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecec:	2bd1      	cmp	r3, #209	; 0xd1
 800ecee:	d109      	bne.n	800ed04 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800ecf0:	e002      	b.n	800ecf8 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ecf2:	bf00      	nop
 800ecf4:	e000      	b.n	800ecf8 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ecf6:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ecf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed02:	e77a      	b.n	800ebfa <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800ed04:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800ed06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed0a:	2b0f      	cmp	r3, #15
 800ed0c:	d802      	bhi.n	800ed14 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800ed0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed12:	e09a      	b.n	800ee4a <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed1e:	2b0f      	cmp	r3, #15
 800ed20:	f200 8088 	bhi.w	800ee34 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800ed24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	321e      	adds	r2, #30
 800ed2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d074      	beq.n	800ee1e <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ed34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	321e      	adds	r2, #30
 800ed3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	321e      	adds	r2, #30
 800ed48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	3310      	adds	r3, #16
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4608      	mov	r0, r1
 800ed54:	4798      	blx	r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	bf14      	ite	ne
 800ed5c:	2301      	movne	r3, #1
 800ed5e:	2300      	moveq	r3, #0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d15d      	bne.n	800ee22 <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ed66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	321e      	adds	r2, #30
 800ed6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	321e      	adds	r2, #30
 800ed7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3320      	adds	r3, #32
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	7fba      	ldrb	r2, [r7, #30]
 800ed86:	4611      	mov	r1, r2
 800ed88:	4798      	blx	r3
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d02b      	beq.n	800ede8 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ed90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	321e      	adds	r2, #30
 800ed98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	321e      	adds	r2, #30
 800eda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3318      	adds	r3, #24
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	8c3a      	ldrh	r2, [r7, #32]
 800edb0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800edb2:	4798      	blx	r3
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d114      	bne.n	800ede4 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800edba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	321e      	adds	r2, #30
 800edc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800edc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	321e      	adds	r2, #30
 800edce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	331c      	adds	r3, #28
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	7ffa      	ldrb	r2, [r7, #31]
 800edda:	4611      	mov	r1, r2
 800eddc:	4798      	blx	r3
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d001      	beq.n	800ede8 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ede4:	2301      	movs	r3, #1
 800ede6:	e000      	b.n	800edea <_ZN3USB11ConfiguringEhhb+0x2ca>
 800ede8:	2300      	movs	r3, #0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d11b      	bne.n	800ee26 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800edee:	78b8      	ldrb	r0, [r7, #2]
 800edf0:	78fa      	ldrb	r2, [r7, #3]
 800edf2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800edf6:	787b      	ldrb	r3, [r7, #1]
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	4603      	mov	r3, r0
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff fdf6 	bl	800e9ee <_ZN3USB13AttemptConfigEhhhb>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ee08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee0c:	2bd1      	cmp	r3, #209	; 0xd1
 800ee0e:	d00b      	beq.n	800ee28 <_ZN3USB11ConfiguringEhhb+0x308>
 800ee10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee14:	2bd9      	cmp	r3, #217	; 0xd9
 800ee16:	d007      	beq.n	800ee28 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ee18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee1c:	e015      	b.n	800ee4a <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ee1e:	bf00      	nop
 800ee20:	e002      	b.n	800ee28 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ee22:	bf00      	nop
 800ee24:	e000      	b.n	800ee28 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ee26:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ee28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee32:	e772      	b.n	800ed1a <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ee34:	787b      	ldrb	r3, [r7, #1]
 800ee36:	78ba      	ldrb	r2, [r7, #2]
 800ee38:	78f9      	ldrb	r1, [r7, #3]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff fd7c 	bl	800e938 <_ZN3USB17DefaultAddressingEhhb>
 800ee40:	4603      	mov	r3, r0
 800ee42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800ee46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3738      	adds	r7, #56	; 0x38
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b08a      	sub	sp, #40	; 0x28
 800ee56:	af08      	add	r7, sp, #32
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	4608      	mov	r0, r1
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4603      	mov	r3, r0
 800ee62:	70fb      	strb	r3, [r7, #3]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70bb      	strb	r3, [r7, #2]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ee6c:	78ba      	ldrb	r2, [r7, #2]
 800ee6e:	78f9      	ldrb	r1, [r7, #3]
 800ee70:	2300      	movs	r3, #0
 800ee72:	9307      	str	r3, [sp, #28]
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	9306      	str	r3, [sp, #24]
 800ee78:	883b      	ldrh	r3, [r7, #0]
 800ee7a:	9305      	str	r3, [sp, #20]
 800ee7c:	883b      	ldrh	r3, [r7, #0]
 800ee7e:	9304      	str	r3, [sp, #16]
 800ee80:	2300      	movs	r3, #0
 800ee82:	9303      	str	r3, [sp, #12]
 800ee84:	2301      	movs	r3, #1
 800ee86:	9302      	str	r3, [sp, #8]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	2306      	movs	r3, #6
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	2380      	movs	r3, #128	; 0x80
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7fe fffd 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ee98:	4603      	mov	r3, r0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b08a      	sub	sp, #40	; 0x28
 800eea6:	af08      	add	r7, sp, #32
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	4608      	mov	r0, r1
 800eeac:	4611      	mov	r1, r2
 800eeae:	461a      	mov	r2, r3
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	70fb      	strb	r3, [r7, #3]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70bb      	strb	r3, [r7, #2]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800eebc:	78ba      	ldrb	r2, [r7, #2]
 800eebe:	78f9      	ldrb	r1, [r7, #3]
 800eec0:	2300      	movs	r3, #0
 800eec2:	9307      	str	r3, [sp, #28]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	9306      	str	r3, [sp, #24]
 800eec8:	883b      	ldrh	r3, [r7, #0]
 800eeca:	9305      	str	r3, [sp, #20]
 800eecc:	883b      	ldrh	r3, [r7, #0]
 800eece:	9304      	str	r3, [sp, #16]
 800eed0:	2300      	movs	r3, #0
 800eed2:	9303      	str	r3, [sp, #12]
 800eed4:	2302      	movs	r3, #2
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	7c3b      	ldrb	r3, [r7, #16]
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	2306      	movs	r3, #6
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	2380      	movs	r3, #128	; 0x80
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7fe ffd5 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800eee8:	4603      	mov	r3, r0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b09e      	sub	sp, #120	; 0x78
 800eef6:	af08      	add	r7, sp, #32
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	4608      	mov	r0, r1
 800eefc:	4611      	mov	r1, r2
 800eefe:	461a      	mov	r2, r3
 800ef00:	4603      	mov	r3, r0
 800ef02:	70fb      	strb	r3, [r7, #3]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70bb      	strb	r3, [r7, #2]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800ef0c:	2340      	movs	r3, #64	; 0x40
 800ef0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800ef12:	f107 030c 	add.w	r3, r7, #12
 800ef16:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800ef18:	78ba      	ldrb	r2, [r7, #2]
 800ef1a:	78f9      	ldrb	r1, [r7, #3]
 800ef1c:	f107 030c 	add.w	r3, r7, #12
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	787b      	ldrb	r3, [r7, #1]
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	2309      	movs	r3, #9
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff ffba 	bl	800eea2 <_ZN3USB12getConfDescrEhhthPh>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800ef34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800ef3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef40:	e020      	b.n	800ef84 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800ef42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef44:	789a      	ldrb	r2, [r3, #2]
 800ef46:	78db      	ldrb	r3, [r3, #3]
 800ef48:	021b      	lsls	r3, r3, #8
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800ef50:	78ba      	ldrb	r2, [r7, #2]
 800ef52:	78f9      	ldrb	r1, [r7, #3]
 800ef54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef56:	9307      	str	r3, [sp, #28]
 800ef58:	f107 030c 	add.w	r3, r7, #12
 800ef5c:	9306      	str	r3, [sp, #24]
 800ef5e:	2340      	movs	r3, #64	; 0x40
 800ef60:	9305      	str	r3, [sp, #20]
 800ef62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ef66:	9304      	str	r3, [sp, #16]
 800ef68:	2300      	movs	r3, #0
 800ef6a:	9303      	str	r3, [sp, #12]
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	9302      	str	r3, [sp, #8]
 800ef70:	787b      	ldrb	r3, [r7, #1]
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	2306      	movs	r3, #6
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	2380      	movs	r3, #128	; 0x80
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7fe ff89 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef80:	4603      	mov	r3, r0
 800ef82:	bf00      	nop
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3758      	adds	r7, #88	; 0x58
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b08c      	sub	sp, #48	; 0x30
 800ef90:	af08      	add	r7, sp, #32
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	4608      	mov	r0, r1
 800ef96:	4611      	mov	r1, r2
 800ef98:	461a      	mov	r2, r3
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	70fb      	strb	r3, [r7, #3]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	70bb      	strb	r3, [r7, #2]
 800efa2:	4613      	mov	r3, r2
 800efa4:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800efa6:	78ba      	ldrb	r2, [r7, #2]
 800efa8:	78f9      	ldrb	r1, [r7, #3]
 800efaa:	2300      	movs	r3, #0
 800efac:	9307      	str	r3, [sp, #28]
 800efae:	2300      	movs	r3, #0
 800efb0:	9306      	str	r3, [sp, #24]
 800efb2:	2300      	movs	r3, #0
 800efb4:	9305      	str	r3, [sp, #20]
 800efb6:	2300      	movs	r3, #0
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	2300      	movs	r3, #0
 800efbc:	9303      	str	r3, [sp, #12]
 800efbe:	2300      	movs	r3, #0
 800efc0:	9302      	str	r3, [sp, #8]
 800efc2:	787b      	ldrb	r3, [r7, #1]
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	2305      	movs	r3, #5
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	2300      	movs	r3, #0
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7fe ff60 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800efd2:	4603      	mov	r3, r0
 800efd4:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800efd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800efda:	f7f2 fe37 	bl	8001c4c <HAL_Delay>
        return rcode;
 800efde:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08a      	sub	sp, #40	; 0x28
 800efec:	af08      	add	r7, sp, #32
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	4608      	mov	r0, r1
 800eff2:	4611      	mov	r1, r2
 800eff4:	461a      	mov	r2, r3
 800eff6:	4603      	mov	r3, r0
 800eff8:	70fb      	strb	r3, [r7, #3]
 800effa:	460b      	mov	r3, r1
 800effc:	70bb      	strb	r3, [r7, #2]
 800effe:	4613      	mov	r3, r2
 800f000:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800f002:	78ba      	ldrb	r2, [r7, #2]
 800f004:	78f9      	ldrb	r1, [r7, #3]
 800f006:	2300      	movs	r3, #0
 800f008:	9307      	str	r3, [sp, #28]
 800f00a:	2300      	movs	r3, #0
 800f00c:	9306      	str	r3, [sp, #24]
 800f00e:	2300      	movs	r3, #0
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	2300      	movs	r3, #0
 800f014:	9304      	str	r3, [sp, #16]
 800f016:	2300      	movs	r3, #0
 800f018:	9303      	str	r3, [sp, #12]
 800f01a:	2300      	movs	r3, #0
 800f01c:	9302      	str	r3, [sp, #8]
 800f01e:	787b      	ldrb	r3, [r7, #1]
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	2309      	movs	r3, #9
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	2300      	movs	r3, #0
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7fe ff32 	bl	800de92 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800f02e:	4603      	mov	r3, r0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
};
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	370c      	adds	r7, #12
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
	...

0800f050 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	4a04      	ldr	r2, [pc, #16]	; (800f06c <_ZN11AddressPoolC1Ev+0x1c>)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4618      	mov	r0, r3
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	0800fae4 	.word	0x0800fae4

0800f070 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff ffe8 	bl	800f050 <_ZN11AddressPoolC1Ev>
 800f080:	4a17      	ldr	r2, [pc, #92]	; (800f0e0 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800f08c:	2100      	movs	r1, #0
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f990 	bl	800f3b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	1d1a      	adds	r2, r3, #4
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2208      	movs	r2, #8
 800f0ac:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	7993      	ldrb	r3, [r2, #6]
 800f0b2:	f36f 0300 	bfc	r3, #0, #1
 800f0b6:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	7993      	ldrb	r3, [r2, #6]
 800f0bc:	f36f 0341 	bfc	r3, #1, #1
 800f0c0:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	7993      	ldrb	r3, [r2, #6]
 800f0c6:	210f      	movs	r1, #15
 800f0c8:	f361 0387 	bfi	r3, r1, #2, #6
 800f0cc:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f9a1 	bl	800f416 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	0800fad0 	.word	0x0800fad0

0800f0e4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d102      	bne.n	800f0fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	e014      	b.n	800f126 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800f0fc:	78fb      	ldrb	r3, [r7, #3]
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f9a1 	bl	800f448 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f106:	4603      	mov	r3, r0
 800f108:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d008      	beq.n	800f122 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f103 0108 	add.w	r1, r3, #8
 800f116:	7bfa      	ldrb	r2, [r7, #15]
 800f118:	4613      	mov	r3, r2
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	1a9b      	subs	r3, r3, r2
 800f11e:	440b      	add	r3, r1
 800f120:	e000      	b.n	800f124 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800f122:	2300      	movs	r3, #0
 800f124:	bf00      	nop
        };
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
	...

0800f130 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	607b      	str	r3, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	72fb      	strb	r3, [r7, #11]
 800f13e:	4613      	mov	r3, r2
 800f140:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f142:	f7f1 fba7 	bl	8000894 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800f146:	7afb      	ldrb	r3, [r7, #11]
 800f148:	f043 0302 	orr.w	r3, r3, #2
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f150:	f107 0117 	add.w	r1, r7, #23
 800f154:	f04f 33ff 	mov.w	r3, #4294967295
 800f158:	2201      	movs	r2, #1
 800f15a:	480b      	ldr	r0, [pc, #44]	; (800f188 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f15c:	f7f5 fb45 	bl	80047ea <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f160:	7abb      	ldrb	r3, [r7, #10]
 800f162:	b29a      	uxth	r2, r3
 800f164:	f04f 33ff 	mov.w	r3, #4294967295
 800f168:	6879      	ldr	r1, [r7, #4]
 800f16a:	4807      	ldr	r0, [pc, #28]	; (800f188 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f16c:	f7f5 fb3d 	bl	80047ea <HAL_SPI_Transmit>
        data_p += nbytes;
 800f170:	7abb      	ldrb	r3, [r7, #10]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	4413      	add	r3, r2
 800f176:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f178:	f7f1 fb80 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f17c:	687b      	ldr	r3, [r7, #4]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20000304 	.word	0x20000304

0800f18c <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	6039      	str	r1, [r7, #0]
 800f196:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	607b      	str	r3, [r7, #4]
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	72fb      	strb	r3, [r7, #11]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f1b6:	f7f1 fb6d 	bl	8000894 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f1ba:	f107 010b 	add.w	r1, r7, #11
 800f1be:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	480d      	ldr	r0, [pc, #52]	; (800f1fc <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f1c6:	f7f5 fb10 	bl	80047ea <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f1ca:	7abb      	ldrb	r3, [r7, #10]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fa91 	bl	800f6f8 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f1d6:	7abb      	ldrb	r3, [r7, #10]
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	f04f 33ff 	mov.w	r3, #4294967295
 800f1de:	6879      	ldr	r1, [r7, #4]
 800f1e0:	4806      	ldr	r0, [pc, #24]	; (800f1fc <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f1e2:	f7f5 fc3e 	bl	8004a62 <HAL_SPI_Receive>
        data_p += nbytes;
 800f1e6:	7abb      	ldrb	r3, [r7, #10]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f1ee:	f7f1 fb45 	bl	800087c <_ZN3P103SetEv>
        return ( data_p);
 800f1f2:	687b      	ldr	r3, [r7, #4]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20000304 	.word	0x20000304

0800f200 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800f20c:	f7fe fd46 	bl	800dc9c <_ZN2P95IsSetEv>
 800f210:	4603      	mov	r3, r0
 800f212:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800f214:	7bbb      	ldrb	r3, [r7, #14]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d104      	bne.n	800f224 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f937 	bl	800f48e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800f224:	7bfb      	ldrb	r3, [r7, #15]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
                return vbusState;
 800f238:	4b03      	ldr	r3, [pc, #12]	; (800f248 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
        };
 800f23c:	4618      	mov	r0, r3
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	20000657 	.word	0x20000657

0800f24c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	4608      	mov	r0, r1
 800f256:	4611      	mov	r1, r2
 800f258:	461a      	mov	r2, r3
 800f25a:	4603      	mov	r3, r0
 800f25c:	70fb      	strb	r3, [r7, #3]
 800f25e:	460b      	mov	r3, r1
 800f260:	70bb      	strb	r3, [r7, #2]
 800f262:	4613      	mov	r3, r2
 800f264:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f266:	78fb      	ldrb	r3, [r7, #3]
 800f268:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f26a:	7b3b      	ldrb	r3, [r7, #12]
 800f26c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d102      	bne.n	800f27c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f276:	787b      	ldrb	r3, [r7, #1]
 800f278:	2b07      	cmp	r3, #7
 800f27a:	d901      	bls.n	800f280 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f27c:	2300      	movs	r3, #0
 800f27e:	e079      	b.n	800f374 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f280:	78bb      	ldrb	r3, [r7, #2]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d005      	beq.n	800f292 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	79db      	ldrb	r3, [r3, #7]
 800f28a:	2b07      	cmp	r3, #7
 800f28c:	d101      	bne.n	800f292 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	e070      	b.n	800f374 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f292:	2100      	movs	r1, #0
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f8d7 	bl	800f448 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f29a:	4603      	mov	r3, r0
 800f29c:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e065      	b.n	800f374 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f2a8:	7b3b      	ldrb	r3, [r7, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d124      	bne.n	800f2f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f2ae:	78bb      	ldrb	r3, [r7, #2]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00f      	beq.n	800f2d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f2b4:	7bfa      	ldrb	r2, [r7, #15]
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	1a9b      	subs	r3, r3, r2
 800f2be:	440b      	add	r3, r1
 800f2c0:	330c      	adds	r3, #12
 800f2c2:	2241      	movs	r2, #65	; 0x41
 800f2c4:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	79db      	ldrb	r3, [r3, #7]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	b2da      	uxtb	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	71da      	strb	r2, [r3, #7]
 800f2d2:	e008      	b.n	800f2e6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f2d4:	7bfa      	ldrb	r2, [r7, #15]
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	1a9b      	subs	r3, r3, r2
 800f2de:	440b      	add	r3, r1
 800f2e0:	330c      	adds	r3, #12
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f2e6:	7bfa      	ldrb	r2, [r7, #15]
 800f2e8:	6879      	ldr	r1, [r7, #4]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	1a9b      	subs	r3, r3, r2
 800f2f0:	440b      	add	r3, r1
 800f2f2:	330c      	adds	r3, #12
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	e03d      	b.n	800f374 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f2fc:	7b3b      	ldrb	r3, [r7, #12]
 800f2fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f302:	b2da      	uxtb	r2, r3
 800f304:	7a3b      	ldrb	r3, [r7, #8]
 800f306:	f362 03c5 	bfi	r3, r2, #3, #3
 800f30a:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f30c:	78bb      	ldrb	r3, [r7, #2]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d013      	beq.n	800f33a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f312:	7a3b      	ldrb	r3, [r7, #8]
 800f314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f318:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	79db      	ldrb	r3, [r3, #7]
 800f31e:	3301      	adds	r3, #1
 800f320:	b2da      	uxtb	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	71da      	strb	r2, [r3, #7]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	79db      	ldrb	r3, [r3, #7]
 800f32a:	f003 0307 	and.w	r3, r3, #7
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	7a3b      	ldrb	r3, [r7, #8]
 800f332:	f362 0302 	bfi	r3, r2, #0, #3
 800f336:	723b      	strb	r3, [r7, #8]
 800f338:	e00b      	b.n	800f352 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f33a:	7a3b      	ldrb	r3, [r7, #8]
 800f33c:	f36f 1386 	bfc	r3, #6, #1
 800f340:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f342:	787b      	ldrb	r3, [r7, #1]
 800f344:	f003 0307 	and.w	r3, r3, #7
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	7a3b      	ldrb	r3, [r7, #8]
 800f34c:	f362 0302 	bfi	r3, r2, #0, #3
 800f350:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f352:	7bfa      	ldrb	r2, [r7, #15]
 800f354:	6879      	ldr	r1, [r7, #4]
 800f356:	4613      	mov	r3, r2
 800f358:	00db      	lsls	r3, r3, #3
 800f35a:	1a9b      	subs	r3, r3, r2
 800f35c:	440b      	add	r3, r1
 800f35e:	330c      	adds	r3, #12
 800f360:	7a3a      	ldrb	r2, [r7, #8]
 800f362:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f364:	7bfa      	ldrb	r2, [r7, #15]
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	4613      	mov	r3, r2
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	1a9b      	subs	r3, r3, r2
 800f36e:	440b      	add	r3, r1
 800f370:	330c      	adds	r3, #12
 800f372:	781b      	ldrb	r3, [r3, #0]
        };
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f388:	78fb      	ldrb	r3, [r7, #3]
 800f38a:	2b41      	cmp	r3, #65	; 0x41
 800f38c:	d103      	bne.n	800f396 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f841 	bl	800f416 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f394:	e00b      	b.n	800f3ae <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f396:	78fb      	ldrb	r3, [r7, #3]
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f854 	bl	800f448 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f3a4:	7bfb      	ldrb	r3, [r7, #15]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 f893 	bl	800f4d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	460b      	mov	r3, r1
 800f3be:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	1a9b      	subs	r3, r3, r2
 800f3ca:	440b      	add	r3, r1
 800f3cc:	330c      	adds	r3, #12
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f3d2:	78fa      	ldrb	r2, [r7, #3]
 800f3d4:	6879      	ldr	r1, [r7, #4]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	1a9b      	subs	r3, r3, r2
 800f3dc:	440b      	add	r3, r1
 800f3de:	330d      	adds	r3, #13
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f3e4:	78fa      	ldrb	r2, [r7, #3]
 800f3e6:	6879      	ldr	r1, [r7, #4]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	00db      	lsls	r3, r3, #3
 800f3ec:	1a9b      	subs	r3, r3, r2
 800f3ee:	440b      	add	r3, r1
 800f3f0:	330e      	adds	r3, #14
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f3f6:	78fa      	ldrb	r2, [r7, #3]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	1d19      	adds	r1, r3, #4
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	4613      	mov	r3, r2
 800f400:	00db      	lsls	r3, r3, #3
 800f402:	1a9b      	subs	r3, r3, r2
 800f404:	4403      	add	r3, r0
 800f406:	3308      	adds	r3, #8
 800f408:	6019      	str	r1, [r3, #0]
        };
 800f40a:	bf00      	nop
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f416:	b580      	push	{r7, lr}
 800f418:	b084      	sub	sp, #16
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f41e:	2301      	movs	r3, #1
 800f420:	73fb      	strb	r3, [r7, #15]
 800f422:	7bfb      	ldrb	r3, [r7, #15]
 800f424:	2b0f      	cmp	r3, #15
 800f426:	d808      	bhi.n	800f43a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f428:	7bfb      	ldrb	r3, [r7, #15]
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ffc1 	bl	800f3b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f432:	7bfb      	ldrb	r3, [r7, #15]
 800f434:	3301      	adds	r3, #1
 800f436:	73fb      	strb	r3, [r7, #15]
 800f438:	e7f3      	b.n	800f422 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	71da      	strb	r2, [r3, #7]
        };
 800f440:	bf00      	nop
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	460b      	mov	r3, r1
 800f452:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f454:	2301      	movs	r3, #1
 800f456:	73fb      	strb	r3, [r7, #15]
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	2b0f      	cmp	r3, #15
 800f45c:	d810      	bhi.n	800f480 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f45e:	7bfa      	ldrb	r2, [r7, #15]
 800f460:	6879      	ldr	r1, [r7, #4]
 800f462:	4613      	mov	r3, r2
 800f464:	00db      	lsls	r3, r3, #3
 800f466:	1a9b      	subs	r3, r3, r2
 800f468:	440b      	add	r3, r1
 800f46a:	330c      	adds	r3, #12
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	78fa      	ldrb	r2, [r7, #3]
 800f470:	429a      	cmp	r2, r3
 800f472:	d101      	bne.n	800f478 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	e004      	b.n	800f482 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	3301      	adds	r3, #1
 800f47c:	73fb      	strb	r3, [r7, #15]
 800f47e:	e7eb      	b.n	800f458 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f480:	2300      	movs	r3, #0
        };
 800f482:	4618      	mov	r0, r3
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f496:	2300      	movs	r3, #0
 800f498:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f49a:	21c8      	movs	r1, #200	; 0xc8
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7f2 f91b 	bl	80016d8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f4a6:	7bbb      	ldrb	r3, [r7, #14]
 800f4a8:	f003 0320 	and.w	r3, r3, #32
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d006      	beq.n	800f4be <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7f2 f933 	bl	800171c <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
 800f4b8:	f043 0320 	orr.w	r3, r3, #32
 800f4bc:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f4be:	7bfb      	ldrb	r3, [r7, #15]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	21c8      	movs	r1, #200	; 0xc8
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7f2 f8b5 	bl	8001634 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d03a      	beq.n	800f55c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f4e6:	78fa      	ldrb	r2, [r7, #3]
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	1a9b      	subs	r3, r3, r2
 800f4f0:	440b      	add	r3, r1
 800f4f2:	330c      	adds	r3, #12
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f4f8:	7b3b      	ldrb	r3, [r7, #12]
 800f4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d025      	beq.n	800f550 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f504:	2301      	movs	r3, #1
 800f506:	73fb      	strb	r3, [r7, #15]
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	461a      	mov	r2, r3
 800f50c:	7b39      	ldrb	r1, [r7, #12]
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f828 	bl	800f564 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bf14      	ite	ne
 800f51e:	2301      	movne	r3, #1
 800f520:	2300      	moveq	r3, #0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d005      	beq.n	800f534 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f528:	7bfb      	ldrb	r3, [r7, #15]
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff ffd1 	bl	800f4d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f532:	e7e9      	b.n	800f508 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	79db      	ldrb	r3, [r3, #7]
 800f538:	7b3a      	ldrb	r2, [r7, #12]
 800f53a:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f53e:	b2d2      	uxtb	r2, r2
 800f540:	4293      	cmp	r3, r2
 800f542:	d105      	bne.n	800f550 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	79db      	ldrb	r3, [r3, #7]
 800f548:	3b01      	subs	r3, #1
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff ff2d 	bl	800f3b4 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f55a:	e000      	b.n	800f55e <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f55c:	bf00      	nop
        }
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	7039      	strb	r1, [r7, #0]
 800f56e:	4613      	mov	r3, r2
 800f570:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f572:	78fb      	ldrb	r3, [r7, #3]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d004      	beq.n	800f582 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	2b0f      	cmp	r3, #15
 800f57c:	d801      	bhi.n	800f582 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f57e:	78fb      	ldrb	r3, [r7, #3]
 800f580:	e000      	b.n	800f584 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f582:	2301      	movs	r3, #1
 800f584:	73fb      	strb	r3, [r7, #15]
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	2b0f      	cmp	r3, #15
 800f58a:	d816      	bhi.n	800f5ba <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f58c:	7bfa      	ldrb	r2, [r7, #15]
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	4613      	mov	r3, r2
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	1a9b      	subs	r3, r3, r2
 800f596:	440b      	add	r3, r1
 800f598:	3308      	adds	r3, #8
 800f59a:	791b      	ldrb	r3, [r3, #4]
 800f59c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	783b      	ldrb	r3, [r7, #0]
 800f5a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d101      	bne.n	800f5b2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	e004      	b.n	800f5bc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	73fb      	strb	r3, [r7, #15]
 800f5b8:	e7e5      	b.n	800f586 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f5ba:	2300      	movs	r3, #0
        };
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e031      	b.n	800f644 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	791b      	ldrb	r3, [r3, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d022      	beq.n	800f62e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d01e      	beq.n	800f62e <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68f9      	ldr	r1, [r7, #12]
 800f5fa:	7949      	ldrb	r1, [r1, #5]
 800f5fc:	4608      	mov	r0, r1
 800f5fe:	68f9      	ldr	r1, [r7, #12]
 800f600:	7909      	ldrb	r1, [r1, #4]
 800f602:	1a41      	subs	r1, r0, r1
 800f604:	440b      	add	r3, r1
 800f606:	7812      	ldrb	r2, [r2, #0]
 800f608:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	791b      	ldrb	r3, [r3, #4]
 800f60e:	3b01      	subs	r3, #1
 800f610:	b2da      	uxtb	r2, r3
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	711a      	strb	r2, [r3, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	801a      	strh	r2, [r3, #0]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	e7d8      	b.n	800f5e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	791b      	ldrb	r3, [r3, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f636:	2300      	movs	r3, #0
 800f638:	e004      	b.n	800f644 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	795a      	ldrb	r2, [r3, #5]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	711a      	strb	r2, [r3, #4]
        return true;
 800f642:	2301      	movs	r3, #1
}
 800f644:	4618      	mov	r0, r3
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <__cxa_pure_virtual>:
 800f650:	b508      	push	{r3, lr}
 800f652:	f000 f80d 	bl	800f670 <_ZSt9terminatev>

0800f656 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f656:	b508      	push	{r3, lr}
 800f658:	4780      	blx	r0
 800f65a:	f000 f80e 	bl	800f67a <abort>
	...

0800f660 <_ZSt13get_terminatev>:
 800f660:	4b02      	ldr	r3, [pc, #8]	; (800f66c <_ZSt13get_terminatev+0xc>)
 800f662:	6818      	ldr	r0, [r3, #0]
 800f664:	f3bf 8f5b 	dmb	ish
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20000174 	.word	0x20000174

0800f670 <_ZSt9terminatev>:
 800f670:	b508      	push	{r3, lr}
 800f672:	f7ff fff5 	bl	800f660 <_ZSt13get_terminatev>
 800f676:	f7ff ffee 	bl	800f656 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f67a <abort>:
 800f67a:	b508      	push	{r3, lr}
 800f67c:	2006      	movs	r0, #6
 800f67e:	f000 f86b 	bl	800f758 <raise>
 800f682:	2001      	movs	r0, #1
 800f684:	f7f2 fa26 	bl	8001ad4 <_exit>

0800f688 <__errno>:
 800f688:	4b01      	ldr	r3, [pc, #4]	; (800f690 <__errno+0x8>)
 800f68a:	6818      	ldr	r0, [r3, #0]
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	20000178 	.word	0x20000178

0800f694 <__libc_init_array>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	4d0d      	ldr	r5, [pc, #52]	; (800f6cc <__libc_init_array+0x38>)
 800f698:	4c0d      	ldr	r4, [pc, #52]	; (800f6d0 <__libc_init_array+0x3c>)
 800f69a:	1b64      	subs	r4, r4, r5
 800f69c:	10a4      	asrs	r4, r4, #2
 800f69e:	2600      	movs	r6, #0
 800f6a0:	42a6      	cmp	r6, r4
 800f6a2:	d109      	bne.n	800f6b8 <__libc_init_array+0x24>
 800f6a4:	4d0b      	ldr	r5, [pc, #44]	; (800f6d4 <__libc_init_array+0x40>)
 800f6a6:	4c0c      	ldr	r4, [pc, #48]	; (800f6d8 <__libc_init_array+0x44>)
 800f6a8:	f000 f884 	bl	800f7b4 <_init>
 800f6ac:	1b64      	subs	r4, r4, r5
 800f6ae:	10a4      	asrs	r4, r4, #2
 800f6b0:	2600      	movs	r6, #0
 800f6b2:	42a6      	cmp	r6, r4
 800f6b4:	d105      	bne.n	800f6c2 <__libc_init_array+0x2e>
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6bc:	4798      	blx	r3
 800f6be:	3601      	adds	r6, #1
 800f6c0:	e7ee      	b.n	800f6a0 <__libc_init_array+0xc>
 800f6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6c6:	4798      	blx	r3
 800f6c8:	3601      	adds	r6, #1
 800f6ca:	e7f2      	b.n	800f6b2 <__libc_init_array+0x1e>
 800f6cc:	0800fb58 	.word	0x0800fb58
 800f6d0:	0800fb58 	.word	0x0800fb58
 800f6d4:	0800fb58 	.word	0x0800fb58
 800f6d8:	0800fb60 	.word	0x0800fb60

0800f6dc <memcpy>:
 800f6dc:	440a      	add	r2, r1
 800f6de:	4291      	cmp	r1, r2
 800f6e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6e4:	d100      	bne.n	800f6e8 <memcpy+0xc>
 800f6e6:	4770      	bx	lr
 800f6e8:	b510      	push	{r4, lr}
 800f6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6f2:	4291      	cmp	r1, r2
 800f6f4:	d1f9      	bne.n	800f6ea <memcpy+0xe>
 800f6f6:	bd10      	pop	{r4, pc}

0800f6f8 <memset>:
 800f6f8:	4402      	add	r2, r0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d100      	bne.n	800f702 <memset+0xa>
 800f700:	4770      	bx	lr
 800f702:	f803 1b01 	strb.w	r1, [r3], #1
 800f706:	e7f9      	b.n	800f6fc <memset+0x4>

0800f708 <_raise_r>:
 800f708:	291f      	cmp	r1, #31
 800f70a:	b538      	push	{r3, r4, r5, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	460d      	mov	r5, r1
 800f710:	d904      	bls.n	800f71c <_raise_r+0x14>
 800f712:	2316      	movs	r3, #22
 800f714:	6003      	str	r3, [r0, #0]
 800f716:	f04f 30ff 	mov.w	r0, #4294967295
 800f71a:	bd38      	pop	{r3, r4, r5, pc}
 800f71c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f71e:	b112      	cbz	r2, 800f726 <_raise_r+0x1e>
 800f720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f724:	b94b      	cbnz	r3, 800f73a <_raise_r+0x32>
 800f726:	4620      	mov	r0, r4
 800f728:	f000 f830 	bl	800f78c <_getpid_r>
 800f72c:	462a      	mov	r2, r5
 800f72e:	4601      	mov	r1, r0
 800f730:	4620      	mov	r0, r4
 800f732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f736:	f000 b817 	b.w	800f768 <_kill_r>
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d00a      	beq.n	800f754 <_raise_r+0x4c>
 800f73e:	1c59      	adds	r1, r3, #1
 800f740:	d103      	bne.n	800f74a <_raise_r+0x42>
 800f742:	2316      	movs	r3, #22
 800f744:	6003      	str	r3, [r0, #0]
 800f746:	2001      	movs	r0, #1
 800f748:	e7e7      	b.n	800f71a <_raise_r+0x12>
 800f74a:	2400      	movs	r4, #0
 800f74c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f750:	4628      	mov	r0, r5
 800f752:	4798      	blx	r3
 800f754:	2000      	movs	r0, #0
 800f756:	e7e0      	b.n	800f71a <_raise_r+0x12>

0800f758 <raise>:
 800f758:	4b02      	ldr	r3, [pc, #8]	; (800f764 <raise+0xc>)
 800f75a:	4601      	mov	r1, r0
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	f7ff bfd3 	b.w	800f708 <_raise_r>
 800f762:	bf00      	nop
 800f764:	20000178 	.word	0x20000178

0800f768 <_kill_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_kill_r+0x20>)
 800f76c:	2300      	movs	r3, #0
 800f76e:	4604      	mov	r4, r0
 800f770:	4608      	mov	r0, r1
 800f772:	4611      	mov	r1, r2
 800f774:	602b      	str	r3, [r5, #0]
 800f776:	f7f2 f99d 	bl	8001ab4 <_kill>
 800f77a:	1c43      	adds	r3, r0, #1
 800f77c:	d102      	bne.n	800f784 <_kill_r+0x1c>
 800f77e:	682b      	ldr	r3, [r5, #0]
 800f780:	b103      	cbz	r3, 800f784 <_kill_r+0x1c>
 800f782:	6023      	str	r3, [r4, #0]
 800f784:	bd38      	pop	{r3, r4, r5, pc}
 800f786:	bf00      	nop
 800f788:	20000f54 	.word	0x20000f54

0800f78c <_getpid_r>:
 800f78c:	f7f2 b98a 	b.w	8001aa4 <_getpid>

0800f790 <strncmp>:
 800f790:	b510      	push	{r4, lr}
 800f792:	b16a      	cbz	r2, 800f7b0 <strncmp+0x20>
 800f794:	3901      	subs	r1, #1
 800f796:	1884      	adds	r4, r0, r2
 800f798:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f79c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d103      	bne.n	800f7ac <strncmp+0x1c>
 800f7a4:	42a0      	cmp	r0, r4
 800f7a6:	d001      	beq.n	800f7ac <strncmp+0x1c>
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1f5      	bne.n	800f798 <strncmp+0x8>
 800f7ac:	1a98      	subs	r0, r3, r2
 800f7ae:	bd10      	pop	{r4, pc}
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	e7fc      	b.n	800f7ae <strncmp+0x1e>

0800f7b4 <_init>:
 800f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b6:	bf00      	nop
 800f7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ba:	bc08      	pop	{r3}
 800f7bc:	469e      	mov	lr, r3
 800f7be:	4770      	bx	lr

0800f7c0 <_fini>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	bf00      	nop
 800f7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c6:	bc08      	pop	{r3}
 800f7c8:	469e      	mov	lr, r3
 800f7ca:	4770      	bx	lr
